<?php
include_once("conex.php");
if(!isset($accion))
{
    echo '<!DOCTYPE html>';
}
/**
 PROGRAMA       : liquidacion_cirugiaERP.php
 AUTOR          : Edwar Jaramillo.
 FECHA CREACION : 20 Noviembre de 2013

 DESCRIPCION: Programa encargado de hacer la liquidación de paquetes y cirugías, aplicando manuales de porcentajes de cirugías múltiples, límites de UVR, GRUPO, Ayudantía
                Politicas.


 Notas:
 El valor del parámetro $ccotema es determinado en el programa gestor_aplicaciones.php
 */ $wactualiza = "(2020-04-28)"; /* VERSIÓN NO_POS, AUDITORÍA
 ACTUALIZACIONES:
 2020-04-28, Jerson: Nuevas funcionalidades: - Permitir editar valor de la tarifa cuando el procedimiento tenga
	configuracion en la tabla cliame_242. - Cuando un procedimiento se deba cobrar por tiempo qx, validar segun como este
	configurado en la plantilla, si se debe cobrar con base al tiempo total de la cx o con el tiempo del procedimiento.
	Si se debe cobrar con el tiempo del procedimiento, entonces a la hora de enviar los datos a grabar 
	se debe enviar la variable codigoRips donde se guarda el codigo del procedimiento de la cx, para que en unix
	quede el cargo grabado con el valor de tarifa del codigo de la plantilla de tiempo cx pero con el codigo del procedimiento
	de la cx.
 2020-01-22, Jerson: Mostrar mensaje de ventana de mantenimiento dependiendo de variables en la root_51
 - 2020-01-21: 	Jerson Trujillo: se cambia el orden de ejecucion de la funcion registrarResponsableRequiereAutorizacion(), para que esta se ejecute solo
				despues de que se haya actualizado al menos un procedimiento en la 253 como procedimiento que requiere autorización para el segundo responsable.
 // --> 21-08-2019: Jerson Trujillo. Controlar que si se estan actualizando tarifas de medicamentos no dejar liquidar
 - 2018-11-01: Jerson Trujillo. Se valida que el array exista y sino se crea.
 - Marzo 07 2018 Edwar Jaramillo:
        * El programa no estaba anulando siempre las estancias previas cuando el paquete en liquidación contiene días de estancia, solo se estaba anulando
            cuando los días de estancia liquidados antes del paquete eran mayor a la cantidad de días incluido en el paquete pero no cuando la cantidad de días
            previos liquidados eran menor o igual a la cantidad en el paquete.
 - Febrero 21 2018 Edwar Jaramillo:
        * Desde esta modificación se empieza a tener en cuenta la cantidad de concepto que diga el paquete, para que por ejemplo en el concepto 0035
            se pueda tener en cuenta la cantidad de días incluidos de estancia en el paquete.
        * Se crean nuevas funciones como "validarPqteEstancia", "generarCargoDiferenciaEstancia", "consultarEstanciaPreviaGrabada", "anularEstanciasPrevias", "grabarNuevoCargoEstancia"
            de tal forma que al grabar un paquete donde se detecte que tiene el concepto 0035 se pueda verificar si ya había una estancia previa liquidada para anularla
            y dar prioridad a los dias de estancia que tenga el paquete, estas funciones hacen el calculo entre los días del paquete y los días de estancia anulados para ver si
            queda una diferencia y de ser así entonces se crea una nuevo cargo automáticamente con los días de estancia de la diferencia y se graba.
 - Octubre 30 2017 Edwar Jaramillo:
        * En la simulación se crea una tabla temporal sobre todos los cargos simulados de tal manera que se puedan aplicar politicas sobre esa tabla temporal,
            pero había un problema en el proceso cuando habían varios procedimientos por liquidar pues la interacción de cada procedimiento para la simulación,
            se eliminaba la tabla temporal y se sobre escribían los ids que luego actualizaban los cargos simulados, para esto entonces se modifica la posición del llamado a
            las funciones "crearTemporalCargos", "eliminarTemporalCargos" para que se llame antes del ciclo de simulación y después del ciclo de simulación.
 - Octubre 02 2017 Edwar Jaramillo:
        * En la validación de tercero-concepto unix se usa nueva función de funciones_facturacionERP.php desde donde se retorna el query correcto que hace la validación en unix,
            de esta manera si se hace modificación en ese query afecte también el proceso en la liquidación y que no quede por separado como estaba antes.
 - Julio 05 2017 Edwar Jaramillo:
        * Se crea función guardar_log_txt para guardar un log cuando se inserta en ivsal.
        * En los procedimientos no auditados se cuentan los procedimientos para generar esa posible cantidad de vías pues en los no auditados no se ingresan las vías en el
            monitor de auditoría.
 - Mayo 08 2017 Edwar Jaramillo:
        * En la función "separar_procedimientos_pos_nopos" se crea un nuevo nivel de agrupación para los procedimientos "2_ORD_PROPOS", donde se agrupan
            los procedimientos que pueden ser POS y que se liquidan por código, para que en un tipo de liquidación por ejemplo, NO POS más procedimientos UVR y procedimientos CODIGO,
            la liquidación quede agrupada en ese orden, primero se deben liquidar los NO POS seguido de los procedimientos por UVR o Grupo y por último los procedimientos por CODIGO,
            se debe tener en cuenta que aún se sigue agrupando por espacialidad, vías y número de puntos.
 - Mayo 04 2017 Edwar Jaramillo:
        * Si el saldo es cero o en algunos casos menor a cero porque directamente por unix ya le han grabado cargos al responsable soprepasando el saldo,
            entonces no tener en cuenta ese responsable en matrix y continúe con el siguiente responsable.
 - Abril 24 2017 Edwar Jaramillo:
        * Se empieza a leer el organo automáticamente desde el programa de auditoría para cada uno de los procedimientos de la liquidación, además se hacen modificaciones
            al programa para que tenga en cuenta el organo para todos los procesos que consultan la tabla cliame_000070 (relación empresa procedimiento) incluida la consulta
            a la función datos_desde_procedimiento, para que se diferencie por organo.
 - Abril 04 2017 Edwar Jaramillo:
        * Ahora se permite agregar el concepto 0034-uso de quipos desde las plantillas de cirugía pero para hacerlo en este punto se agrega el concepto
            y el equipo como si se tratara de un concepto adicional agregado desde la pantalla de liquidación para que se agregue el equipo que se configuró en la plantilla
            y también se puedan agregar más equipos desde la liquidación sin problemas.
        * Había un problema cuando se liquidaban varios equipos, si se descarcaba uno como no grabar, todos los equipo de la lista quedaban como
            no facturables, se adiciona entonces esta validación para cada equipo que indica que si está chequeado grabar entonces por defecto
            coloque el cargo de equipo como si facturable.
 - Marzo 30 2017 Edwar Jaramillo:
        * En los responsables ya no se deben tener en cuenta las entidades que en la tabla cliame_000205 tengan el estado Resdes=on (Entidad descartada), pues fue una empresa que
            se agregó en la admisión pero fue cambiado por uno nuevo.
        * Se permite agregar el concepto 0034-Uso de equipos desde una plantilla, antes se permitía agregar pero la liquidación generaba un error, con
            esta actualización se soluciona el error agregando el concepto desde la plantilla como si fuera un concepto adicional a la plantilla (en este caso el 0034)
 - Noviembre 10 2016 Edwar Jaramillo:
        * [updt-161109] En el caso Prepagada-EPS, se esta cobrando el concepto 0168 porque está en la plantilla de la EPS y no de la prepagada, pero según indicaciones NO SE DEBE COBRAR ese concepto,
            para eso se realizan las siguientes validaciones y evitar el cobro de ese concepto:
            - Si el responsable principal no esta entre los inactivos,
            - el código de empresa del cargo es el código del responsable principal
            - el responsable principal es prepagada
            - la empresa responsable de la plantilla esta entre las entidades responsables
            - la empresa de la plantilla no hace paralelo
            - la empresa de la plantilla no es prepagada (EPS o particular, ...)
 - Septiembre 22 2016 Edwar Jaramillo:
        * Nuevo campo en los datos para agregar procedimientos a la liquidación, este campo permite ingresar un tiempo específico a cada procedimiento, no es un campo obligatorio,
            aplica en el caso en que el procedimiento sea NO POS se usa ese tiempo específico para calcular la tarifa, si no se ingresa el tiempo específico entonces el programa
            usa el tiempo total del acto quirúrgico.
        * Se agregan campos nuevos en la tabla de detalle de la liquidación, tiempo_procedimiento, POS o NO POS, Politica utilizada, posición rogano.
        * Cuando se aplican políticas o restricciones generales al algunos cargos, se muestra un ícono informativo al lado de cada cargo de insumos o en el detalle del total de cada concepto.
 - Agosto 02 2016 Edwar Jaramillo:
        * Al grabar ingreso inactivo estaba quedando incorrecta la fecha de los insumos, a pesar que estaba quedando con la fecha del ultimo ingreso activo en unix,
            no se estaba validando nuevamente que esa fecha de ingreso activo estuviera dentro del mismo mes en que se estaba grabando la liquidación para evitar
            error del cambio de mes en el integrador.
 - Julio 28 2016 Edwar Jaramillo:
        * wres_cargo_POS = Si el cargo fue NO POS, en este campo se guarda el código de la empresa POS para guardarlo en cliame_106, si se genera una devolución se debe tener en cuenta ese responsable, antes se devolvia con el responsable NO POS y no se sabía cual responsable POS era el encargado de liquidarle la devolución.
        * fecha_reemplazable_unix = (aplica para Ingresos inactivos) fecha con la que se debe grabar en unix para evitar errores en integrador, si el cargo es de un mes anterior, entonces se graba con la fecha del mes actual.
        * Corrección en la validación de saldos en unix: No era lo correcto validar el saldo con la fecha del cargo si corresponde al mes anterior, en ese caso se debe consultar el saldo es con el año y mes actual, porque con esa fecha es que se va a intentar grabar el cargo de insumo en unix. Es posible que como estaba encontrara saldo para el mes anterior pero al momento de grabar salir error en integrador diciendo que no hay saldo para el mes actual.
        * Para la liquidación de inactivos, validación para que la fecha del cargo sea mayor o igual a la fecha del ingreso activo en unix para que el integrador no saque error. El cron de actualización debe modificar la fecha correcta si aún no cambiado de mes, porque si ya cambio de mes, ese inventario esta cerrado y tampoco se permite modificar la fecha del cargo en unix.
        * Las relaciones entre tablas de historia-ingreso con la tabla cliame_000207 se cambian a la tabla tcx_000011, porque esos datos en la 000207 pueden llegar a cambiar y no actualizarce correctamente. De igual manera se modifica para que en las consultas donde se relaciona hist-ing-turnoCx se eliminan las variables historia-ingreso y solo se realiza el cruce por turno.

 - Junio 20 2016 Edwar Jaramillo:
        * Se modifica la función del encabezado cargar_datos del paciente para que no intente consultar el último ingreso de paciente y respete el número de ingreso que llega por parámetros desde los monitores, ántes siempre se modificaba por el último ingreso del paciente.
        * En las devoluciones no se estaba teniendo en cuenta si el cargo se había grabado como NO POS, la implicación es que se estaba consultando la tarifa NO POS pero los insumos siempre se graban como POS y así mismo se deben tratar en la devolución por ejemplo para la comparación de tarifas unix matrix, para solucionarlos se crean los siquientes campos en 000106
          wliquidacion_no_pos = Indica si el cargo fue grabado como NO POS.
          wtar_cargo_POS      = Si el cargo fue NO POS, en este campo se guarda la tarifa de la empresa POS.
          wres_cargo_POS      = Si el cargo fue NO POS, en este campo se guarda el código de la empresa POS.
        * Se implementa la grabación de liquidación a ingresos inactivos en unix.
            - Se crear los siguientes campos en 000106
                * Tcarmiu: on si se grabó insumos a ingreso inactivo en unix.
                * Tcariux: número de ingreso activo en unix al momento de grabar insumo con ingreso inactivo matrix.
                * Tcarium: on si se modificó el cargo en unix el ingreso inactivo (actualizado por proceso automático en pacientes_unix_matrix).
                * winsumos_cambiar_ingreso   = on si el cargo de insumo se va a grabar en unix con un ingreso diferente al de matrix.
                * wingreso_reemplazable_unix = número del ingreso con el que se va a grabar el cargo de insumo en unix.
                * fecha_reemplazable_unix    = fecha con la que se debe grabar en unix para evitar errores en integrador, si el cargo es de un mes anterior, entonces se graba con la fecha del mes actual.

          (NOTA: PARA GRABAR INSUMOS EN UNIX A INGRESOS INACTIVOS POR REINGRESOS O REINTERVENCIONES, SE DEBE GARANTIZAR QUE EN UNIX EXISTA POR LO MENOS UN INGRESO ACTIVO SIN IMPORTAR CUAL SEA, ESTO PORQUE EL INTEGRADOR ES QUIEN OBLIGA A GRABAR A UN INGRESO ACTIVO EN UNIX,
          Tanto para la grabación de cargos como para la anulación el proceso es igual).

        * Se creó parámetro en root_51 "permitir_historia_ingreso_inactivo" para controlar cuando se permite o no grabar liquidaciones a ingresos inactivos.
        * El proceso de validación de paciente activo en unix puede variar dependiendo del parámetro permitir_historia_ingreso_inactivo, si es off se realiza la validación directa a unix del ingreso con el que se graba, si es on se valída que por lo menos exista un ingreso activo en unix sin importar cual pero se captura ese ingreso activo en unix para registrarlo en el cargo y luego realizar la actualización en unix.
        * Nueva función para registrar errores, en el caso de la liquidación inicialmente esta siendo útil para capturar en el log los errores ajax, luego de las modificaciones realizadas a las función javascript mensajeFailAlert encargada de mostrar mensaje en pantalla informando de errores internos en la ejecusión de un proceso ajax.
        * Se creó la tabla root_000112 como log de errores en las aplicaciones para dejar rastro de algún problema al ejecutar un query u otros tipos de acciones y se puedan corregir.

 - Junio 03 2016 Edwar Jaramillo:
        * Cuando se liquidaban insumos NO POS, se calcula la tarifa con la empresa POS pero al momento de realizar la validación de tarifa con unix, se encuentra que no
            corresponden las tarifas, porque se esta intentando comparar tarifa matrix (POS) con la tarifa unix NO POS, se modifica la liquidación para que compara
            en unix con la tarifa POS que se usó en matrix.
 - Mayo 26 2016 Edwar Jaramillo:
        * Cuando se están liquidando insumos NO POS, el valor de la tarifa se calcula con la empresa POS.
 - Mayo 24 2016 Edwar Jaramillo:
        * Se consultan los médicos que hicieron descripción operatoria o nota operatoria para el turno seleccionado, esos médicos aparecerán fijos en una categoría del
            buscador de terceros para que en facturación siempre los tengan presentes al momento de la liquidación.
        * Corrección al momento de consultar si un turno fue auditado automáticamente, se estaba haciendo cruce con el detalle de auditoría (000253) pero los turnos
            automáticos no tienen detalle de procedimientos, se complementa consultando solo el encabezado de auditoría para confirmar si fue automático.
        * Se implementa funcionalidad de arrastrar y pegar (copiar) los datos de especialista cuando se llenan los datos de procedimientos auditados.
 - Mayo 19 2016 Edwar Jaramillo:
        * Excepción para que permita agregar otros procedimientos diferentes a los auditados "liq_procedimientos_no_auditados" cuando el turno se ha auditado automáticamente
            pues en esos casos no se han agregado procedimientos y desde la liquidación debe agregarlos.
 - Mayo 18 2016 Edwar Jaramillo:
        * Cuando el facturador tiene permiso de modificar bilateralidad, el efecto de organo bilateral o no, tiene influencia sobre el check de vilateral,
            Si no tiene permisos de cambiar bilateralidad, el organo seleccionado no tiene efecto sobre el check de bilateral y aparecerá lo que haya seleccionado el auditor.
 - Mayo 17 2016 Edwar Jaramillo:
        * Ahora el programa lee el número de vía del procedimiento o bilateralidad desde el detalle de la auditoría y se selecciona automáticamente en la liquidación.
 - Mayo 16 2016 Edwar Jaramillo:
        * Modificaciones para controlar el cambio de responsable identificando si se requieren autorizaciones adicionales, se marcan los procedimientos
            e insumos que requieren autorización, este proceso se realiza al momento de grabar cada cargo.
        * Se mejora la forma como se muestran los cargos que requieren autorización adicional del segundo responsable por terminar TOPE responsable SOAT.
            Se estaba mostrando varias veces un mismo procedimiento, se estaba imprimiendo por cada concepto cobrado al segundo responsable pero solo es necesario
            mostrar el código del procedimiento una sola vez.
 - Marzo 29 2016 Edwar Jaramillo:
        * Se cambia el campo de estado auditado "Aueaud" por "Auelli" listo para liquidar.
 - Marzo 09 2016 Edwar Jaramillo:
        * Nuevas validaciones para controlar que se ingrese al programa de liquidación solo desde el monitor de mercados, el nuevo parámetro que controla ese ingreso es
            "turnopermitido" llega por url y corresponde al turno de cirugía, debe ser el mismo que elijan en la liquidación de cirugía, adicional a ese parámetro
            se envía "pqte_mon" indica que si desde el monitor se dió clic en liquidar como paquete, no se permita cambiar la forma de liquidarlo.
 - Marzo 03 2016 Edwar Jaramillo:
        * Se retira la validación
            "Validar que si es paquete y alguno de los procedimientos del paquete esta contenido en los procedimientos auditados entonces es un paquete válido, si no es así no es un paquete correcto."
            Porque en todo el proceso de autorización y auditoría no saben que se va a grabar un paquete.
 - Marzo 03 2016 Edwar Jaramillo:
        * Se crea la opción para que al liquidar la cirugía se pueda consultar quién auditó y quién autorizó los códigos de los procedimientos.
 - Marzo 01 2016 Edwar Jaramillo:
        * Si el parámetro liq_procedimientos_no_auditados esta en 'on' entonces no validar si se han agregado todos los procedimientos auditados a la liquidación,
            hay casos en los que un código se liquida p.e. por prepagada y otro por EPS, por matrix se liquida un código y por unix se liquida el otro.
            Desde autorizaciones están colocando un código que no es CUPS, ese no se debe liquidar en el acto quirúrgico.
 - Febrero 23 2016 Edwar Jaramillo:
        * Parámetro "proceso_auditoria_activo_sfi" que indica a la liquidación que debe tener o no en cuenta el nuevo proceso de audutoría.
 - Febrero 12 2016 Edwar Jaramillo:
        * [upt-84] Modificación para soportar los códigos homologados desde el proceso de auditoría.
 - Febrero 09 2016 Edwar Jaramillo:
        * Se garantiza que al insertar saldos en ivsal se haga con el código del insumo en mayúsculas.
 - Febrero 01 2016 Edwar Jaramillo:
        * [updt-82] Para consultar la lista de insumos del paquete se debe hacer con base al Detalle general 'Paqdetgen=on', estaba 'Paqdetgen<>on' y esto hacía que no se
            consultara correctamente las condiciones Si/No facturable de los insumos para un paquete, si es "<>on" se consulta Si/No facturable para la tarifa, si es "=on"
            es para consultar el detalle de insumos genéricos del paquete.
        * [updt-83] Se crea un función "existeTabla" para validar si una tabla esta en la base de datos o no, en este caso se usa para verificar si existen las tablas
             de encabezado y detalle de auditoria para los turnos de cirugía, pues las modificaciones al programa de liquidación de cirugía se actualizarán en producción antes
             de crear las tablas y el proceso completo de auditoría.
 - Enero 08 2016 Edwar Jaramillo:
        [AUDITORÍA]
        * Nueva funcionalidad del programa para que permita agregar a la liquidación solo los procedimientos auditados, la auditoría de procedimientos de cirugía hace parte
             de un nuevo proceso anterior a la liquidación de la cirugía.
        * Cuando se liquida un turno, se marca en encabezado del turno auditado (000252) como liquidado 'on'.
        * Al anular una liquidación, en el encabezado del turno auditado se cambia el estado a no liquidado 'off'.
        * En el programa de liquidación se crea una nueva sección llamada "Procedimientos auditados del turno cirugía" donde aparece la lista de procedimientos y para cada uno
             se le permite complementar con los datos de la cirugía como: médico, vía, organo tal como se hacía ántes de la modificación con la diferencia de poder completar
             los datos de todos los procedimientos y adicionarlos al mismo tiempo a las liquidación. Se deja activa la opción "Otros procedimientos diferentes a los auditados"
             de forma temporal mientras se va realizando la implementación de este nuevo proceso.
        * Los procedimientos auditados que se agregan a la liquidación van desapareciendo de la lista de auditados y se ubican en la lista de liquidación (Evento quirúrgico),
            si se elimina el procedimiento auditado de la lista de liquidación, aparecerá nuevamente en la lista de procedimientos auditados.
        * No se permitirá grabar la liquidación si en la lista de procedimientos auditados si aún quedan procedimientos sin agregar a la liquidación.
        * Si el turno tiene encabezado de auditoría pero los procedimientos del turno aún no están auditados entonces
            No se permite agregar procedimientos desde la opción "Otros procedimientos diferentes a los auditados". Los turnos que se permiten seleccionar para liquidar
            aún se consultar con base al mercado pero se restringe la grabación de la liquidación dependiendo del estado del encabezado de auditoría (auditado o no auditado),
            tal como se hacía ántes de estas modificaciones el mercado debe estar cerrado.
        * Los campos y otros elementos html en el encabezado del programa son identificados con un nuevo atributo llamado "idx_auditado", con esto se permite controlar si
            los procedimientos auditados vs. los agregados a la liquidación además de poder diferenciar los datos complementarios de cada procedimiento antes de agregarlos a
            la lista de liquidación (vía, organo, médico, ...).
        [PAQUETES]
        * En esta nueva versión también se incluye la posibilidad de liquidar un mismo concepto varias veces en un mismo paquete.
        * Para lograr lo anterior se adiciona un consecutivo diferenciador al código del concepto, pero para que no existan problemas a comparar los codigos de conceptos
            que tienen ese consecutivo, se crea la función "codConceptoLegible" para que cada vez que se comprare o se requiera hacer una consulta con el concepto, dicha
            función retorne el código del concepto limpio, sin consecutivos ni caracteres diferentes al concepto.
        * Nuevo parámetro para determinar el tipo de porcentaje a usar en manuales de liquidación $tipo_porcentaje (paquetes o actividades).
 - Enero 04 2016 Edwar Jaramillo:
        * Los paralelos también aplican para tipos de empresas diferentes a prepagada (03) y la liquidación estaba obligando a que fuera tipo:03 específicamente,
            Se realiza la modificación para que solo tenga en cuenta el parámero de cliame_24 que indica que la empresa hace paralelo y no se valída el tipo de empresa.
        * Las funciones arrayVariablesManualCxMultiples
                        crearArrayPorcentajesMultiples
                        arrayPorcentajePorNumeroCirugia
                        generarArrayPorcentajeConceptos
                        generarIdxActoQxNumeroCx
                        porcentajeCirugiaMultiple
            que son usadas para encontrar el porcentaje de conceptos, son movidas al script funciones_facturacionERP.php para que puedan ser usadas por el programa de cargos
            y aplicar los porcentajes para urgencias.
 - Diciembre 15 2015 Edwar Jaramillo:
        * En la liquidación de insumos no se estaba asignando correctamente el valor a $datosGrabarCargos['wvaltarExce'] cuando el cargo es Excedente.
        * Validación para insumos NO POS, se debe usar la función "CondicionMedicamento" pero con el código de la empresa responsable POS, para que los insumos
            NO POS queden como excedentes, reconocidos o No facturables tal como se encuentre la empresa NO POS y no busque con la tarifa particular.
        * Cuando se liquidaba un procedimiento NO POS se estaba cambiando el reponsable a particular, pero ese cambio no debe ser definitivo en las tablas de responsable
            del paciente, solo debe hacerse temporalmente y simularse durante la liquidación, por eso en la función "actualizarResponsablePrincipalPrimerResponsable" se valída
            que si es procedimiento NO POS entonces no genere cambio de responsable.
        * Se implementa alerta de errores detectados durante los llamados AJAX (Jquery).
        * Cuando es NO POS solo se debe tener en cuenta si es excedente o no, según al empresa POS,
            Si para la empresa POS el insumo es no facturable entonces no tener en cuenta esa condición.
 - Noviembre 30 2015 Edwar Jaramillo
        * [updt-81] Al momento de consultar el manual se envían los datos de empresa y tipo de empresa adecuadamente, según el tipo de liquidación que se esté realizando
            POS o NO_POS, los datos correctos se leen desde la variable $RESPONSABLE_VIRTUAL_PACIENTE que es quien tiene esos datos.
 - Noviembre 11 2015 Edwar Jaramillo:
        * Se cambia el proceso de anulación para que los insumos no sean anulados sino devueltos, se crea un nuevo cargo de devolución, en la tabla de cargos 000106
            debe quedar un nuevo cargo con valor negativo.
        * Nueva función "crearCargoDevolucion" para generar los parámetros del nuevo cargo que se debe grabar como devolución,
            si la fecha del cargo a devolver esta en una fecha diferente a la del cargo original entonces se graba el cargo de devolución con la fecha actual sino entonces se
            graba con la fecha del cargo original.
        * Nueva función "devolverCargoInventario" se encarga de enviar cada cargo de devolución a la función de grabarCargo pero indicando que es un cargo de devolución.
        * Se valída conexión a unix existosa en el proceso de anulación, si hay error de conexión no se anula el acto quirúrgico.
        * Se realiza una validación previa a la devolución de insumos, tal como se realiza al momento de grabar una liquidación, se utiliza la misma función "validarSaldosYUnixLiquidacionCx"
            para que se validen los saldos y tarifas en unix para la devolución y evitar generar errores en el integrador.
        * Mejor control de los errores que se pueden generar en el proceso de anulación-devolución, si para un cargo a devolver o anular se presenta un error, ese error se guarda en un log de errores
            en la tabla de detalle de la cirugía. Si se creó una devolución para el caso de los insumos entonces en un nuevo campo de la tabla 000198 se guarda el nuevo ID que hace referencia
            al cargo en 000106 que corresponde a la devolución.
        * En la tabla 000198 solo se cambiará el estado de los cargos que no generaron ningún error en la anulación o devolución, en la tabla 000199 solo se inactivará el encabezado
            si para ningún cargo se generó error.
        * (Noviembre 12 2015) En la función "validarSaldosYUnixLiquidacionCx" se verifica también si existe saldo para el insumo a grabar, si no existe se crea un registro en ceros, esto es para el caso en que
            unix esté temporalmente fuera línea pues de ser así, la grabación del insumo (cargos pda) verifica en esa tabla si hay saldo.
 - Noviembre 05 2015 Edwar Jaramillo:
        * Se modifica la liquidación para que pueda hacer homologación de paquetes y validar tercero-concepto para paquetes.
 - Octubre 26 2015 Edwar Jaramillo:
        * En anular-cargos-cirugia se realizan nuevas validaciones para evitar anulaciones de cargos que presentan algún tipo de error al anular en 106 o unix.
            Se valída que el ingreso esté activp en unix, por cada cargo anulado se verifica en 106 que efectivamente fue anulado, ya no se inactiva en tablas de
            cirugías todos los cargos si hubo errores, solo inactivan los ids que efectivamente fueron anulados.
        * No se estaba mostrando el error en responsables cuando las fechas del responsable no coinciden con la fecha de la cirugía.
        * Todos los alert en javascript son cambiados por jAlert de la librería jqueryalert
        * (Octubre 27 2015) Nueva función "validarCargoFacturadoUnix" para verificar si un cargo no ha sido facturado en unix. Se realiza una verificación para que
            no se pueda anular la liquidación si por lo menos unos de los cargos ha sido facturado.
        * (Octubre 28 2015) Al ordenas procedimientos segun número de puntos, estaba sobre escribiendo el número de puntos cuando había más de un responsable,
            ordenando por el número de puntos del segundo responsable.
        * (Octubre 30 2015) Al momento de grabar se crea validación para verificar que no existan cargos de insumos con el campo de facturable vacío, pues se detectó un caso
             de liquidación en que los insumos quedarón con dicho campo en vacío.
        * En la función que consulta los manuales de liquidación se adiciona un nuevo campo para buscar el manual por centro de costo.
        * Cuando se modificaba el responsable de EPS a particular por ejemplo en lo NOPOS, el cargo aún seguía con el tipo de empresa de la eps y no con el
            tipo de empresa de particular.
 - Octubre 20 2015 Edwar Jaramillo:
        * No se estaba consultando bien en algunos casos el límite de ayudantía cuando al tratar de consultar la modalidad de facturación se enviaba el código del
            procedimiento concatenado con la posición del organo, no encontraba modalidad por eso no era posible para el programa determinar si deía leer el límite
            por UVR o por grupo.
        * Se corrige problema a tratar de liquidar después de eliminar todos los procedimientos de la liquidación.
        * (Octubre 21 2015) Nueva función "consultarProcedimientoNoPos" para poder usar la misma lógica al intentar agregar un concepto adicional, se estaba intentando
            agregar un concepto como POS pero en algunos casos debía ser como NO POS y salía error de tarifa.
 - Octubre 19 2015 Edwar Jaramillo:
        * El campo de procedimieto para conceptos adicionales td_add_procedimiento, Siempre se debe mostrar el select de procedimiento porque a veces
            se quiere agregar un concepto solo al procedimiento que aparece como segunda cirugía, si se deja como estaba entonces el programa
            siempre agrega al concepto al primer procedimiento automáticamente.
        * Los procedimientos NO POS ya no dependen de si estan marcados en 000070, ahora existe un maestro solo para marcar los procedimientos no pos y se
            actualiza la liquidación para que se consulte ese maestro.
 - Octubre 15 2015 Edwar Jaramillo:
        * Problemas que no detectaron durante el paralelo de las dos versiones de liquidación (TEST).
            - No estaban viajando al monitor errores de tarifa asociados a conceptos que modifican valor e insumos arr_cargos_sinTarifaModifValor, cargosSinTarifasInsumos
                no se estaban enviando esos arrays a la función que genera la liquidación.
            - No estaba consultando los paquetes de particular porque al momento de leer los responsables y el responsable era "tipo_paciente = P" no se estaban asignando los códigos
                de tarifa ni código de empresa particular "01".
 - Octubre 15 2015 Edwar Jaramillo:
        * A partir de este momento se dejará de usar el paralelo del programa liquidacion_cirugiaERP.php - liquidacion_cirugiaERP_TEST.php,
            el programa liquidacion_cirugiaERP.php es reemplazado completamente por la versión de código contenida en liquidacion_cirugiaERP_TEST.php
 - Octubre 15 2015 Edwar Jaramillo:
        * Nueva variable "es_paquete" en el paso de parámetros a las funciones para que más adelante se pueda identificar si un procedimientos corresponde a un paquete o una actividad.
        * La función "crearArrayPorcentajesMultiples" ahora identifica si los porcentajes corresponden a paquetes (pqte) o actividades (actividad).
        * Nuevas funciones "recuperarDatosLiquidadosTercero"->Encargada de recuperar datos de tercero, disponibilidad, cuadro de turno, grupo médico;
            "procesarDatosTerceroCargo"->Encargada de actualizar datos para liquidación de tercero, disponibilidad, cuadro de turno, grupo médico. Esta funciones
            se crean para ser usadas para gestionar mejor la información de tercero para conceptos que requieren terceros y ahora también para los equipos
            que en algunos casos también deben pedir tercero.
        * A partir de esta actualización algunos equipos permiten solicitar tercero, debe existir una política que indique para qué equipo se debe pedir tercero, el programa
            de liquidación lee la política y pedirá el tercero. Por cada equipo debe existir una politica.
 - Octubre 02 2015 Edwar Jaramillo:
        * Al agregar un concepto por limite en la función "agregar_concepto_a_procedimiento", no estaban quedando las empresas que por manual se les agregaba a la plantilla
            solo estaba quedando la última empresa, por ejemplo entre SOAT y EPS, estaba quedando solo el código de la EPS dentro del array de plantillas para el 0168.
 - Septiembre 30 2015 Edwar Jaramillo:
        * Cuando liquidaba dos cirugías misma vía mismo especialista, pero la segunda cirugía por igual via en el orden de liquidación aparece como tercer cirugía,
            toma los porcentajes de cirugía #3 por igual vía y realmente debe tomar los porcentajes de cirugía #2, teniendo en cuenta que en la liquidación
            hay tres cirugías, #1 via1, #2 via2, #3 via1, las #3 es por misma vía y es la segunda por misma vía por tanto debe tomar porcentajes de cirugía 2, el programa
            estaba cogiendo el porcentaje de cirugia 3 en esos casos.
 - Septiembre 24 2015 Edwar Jaramillo:
        * Para identificar que hay datos icompletos en la admisión, en el encabezado del programa, el Servicio de Ing:  Tipo de Ingreso: se muestran con fondo en rojo para
            alertar, si la admisión esta incompleta muy posiblemente no hay datos en unix en la tabla msate y eso genera un error al liquidar porque la historia e ingreso
            no existen en msate de unix. El problema es que alcanza a grabar el cargo en las demás tabla de unix menos en Rips.
 - Agosto 26 2015 Edwar Jaramillo:
        * Nueva función "consultarResponsables" para consultar correctamente los responsables del paciente teniendo en cuenta si hay complementariedad.
            - Complementarieada: Si un paciente en la admisión tiene más de un responsable pero uno de ellos esta marcado como responsable complementario, el programa de liquidación
                de cirugía solo tomará como único responsable el que aparece como complementario, los demás responsables no serán tenídos en cuenta (un nuevo campo en tabla de
                responsables indica si un responsable es complementario).
        * Modificación en la interpretación de los topes de responsables, si hay un vacío es similar a un '*', significa que no hay límite, pero si puede haber un porcentaje
            de reconocimiento, los IDs de los topes que no tienen límite se reconocen con el identificador "sin_limite" y para que la liquidación continúe normalemente se asigna
            un valor de tope de 500000000 puesto que el sistema siempre intenta restar el cargo sobre un saldo.
            En la consulta de responsables se incorporan los centos de costos de cirugía para que no se intente usar topes que no corresponden a centros de costos diferentes.
        * En el array de "arr_TOPES_ENTIDADES" se crea la posición para el tope "sin_limite" para se usado como comodín cuando el saldo es vacío (no tiene límite) y la liquidación
            siempre reste el saldo de ese tope comodín y no se altere luego ningún ID en la tabla real de topes.
        * Modificación en la función javascript "cargarDatosPaciente", valída si hay un responsable complementario, si es así entonces lo resalta como responsable principal,
            esto solo ocurre en cirugía, puesto que en el programa de cargos por ejemplo si seguirá apareciendo como responsable principal aquel que aparece en el ingreso del paciente
            como responsable primario.
        * Si al consultar la información del paciente, se encuentra un responsable complementario entonces la informarción del responsable principal se cambia por los datos
            del responsable complementario (tarifa, código, tipo empresa).
        * [updt-80] Cuando se cobra un cargo que pertenece a otro responsable por plantilla, se consulta si para ese responsable se debe redondear a la centena o no, aplica por ejemplo para
            el caso de soat y prepagada aplicando paralelo, el soat siempre redondea la cifras pero si hay un cargo que solo paga la prepagada entonces se debe consultar
            en el manual de la prepagada si redondea o no.
 - Agosto 13 2015 Edwar Jaramillo:
        * Al momento de empezar a grabar la liquidación se bloquea la tabla de fuentes sifue en unix hasta que se graben todos los cargos de la cirugía,
            en cada cargo se envía la variable de conexión a unix para que no se tenga que realizar una nueva conexión desde las funciones que insertan
            los cargos en unix, adicionalmente se envía una variable indicando a las funciones que el bloqueo de la tabla de fuentes ya se realizó desde el programa de
            liquidación de cirugía evitando que la misma función de grabación a unix intente bloquear nuevamente o incluso liberar la conexión a unix antes de terminar.
            Luego de terminar toda la grabación se procede a liberar la conexión a unix.
        * Cuando se liquidan solo insumos no se realiza el bloquea de la tabla de fuentes porque no es necesario pero si se hace una única conexión a unix que igualmente
            es enviada a las funciones de grabación de cargos para que no se tenga que realizar una nueva conexión en cada cargo.
        * Esta modificaciones implicaron realizar cambios en funciones_facturacionERP.php en funciones como "grabarCargoFacturacionUnix" "conexUnix_FacturacionPpal"
            "ActualizarCargoComoNoFacturable" "validarRelacionTerceroConceptoUnix", incluso en el archivo cargoscpx.php función "grabarArticuloPorPda" donde se controló
            que al grabar cargos de insumos para cirugía verificara si ya había conexión a unix y no intente cerrar esa conexión mediante odbc_close_all() pues al momento de
            cerrar la conexión en liquidación de cirugía ya no encontraba el link de conexión al intentar ejecutar odbc_close($conexUnix).
 - Agosto 05 2015 Edwar Jaramillo:
        * Si hay dualidad en el cuadro de turno (ahora grupoMedico) entonces verificar si seleccionaron alguno, si no hay ninguno seleccionado
            entonces verificar si el campo grupoMedico tiene algún valor, el valor de este campo es seteado automáticamente por la función de terceros
            que devuelve un valor de grupo médico si solo está en un único grupo médico.
            - wcuadroturno => Si hay dualidad de grupo médico y se escoge uno.
            - grupoMedico => Si no hay dualidad, si solo esta en un único grupo médico se escoge automáticamente.
 - Julio 24 2015 Edwar Jaramillo:
        * [updt-79] Se soluciona inconveniente al consultar los cups autorizados desde la admisión.
 - Julio 15 2015 Edwar Jaramillo:
        * [updt-78] Modificación para permitir capturar error de bloqueo de tabla sifue en unix.
        * [updt-77] El nuevo campo grupo médico ahora es usado para calcular la tarifa según el médico, para esto se creó un nuevo campo oculto que cambia su valor
            dependiendo del médico que se selecciona en la liquidación.
        * No se estaba haciendo correctamente la validación del campo "Pacact" para saber si el paciente aún esta activo.
        * Cuando se leen los posibles cuadros de turno para un médico que está disponible, se valida que si está en un solo cuadro de turno entonces quede seleccionado
            automáticamente ese único cuadro de turno.
        * (Julio 16 2015): En la modificación [updt-78] estaba mostrando el mensaje del error al usuario pero el proceso seguía liquidando los demás cargos. Se actualiza para que
            al primer intento de fallo se termine la liquidación.
 - Julio 09 2015 Edwar Jaramillo:
        * [updt-76] "grupoMedico" Nuevo campo de terceros para ser tenido en cuenta en la homolagación.
        * Se cambia de lugar la lectura de "$arr_baseLiquidacion['wredondear_centena']" para que siempre se lea respecto al responsable actual. En la parte visual también
            se ajusta el redondeo para que muestre por cada responsable si redondeó o no, en el caso de paralelos o cambio de responsable.
 - Julio 06 2015 Edwar Jaramillo
        * [updt-74] Nueva función "facturableInsumosPaquete" para consultar más fácilmente por tarifa si los insumos del paquete son SI o NO facturables.
        * La función "validarClasificacionInsumoSiNoFacturar" permite ahora crear un cargo anexo según restricción por cantidad máxima de SI o NO facturable de un insumo
            en el encabezado del paquete.
        * En la función "actualizarCargos", se modifica datos_reales de insumos solo la primera vez que aparece, porque puede ser que para un insumos se haya creado un cargo anexo
            por tanto, debe tener prioridad para mostrarse en pantalla el primer cargo que es de más prioridad para evitar que con el segundo cargo del mismo insumo se sobreescriba
            el S o N facturable del primer insumo.
        * "inicializarDatosInsumo" Se crea solo para la primer ocurrencia de un mismo código de insumo, la segunda vez para un mismo insumo solo se modifica el facturable de datos_reales
            solo si es facturable pues en la interfaz se muestra como prioridad el SI y entre parentesis se especifica si hay anexos no facturables.
        * [updt-75] Se crea validación para comprobar que la relación concepto homologado y tercero, existan en unix, en caso contrario no permitir grabar la liquidación.
 - Julio 02 2015 Edwar Jaramillo:
        * [updt-73] Se generan las condiciones, valores y posiciones requeridas para crear el nuevo cargo anexo de insumos creado desde las políticas.
        * Al momento de mostrar el detalle de los insumos en la liquidación se suma la cantidad de un mismo insumo que fue agregado como anexo desde políticas. Pero al momento de guardar
            esos cargos anexos, se guardarán por separado.
 - Junio 26 2015 Edwar Jaramillo:
        * [updt-72] Se cancela esta modificación para validar si el concepto actual estaba en plantilla del responsable porque cuando cambia de responsable deja de cobrar los conceptos al siguiente responsable.
        * Estaba conservando el número de puntos de responsable principal cuando intentaba averiguar los límites para el segundo responsable.
        * [updt-71] Corección para que no se intente cobrar un concepto a un responsable que no le corresponde pagarlo porque no está en su plantilla original,
            pero que puede llegar a aparecer en la liquidación porque hace parte del otro responsable que lo complementa.
        * Modificación a la función "actualizarCargos" para que se actualice correctamente el array de cargos por responsable teniendo en cuenta los subniveles del concepto
            uso de equipos o exámenes, también para que se actualice correctamente el array de cargos para grabar.
        * Limpieza de código fuente, Porciones de código que se han colocado entre comentarios tras nuevas actualizaciones y mejoras.
        * [updt-70] Parámetros necesarios para usarlos en topes y paralelos.
 - Junio 24 2015 Edwar Jaramillo:
        * [updt-69] Nuevas funciones para generar tabla temporal de cargos simulados con el fin de aplicar politicas sobre cargos anteriores, antes solo se tenían en cuenta los cargos reales grabados
            en cliame_106 pero no era posible verificar los cargos anteriores relativos a la simulación actual. Se crean las funciones "crearTemporalCargos", "insertarCargoTemporal", "eliminarTemporalCargos",
            "ActualizarCargoComoNoFacturableTemp", "actualizarCargos".
            + En el proceso de generar los datos de liquidación se creó la variable "$generar_temporal" que es la encargada de determinar si se va a crear o no la tabla temporal, si es false
                entonces las políticas se aplicarían solo a los cargos reales grabados con anterioridad en cliame_106 sin tener en cuenta los cargos de la liquidación actual.
            + Antes no se tenía en cuenta el array de cargos anexos para los insumos, pero es necesario porque por política se puede partir el cargo un cargo con una cantidad SI facturable y otro cargo
                con otra cantidad NO facturable.
        * Nueva función para permitir crear información de encabezado en los arrays de insumos "inicializarDatosInsumo".
        * En la parte visual de los insumos se identifica si un insumo tiene dos cargos y se identifica la cantidad que es no facturable para así mismo mostrarlo en la interfaz, diciendo que
            hay una cantidad no facturable más el valor total que corresponde a lo no facturable.
 - Junio 23 2015 Edwar Jaramillo:
        * [updt-68] Las prepagadas generalmente se liquidan por tiempo, en ese sentido entonces se cobran los conceptos por tiempo del primer procedimiento
            y el resto de conceptos de los siguientes procedimientos no se cobra pero se hace la modificación para que los conceptos adicionales
            a la plantilla ($es_concepto_extra) SI se cobren y se liquiden según como dice el manual en sus porcentajes, si el concepto existe en el manual.
        * Filtro que hacía falta Paqdetgen, en las consultas de paquetes para que no tenga en cuenta los conceptos genéricos sino los conceptos de la tarifa.
 - Junio 16 2015 Edwar Jaramillo:
        * Ahora se tiene en cuenta la disponibilidad o no disponibilidad del tercero para buscar la tarifa y para la homologación del cargo en unix mediante la nueva variable "estaEnTurno"
 - Junio 09 2015 Edwar Jaramillo:
        * Cuando se debía reemplazar el código de procedimiento según la plantilla cuando el cobro es por hora, no se estaba cambiando por el que decía la plantilla
            al momento de crear el cargo sino que dejaba el código de la cirugía. Se modifica para que deje el código que dice la plantilla y no la de la cirugía.
        * (Junio 10 2015): No estaba mostrando todos los códigos de procedimientos de un paquete porque había una relación entre 103 y 200 por el tipo de procedimiento,
            De un tiempo atrás esa relación se dejó de utilizar pero ya no es necesaria, aún así estaba generando que algunos paquetes no se consultaran completos.
        * (Junio 11 2015): Validaciones complementarias para insumos al momento de grabar la liquidación, validar no solo el estado en unix sino en matrix porque hay casos en los
            que un artículo se activa en unix pero no queda el cambio inmediatamente en matrix. Se verifica que los valores de tarifa tambien sean iguales tanto en matrix como en unix.
        * (Junio 12 2015): Mejora al leer los responsables de la liquidación para que al primer responsable siempre le consulte si tiene saldo de tope o no y comprobar si tiene fecha
            de terminación como responsable, si al responsable principal se le termina la cobertura por fecha entonces se generan los datos para cambio de responsable y el siguiente responsable
            durante la liquidación actual queda como principal.
        * (Junio 12 2015): Al grabar la liquidación se elimina la validación para insumos que compara valores de tarifa respecto a unix puesto que por ejemplo el valor actual de unix
            puede no corresponder al valor actual de la tarifa en matrix porque durante la liquidación el sistema puede elegir automáticamente la tarifa actual o anterior dependiendo de la fecha de cirugía.
 - Junio 04 2015 Edwar Jaramillo:
        * Cuando se detectaba responsable particular siempre se esteba grabando el cargo como excedente $datosGrabarCargos['wrecexc'] = 'E';
            Se comenta porque si la empresa es 01-particular, entonces el cargo si debe quedar grabado para la empresa particular y no como excedente.
            Algo quedará como excedente pero por ejemplo cuando las condiciones de insumo dice que la empresa (diferente a particular)
            no lo paga sino que se cobra como excedente.
        * (Junio 05 2015) En el ciclo de array_extras no se estaba enviando correctamente el parámetro empresa a la función adicionarTipoCobroPorEmpresa.
        * (Junio 05 2015) Corrección para que en los insumos de paquetes tenga en cuenta lo si y no facturable que el facturador haya cambiado, no se estaba
             teniendo en cuenta porque en una anterior modificación no se estaba enviando el array de datos liquidados a una nueva función encargada de validar
             las condiciones de los insumos.
 - Junio 02 2015 Edwar Jaramillo:
        * Se empezó a enviar al integrador la fecha de la cirugía para los cargos de insumos, pero cuando hay cambio de fecha de un mes a otro
            el integrador genera el error diciendo que el mes anterior ya se encuentra cerrado, para evitar esto entonces se valida si
            el cargo de insumo que se está grabando corresponde a un mes anterior al mes actual, en ese caso entonces cambiar la fecha del cargo
            de insumo para la fecha actual en que se liquida la cirugía, así quedará el cargo con fecha actual y diferente a la de la cirugía
            para evitar que el integrador genere el error, esto solo debe suceder cuando hay cambio de mes y todavía no se han liquidado algunas
            cirugías del mes anterior (por ejemplo cuando se liquidan las cirugías el 01 del siguiente mes y las cirugías se realizaron el 30 del mes anterior)
        * En la validación "validarFechaCambioTarifaUnxMxERP" donde verifica que el valor a cobrar sea igual en matrix y unix por cambio de fecha de tarifa, se limita
            a que se haga solo a los valores que debe tomar según valor actual y valor anterior y la validación de fecha diferente en unix vs matrix si se debe hacer siempre
            porque es posible que no hayan actualizado las tarifas en matrix y en unix si.
        * Hay casos en los que se modifican los responsables desde unix, en ese caso, se guarda el nuevo reponsable en la 101 pero en la 205 solo se cambia la fecha
            de fin como responsable para la empresa enterior, pero el nuevo responsable no alcanza a quedar en la 205, en ese caso se une el responsable
            principal de la 101 con los responsables de la 205 y se tiene en cuenta la fecha de inicio y fin como responsables para saber qué empresas realmente
            son responsables para la liquidación actual.
 - Mayo 29 2015 Edwar Jaramillo:
        * Cada que se agrega un concepto de la plantilla, se guarda en un array la forma de liquidación de ese concepto por cada empresa responsable, para eso se creó la función,
            "adicionarTipoCobroPorEmpresa" guarda la forma de liquidar el concepto (hora, rango de tiempo), el concepto y el procedimiento a liquidar según cada empresa. El array de
            conceptos a liquidar tiene un nuevo campo para guardar esos tipos de cobro por empresa, cuando se está liquidando se verifica como se debe cobrar el cargo para la empresa responsable
            de pagarlo. Tambien se tiene en cuenta cuando se va a agregar el concepto de materiales y medicamentos que no mueven inventarios.
        * Al momento de liquidar, ya no se evalúa directamente el tipo de cobro de concepto sino que se envían los datos a la nueva función "conceptoProcedimientoCobroSegunTipoCobro" que será
            la encargada de retornar el concepto_cobro y procedimiento_cobro según la empresa y su tipo de cobro, esta función es útil para usarla cuando hay cambio de responsable y el cargo
            lo debe pagar otra empresa pero cambiando su forma de cobrar (hora o rango de tiempo).
        * Se hace una mejora en la función "validarSaldosYUnixLiquidacionCx" para que verifique si la fecha de cambio de la tarifa es mayor a la fecha actual, en ese caso no debe marcar el error
            de fecha de tarifa mayor a la de la cirugía puesto que es posible que la fecha de cambio efectivamente sea mucho mayor a la del cargo actual y por tanto tanto unix como matrix
            tomarán el valor anterior de la tarifa, no habrá inconsistencia ni en matrix ni unix respecto al valor.
        * En cada cargo se crea una nueva posición llamada "sin_tarifa_no_grabar" si esta variable esta en "on" quiere decir que no se debe grabar el cargo y mucho menos consultar
            en unix si tiene tarifa o no porque en muchos casos hay cargos que siempre serán no facturables por ejemplo si no sobrepasan limite de UVR o GRUPO y en esos casos nisiquiera hay tarifa creada.
            Tambien es útil cuando hay cambio de responsable y hay un cargo que por plantilla lo pagaba el anterior responsable pero según la plantilla del nuevo responsable no se paga.
        * El array "RESPONSABLE_VIRTUAL_PACIENTE" que simúla el responsable actual al liquidar se le agrega una posición más donde se agregan los códigos de los responsables que van
            agotando el saldo a cero, para que esos responsables ya no seán tenídos en cuenta para intentarles cobrar un cargo más.
        * Nuevo array de "arr_PARAMETROS_GENERALES" para enviar estos datos más facilmente a las funciónes y no saturar mucho algunos encabezados de funciones.
        * Al momento de liquidar un concepto se hace la validación cuando hay diferentes empresas reponsables, si por plantilla un responsable no debe pagar el concepto que si aparece
            para el otro responsable entonces el programa no debe sacar error de tarifa puesto que no el corresponde.
        * PROBLEMAS SOLUCIONADOS:
            - Cambio de responsable o saldo agotado.
                + Se estaba intentando cobrar cargos de la prepa al soat y salía error de tarifa.
                + Los insumos los dejaba si/no facturables según límite del soat y la prepa pagaba lo que por soat dijera si facturable.
                + Si al soat en medio de la liquidación se agotaba el saldo, los cargos siguientes que por plantilla correspondían al soat se estaban intentando cobrar a la prepa y salían errores de tarifa para la prepa.
                    Si se agota el saldo del soat ahora el sistema liquida según como diga la plantilla de la prepa, para los cargos que ya pudo pagar el soat, con eso se cobra a la prepa
                    lo que sea por paralelo, tipo de cobra (hora, rango de tiempo, anestesia), igual ocurre con los insumos (si/no facturable según manual de prepa).
                + En medio de la liquidación el sistema tiene en cuenta como se debe cobrar un cargo para un responsable diferente (forma de liquidación, hora, rango).
            - Los anteriores problemas aplicaban para diferentes responsables, no solo soat-prepa, tambien soat-eps
            - Paquetes que se liquidaban por tiempo estaban saliendo en ceros.
            - Liquidación completa para particular estaba saliendo todo en ceros, era algo solamente visual => NOTA!! Para tener en cuenta que aveces todo puede salir en cero si el responsable de cliame_101 no está en cliame_205.
            - Excepción tarifaria ahora se puede especificar tambien por procedimiento.
            - Porcentaje de participación de tercero admite valores en decimales.
            - Encabezado de la liquidación resalta el responsable principal (cliame_101) y muestra el saldo restante si lo tiene (cliame_204).
        * Antes de grabar la liquidación se verifica en unix si los insumos están activos o no, es posible que cuando se agregó un insumo al mercado, se haya desactivado de unix.
        * Se crea parámetro "$validarFechaCambioTarifaUnxMxERP" para permitir activar o desactivar la validación por cambio de fecha de tarifa de insumos entre unix y matrix, con el fin
            de desactivar la validación temporalmente p.e. para la liquidación de una cirugía urgente que no sea necesario hacer la validación.
        * El campo para permitir escribir valor de tarifa ahora valída que solo se escriban números, ántes permitia escribir alfanuméricos.
 - Mayo 11 2015 Edwar Jaramillo:
        * Se envían parámetros adicionales a las funciones de simulación de cargos para que sean tenídos en cuenta en las funciones de validaciontopesyparalelos.
        * A la función de consultar plantilla, agregar equipos y examenes, se les agrega el valor de la tarifa porque siempre debe guardar un valor diferente para cada equipo
            o exámen que haga parte del paquete, ántes solamente estaba teniendo en cuenta un solo valor, así entonces, si en un paquete habían más de un equipo, se estaba repitiendo
            el mismo valor.
        * Al momento de calcular el valor de un paquete ahora se tiene en cuenta la fecha de cirugía y la fecha de la tarifa para que el valor sea acorde a las fechas de cambio de tarifa
            y no siempre leer el valor actual cuando sea el caso.
        * Al crear el cargo en la liquidación, se tiene en cuenta si es un paquete, en ese caso entonces en el código del procedimiento y nombre del procedimientos van los equivalentes
            al código y nombres del procedimiento que se configuró en el paquete.
 - Mayo 05 2015 Edwar Jaramillo:
        * Modificación de la función arrayPorcentajePorNumeroCirugia, se crean dos funciones adicionales "generarArrayPorcentajeConceptos", "generarIdxActoQxNumeroCx", estas modificaciones
            son para permitir que cuando se liquiden múltiples especialidades entonces tenga en cuenta que para cada especialidad se deben repetir los porcentajes equivalentes a los números
            de las cirugías para cada especialidad pero SOLO para el concepto honorarios. Ya no es necesario controlar en una variable si tiene que repetir el porcentaje para la primer cirugía
            de cada espacialidad, la misma función que devuelve el array de porcentajes modificará el concepto honorarios con el porcentaje adecuando para cada cirugía de cada especialidad.
 - Abril 30 2015 Edwar Jaramillo:
        * En la adición de conceptos se verifica, si es un concepto que requiere terceros y permite modificar valor entonces no valida si tiene tarífa antes de agregarlo a la liquidación.
        * Se crea array basado en el maestro de conceptos 000200 para hacer una única consulta a esa tabla no tener que hacer una select cada vez que se requiera saber un parámetro de 000200, solo buscar en el array,
            Progresivamante se irá reemplazando la consulta a 000200 por la búsqueda en el array.
        * En función "conceptoMatMedFacturable" se valida si se están liquidando solo insumos, en ese caso entonces no debe adicionar el concepto 0168 por ser menos al límite de grupo o uvr porque
            solo se deben liquidar insumos y no conceptos.
 - Abril 28 2015 Edwar Jaramillo:
        * Al liquidar una cirugía se verifica si es cobro por rango de tiempo y setea la variable de codigo_rango_tiempo para luego reemplazar el código de la cirugía.
        * Función "verificarCodigoPorRango" es creada para verificar si el cargo se genera a partir de un rango de tiempo, se sabrá porque existirá una variable
            seteada con un código de procedimiento que conforma el rango de tiempa a cobrar. En ese caso debe reemplazar la variable que tiene el código de procedimiento por el código del rango.
        * Cuando un cargo se cobra por tiempo, al mostrar el html de la liquidación se muestra un ícono al lado del valor a cobrar indicando que se calculó por tiempo
            y tambien muestra el código del rango a cobrar.
        * Al agregar procedimientos a la liquidación se verifica si tiene que buscar la modalidad con el centro de costos del turno o del grabador, en este proceso
            se valida que se haya seleccionado un turno para poder identificar qué centro de costos debe elegir (el centro de costo esta asociado al turno según el quirófano).
        * Se implementa una nueva opción, en el ingreso de datos para permitir seleccionar la fecha-hora de inicio y fin de la cirugía para calcular automáticamente el tiempo de cirugía en unidad de minutos.
            Nueva función js "minutosEntreFechasHoras" para calcular los minutos entre rango de horas.
        * Nueva opción para permitir abrir el programa de disponibilidades de médicos desde la liquidación de cirugía.
 - Abril 27 2015:
        * Una modificación del 8 Abril, al momento de crear la función "fnArrayCargoLiquidar" se dejó de enviar el centro de costo del quirófano, eso estaba
            generando que no se grabaran los cargos con ese centro de costo del quirófano.
 - Abril 23 2015:
        * Antes de liquidar la cirugía se valida que cada insumo tenga tarifa en unix que el valor por cambio de fecha de tarifa no afecta el valor en unix y matrix.
            Mostrar un mensaje indicando que las tarifas en unix no serán iguales a las liquidadas en matrix.
        * (Abril 24 2015) No se estaba enviando el código de homologación a unix (Campo de 000104) para algunas tarifas que requieren de ese código a cambio del código del procedimiento de la cirugía.
        * (Abril 24 2015) Se valida que la fecha de tarifa de un insumo en unix y matrix sea igual, sino entonces impedir la grabación de la cirugía.
 - Abril 20 2015:
        * Se modifica la función "sumatoria ConceptosProcedimientoCODIGO" para que conculte si un concepto adicional tiene tarifa antes de agregarlo. Aplica tambien para
            los equipos que se agregan junto al concepto uso de equipo o examenes. Esta modificación tambien resulta útil para saber que cirugías
            son más costosas y ordenarlas correctamente en el caso por ejemplo de cirugías liquidadas por código y que tienen uso de equipo o examenes como adicionales.
        * Nueva función js "validar TarifaConceptoAdicional" para saber si un concepto adicional tiene tarifa antes de agregarlo a la liquidación.
 - Abril 14 2015:
        * Al agregar paquetes no se estaba mostrando el tipo de liquidación correctamente. Cuando se modificaba el número de vías, el select de vías no
            estaba quedando como selección obligatoria.
        * Se modifica mensaje de liquidación grabada cuando algún cargo no se pudo grabar.
        * Para las tarifas que siempre permiten escribir valor, coloca la tarifa si la encuentra, antes no colocaba la tarifa así existiera.
        * (Abril 15 2015) Opción para abrir HCE desde el programa de liquidación de cirugía.
        * (Abril 17 2015) Se modifica consulta de procedimientos autorizados porque faltaba filtro por historia e ingreso. Se adiciona un total para todas las cirugías,
            actualmente solo mostraba en la liquidación un total por cada código pero no la suma del total de todos los códigos. Al mostra liquidacíón por CODIGO
            en el encabezado del procedimiento estaba mostrando '1' y no la suma parcial de los conceptos.
 - Abril 08 2015:
        * "validacionCargosUnixSimulacion", "validarTarifaUnix" función para validar que los conceptos (no insumos) tengan tarifas en unix y avisar del error antes de grabar la liquidación
        * "fnArrayCargoLiquidar" crea un array del cargo para validarle tarifa en unix o para grabar el cargo en unix.
        * Se muestran los errores de tarifa al usuario despues de la validación de tarifas si es que alguno no la tien y no se graba la liquidación hasta que deje de salir el error.
            Los mensajes se muestran en una ventana modal.
        * Se marcan los cargos que no tienen tarifa pero que según el manual dice que se cobra 0% para que esos cargos no se intenten grabar pero que si queden en
             el log de cirugía.
        * Si por lo menos un cargo es grabado entonces permitir grabar el encabezado de la liquidación.
        * Solución de problema al agregar conceptos adicionales (uso de equipo no existía posición en array y cuando no había tarifa de equipo no existía
            la variable wfacturable)
        * (Abril 09 2015) Al agregar un procedimiento a la lista, se muestra la modalidad respecto a la primer empresa responsable.
        * (Abril 09 2015) Al momento de liquidar la cirugía no estaba borrando o limpiando la liquidación en pantalla, se corrige para que solo deje en pantalla
            los datos de la liquidación si hubo un error en la validación de tarifas de cargos.
        * (Abril 09 2015) Modificación para que siempre requiera escribir la vía, se adiciona una mensaje de alerta al agregar el procedimiento informando cuál
            dato hace falta por ingresar para agregar el procedimiento.
 - Marzo 31 2015:
        * Modificaciones para que el momento de liquidar conceptos por rangos de tiempo, tenga en cuenta que si es concepto de uso de equipos solo tenga en cuenta
            el tiempo correspondiente en el campo de uso de equipos, si es concepto de recuperación y en la plantilla está configurado por rangos de tiempos,
            entonces tenga en cuenta el campo de tiempo recuperación, en cualquier otro caso se toma como rango de tiempo el campo de duración de la cirugía.
 - Marzo 30 2015:
        * Se modifica para que el valor a cobrar se redondee cuando sea necesario pero despues de aplicar el porcentaje de liquidación,
            En wvaltar se envía a unix el valor original de la tarifa de matrix o recalculada si se redondeó.
        * Modificación para que, cuando un cargo tiene error de tarifa (no hay) no muestre error de tarifa si en el manual de cirugías
            se debe cobrar 0% de ese cargo o concepto.
        * Se aprovecha el cambio anterior para poner como no facturables los cargos que se deben cobrar 0% (porcentaje del manual de cirugías).
        * Al momento de consultar la modalidad del procedimiento para recuperar el límite de ayudantía se debió usar la función modalidadPuntosProcedimiento
            para que se busque tambien en la 000070 y ver si existe una modalidad personalizada y no tenga en cuenta la que aparece en 000103, esto
            estaba generando un problema al intentar recuperar el liminte de ayudantía para el SOAT. No validar error de tarifa si es cargo de ayudantía
            y no se debe cobrar porque está por debajo del límite de cobro de ayudantía.
 - Marzo 27 2015:
        * Al momento de crear el array para grabar los cargos se verifíca que no sea un concepto de inventario y en la cantidad se representa
            el porcentaje a liquidar de ese concepto con el fin de colocar ese valor en las tablas de unix, allí se representa el porcentaje en el mismo
            campo de cantidad.
        * Nueva opción desde el manual de cirugías para saber si se deben redondear los las cifras a la centena más cercana por debajo. Por ejemplo para el
            SOAT no se deben mostrar valores xxx.x50  xxx.xx20, deben ser redondeados por ejemplo a xxx.100 o xxx.200
 - Marzo 25 2015:
        * Modificación para paquetes, al momento de grabar ir a grabar los cargos se revisa si es paquete, en ese caso se envía en el código
            de procedimiento no el código del paquete sino el código del procedimiento asociado al paquete, para el uso de quipos se pone
            el nombre del paquete porque ese concepto no trae asociado el nombre del procedimiento.
        * En el detalle de la liquidación tambien se hace la modificación para que aparezca el nombre del paquete con base al nombre guardado en
            la tabla 000106.
 - Marzo 19 2015:
        * Nueva variable en root_81 "erp_liq_cx_inactivar_cuadro_turno" para indicar a que conceptos no se les debe solicitiar disponibilidad
            desde la interfaz, no se mostrará el campo de disponible (por defecto, automáticamente se inicializan como disponibles)
        * la variable "wpaquete" siempre estaba quedando inicializada en "off".
        * Marzo 20, Nota para indicar que existe un cron que actualiza los cargos de insumos en unix tal como quedaron en Matrix.
 - Marzo 18 2015:
        * Se alimina la instrucción odbc_autocommit.
        * El campo cuadro de turno se actualiza tambien con el onchange del campo disponibilidad. Ántes solo se actualizaba con el cambio de médico.
        * La variable cuadro de turno en el array de liquidados siempre se estaba seteando en "1" aún cuando se estaba inicializando en valor vacío.
            la causa era que en un condicional se estaba usando erradamente la operación "difetente de" "=!".
        * La disponibilidad se deja por defecto como "disponible" solo para los casos en que hay un tercero por defecto.
 - Marzo 17 2015:
        * Nueva validación "validar_paciente_activo_unix" para que no se permita liquidar una cirugía de una paciente que aparece inactivo en unix, con esto evitar
            que se presenten errores en el integrador al tratar de grabar cargos a un paciente que aparece inactivo en unix.
        * Adión de indicador loading al lado del botón de anulación para indicar que se si se está ejecutando la operación de anulación (Antes se apretaba el botón
          y no se sabía si se estaba ejecutando la anulación o no).
 - Marzo 13 2015:
        * Se crea función consultarPorcentajesTercero para consultar en un solo lugar "datos_desde_tercero" para encontrar más facilmente los cuadros de turno de un médico.
        * Desde "datos_desde_tercero" ahora se lee el campo wterunix y se llega hasta la función de cargos para que en unix se pueda guardar el cargo con el código
            correcto del médico.
        * Al seleccionar un responsable se busca inmediatamente si tiene más de un cuadro de turno y muestra las opciones en pantalla.
        * Según la disponibilidad y posible cuadro de turno elegido se recalcula el porcentaje de participación del médico. Disponibilidad y cuadro de turno solo se activan si es concepto de tercero.
        * En la interface se muestra a manera de información el porcentaje que le correspondería al médico.
 - Marzo 09 2015:
        * Implementación de una nueva regla para indicar excepciones tarifarias para los médicos, se crea el maestreo 000141 para indicar si para un médico-concepto-empresa
            existe una excepción a la tarifa, en ese caso se permite cambiar el valor que pide el médico desde la liquidación solo si el concepto es modificable de valor,
            además, si son varias cirugías en la liquidación solo se permitirá modificar el primer cargo para cada médico, el resto de cargos para cada médico no se permitirá
            modificar valor y esos cargos tendrán costo cero (0).
        * Nueva función "medicoExcepcionTarifaria" para buscar posible excepción tarifaría de médico-concepto-empresa.
        * En los cargos de conceptos se modifica el campo de especialidad y tercero para que siempre tome el médico y especialidad que se escriban desde la interface de liquidación,
            si no hay datos de tercero y especialidad entonces toma como base el tercero y especialidad que se agreró junto al procedimiento.
 - Febrero 27 2015:
        * Se crear la función "validarSaldosYUnixLiquidacionCx" para validar si hay insumos que no tienen registro de saldo en unix "ivsal"
            en caso de no encontrar un registro de saldo entonces inserta un registro nuevo en esa tabla pero con saldos en cero, esto se hace
            para que no se generen errores de falta de saldo al momento de liquidar insumos de la cirugía (se arregla el problema automáticamente
            antes de empezar a grabar los cargos de los insumos que no tiene ese registro de saldo)
 - Febrero 23 de 2015:
        * Modificación para que al momento de anular desde el detalle de liquidaciones solo se permita anular si la historia-ingreso están activos, en caso contrario se muestra un mensaje.
        * Se realiza una actualización para que se permita mostrar el detalle de paquetes, no estaba apareciendo, por tanto, no se estaba permitiendo anular un paquete.
 - Febrero 19 de 2015:
        * Se modifica la forma de leer el valor de los conceptos en paquetes, ahora se hace con base al tiempo de la cirugía, con ese dato
            se busca el rango de tiempo que más se ajusta a la tarifa y con ello devuelve el valor para cada concepto.
 - Febrero 16 de 2015:
        * Se crea una nueva función "liquidar_con_cco_quirofano" para verificar si se debe cambiar el centro de costos del grabador por el centro de costos
            del quirófano en el que fue intervenido el paciente, esta modificación se hace con el fin de poder liquidar las cirugias del tercer piso
            cuyo centro de costos es el 1191 a diferencia del 1016 que son las cirugías del segundo piso. Para esto se crea un párametro nuevo en root_51
            "liquidar_con_cco_quirofano" que con estado on indica que se debe liquidar con el cco del quirófano.
 - Febrero 03 de 2015:
        * Se lee el nuevo campo creado en el encabezado de manuales donde se indica si los insumos se deben validar si y no facturables en la tabla de relación
            empresa insumo (cliame_214)
        * En la parte de simular el cargo para insumos ahora se activa la sección de código que valída políticas para insumos.
 - Diciembre 29 2014:
        * En el proceso de liquidación se envían algunas variables globales a la función GrabarCargo para que sean tenídas en cuenta en la liquidación
            de insumos en unix.
        * En las consultan para buscar los insumos del mercado se adiciona una condición para mostrar solo los insumos con saldo mayor a cero para grabar.
 - Diciembre 22 2014:
        * Se realiza una mejora en la respuesta de los cargos que generaron un tipo de error, para que no se repita el varias veces el texto de un mismo error,
            se agrupan los códigos de los cargos que generaron el error y se muestra un solo mensaje haciendo referencia a esos códigos de cargos.
        * Se crea un nuevo campo en el encabezado de las cirugías liquidadas con el fin de guardar en ese campo un log de los cargos que generaron error en
            la liquidación.
 - Diciembre 19 2014:
        * En la función de anular al acto quirúrgico hacía falta tener en cuenta el código del turno.
        * Se cambió la consulta para listar los organos, se creó un nuevo maestro de partes del cuerpo, en ese mismo maestro se especifíca si la parte del cuerpo es bilateral o no.
 - Diciembre 17 2014:
        * Se lee el nuevo campo creado en el encabezado del manual de cirugías para saber si el mercado será no facturable y sus clasificaciones serán facturables.
        * Para liquiar una cirugía se debe seleccionar el turno según la agenda de cirugías (solo se mostrarán los turnos que ya tienen mercado grabado), este campo
            es útil porque al momento de liquidar el mercado se buscan los insumos por el código del turno además de la historia e ingreso.
        * Se crea un campo en las tablas de encabezado y de detalle de liquidación para guardar el código del turno al que pertenece el cargo.
        * Se crea una nueva funcionalidad para liquidar solo los insumos de una cirugía, si este campo esta seleccionado entonces no se tendrán en cuenta las
            plantillas de cirugía y solo se van a mostra los insumos que se encuentren para ese turno, si es un procedimiento que no supera el límite de puntos entonces
            se mostrará el concepto de materiales y medicamentos que se debe cobrar adicional, si no se supera el límite entonces solo se muestran los insumos.
        * Al cargar los datos del paciente también se buscan los turnos de cirugía activos con mercado para permitirlos liquidar (se muestan en un campo tipo select).
            Al momento de seleccionar el turno a liquidar se muestra una descripción de los procedimientos realizados según la agenda cirugía.
 - Noviembre 12 de 2014:
        * Se cambia el campo "Regiones del cuerpo" por organos, devolviendo asi un cambio anterior.
        * Se valída el estado de historia "vacía" bloqueada para que no muestre el mensaje diciendo que la cuenta está bloqueada desde la liquidación de estancia.
 - Noviembre 12 de 2014:
        * Modificación al momento de agregar equipo al concepto uso de equipos desde un paquete configurado, no se estaba agregando correctamente y estaba generando
            un problema en la liquidación mostrando en pantalla algo que no era acorde (Se activó el llamado a la función "agregarEquiposExamenes" para agregar
            correctamente los equipos).
        * Se agregó la clase CSS "bloquear_todo" y con esa clase poder controlar que se inactiven todos los botones, checkbox y selects para evitar hacer varias
            peticiones al servidor sin esperar la respuesta de la petición anterior, esto es útil cuando el servidor no responde rápido dando la impresión de no haber
            dado click.
        * En la liquidación de paquetes ahora se permite modificar los insumos indicando si es o no facturable, ademas de poderlos cambiar todos con un solo clic,
            la función encargada de modificar el array de datos liquidados ahora tiene en cuenta si debe modificar un solo facturable o una lista. El "case" para
            actualizar equipo facturable ahora funciona tambien para actualizar si un insumo es facturable o no (aplica para paquetes).
        * Modificación en la sección de liquidación de insumos para saber si se está liquidando un paquete, tener en cuenta si el grabador indicó si uno o varios
            insumos fueron cambiados a facturable o no facturable. Si son insumos de una liquidación sin paquetes, sigue teniendo en cuenta primordialmente las
            clasificaciones de insumos no facturables.
        * Correción en la sumatoria TOTAL para cada procedimiento, estaba sumando los equipos que se elegían para no grabar.
        * El evento de los campos checkbox, select o autocompletar de los cargos en liquidación, se cambió para que al momento de modificar uno de esos campos
            imendiatamente se actualice el array de datos liquidados y se active el botón de "actualizar liquidación", con el anterior evento se debía primero modificar
            el campo, dar un click luego en algún lado del formulario para que se pudiera actualizar ese array antes de "actualizar liquidación".
        * Se agrega el código de la especialidad al seleccionador de especialidades.
        * Había un problema en el condicional que determina si un tercero tiene o no porcentaje de participación, la instrucción empty() estaba arrojando vacío cuando
            llegaba un porcentaje de participación con valor "0", eso generalmente sucede cuando el medico está en turno.
 - Noviembre de 2014:
        * Ocultar imagen de borrar en el tooltip de cirugías pendientes.
        * Se soluciona inconveniente aL tratar de encontrar un manual de liquidación, Para manual EPS estaba encontrando solamente el manual
            que aplica solo para el procedimiento subclavio, se corrigió la consulta para que tenga en cuenta de manera adecuada el campo de procedimiento
 - Octubre 31 de 2014:
        * Se crea un nuevo campo en la tabla 000231 para diferenciar los cargos que no tienen tarifas, este nuevo campo identifica si es para conceptos que
            permiten modificar valor, conceptos que no permiten modificar valor o son cargos de insumos sin tarífa.
            TIPOS DE CARGOS SIN TARIFA
                * MODIFICAN_VALOR
                * NOMODIFICAN_TARIFA
                * INSUMOS
        * Se cambia el nombre "Organo" por "Región del cuerpo".
        * Se crea nueva función y secuencia para guardar los cargos sin tarifa de cada unos de los tipos descritos anteriomente, se muestra el detalle en
            una nueva tabla html donde el grabador puede ver los cargos sin tarífa, del mismo modo pueden viajar hasta los monitores, cada que se actualice
            la liquidación se reinician los registros grabados en la tabla de cargos sin tarífa, esto se hace porque puede ser que se haya digitado un código
            por error que no tiene realemente tarífas, o simplemente ya se creó o se crearon las tarífas correspondientes y ya no es necesario mostrar esas
            alertas en los monitores.
        * No se permite guardar la liquidación si hacen falta cargos a los que les hace falta una tarifa.
        * Se crea una copia de la función JS "crear_variables_compartidas()" que está en el programa de "Cargos_ipsERP", esta función se encarga de crear
            la variables compartidas en el contenedor para que los programas de facturación puedan funcionar y se puedan cominicar mediante el paso de variables,
            se copió al programa de liquidación porque es posible que más adelante se les dé acceso a los grabadores directamente al programa de liquidación
            de cirugía y estos campos no existirían si a esos grabadores no se les permite el acceso al programa "Cargos_ipsERP" que era el encargado de inicializar
            las variables compartidas.
        * Se corrigió un problema en el select de vías, no se estaba iniciando con todas las vías que se digitaban cuando se recuperaba una liquidación que
            estaba guardada temporalmente.
        * Cuando se intentaba recuperar una cirugía de la lista de cirugías pendientes, estaba pidiendo confirmación para recuperar liquidación en proceso o
            generar nueva cirugía, esta confirmación se elimina validando si existe un ID de cirugía pendiente que se esté intentando recuperar. Modificación
            realizada en la función "validarEstadoDeCuentaCongelada".
 - Octubre 28 de 2014:
        * Se modifica la función "crearArrayPorcentajesMultiples" para que tenga en cuenta el código de procedimiento para buscar un posible manual
            de cirugías configurado para un procedimiento (por ejemplo para el caso de la conización).
        * Mejora en la función "validarCirugiaMayorACobrarConcepto" para corregir un problema al momento de comparar dos o mas cirugías con la misma
            cantidad de puntos (UVR, GRUPO) el programa no estaba conservando en esta función el orden adecuado de los procedimientos con misma cantidad de puntos.
        * Por defecto ahora todos los insumos serán FACTURABLES, ántes la lógica estaba invertida, considerando todos los insumos como NO facturables,
            en este sentido, se ejecutaron cambios al programa para tener en cuenta las clasificaciones de insumos configuradas en manuales de cirugía,
            si el procedimiento no supera el límite de UVR o GRUPO entonces se pondrán solo como no facturables las clasificaciones configuradas, pero
            si el procedimiento superó el límite de puntos entonces solo serán no facturables las clasificaciones configuradas cuando se supera el límite.
        * Al momento de guardar los cargos, se envía el ID de tope a la función "GrabarCargo" para que esta función sea la encargada de modificar
            los cargos correspondientes y no hacerlo fuera de esa función (no se veía la necesidad de hacer un update en el programa de liquidación,
            sabiendo que la función de grabar cargo ya tiene en cuenta los ID topes).
        * Los cargos sin tarifa de insumos dejan de guardarse en el log de conceptos sin tarifa que permiten modificar valor. (tablas 000230, 000231).
        * Ya no se tiene en cuenta la validación para insumos con la función "CondicionMedicamento". solo se tendrá en cuenta las clasificaciones no facturables,
            esta modificación surge de una de las reuniones del grupo de facturación inteligente.
        * Cuando un cargo se desmarca en "Grabar" se muestra la casilla con un estilo diferente para que el grabador se de cuenta que cuales son los cargos
            que no estan chequeados (puede ser porque no tengan tarifa, el programa no los seleccionó despues de haber creado la tarifa o simplemente
            el grabador lo desmarcó).
        * Se complementa información a mostrar en los datos que se muestran en pantalla cuando no hay tarífa para algunos cargos.
        * Se implementa nueva advertencia, no se permite liquidar el acto quirúrgico si no hay por lo menos un insumo grabado para algunos de los procedimientos
            del acto quirúrgico.
        * Cuando se estan eliminando procedimientos de la lista de liquidación ahora se permite eliminar de a uno, hasta que no haya una respuesta exitosa
            de eliminación no se activan las demás opciones para borrar otro procedimiento de la lista, esta funcionalidad se implementa porque por momentos
            el servidor Matrix o la red puede estar respondiendo de manera lenta y antes pudiendo borrar asincronamente los procedimientos podría generar
            problemas en la liquidación.
        * Cuando se estaba liquidando una historia y ya se habían agregado procedimientos a la liquidación pero se modificaba la historia, no se estaba
            reseteando el acto quirúrgico para la nueva historia (sobre todo cuando para esa nueva historia se elegía "Nueva liquidación" si ya tenía
            una liquidación guardada).
 - Octubre 09 de 2014:
        * Cuando se leen los porcentajes de porcentajes múltiples se tiene en cuenta el nuevo campo que indica hasta que cantidad máxima de cirugías se cobra un
            concepto sin importar especialidad.
        * Modificaciónes a la lógica en la liquidación de cirugías bilaterales y diferentes especialidades con diferentes vías:
            - Cuando es diferente via y diferentes especialidad, ahora tiene en cuenta hasta que cantidad máxima de cirugía se puede cobrar un concepto (por ejemplo
                hasta la segunda cirugía mayor).
            - Si una cirugía es mayor a una cirugía bilateral entonces se pierde la bilateralidad (pero se conservan las dos cirugías deribadas de la bilateral).
            - Si hay diferente especialidad y hay una cirugía bilateral se pierde la bilateralidad.
            - Si una cirugía bilateral tiene la misma cantidad de puntos que una tercer cirugía del mismo especialista, siempre se debe cobrar primero la cirugía
                bilateral.
        * Modificanciones en la liquidación de materiales y medicamentos: Ahora si una sola cirugía de varias supera el límite de puntos entonces a ninguna se le
            cobra el concepto 0168, pero si nunguna cirugia supera el límite entonces a todas las cirugías se les cobra el concepto 0168. Se está creando un solo
            mercado sin importar a que procedimiento se le tenga grabado, solo importa un mercado y todos los insumos en la liquidación se asocian siempre al primer
            procedimiento de la liquidación.
        * Modificaciones en el proceso para determinar el orden de las cirugías cuando la modalidad es por código, en este caso lo que se debe hacer es saber el
            costo de cada cirugía, para esto se implementó un nuevo proceso encargado de sumar todos los conceptos de cada procedimiento, consultar su respectiva
            tarifa y sumar en un solo valor dando como equivalente el precio total de cada cirugía y poder ordenarla de mayor a menor.
        * Se implementó que cuando una tarifa o varias existan en un nuevo parámetro creado en la tabla root_51 determine que para los conceptos que pueden digitar
            valor, siempre deben permitir digitar valor y no dejar de hacerlo si se crea una tarifa en el maestro de tarifas (siempre debe permitir escribir valor).
        * Se implementa un nuevo proceso encargado de mostrar en pantalla todos los conceptos o cargos que no se les encontró tarifa, esto hace que no se continúe
            con la liquidación y se detenga pero permita mostrar el detalle de los parámetros usados para buscar una tarifa que no pudo ser encontrada en el maestro de tarifas.
        * Se detectó y se corrigió un inconveniente cuando se pedía valor para un concepto, pues cuando habían varias cirugias y se escribía un valor y se
            actualizaba la liquidación, el valor digitado inicialmente empezaba a dismuir tras cada actualización debido a que siempre le aplicaba el porcentaje equivalente
            al manual de cirugías y no lo hacía sobre la tarifa originalemente digitada sino cada vez sobre el valor recalculado.
 - Octubre 01 de 2014:
        * El tipo de procedimiento E:Examen, P:Procedimiento ya no tiene validéz, debído a esto en root_51 se marcan los conceptos
            uso de equipos y ayudas diagnósticas para poder solicitar agregar equipos o exámenes cuando se escriben estos dos conceptos,
            ya no hay posibilidad de filtrar solo equipos o solo exámenes, se modifican entonces las consultas para traer todos los códigos
            de la tabla 103 y poder agregar el que se desee asociado a equipo o exámen.
 - Septiembre 30 de 2014:
        * Se adicionan dos nuevos parámetros al llamado de la función "ValidarSiEsFacturable".
 - Agosto 19 de 2014:
        * Mejora, cuando una história e ingreso tienen cirugías pendiente por liquidar por falta de tarifa y al digitar
            la historia en el campo correspondiente pueden aparecer las opciones de "Recuperar" o "Nueva", cuando se escoge
            nueva cirugía, esta acción hará que se desacarte la cirugía pendiente de liquidar por falta de tarífa para esa historia e ingreso.
        * El campo de procedimientos fue mejorado para que muestre los códigos personalizados que se encuentran en la relación
            empresa procedimiento, de esta menera se puede digitar el código CUPS o bien el codigo personalizado de una procedimiento.
        * Se crean tres nuevos campos para la auditoria de cirugias liquidadas, se crean los campos de fecha, hora y usuario
            que anula una liquidación (000198, 000199).
        * Se tiene en cuenta el campo "codHomologar" que se usa cuando la función de tarifas devuelve un código personalizado
            para un cargo, este código se usará en la grabación del cargo para ser enviado a unix  en cambio del código del procedimiento origianl.
        * Cuando una liquidación le falta alguna tarífa para un concepto que pide valor, ese acto quirúrgico inmediatamente
            se carga en la sección "Cirugías pendientes por liquidar por falta de tarifa", antes se debía recargar la página para
            poder actualizar esa nueva sección.
 *  Agosto 12 de 2014
    Edwar Jaramillo     : Se documentan las funciones del programa que estaban pendientes por documentar.
 *  Noviembre 20 de 2013
    Edwar Jaramillo     : Fecha de la creación del programa.


*** NOTAS ***
Estados de cargos sin tarífas
    * PR: Pendiente revisión
    * CO: Corregido

TIPOS DE CARGOS SIN TARIFA
    * MODIFICAN_VALOR
    * NOMODIFICAN_TARIFA
    * INSUMOS

**/
global $ccotema;
global $wbasedato_HCE, $bordemenu;

$fecha_actual = date("Y-m-d");
$hora_actual  = date("H:i:s");





include_once("../../gesapl/procesos/gestor_aplicaciones_config.php");
include_once("../../gesapl/procesos/gesapl_funciones.php");
$wbasedato = consultarPrefijo($conex, $wemp_pmla, $wtema);
include_once("ips/funciones_facturacionERP.php");


if(isset($accion) && !array_key_exists('user',$_SESSION))
{
    $msjss = "Recargue o inicie sesión nuevamente en la página principal de Matrix para que pueda seguir utilizando este programa normalmente.";
    $data = array('error'=>1,'mensaje'=>$msjss,'html'=>'');
    echo json_encode($data);
    return;
}
$user_session      = explode('-',$_SESSION['user']);
$user_session      = $user_session[1];
$user_session_wemp = empresaEmpleado($wemp_pmla, $conex, $wbasedato, $user_session);

// Incluye variables globales de tablas de parametrización y funciones comunes al módulo.
// include_once ("ayudasdx_config.php");


/*****  DICCIONARIO LOCAL *****/
define('PROCEDIMIENTO'      ,'Procedimiento');
define('CONCEPTO_LABEL'     ,'Concepto');
define('TARIFA'             ,'Tar&iacute;fa');
define('ENTIDAD'            ,'Entidad');
define('TIPO_INGRESO'       ,'Tipo ingreso');
define('BASE_LIQUIDACION'   ,'Base liquidaci&oacute;n');
define('NOMBRE_PLANTILLA'   ,'Nombre plantilla');
define('_VIA_'   ,'V&iacute;a');
define('ESPECIALISTA'   ,'Especialista');
define('ESPECILALIDAD'   ,'Especialidad');
define('ORGANO'   ,'Parte del cuerpo');
define('BILATERAL'   ,'Bilateral');
define('TIEMPO_MINUTOS'   ,'Tiempo (Minutos)');
define('TERCERO_LABEL'   ,'Tercero');

define('ANESTESIA'          ,'Anestesia');
define('TIEMPO_INICIAL_MTS' ,'Tiempo inicial (Minutos)');
define('TIEMPO_FINAL_MTS'   ,'Tiempo final (Minutos)');
define('CODIGO_RANGO'       ,'C&oacute;digo rango');
define('PREF_POL'           , 'PCX');
define('TIEMPO'             , 'Tiempo');
define('LB_PAQUETE'         , 'Paquete');

/**********  TABLAS  **********/
define('TB_ENCABEZADO'      ,'000180');
define('TB_COBRO_HORA'      ,'000181');
define('TB_COBRO_ANESTESIA' ,'000182');
define('TB_COBRO_USO'       ,'000183');

define('TB_BASE_LIQUIDACION','000186');
define('TB_BASE_LIQ_ACTOSQX','000187');
define('TB_BASE_LIQPORCENTA','000188');
define('TB_LIQUIDACIONES'   ,'000198');
define('TB_ENC_LIQUIDACION' ,'000199');
define('TB_BILATERALES'     ,'000201');
define('TIPO_FACTURACION_PAQUETE' ,'PAQUETE');
define('CANTIDAD_DECIMALES' ,1);
define('PRO_NOPOS' ,"NO POS");
define('PROPOS' ,"POS");
define('LIQ_NORMAL' ,"");
define('ENC_AUDITORIA_252' ,"000252"); // Tabla del encabezado de auditoría, turno de cirugía y estados de auditoría [updt-83]
define('DLL_AUDITORIA_253' ,"000253"); // Tabla del detalle de la auditoría, procedimientos asociados al turno de cirugía [updt-83]

$caracteres  = array("á","é","í","ó","ú","Á","É","Í","Ó","Ú","ñ","Ñ","ü","Ü",",","/","à","è","ì","ò","ù","À","È","Ì","Ò","Ù","Â","§","®","'","?æ","??", "?£", "°");
$caracteres2 = array("a","e","i","o","u","A","E","I","O","U","n","N","u","U","-","-","-","a","e","i","o","u","A","E","I","O","U","A","S"," ","","N","N", "U", "");


$hay_unix 		= consultarAplicacion($conex,$wemp_pmla,"conexionUnix");
$graba_unix 	= consultarAplicacion($conex,$wemp_pmla,"grabarUnix");
if($hay_unix == "off" && $graba_unix == "on" ){
	echo '<br/><br/><br/><br/>
		<div style="color: #676767;font-family: verdana;background-color: #E4E4E4; text-align:center;" >
			[?] PROGRAMA NO DISPONIBLE...<br />Nos encontramos en una ventana de mantenimiento, por favor intente ingresar mas tarde, Disculpas por las molestias.
		</div>';
	return;
}
	
	
/**
    Reiniciar datos sesión
*/
function reiniciarDatosSesion()
{
    $arr_politica = array(); //unset($_SESSION['arr_conceptos']);
    return $arr_politica;
}

/**
 * [seguimiento description: Función para uso solo de desarrollo, en ambiente local, crea un archivo de texto donde se imprimen variables y arrays para su seguimiento]
 * @param  [type] $seguir [Cadena de texto a guardar en el archivo, para guardar array recordar usar print_r($al_array, true), puede usar saltos de línea PHP así PHP_EOL ]
 * @return [type]         [description]
 */
function seguimiento($seguir)
{
    /*if (file_exists("seguimiento.txt")) {
        unlink("seguimiento.txt");
    }*/
    $fp = fopen("seguimiento.txt","a+");
    fwrite($fp, "[".date("Y-m-d H:i:s")."]".PHP_EOL.$seguir);
    fclose($fp);
}

/**
 * [seguimiento description: Función para uso solo de desarrollo, en ambiente local, crea un archivo de texto donde se imprimen variables y arrays para su seguimiento]
 * @param  [type] $seguir [Cadena de texto a guardar en el archivo, para guardar array recordar usar print_r($al_array, true), puede usar saltos de línea PHP así PHP_EOL ]
 * @return [type]         [description]
 */
function guardar_log_txt($seguir, $arc_log)
{
    /*if (file_exists("seguimiento.txt")) {
        unlink("seguimiento.txt");
    }*/
    $fp = fopen($arc_log.".txt","a+");
    fwrite($fp, "[".date("Y-m-d H:i:s")."]".PHP_EOL.$seguir);
    fclose($fp);
}

function consultarPosicionesOrganos($conex, $wbasedato, $wemp_pmla)
{
    $posiciones_para_organos = consultarAliasPorAplicacion($conex, $wemp_pmla, 'posiciones_organos');
    $exp_posiciones = explode(";",$posiciones_para_organos);
    $arr_posciones_organos = array();
    foreach ($exp_posiciones as $key_tem => $value)
    {
        $explode_tmp = explode("-", $value);
        if(!array_key_exists($explode_tmp[0], $arr_posciones_organos))
        {
            $arr_posciones_organos[$explode_tmp[0]] = "";
        }
        $arr_posciones_organos[$explode_tmp[0]] = $explode_tmp[1];
    }

    return $arr_posciones_organos;
}

function array_base_liquidacion($conex, $wbasedato)
{
    $sql = "SELECT  Blqclq AS codigo, Blqdes AS nombre
            FROM    {$wbasedato}_000186
            WHERE   Blqest = 'on'
            ORDER BY Blqdes";
    $result = mysql_query($sql,$conex) or die("Error: ".mysql_errno()." ".$sql." - ".mysql_error());
    $arr_liquidacion = array();
    while ($row = mysql_fetch_array($result))
    {
        $arr_liquidacion[$row['codigo']] = utf8_encode($row['nombre']);
    }
    return $arr_liquidacion;
}


/**
 * [nombreDiaSemana description: Esta función recibe los número de año, més y día, y devuelve el nombre del día de la semana en la fecha indicada]
 * @param  [type] $ano [description]
 * @param  [type] $mes [description]
 * @param  [type] $dia [description]
 * @return [type]      [String, nombre del día de la semana]
 */
function nombreDiaSemana($ano,$mes,$dia)
{
    $nameDias[] = 'Domingo';
    $nameDias[] = 'Lunes';
    $nameDias[] = 'Martes';
    $nameDias[] = 'Miercoles';
    $nameDias[] = 'Jueves';
    $nameDias[] = 'Viernes';
    $nameDias[] = 'Sabado';
    // 0->domingo    | 6->sabado
    $dia= date("w",mktime(0, 0, 0, $mes, $dia, $ano));
    return $nameDias[$dia];
}

/**
 * [crear_posicion_lista_equipo_examen: Se encarga de adicionar en el array "arr_conceptos_liquidar" las posiciones correspondientes a equipos o examenes
 * de manera separada y cada que se quiera agregar un nuevo equipo o examen, esta función se encarga de validar si está o no para agregarlo a la lista]
 * @param  [type] $arr_conceptos_liquidar [Array de conceptos a liquidar en el acto quirúrgico, se usan en la columna de conceptos en la pantalla de liquidación]
 * @param  [type] $concepto_codigo        [Código del concepto a agregar en la lista si no existe lo crea, si existe entonces solo agrega el examen o equipo]
 * @param  [type] $add_equipo             [Código del examen o equipo a gregar a la lista]
 * @param  [type] $add_equipo_nombre      [Nombre del examen o equipo que se agregó a la lista]
 * @param  [type] $nombre_lista           [Indica el indice al que se debe agregar el nuevo elemento de la lista, a la lista "lista_equipos" ó "lista_equipos"]
 * @return [type]                         [description]
 */
function crear_posicion_lista_equipo_examen(&$arr_conceptos_liquidar, $concepto_codigo, $add_equipo, $add_equipo_nombre, $nombre_lista, $wvaltar)
{
    if(array_key_exists($concepto_codigo, $arr_conceptos_liquidar) && !array_key_exists($nombre_lista, $arr_conceptos_liquidar[$concepto_codigo]))
    {
        $arr_conceptos_liquidar[$concepto_codigo][$nombre_lista] = array();
    }

    if(!array_key_exists($add_equipo, $arr_conceptos_liquidar[$concepto_codigo][$nombre_lista]))
    {
        $arr_conceptos_liquidar[$concepto_codigo][$nombre_lista][$add_equipo] = array("nombre"=>$add_equipo_nombre, "codigo"=>$add_equipo, "valor_tarifa"=>$wvaltar);
    }
}

/**
 * [agregarEquiposExamenes: Esta función valida si el concepto a agregar a la lista de conceptos liquidados corresponde a equipos o examenes, de acuerdo a eso
 *         identifíca a que lista lo agregará, si a "lista_equipos" ó "lista_examenes", el array de "arr_datos_liquidados" es útil en esta función por que
 *         ese array contiene la información de los conceptos, procedimientos, examenes, equipos que ya estan en proceso de liquidación, es decir, ya presionó por lo menos una vez
 *         el boton liquidar y se hizo un preliquidación, si se presiona de nuevo el boton liquidar entonces se usan los datos de "arr_datos_liquidados" para reconstruir los datos
 *         que ya estaban en pantalla y no se pierda información, por ejemplo si agregaron un concepto que no estaba en plantillas o agregaron un nuevo equipo o un nuevo examen
 *         en la pantalla de liquidación mediante la opción o el campo "Agregar concepto"]
 * @param  [type] $arr_conceptos_liquidar     [Array de conceptos a liquidar en el acto quirúrgico, se usan en la columna de conceptos en la pantalla de liquidación]
 * @param  [type] $concepto_codigo            [Concepto para agregar a la lista]
 * @param  [type] $procedimiento_bilat_dif    [Si procedimiento liquidado es igual a procedimiento_add significa que el examen o equipo a adicionar debe hacerlo en esa posición
 *                                            y verificar si no existe la lista para crearla "crear_posicion_lista_equipo_examen" y adicionar el equipo-examen nuevo]
 * @param  [type] $procedimiento_liquidar_cod [Se dejó de necesitar en la función]
 * @param  [type] $wprocedimiento_add         [Si procedimiento liquidado es igual a procedimiento_add significa que el examen o equipo a adicionar debe hacerlo en esa posición
 *                                            y verificar si no existe la lista para crearla "crear_posicion_lista_equipo_examen" y adicionar el equipo-examen nuevo]
 * @param  [type] $arr_datos_liquidados       [Array buffer donde esta una posible liquidación en curso y contiene datos que se han ido agregando durante la pre-liquidación
 *                                            (equipos, examenes, nuevos conceptos que no estan plantillas)]
 * @return [type]                             [description]
 */
function agregarEquiposExamenes(&$arr_conceptos_liquidar, $concepto_codigo, $procedimiento_bilat_dif, $procedimiento_liquidar_cod, $wprocedimiento_add, $arr_datos_liquidados, $add_equipo, $add_examen, $add_equipo_nombre, $add_examen_nombre, $wvaltar)
{
    global $id_concepto_uso_equipos, $id_concepto_examenes;

    if($concepto_codigo == $id_concepto_uso_equipos || $concepto_codigo == $id_concepto_examenes)
    {
        switch ($concepto_codigo)
        {
            case $id_concepto_uso_equipos: // Cuando se está añadiendo un equipo
                if(!empty($add_equipo) && $procedimiento_bilat_dif == $wprocedimiento_add)
                {
                    crear_posicion_lista_equipo_examen($arr_conceptos_liquidar, $concepto_codigo, $add_equipo, $add_equipo_nombre, "lista_equipos", $wvaltar);
                }

                if(array_key_exists($procedimiento_bilat_dif, $arr_datos_liquidados) && array_key_exists($concepto_codigo, $arr_datos_liquidados[$procedimiento_bilat_dif]))
                {
                    foreach ($arr_datos_liquidados[$procedimiento_bilat_dif][$concepto_codigo] as $codigo_equipo_liquidado => $arr_equipos_liquidados)
                    {
                        $equipo_nombre_liquidado = $arr_equipos_liquidados['nombre_examen_equipo'];
                        $wvaltar_liquidado = $arr_equipos_liquidados['wvalor'];
                        crear_posicion_lista_equipo_examen($arr_conceptos_liquidar, $concepto_codigo, $codigo_equipo_liquidado, $equipo_nombre_liquidado, "lista_equipos", $wvaltar_liquidado);
                    }
                }
                break;

            case $id_concepto_examenes: // Cuando se está añadiendo un exámen
                if(!empty($add_examen) && $procedimiento_bilat_dif == $wprocedimiento_add)
                {
                    crear_posicion_lista_equipo_examen($arr_conceptos_liquidar, $concepto_codigo, $add_examen, $add_equipo_nombre, "lista_examenes", $wvaltar);
                }

                if(array_key_exists($procedimiento_bilat_dif, $arr_datos_liquidados) && array_key_exists($concepto_codigo, $arr_datos_liquidados[$procedimiento_bilat_dif]))
                {
                    foreach ($arr_datos_liquidados[$procedimiento_bilat_dif][$concepto_codigo] as $codigo_examen_liquidado => $arr_equipos_liquidados)
                    {
                        $examen_nombre_liquidado = $arr_equipos_liquidados['nombre_examen_equipo'];
                        $wvaltar_liquidado = $arr_equipos_liquidados['wvalor'];
                        crear_posicion_lista_equipo_examen($arr_conceptos_liquidar, $concepto_codigo, $codigo_examen_liquidado, $examen_nombre_liquidado, "lista_examenes", $wvaltar_liquidado);
                    }
                }
                break;

            default:
                # code...
                break;
        }
    }
}

/**
 * [arreglar_procedimientos_bilaterales: Llega un código de procedimiento pero se encarga de revisar si tiene algún texto diferenciador
 *                                         usado por ejemplo cuando se liquidan bilaterales o se escoge una posición del organo,
 *                                         se elimina ese texto diferenciador para retornar el código exacto del procedimiento, si el código
 *                                         no tiene este tipo de diferenciadores entonces simplemente retorna el código normalmente]
 * @param  [type] $codigo_procedimiento [description]
 * @return [type]                       [description]
 */
function arreglar_procedimientos_bilaterales($codigo_procedimiento)
{
    $expl = explode("_", $codigo_procedimiento);
    if(count($expl) > 1)
    {
        $codigo_procedimiento = $expl[0];
    }
    return $codigo_procedimiento;
}


/**
 * [validar_material_medicamento_muevenInv: Función encargada de validar si un concepto que llega por parámetros es un concepto que mueve o no mueve inventarios]
 * @param  [String] $concepto_validar [Código de concepto a validar]
 * @return [Boolean]                  [Retorna true si es concepto que mueve inventario o false en caso contrario]
 */
function validar_material_medicamento_muevenInv($concepto_validar)
{
    global $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv;
    if($concepto_validar == $concepto_medicamentos_mueven_inv || $concepto_validar == $concepto_materiales_mueven_inv)
    {
        return true;
    }
    return false;
}

/**
 * [adicionarTipoCobroPorEmpresa: agrega el tipo de cobro del concepto según la empresa que trae la plantilla, es de utilidad por ejemplo cuando hay una prepagada que hace paralelo,
 *                                 si hay conceptos que solo aplican para prepagada entonces solo se cobra a prepagada o si de soat a prepa. cambia el tipo de cobro estaría cobrando
 *                                 por ejemplo por grupo al soat y por tiempo a la prepa.]
 * @param  [type] $conex                   [description]
 * @param  [type] $wemp_pmla               [description]
 * @param  [type] $wbasedato               [description]
 * @param  [type] &$arr_conceptos_liquidar [description]
 * @param  [type] $concepto_cod_ppal       [description]
 * @param  [type] $tipo_cobro              [description]
 * @param  [type] $cobro_concepto          [description]
 * @param  [type] $cobro_procedimiento     [description]
 * @param  [type] $wresponsable_eps_codigo [description]
 * @return [type]                          [description]
 */
function adicionarTipoCobroPorEmpresa($conex, $wemp_pmla, $wbasedato,&$arr_conceptosLiquidar, $concepto_cod_ppal, $tipo_cobro, $cobro_concepto, $cobro_procedimiento, $wresponsable_eps_codigo)
{
    if(!array_key_exists($wresponsable_eps_codigo, $arr_conceptosLiquidar["empresa_plantilla"]))
    {
        $arr_conceptosLiquidar["empresa_plantilla"][$wresponsable_eps_codigo] = array(  "tipo_cobro"           => $tipo_cobro,
                                                                                        "cobro_concepto"       => $cobro_concepto,
                                                                                        "cobro_procedimiento"  => $cobro_procedimiento);
    }
}

/**
 * [consultarConfiguracionPlantilla: Esta función se encarga de consultar y encontrar una plantilla adecuada para el procedimiento que se va a liquidar.
 *         Cuando se hacen paralelo puede haber la posibilidad de combinar hasta dos plantillas, para poder cobrar los conceptos adicionales que deba
 *         pagar la entidad que está haciendo el paralelo.
 *
 *         Se realizaron modificaciones para que esta misma función se encargue de consultar los conceptos que hacen parte de un PAQUETE siempre y cuando lo que
 *         se está realizando sea una liquidación de paquetes.]
 * @param  [index]  $conex                      [Conexión a la base de datos]
 * @param  [string] $wemp_pmla                  [Código de empresa Matrix-Promotora]
 * @param  [string] $wbasedato                  [Prefijo de las tablas a usar]
 * @param  [string] $procedimiento_liquidar_cod [Código de procedimiento a liquidar]
 * @param  [string] $procedimiento_bilat_dif    [Código del procedimiento con una marca diferenciadora, por ejemplo por posición del organo o bilateral]
 * @param  [array]  $data                       [log de respuesta AJAX - json]
 * @param  [array]  $arr_datos_liquidar         [Parametros generales de la liquidación ]
 * @param  [array]  $arr_conceptos_liquidar     [Conceptos preliquidados, aquí se puede estar vacío inicialmente y se puede ir complementando a medida que se lean plantillas o
 *                                                  se agreguen conceptos a la liquidación]
 * @param  [string] $wprocedimiento_add         [Código de procedimiento al que se le va a agregar un concepto, equipo o exámen de forma adicional]
 * @param  [string] $wconcepto_add              [Código de un concepto adicional que se va a agregar a la liquidación y que no esta en las plantillas]
 * @param  [array]  $arr_extras                 [Array de conceptos que se han agregado a la liquidación en curso. Cuando se da clic en liquidar varias veces, este array ayuda a recuperar
 *                                                  los conceptos que antes se han agregado y que no estan en plantillas]
 * @param  [array]  $arr_lista_conceptos        [Array de todos los conceptos que estan haciendo parte de la liquidación en curso, esto es para ayudar a crear la columna
 *                                                  de conceptos que se ve en la tabla de liquidación]
 * @param  [array]  $arr_conceptos_nombres      [description]
 * @param  [array]  $arr_datos_liquidados       [Este array contiene los procedimientos, conceptos, terceros, entre otros datos que se han generado temporalmente
 *                                                  después de haber dado clic en liquidar]
 * @param  [string] $wresponsable_eps_codigo    [Código de la empresa responsable del paciente]
 * @param  [string] $tarifa_original            [Código de la tarifa de la empresa responsable]
 * @param  [string] $tipoEmpresa                [Código del tipo de empresa responsable del paciente]
 * @param  [string] $wespecialidad              [Código de la especialidad del tercero encargado del procedimiento]
 * @param  [string] $es_paquete                 [Variable que indica con estado en on u off si la liquidación que se está haciendo corresponde
 *                                                  a una liquidación de paquetes o no]
 * @return [type]                               [Retorna array de conceptos a liquidar, parámetros de liquidación de cada concepto, lista de examenes y equipos]
 */
function consultarConfiguracionPlantilla($conex, $wemp_pmla, $wbasedato, $procedimiento_liquidar_cod, $procedimiento_bilat_dif, &$data, $arr_datos_liquidar, &$arr_conceptos_liquidar, $wprocedimiento_add, $wconcepto_add, &$arr_extras, &$arr_lista_conceptos, $arr_conceptos_nombres, $arr_datos_liquidados, $wresponsable_eps_codigo, $tarifa_original, $tipoEmpresa, $wespecialidad, $es_paquete, $wtiempo_minutos_cx)
{
    global $orden_conceptos_por_procedimiento, $id_concepto_uso_equipos, $concepto_recuperacion_erp, $id_concepto_examenes, $add_equipo, $add_examen, $add_equipo_nombre, $add_examen_nombre,
            $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $wfecha_cargo, $plantilla_codigo;

    if(!$es_paquete)
    {
        $plantila_encontrada = 'on';
        $TB_ENCABEZADO       = TB_ENCABEZADO;
        $arr_conf_liquidar = array();

        $variables = array();
        $variables['enc.Encent']['combinar'] = true;
        $variables['enc.Encent']['valor']    = $wresponsable_eps_codigo;

        $variables['enc.Encpro']['combinar']    = true;
        $variables['enc.Encpro']['valor']       = $procedimiento_liquidar_cod;
        $variables['enc.Encpro']['operador']    = "LIKE";
        $variables['enc.Encpro']['comodin_izq'] = "%";
        $variables['enc.Encpro']['comodin_der'] = "%";

        $variables['enc.Enctar']['combinar'] = true;
        $variables['enc.Enctar']['valor']    = $tarifa_original;

        $variables['enc.Encing']['combinar'] = true;
        $variables['enc.Encing']['valor']    = $tipoEmpresa;

        $variables['enc.Encesp']['combinar'] = true;
        $variables['enc.Encesp']['valor']    = $wespecialidad;

        $variables['enc.Encest']['combinar'] = false;
        $variables['enc.Encest']['valor']    = "on";

        // [*********************************************************************************************************************]
        // [************************************************ PASO 1 *************************************************************]
        // [*********************************************************************************************************************]
        // De acuerdo a parámetros generales se combinan para encontrar por lo menos una plantilla que aplique a la liquidación
        $sql = generarQueryCombinado($variables, "{$wbasedato}_{$TB_ENCABEZADO} AS enc");

        $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);

        $plantila_encontrada = 'on';
        $id_plantilla_adecuada = "";
        if(mysql_num_rows($result) > 0)
        {
            $row_plantilla = mysql_fetch_array($result);
            $id_plantilla_adecuada = $row_plantilla['id'];
        }
        else
        {
            $plantila_encontrada = 'off';
        }

        // SI SE ENCONTRÓ ALGUNA PLANTILLA ENTONCES SE BUSCA EL RESTO DE CONFIGURACIÓN
        // Por ejemplo la forma de liquidar el concepto, si es por tiempo de uso, por horas, por tipo de anestesia.
        if($plantila_encontrada == 'on')
        {
            // [*********************************************************************************************************************]
            // [************************************************ PASO 2 *************************************************************]
            // [*********************************************************************************************************************]
            // Si en PASO 1 se encontró un registro, con el id de ese registro se consulta el resto de información en el siguiente QUERY
            // Consulta para ver si tiene plantilla configurada con entidad y procedimiento (*)
            $sql = "SELECT  Encpol AS plantilla_codigo, Encnom AS plantilla_nombre_politica, Encpro AS plantilla_wprocedimiento, Encent AS plantilla_wentidad
                    FROM    {$wbasedato}_{$TB_ENCABEZADO} AS enc
                    WHERE   id = '{$id_plantilla_adecuada}'";
            $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);

            $row_plantilla                  = mysql_fetch_array($result);
            $plantilla_codigo               = $row_plantilla['plantilla_codigo'];
            $plantilla_nombre_politica      = $row_plantilla['plantilla_nombre_politica'];
            $plantilla_wprocedimiento       = $row_plantilla['plantilla_wprocedimiento'];
            $plantilla_wentidad             = $row_plantilla['plantilla_wentidad'];

            // [*********************************************************************************************************************]
            // [************************************************ PASO 3 *************************************************************]
            // [*********************************************************************************************************************]
            // Como la información de tipo de cobro de cada procedimiento está dividido en tres tablas diferentes, entonces en las siguientes consultas
            // se buscan los conceptos que se cobrar por cada uno de los "tipos de cobro"

            // [*********************************************************************************************************************]
            // [************************************************ PASO 3.1 ***********************************************************]
            // [*********************************************************************************************************************]
            // CONSULTA DE CONCEPTOS QUE SE COBRAN POR HORA

            // **** CONSULTAR LOS CONCEPTOS Y CONFIGURACIONES DE LA PLANTILLA ENCONTRADA ****
            // consulta si tiene configurado cobros por hora
            $sql = "SELECT  con.Grucod AS concepto_cod_ppal, con.Grudes AS concepto_nom_ppal, con.Grutip AS requiere_tercero, con.Grumva AS modifica_valor, con.Gruinv AS mueve_inventario, con.Gruarc AS tabla_valida_precios, con.Gruser AS wserv
                            , chora.Cphtmn AS tiempo_minimo, chora.Cphcph AS cobra_por_hora, chora.Cphcon AS cobro_concepto, chora.Cphpro AS cobro_procedimiento
                    FROM    {$wbasedato}_000181 AS chora
                            INNER JOIN
                            {$wbasedato}_000200 AS con ON (chora.Cphcpp = con.Grucod)
                    WHERE   chora.Cphpol = '{$plantilla_codigo}'
                            AND chora.Cphest = 'on'";
            // echo "<pre>"; print_r($sql); echo "</pre>";

            $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
            if(mysql_num_rows($result) > 0)
            {
                // $plantila_encontrada = 'off';
                while ($row = mysql_fetch_array($result))
                {
                    // Si en la plantilla esta guardado el procedimientos (*) significa que se cobra el procedimiento que se esté liquidando actualmente.
                    $cobro_procedimiento = $row['cobro_procedimiento'];
                    if($cobro_procedimiento == '*')
                    {
                        $cobro_procedimiento = $procedimiento_liquidar_cod;
                    }

                    $sql = "SELECT  proc.Procod AS procedimiento_cod,  proc.Pronom AS procedimiento_nom, proc.Protfa AS procedimiento_tarifa, proc.Progqx, proc.Propun as procedimiento_puntos
                            FROM    {$wbasedato}_000103 AS proc
                            WHERE   proc.Procod = '{$cobro_procedimiento}'
                                    AND proc.Proest = 'on'";
                    // echo "<pre>"; print_r($sql); echo "</pre>";
                    $resultDatProc = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);

                    $rowDatProc = mysql_fetch_array($resultDatProc);
                    $row['procedimiento_cod']    = $rowDatProc['procedimiento_cod'];
                    $row['procedimiento_nom']    = $rowDatProc['procedimiento_nom'];
                    $row['procedimiento_tarifa'] = $rowDatProc['procedimiento_tarifa'];
                    $row['procedimiento_puntos'] = $rowDatProc['procedimiento_puntos'];
                    $row['Progqx'] = $rowDatProc['Progqx'];

                    // Valída si el concepto es material o medicamentos, solo se completan los parámetros
                    // de de cobro para si el concepto es diferente a material o medicamento, para estos dos conceptos se consultan
                    // sus tarifas o formas de cobro en otra rutina del programa.
                    if(!validar_material_medicamento_muevenInv($row['concepto_cod_ppal']))
                    {
                        // Ahora se permite agregar el concepto 0034-uso de quipos desde las plantillas de cirugía pero para hacerlo en este punto se agrega el concepto
                        // y el equipo como si se tratara de un concepto adicional agregado desde la pantalla de liquidación para que se agregue el equipo que se configuró en la plantilla
                        // y también se puedan agregar más equipos desde la liquidación sin problemas.
                        $equipo_como_addicional = false; // Si esta variable es true no se agrega el concepto normalmente sino como un concepto adicional (como sino estuviera en plantilla).
                        switch ($row['concepto_cod_ppal'])
                        {
                            case $id_concepto_uso_equipos: // Cuando se está añadiendo un equipo
                                if($add_equipo == '')
                                {
                                    $add_equipo             = $row['cobro_procedimiento'];
                                    $add_equipo_nombre      = $add_equipo.'-'.$row['procedimiento_nom'];
                                    $wconcepto_add          = $row['cobro_concepto'];
                                    $wprocedimiento_add     = $procedimiento_bilat_dif;
                                    $equipo_como_addicional = true;
                                }
                            break;
                            case $id_concepto_examenes: // Cuando se está añadiendo un exámen
                                if($add_examen == '')
                                {
                                    $add_examen             = $row['cobro_procedimiento'];
                                    $add_examen_nombre      = $add_examen.'-'.$row['procedimiento_nom'];
                                    $wconcepto_add          = $row['cobro_concepto'];
                                    $wprocedimiento_add     = $procedimiento_bilat_dif;
                                    $equipo_como_addicional = true;
                                }
                            break;
                        }

                        // Si es uso de equipos o examen no agregar el concepto aquí sino hacerlo como si fuera un concepto adicional y esto se hace más adelante en el código
                        // donde se agregan los conceptos adicionales
                        if($equipo_como_addicional)
                        {
                            // Cuando se agrega un equipo desde la plantilla y se actualiza la liquidación, se valída si ese equipos realmente ya está agregado
                            // a los cargos de la liquidación, si es así entonces no se intenta agregar de nuevo ese mismo equipo desde la plantilla.
                            if(array_key_exists($procedimiento_bilat_dif, $arr_datos_liquidados)
                                && array_key_exists($id_concepto_uso_equipos, $arr_datos_liquidados[$procedimiento_bilat_dif])
                                && array_key_exists($add_equipo, $arr_datos_liquidados[$procedimiento_bilat_dif][$id_concepto_uso_equipos]))
                            {
                                $add_equipo         = '';
                                $wconcepto_add      = '';
                                $wprocedimiento_add = '';
                            }
                        }
                        else
                        {
                            if(!array_key_exists($row['concepto_cod_ppal'], $arr_conceptos_liquidar))
                            {
                                $cantidad_concepto = consultarCantidadesConceptosPlantilla($conex, $wbasedato, $plantilla_codigo, $row['concepto_cod_ppal']);
                                $arr_conceptos_liquidar[$row['concepto_cod_ppal']] = array( "cantidad_concepto"    => $cantidad_concepto[$row['concepto_cod_ppal']],
                                                                                            "wserv"                => $row['wserv'],
                                                                                            "tipo_cobro"           => "cobro_hora",
                                                                                            "requiere_tercero"     => $row["requiere_tercero"],
                                                                                            "tabla_valida_precios" => $row["tabla_valida_precios"],
                                                                                            "modifica_valor"       => $row["modifica_valor"],
                                                                                            "mueve_inventario"     => $row["mueve_inventario"],
                                                                                            "concepto_cod_ppal"    => $row['concepto_cod_ppal'],
                                                                                            "concepto_nom_ppal"    => $row['concepto_nom_ppal'],
                                                                                            "procedimiento_cod"    => $row['procedimiento_cod'],
                                                                                            "procedimiento_nom"    => $row['procedimiento_nom'],
                                                                                            "procedimiento_tarifa" => $row['procedimiento_tarifa'],
                                                                                            "procedimiento_puntos" => $row['procedimiento_puntos'],
                                                                                            "progqx_puntos_gqx"    => $row['Progqx'],
                                                                                            "tiempo_minimo"        => $row['tiempo_minimo'],
                                                                                            "cobra_por_hora"       => $row['cobra_por_hora'],
                                                                                            "cobro_concepto"       => $row['cobro_concepto'],
                                                                                            "cobro_procedimiento"  => $row['cobro_procedimiento'],
                                                                                            "empresa_plantilla"    => array(),
                                                                                            "arr_cobrar"           => array() );

                                if(array_key_exists($procedimiento_bilat_dif, $orden_conceptos_por_procedimiento) && !array_key_exists($row["concepto_cod_ppal"], $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif])) { $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif][$row["concepto_cod_ppal"]] = $row["concepto_cod_ppal"]; }

                                // Para cada concepto agregado se verifica si en segundo nivel se le deben agregar exámenes o equipos que deben ser asociados a ese concepto.
                                agregarEquiposExamenes($arr_conceptos_liquidar, $row["concepto_cod_ppal"], $procedimiento_bilat_dif, $procedimiento_liquidar_cod, $wprocedimiento_add, $arr_datos_liquidados, $add_equipo, $add_examen, $add_equipo_nombre, $add_examen_nombre, 0);
                                adicionarTipoCobroPorEmpresa($conex, $wemp_pmla, $wbasedato,$arr_conceptos_liquidar[$row['concepto_cod_ppal']], $row['concepto_cod_ppal'], "cobro_hora", $row['cobro_concepto'], $row['cobro_procedimiento'], $wresponsable_eps_codigo);
                            }
                            else
                            {
                                adicionarTipoCobroPorEmpresa($conex, $wemp_pmla, $wbasedato,$arr_conceptos_liquidar[$row['concepto_cod_ppal']], $row['concepto_cod_ppal'], "cobro_hora", $row['cobro_concepto'], $row['cobro_procedimiento'], $wresponsable_eps_codigo);
                            }

                            if(!array_key_exists($row['concepto_cod_ppal'], $arr_lista_conceptos) && !$equipo_como_addicional)
                            {
                                $arr_lista_conceptos[$row['concepto_cod_ppal']] = $row['concepto_nom_ppal'];
                            }
                        }
                    }
                    // $arr_conceptos_liquidar[$row['concepto_cod_ppal']]['arr_cobrar'][] =
                }
            }

            // [*********************************************************************************************************************]
            // [************************************************ PASO 3.2 ***********************************************************]
            // [*********************************************************************************************************************]
            // CONSULTA DE CONCEPTOS QUE SE COBRAN POR TIPO DE ANESTESIA

            // consulta si tiene configurado cobros por anestesia
            $sql = "SELECT  con.Grucod AS concepto_cod_ppal, con.Grudes AS concepto_nom_ppal, con.Grutip AS requiere_tercero, con.Grumva AS modifica_valor, con.Gruinv AS mueve_inventario, con.Gruarc AS tabla_valida_precios, con.Gruser AS wserv
                            , canest.Anecod AS tipo_anestesia, canest.Anetin AS tiempo_inicio, canest.Anetfn AS tiempo_final, canest.Anecon AS cobro_concepto, canest.Anepro AS cobro_procedimiento
                    FROM    {$wbasedato}_000182 AS canest
                            INNER JOIN
                            {$wbasedato}_000200 AS con ON (canest.Anecpp = con.Grucod)
                    WHERE   canest.Anepol = '{$plantilla_codigo}'
                            AND canest.Aneest = 'on'
                    ORDER BY canest.Anecod, canest.Anetin, canest.Anetfn";
            $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
            if(mysql_num_rows($result) > 0)
            {
                while ($row = mysql_fetch_array($result))
                {
                    $cobro_procedimiento = $row['cobro_procedimiento'];
                    if($cobro_procedimiento == '*')
                    {
                        $cobro_procedimiento = $procedimiento_liquidar_cod;
                    }

                    $sql = "SELECT  proc.Procod AS procedimiento_cod,  proc.Pronom AS procedimiento_nom, proc.Protfa AS procedimiento_tarifa, proc.Progqx, proc.Propun as procedimiento_puntos
                            FROM    {$wbasedato}_000103 AS proc
                            WHERE   proc.Procod = '{$cobro_procedimiento}'
                                    AND proc.Proest = 'on'";
                    // echo "<pre>"; print_r($sql); echo "</pre>";
                    $resultDatProc = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);

                    $rowDatProc = mysql_fetch_array($resultDatProc);
                    $row['procedimiento_cod']    = $rowDatProc['procedimiento_cod'];
                    $row['procedimiento_nom']    = $rowDatProc['procedimiento_nom'];
                    $row['procedimiento_tarifa'] = $rowDatProc['procedimiento_tarifa'];
                    $row['procedimiento_puntos'] = $rowDatProc['procedimiento_puntos'];
                    $row['Progqx'] = $rowDatProc['Progqx'];

                    // Valída si el concepto es material o medicamentos, solo se completan los parámetros
                    // de de cobro para si el concepto es diferente a material o medicamento, para estos dos conceptos se consultan
                    // sus tarifas o formas de cobro en otra rutina del programa.
                    if(!validar_material_medicamento_muevenInv($row['concepto_cod_ppal']))
                    {
                        if(!array_key_exists($row['concepto_cod_ppal'], $arr_conceptos_liquidar))
                        {
                            $cantidad_concepto = consultarCantidadesConceptosPlantilla($conex, $wbasedato, $plantilla_codigo, $row['concepto_cod_ppal']);
                            $arr_conceptos_liquidar[$row['concepto_cod_ppal']] = array( "cantidad_concepto"    => $cantidad_concepto[$row['concepto_cod_ppal']],
                                                                                        "wserv"                => $row['wserv'],
                                                                                        "tipo_cobro"           => "cobro_anestesia",
                                                                                        "requiere_tercero"     => $row["requiere_tercero"],
                                                                                        "tabla_valida_precios" => $row["tabla_valida_precios"],
                                                                                        "modifica_valor"       => $row["modifica_valor"],
                                                                                        "mueve_inventario"     => $row["mueve_inventario"],
                                                                                        "concepto_cod_ppal"    => $row['concepto_cod_ppal'],
                                                                                        "concepto_nom_ppal"    => $row['concepto_nom_ppal'],
                                                                                        "procedimiento_cod"    => $row['procedimiento_cod'],
                                                                                        "procedimiento_nom"    => $row['procedimiento_nom'],
                                                                                        "procedimiento_tarifa" => $row['procedimiento_tarifa'],
                                                                                        "procedimiento_puntos" => $row['procedimiento_puntos'],
                                                                                        "empresa_plantilla"    => array(),
                                                                                        "progqx_puntos_gqx"    => $row['Progqx'],
                                                                                        "rangos"               => array() );

                            if(array_key_exists($procedimiento_bilat_dif, $orden_conceptos_por_procedimiento) && !array_key_exists($row["concepto_cod_ppal"], $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif])) { $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif][$row["concepto_cod_ppal"]] = $row["concepto_cod_ppal"]; }

                            // Para cada concepto agregado se verifica si en segundo nivel se le deben agregar exámenes o equipos que deben ser asociados a ese concepto.
                            agregarEquiposExamenes($arr_conceptos_liquidar, $row["concepto_cod_ppal"], $procedimiento_bilat_dif, $procedimiento_liquidar_cod, $wprocedimiento_add, $arr_datos_liquidados, $add_equipo, $add_examen, $add_equipo_nombre, $add_examen_nombre, 0);

                            adicionarTipoCobroPorEmpresa($conex, $wemp_pmla, $wbasedato,$arr_conceptos_liquidar[$row['concepto_cod_ppal']], $row['concepto_cod_ppal'], "cobro_anestesia", $row['cobro_concepto'], $row['cobro_procedimiento'], $wresponsable_eps_codigo);
                        }
                        else
                        {
                            adicionarTipoCobroPorEmpresa($conex, $wemp_pmla, $wbasedato,$arr_conceptos_liquidar[$row['concepto_cod_ppal']], $row['concepto_cod_ppal'], "cobro_anestesia", $row['cobro_concepto'], $row['cobro_procedimiento'], $wresponsable_eps_codigo);
                        }

                        if(!array_key_exists($row['concepto_cod_ppal'], $arr_lista_conceptos))
                        {
                            $arr_lista_conceptos[$row['concepto_cod_ppal']] = $row['concepto_nom_ppal'];
                        }

                        $arr_conceptos_liquidar[$row['concepto_cod_ppal']]['rangos'][] = array( "tipo_anestesia"      => $row['tipo_anestesia'],
                                                                                                "tiempo_inicio"       => $row['tiempo_inicio'],
                                                                                                "tiempo_final"        => $row['tiempo_final'],
                                                                                                "cobro_concepto"      => $row['cobro_concepto'],
                                                                                                "cobro_procedimiento" => $row['cobro_procedimiento']);
                    }
                }
            }
            // echo "<pre>"; print_r($arr_conceptos_liquidar); echo "</pre>";

            // [*********************************************************************************************************************]
            // [************************************************ PASO 3.3 ***********************************************************]
            // [*********************************************************************************************************************]
            // CONSULTA DE CONCEPTOS QUE SE COBRAN POR TIEMPO DE USO (Por ejemplo tiempo de uso de equipos)

            $tb_uso = TB_COBRO_USO;
            // consulta si tiene configurado cobros por uso
            $sql = "SELECT  con.Grucod AS concepto_cod_ppal, con.Grudes AS concepto_nom_ppal, con.Grutip AS requiere_tercero, con.Grumva AS modifica_valor, con.Gruinv AS mueve_inventario, con.Gruarc AS tabla_valida_precios, con.Gruser AS wserv
                            , cuso.Usotmn AS tiempo_inicio, cuso.Usotfn AS tiempo_final, cuso.Usocon AS cobro_concepto, cuso.Usopro AS cobro_procedimiento, cuso.Usoatp AS aplicaAlTiempoDelPro
                    FROM    {$wbasedato}_{$tb_uso} AS cuso
                            INNER JOIN
                            {$wbasedato}_000200 AS con ON (cuso.Usocpp = con.Grucod)
                    WHERE   cuso.Usopol = '{$plantilla_codigo}'
                            AND cuso.Usoest = 'on'";
            $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
            if(mysql_num_rows($result) > 0)
            {
                while ($row = mysql_fetch_array($result))
                {
                    $cobro_procedimiento = $row['cobro_procedimiento'];
                    if($cobro_procedimiento == '*')
                    {
                        $cobro_procedimiento = $procedimiento_liquidar_cod;
                    }

                    $sql = "SELECT  proc.Procod AS procedimiento_cod,  proc.Pronom AS procedimiento_nom, proc.Protfa AS procedimiento_tarifa, proc.Progqx, proc.Propun as procedimiento_puntos
                            FROM    {$wbasedato}_000103 AS proc
                            WHERE   proc.Procod = '{$cobro_procedimiento}'
                                    AND proc.Proest = 'on'";
                    // echo "<pre>"; print_r($sql); echo "</pre>";
                    $resultDatProc = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);

                    $rowDatProc = mysql_fetch_array($resultDatProc);
                    $row['procedimiento_cod']    = $rowDatProc['procedimiento_cod'];
                    $row['procedimiento_nom']    = $rowDatProc['procedimiento_nom'];
                    $row['procedimiento_tarifa'] = $rowDatProc['procedimiento_tarifa'];
                    $row['procedimiento_puntos'] = $rowDatProc['procedimiento_puntos'];
                    $row['Progqx'] = $rowDatProc['Progqx'];

                    // Valída si el concepto es material o medicamentos, solo se completan los parámetros
                    // de de cobro para si el concepto es diferente a material o medicamento, para estos dos conceptos se consultan
                    // sus tarifas o formas de cobro en otra rutina del programa.
                    if(!validar_material_medicamento_muevenInv($row['concepto_cod_ppal']))
                    {
                        if(!array_key_exists($row['concepto_cod_ppal'], $arr_conceptos_liquidar))
                        {
                            $cantidad_concepto = consultarCantidadesConceptosPlantilla($conex, $wbasedato, $plantilla_codigo, $row['concepto_cod_ppal']);
                            $arr_conceptos_liquidar[$row['concepto_cod_ppal']] = array( "cantidad_concepto"    => $cantidad_concepto[$row['concepto_cod_ppal']],
                                                                                        "wserv"                => $row['wserv'],
                                                                                        "tipo_cobro"           => "cobro_uso",
                                                                                        "requiere_tercero"     => $row["requiere_tercero"],
                                                                                        "tabla_valida_precios" => $row["tabla_valida_precios"],
                                                                                        "modifica_valor"       => $row["modifica_valor"],
                                                                                        "mueve_inventario"     => $row["mueve_inventario"],
                                                                                        "concepto_cod_ppal"    => $row['concepto_cod_ppal'],
                                                                                        "concepto_nom_ppal"    => $row['concepto_nom_ppal'],
                                                                                        "procedimiento_cod"    => $row['procedimiento_cod'],
                                                                                        "procedimiento_nom"    => $row['procedimiento_nom'],
                                                                                        "procedimiento_tarifa" => $row['procedimiento_tarifa'],
                                                                                        "procedimiento_puntos" => $row['procedimiento_puntos'],
                                                                                        "aplicaAlTiempoDelPro" => $row['aplicaAlTiempoDelPro'],
                                                                                        "empresa_plantilla"    => array(),
                                                                                        "progqx_puntos_gqx"    => $row['Progqx'],
                                                                                        "rangos"               => array() );

                            if(array_key_exists($procedimiento_bilat_dif, $orden_conceptos_por_procedimiento) && !array_key_exists($row["concepto_cod_ppal"], $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif])) { $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif][$row["concepto_cod_ppal"]] = $row["concepto_cod_ppal"]; }

                            // Para cada concepto agregado se verifica si en segundo nivel se le deben agregar exámenes o equipos que deben ser asociados a ese concepto.
                            agregarEquiposExamenes($arr_conceptos_liquidar, $row["concepto_cod_ppal"], $procedimiento_bilat_dif, $procedimiento_liquidar_cod, $wprocedimiento_add, $arr_datos_liquidados, $add_equipo, $add_examen, $add_equipo_nombre, $add_examen_nombre, 0);

                            adicionarTipoCobroPorEmpresa($conex, $wemp_pmla, $wbasedato,$arr_conceptos_liquidar[$row['concepto_cod_ppal']], $row['concepto_cod_ppal'], "cobro_uso", $row['cobro_concepto'], $row['cobro_procedimiento'], $wresponsable_eps_codigo);
                        }
                        else
                        {
                            adicionarTipoCobroPorEmpresa($conex, $wemp_pmla, $wbasedato,$arr_conceptos_liquidar[$row['concepto_cod_ppal']], $row['concepto_cod_ppal'], "cobro_uso", $row['cobro_concepto'], $row['cobro_procedimiento'], $wresponsable_eps_codigo);
                        }

                        if(!array_key_exists($row['concepto_cod_ppal'], $arr_lista_conceptos))
                        {
                            $arr_lista_conceptos[$row['concepto_cod_ppal']] = $row['concepto_nom_ppal'];
                        }

                        $arr_conceptos_liquidar[$row['concepto_cod_ppal']]['rangos'][] = array( "tiempo_inicio"       => $row['tiempo_inicio'],
                                                                                                "tiempo_final"        => $row['tiempo_final'],
                                                                                                "cobro_concepto"      => $row['cobro_concepto'],
                                                                                                "cobro_procedimiento" => $row['cobro_procedimiento']);
                    }
                }
            }
        }
        else
        {
            // $descripcion = "(".mysql_errno().') '.mysql_error()."|obs:'Error al cambiar el estado de aprobación de la solicitud de id. ".$wid_solpend;
            // insertLog($conex, $wbasedato, $user_session, $accion, $form, 'error_sql', $descripcion, $wcedula, $sql);
            $data['mensaje'] .= trim('No se encontró una plantilla configurada para iniciar la liquidación.
                                Procedimiento: '.$procedimiento_liquidar_cod);
            $data["sql_plantilla"] = (array_key_exists("sql_plantilla", $data)) ? $data["sql_plantilla"] : "|";
            $data["sql_plantilla"] .= $sql;
            // $data['error'] = 1;
        }

        // echo "$wprocedimiento_add && $wconcepto_add ||";
        // Si es un concepto que no está en la plantilla y se está agregando desde la vista de liquidación
        // $wprocedimiento_add, $wconcepto_add
        // $guardar = ": if($wprocedimiento_add != '' && $procedimiento_bilat_dif == $wprocedimiento_add && $wconcepto_add != '' && !array_key_exists($wconcepto_add, $arr_conceptos_liquidar)) ".PHP_EOL;
        // seguimiento($guardar);
        if(!validar_material_medicamento_muevenInv($wconcepto_add) && $wprocedimiento_add != '' && $procedimiento_bilat_dif == $wprocedimiento_add && $wconcepto_add != '' && !array_key_exists($wconcepto_add, $arr_conceptos_liquidar))
        {
            // Se guarda en el array de extras los conceptos que se agregan casualmente a la ventana de liquidación y que no hacen parte de la plantilla
            // Enseguida de recorrer el array de extras para agregar a la configuración de la liquidación los conceptos adicionales y se pueda agregar a los conceptos de la lista del procedimiento
            // que se está liquidando.
            if(!array_key_exists($wprocedimiento_add, $arr_extras))
            {
                $arr_extras[$wprocedimiento_add] = array();
            }

            if(!array_key_exists($wconcepto_add, $arr_lista_conceptos))
            {
                $arr_lista_conceptos[$wconcepto_add] = $arr_conceptos_nombres[$wconcepto_add];
            }

            if(!array_key_exists($wconcepto_add, $arr_extras[$wprocedimiento_add]))
            {
                $arr_extras[$wprocedimiento_add][$wconcepto_add] = array();

                $codigo_proced = arreglar_procedimientos_bilaterales($wprocedimiento_add);

                $sql = "SELECT  proc.Procod AS procedimiento_cod,  proc.Pronom AS procedimiento_nom, proc.Protfa AS procedimiento_tarifa, proc.Progqx, proc.Propun as procedimiento_puntos
                        FROM    {$wbasedato}_000103 AS proc
                        WHERE   proc.Procod = '{$codigo_proced}'
                                AND proc.Proest = 'on'";
                $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                $rowPro = mysql_fetch_array($result);

                $sql = "SELECT  con.Grucod AS concepto_cod_ppal, con.Grudes AS concepto_nom_ppal, con.Grutip AS requiere_tercero, con.Grumva AS modifica_valor, con.Gruinv AS mueve_inventario, con.Gruarc AS tabla_valida_precios, con.Gruser AS wserv
                        FROM    {$wbasedato}_000200 AS con
                        WHERE   con.Grucod = '{$wconcepto_add}'";
                $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                $rowCon = mysql_fetch_array($result);

                $arr_extras[$wprocedimiento_add][$wconcepto_add] = array(   "cantidad_concepto"    => 1,
                                                                            "wserv"                => $rowCon['wserv'],
                                                                            "tipo_cobro"           => "",
                                                                            "requiere_tercero"     => $rowCon["requiere_tercero"],
                                                                            "tabla_valida_precios" => $rowCon["tabla_valida_precios"],
                                                                            "modifica_valor"       => $rowCon["modifica_valor"],
                                                                            "mueve_inventario"     => $rowCon["mueve_inventario"],
                                                                            "concepto_cod_ppal"    => $wconcepto_add,
                                                                            "concepto_nom_ppal"    => $rowCon['concepto_nom_ppal'],
                                                                            "procedimiento_cod"    => $rowPro['procedimiento_cod'],
                                                                            "procedimiento_nom"    => $rowPro['procedimiento_nom'],
                                                                            "procedimiento_tarifa" => $rowPro['procedimiento_tarifa'],
                                                                            "procedimiento_puntos" => $rowPro['procedimiento_puntos'],
                                                                            "empresa_plantilla"    => array(),
                                                                            "progqx_puntos_gqx"    => $rowPro['Progqx'],
                                                                            "cobro_concepto"       => $wconcepto_add,
                                                                            "cobro_procedimiento"  => $codigo_proced,
                                                                            "arr_cobrar"           => array(),
                                                                            "es_concepto_extra"    => true,
                                                                            "lista_equipos"        => array(),
                                                                            "lista_examenes"       => array());
                // agregarEquiposExamenes($arr_conceptos_liquidar, $wconcepto_add, $procedimiento_bilat_dif, $procedimiento_liquidar_cod, $wprocedimiento_add, $arr_datos_liquidados);
                $arr_lista_conceptos[$wconcepto_add] = $rowCon['concepto_nom_ppal'];
                // $guardar = "array_key_exists( $wconcepto_add, orden_conceptos_por_procedimiento[ $wprocedimiento_add ])".print_r($orden_conceptos_por_procedimiento,true).PHP_EOL;
                // seguimiento($guardar);
                if(array_key_exists($wprocedimiento_add, $orden_conceptos_por_procedimiento) && !array_key_exists($wconcepto_add, $orden_conceptos_por_procedimiento[$wprocedimiento_add]))
                {
                    $orden_conceptos_por_procedimiento[$wprocedimiento_add][$wconcepto_add] = $wconcepto_add;
                }
            }
        }

        // print_r($arr_extras);
        // $guardar = "procedimiento_bilat_dif: $procedimiento_bilat_dif ".print_r($arr_extras,true).PHP_EOL;
        // seguimiento($guardar);
        if(array_key_exists($procedimiento_bilat_dif, $arr_extras))
        {
            foreach ($arr_extras[$procedimiento_bilat_dif] as $wconcepto => $arr_add)
            {
                // Adicionar el concepto extra a la lista de conceptos que se mostrarán por cada fila en la liquidación.
                if(!array_key_exists($wconcepto, $arr_lista_conceptos))
                {
                    $arr_lista_conceptos[$wconcepto] = $arr_conceptos_nombres[$wconcepto];
                }

                if(!array_key_exists($wconcepto, $arr_conceptos_liquidar))
                {
                    $arr_conceptos_liquidar[$wconcepto] = $arr_add;
                    agregarEquiposExamenes($arr_conceptos_liquidar, $wconcepto, $procedimiento_bilat_dif, $procedimiento_liquidar_cod, $wprocedimiento_add, $arr_datos_liquidados, $add_equipo, $add_examen, $add_equipo_nombre, $add_examen_nombre, 0);

                    // Hasta antes de 2015-06-05 el parámetro de empresa era $arr_add['empresa_plantilla'] pero cuando se agregaba por ejemplo uso de equipos el programa se dañaba
                    // porque esa variable de empresa queda vacía, para solucionar que puedan agregar el 0034 como adicional entonces se reemplazó ese parámetro por $wresponsable_eps_codigo.
                    adicionarTipoCobroPorEmpresa($conex, $wemp_pmla, $wbasedato,$arr_conceptos_liquidar[$wconcepto], $wconcepto, "", $arr_add['cobro_concepto'], $arr_add['cobro_procedimiento'], $wresponsable_eps_codigo);
                }
                else
                {
                    // unset($arr_extras[$procedimiento_bilat_dif][$wconcepto]);
                }
            }
        }
    }
    else
    {
        // [*********************************************************************************************************************]
        // [************************************* SOLO SI ES LIQUIDACIÓN DE PAQUETES  *******************************************]
        // [*********************************************************************************************************************]
        $res_paquete = consultarPaquete($conex, $wbasedato, $wemp_pmla, $procedimiento_liquidar_cod, $tarifa_original, $wtiempo_minutos_cx);

        $arr_datos_procedimiento = array();
        foreach ($res_paquete as $keyPqt => $row)
        {
            /*if(count($arr_datos_procedimiento) == 0)
            {
                $sql = "SELECT  proc.Procod AS procedimiento_cod,  proc.Pronom AS procedimiento_nom, proc.Protfa AS procedimiento_tarifa, proc.Progqx, proc.Propun as procedimiento_puntos
                        FROM    {$wbasedato}_000103 AS proc
                        WHERE   proc.Procod = '{$procedimiento_liquidar_cod}'
                                AND proc.Proest = 'on'";
                // echo "<pre>"; print_r($sql); echo "</pre>";
                $resultDatProc = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);

                $rowDatProc = mysql_fetch_array($resultDatProc);
                $arr_datos_procedimiento['procedimiento_cod']    = $row['procedimiento_cod'];
                $arr_datos_procedimiento['procedimiento_nom']    = $rowDatProc['procedimiento_nom'];
                $arr_datos_procedimiento['procedimiento_tarifa'] = $rowDatProc['procedimiento_tarifa'];
                $arr_datos_procedimiento['procedimiento_puntos'] = $rowDatProc['procedimiento_puntos'];
                $arr_datos_procedimiento['progqx_puntos_gqx']    = $rowDatProc['Progqx'];
            }*/

            if (strtotime($wfecha_cargo) < strtotime($row['Paqdetfec']))
            {
                $wvaltar = $row['Paqdetvan'];
            }
            else
            {
                $wvaltar = $row['Paqdetvac'];
            }

            $add_equipo        = "";
            $add_equipo_nombre = "";
            $add_examen        = "";
            $add_examen_nombre = "";

            $arr_detalle_concepto = array(  "cantidad_concepto"    => $row['wcantidad'],
                                            "wserv"                => $row['wserv'],
                                            "tipo_cobro"           => "N/A",
                                            "requiere_tercero"     => $row["requiere_tercero"],
                                            "tabla_valida_precios" => $row["tabla_valida_precios"],
                                            "modifica_valor"       => $row["modifica_valor"],
                                            "mueve_inventario"     => $row["mueve_inventario"],
                                            "concepto_cod_ppal"    => $row['concepto_cod_ppal'],
                                            "concepto_nom_ppal"    => $row['concepto_nom_ppal'],
                                            "procedimiento_cod"    => $row['procedimiento_cod'],//$arr_datos_procedimiento['procedimiento_cod'], // Puede ser codigo de procedimiento o de equipo
                                            "procedimiento_nom"    => $row['procedimiento_nom'],//$arr_datos_procedimiento['procedimiento_nom'],
                                            "procedimiento_tarifa" => "",//$arr_datos_procedimiento['procedimiento_tarifa'],//$arr_datos_procedimiento['procedimiento_tarifa'],
                                            "procedimiento_puntos" => "",//$arr_datos_procedimiento['procedimiento_puntos'],//$arr_datos_procedimiento['procedimiento_puntos'],
                                            "progqx_puntos_gqx"    => "",//$arr_datos_procedimiento['progqx_puntos_gqx'],//$arr_datos_procedimiento['progqx_puntos_gqx'],
                                            "tiempo_minimo"        => "N/A",
                                            "cobra_por_hora"       => "N/A",
                                            "empresa_plantilla"    => array(),
                                            "cobro_concepto"       => $row['concepto_cod_ppal'],
                                            "cobro_procedimiento"  => $row['procedimiento_cod'],
                                            "wtercero_default"     => $row['wtercero'],
                                            "wfacturable_default"  => $row['wfacturable'],
                                            "wvaltar"              => $wvaltar,
                                            "arr_cobrar"           => array() );

            if(!array_key_exists($row['concepto_cod_ppal'], $arr_conceptos_liquidar))
            {
                // $cantidad_concepto = consultarCantidadesConceptosPlantilla($conex, $wbasedato, $plantilla_codigo, $row['concepto_cod_ppal']);
                $arr_conceptos_liquidar[$row['concepto_cod_ppal']] = $arr_detalle_concepto;
                adicionarTipoCobroPorEmpresa($conex, $wemp_pmla, $wbasedato,$arr_conceptos_liquidar[$row['concepto_cod_ppal']], $row['concepto_cod_ppal'], "", $row['concepto_cod_ppal'], $row['procedimiento_cod'], $wresponsable_eps_codigo);
                if(!array_key_exists($row['concepto_cod_ppal'], $arr_lista_conceptos))
                {
                    $arr_lista_conceptos[$row['concepto_cod_ppal']] = $row['concepto_nom_ppal'];
                }

                if(!array_key_exists($row["concepto_cod_ppal"], $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif])) { $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif][$row["concepto_cod_ppal"]] = $row["concepto_cod_ppal"]; }
                validarAgregarEquipoExamenPaquete($arr_conceptos_liquidar, $row["concepto_cod_ppal"], $id_concepto_uso_equipos, $id_concepto_examenes, $wprocedimiento_add, $procedimiento_bilat_dif, $procedimiento_liquidar_cod, $arr_datos_liquidados, $add_equipo, $add_equipo_nombre, $add_examen, $add_examen_nombre, $row["procedimiento_cod"], $row["procedimiento_nom"], $wvaltar);
            }
            else
            {
                if($row["concepto_cod_ppal"] != $id_concepto_uso_equipos && $row["concepto_cod_ppal"] != $id_concepto_examenes)
                {
                    $concepto_buscar = $row["concepto_cod_ppal"];

                    // buscar si ya hay conceptos del mismo código agregados para generar un consecutivo más del mismo concepto
                    // (Expresión regular, valores que empiecen por el código del concepto y estén seguidos o no por un caracter o guión bajo seguido o no de uno o varios digitos).
                    $arr_like_concepto           = preg_grep("/^\A($concepto_buscar(\w(\d+)?)?)$/",array_keys($arr_conceptos_liquidar));
                    $concepto_cod_ppalSecuencia  = $row['concepto_cod_ppal'].'_'.(count($arr_like_concepto)+1);// Si esta en este else es porque ya existía el mismo concepto entonces se incrementa una posición más

                    $arr_detalle_concepto["cobro_concepto"] = $concepto_cod_ppalSecuencia;

                    // $guardar = "arr_like_concepto: ".print_r($arr_like_concepto,true).PHP_EOL;
                    // seguimiento($guardar);
                    $idx_ultimo_insertado = $arr_like_concepto[array_pop(array_keys($arr_like_concepto))];//ultima posición de array_keys que coinciden con el mismo concepto.

                    // Copia las empresas plantilla desde el concepto agregado al primer al concepto aumentado en un consecutivo.
                    array_insert_after($idx_ultimo_insertado, $arr_conceptos_liquidar, $concepto_cod_ppalSecuencia);// Inserte el siguiente consecutivo justo despues del otro
                    $arr_conceptos_liquidar[$concepto_cod_ppalSecuencia] = $arr_detalle_concepto;
                    adicionarTipoCobroPorEmpresa($conex, $wemp_pmla, $wbasedato,$arr_conceptos_liquidar[$concepto_cod_ppalSecuencia], $concepto_cod_ppalSecuencia, "", $concepto_cod_ppalSecuencia, $row['procedimiento_cod'], $wresponsable_eps_codigo);
                    // $arr_conceptos_liquidar[$concepto_cod_ppalSecuencia]['empresa_plantilla'] = $arr_conceptos_liquidar[$concepto_buscar]['empresa_plantilla'];

                    if(!array_key_exists($concepto_cod_ppalSecuencia, $arr_lista_conceptos))
                    {
                        // $guardar = "concepto_cod_ppalSecuencia: $concepto_cod_ppalSecuencia, idx_ultimo_insertado: ".print_r($idx_ultimo_insertado,true).PHP_EOL;
                        // seguimiento($guardar);
                        // array_insert_after($idx_ultimo_insertado, $arr_lista_conceptos, $concepto_cod_ppalSecuencia, $row['concepto_nom_ppal']);// Inserte el siguiente consecutivo justo despues del otro
                        $arr_lista_conceptos[$concepto_cod_ppalSecuencia] = $row['concepto_nom_ppal'];
                    }
                }
                else
                {
                    // Si es uso de equipos no debería repetirse el concepto con un concecutivo porque sus equipos se deben agregar al mismo concepto
                    validarAgregarEquipoExamenPaquete($arr_conceptos_liquidar, $row["concepto_cod_ppal"], $id_concepto_uso_equipos, $id_concepto_examenes, $wprocedimiento_add, $procedimiento_bilat_dif, $procedimiento_liquidar_cod, $arr_datos_liquidados, $add_equipo, $add_equipo_nombre, $add_examen, $add_examen_nombre, $row["procedimiento_cod"], $row["procedimiento_nom"], $wvaltar);
                }

            }
        }
    }
}

/**
 * Inserts a new key/value before the key in the array.
 *
 * @param $key  The key to insert before.
 * @param $array  An array to insert in to.
 * @param $new_key  The key/array to insert.
 * @param $new_value  An value to insert.
 * @return array
 */
// function array_insert_before($key, array $array, $new_key, $new_value = null) {
//     if (array_key_exists($key, $array)) {
//         $new = array();
//         foreach($array as $k => $value) {
//             if ($k === $key) {
//                 if (is_array($new_key) && count($new_key) > 0) {
//                     $new = array_merge($new, $new_key);
//                 } else {
//                     $new[$new_key] = $new_value;
//                 }
//             }
//             $new[$k] = $value;
//         }
//         return $new;
//     }
//     return false;
// }

/**
 * Inserts a new key/value after the key in the array.
 *
 * @param $key  The key to insert after.
 * @param $array  An array to insert in to.
 * @param $new_key  The key/array to insert.
 * @param $new_value  An value to insert.
 *
 * @return array
 */

function array_insert_after($key, array  $array, $new_key, $new_value = null)
{
    if (array_key_exists($key, $array)) {
        $new = array();

        foreach($array as $k => $value) {
            $new[$k] = $value;
            if ($k === $key) {
                if (is_array($new_key) && count($new_key) > 0) {
                    $new = array_merge($new, $new_key);
                } else {
                    $new[$new_key] = $new_value;
                }
           }
        }

        return $new;
    }
    return false;
}

/**
 * [validarAgregarEquipoExamenPaquete description]
 * @param  [type] &$arr_conceptos_liquidar    [description]
 * @param  [type] $concepto_cod_ppal          [description]
 * @param  [type] $id_concepto_uso_equipos    [description]
 * @param  [type] $id_concepto_examenes       [description]
 * @param  [type] $wprocedimiento_add         [description]
 * @param  [type] $procedimiento_bilat_dif    [description]
 * @param  [type] $procedimiento_liquidar_cod [description]
 * @param  [type] $arr_datos_liquidados       [description]
 * @param  [type] $add_equipo                 [description]
 * @param  [type] $add_equipo_nombre          [description]
 * @param  [type] $add_examen                 [description]
 * @param  [type] $add_examen_nombre          [description]
 * @param  [type] $procedimiento_cod          [description]
 * @param  [type] $procedimiento_nom          [description]
 * @param  [type] $wvaltar                    [description]
 * @return [type]                             [description]
 */
function validarAgregarEquipoExamenPaquete(&$arr_conceptos_liquidar, $concepto_cod_ppal, $id_concepto_uso_equipos, $id_concepto_examenes, $wprocedimiento_add, $procedimiento_bilat_dif, $procedimiento_liquidar_cod, $arr_datos_liquidados, $add_equipo, $add_equipo_nombre, $add_examen, $add_examen_nombre, $procedimiento_cod, $procedimiento_nom, $wvaltar)
{
    if($concepto_cod_ppal != $id_concepto_uso_equipos && $concepto_cod_ppal != $id_concepto_examenes)
    {
        // if(array_key_exists($concepto_codigo, $arr_conceptos_liquidar) && !array_key_exists($nombre_lista, $arr_conceptos_liquidar[$concepto_codigo]))
        // {
        //     $arr_conceptos_liquidar[$concepto_codigo][$nombre_lista] = array();
        // }

        // $guardar = "concepto_cod_ppal: ".print_r($concepto_cod_ppal,true).PHP_EOL;
        // seguimiento($guardar);
        // if(!array_key_exists($add_equipo, $arr_conceptos_liquidar[$concepto_codigo][$nombre_lista]))
        // {
        //     $arr_conceptos_liquidar[$concepto_cod_ppal][] = $arr_detalle_concepto;
        // }
    }
    else
    {
        // Cuando se están agregando equipos o exámenes desde un paquete, el wprocedimiento_add (procedimiento al que se le va a agregar), debe ser el mismo código de paquete que se está
        // leyendo, porque hay que recordar que si wprocedimiento_add está vacío entonces el programa intenta agregar los equipos o exámenes siempre al primer paquete o procedimiento.
        $wprocedimiento_add = $procedimiento_bilat_dif;
        switch ($concepto_cod_ppal)
        {
            case $id_concepto_uso_equipos: // Cuando se está añadiendo un equipo
                    $add_equipo        = $procedimiento_cod;
                    $add_equipo_nombre = $procedimiento_nom;
                break;
            case $id_concepto_examenes: // Cuando se está añadiendo un exámen
                    $add_examen        = $procedimiento_cod;
                    $add_examen_nombre = $procedimiento_nom;
                break;
        }

        if($add_equipo != "" || $add_examen != "")
        {
            agregarEquiposExamenes($arr_conceptos_liquidar, $concepto_cod_ppal, $procedimiento_bilat_dif, $procedimiento_liquidar_cod, $wprocedimiento_add, $arr_datos_liquidados, $add_equipo, $add_examen, $add_equipo_nombre, $add_examen_nombre, $wvaltar);
        }
    }
}

/**
 * [consultarPaquete: Función encargada de consultar los paquetes configurados para un procedimiento y tarifa y con esto saber qué conceptos
 *                     conforman el paquete]
 * @param  [index]  $conex                      [Conexión con la base de datos]
 * @param  [string] $wbasedato                  [Prefijo de las tablas a usar]
 * @param  [string] $wemp_pmla                  [Código de empresa de promotora]
 * @param  [string] $procedimiento_liquidar_cod [Código del procedimiento para paquetes asociados]
 * @param  [string] $tarifa_original            [Código de tarífa para filtrar los paquetes que correspondan a esa tarífa]
 * @return [index]                              [Índice de respuesta a la consulta de paquetes encontrados]
 */
function consultarPaquete($conex, $wbasedato, $wemp_pmla, $procedimiento_liquidar_cod, $tarifa_original, $wtiempo_minutos_cx)
{
    $q_paquete1 = " SELECT  c200.Grucod AS concepto_cod_ppal, c200.Grudes AS concepto_nom_ppal, c200.Gruarc AS tabla_valida_precios, c200.Gruser AS wserv, c200.Grutip AS requiere_tercero, c200.Grumva AS modifica_valor, c200.Gruinv AS mueve_inventario, c200.Gruabo AS es_abono, c200.Grutab AS tipo_abono,
                            c103.Propun AS procedimiento_puntos, c200.Grumca AS mueve_caja, c103.Pronom AS procedimiento_nom, c114.Paqdetcan AS wcantidad, c114.Paqdetvan, c114.Paqdetvac, c114.Paqdetfec, c114.Paqdetpro AS procedimiento_cod, c114.Paqdetter AS wtercero, c114.Paqdetpai, c114.Paqdetfac AS wfacturable,
                            c114.Paqdetrmm AS rango_tiempo
                    FROM    {$wbasedato}_000114 AS c114, {$wbasedato}_000200 AS c200, {$wbasedato}_000103 AS c103
                    WHERE   c114.Paqdetcod        = '{$procedimiento_liquidar_cod}'
                            AND  TRIM(c114.Paqdettar)  = '{$tarifa_original}'
                            AND  c114.Paqdetest        = 'on'
                            AND  c114.Paqdetcon        = c200.Grucod
                            AND  c114.Paqdetpro        = c103.Procod
                            AND  '{$wtiempo_minutos_cx}' <= (c114.Paqdetrmm*1)
                            AND  c114.Paqdetgen <> 'on'
                            AND  c103.Proest = 'on'
                    ORDER BY (c114.Paqdetrmm*1), c200.Grudes"; // [updt-68] Filtro que hacía falta Paqdetgen
    $result       = mysql_query($q_paquete1,$conex) or die("Error en el query: ".$q_paquete1."<br>Tipo Error:".mysql_error());

    // $guardar = "q_paquete1: ".print_r($q_paquete1,true).PHP_EOL;
    // seguimiento($guardar);

    $num_detalles = mysql_num_rows($result);
    $res_paquete  = array();
    if($num_detalles > 0)
    {
        // Garantiza tomar solo los registros que tengan el mismo límite del primer elemento e ignorar los demás rangos de la consulta
        $limite_pqt = 0;
        while($row = mysql_fetch_array($result))
        {
            if($limite_pqt == 0)
            {
                $limite_pqt = $row["rango_tiempo"]*1;
            }

            if($limite_pqt == ($row["rango_tiempo"]*1))
            {
                $res_paquete[] = $row;
            }
        }
    }
    else
    {
        // $guardar = "q_paquete1: ".print_r($q_paquete1,true).PHP_EOL;
        // seguimiento($guardar);
        // --> Si no existe un detalle para la tarifa, entonces traigo el detalle de la tarifa general (*).
        $q_paquete2 = " SELECT  c200.Grucod AS concepto_cod_ppal, c200.Grudes AS concepto_nom_ppal, c200.Gruarc AS tabla_valida_precios, c200.Gruser AS wserv, c200.Grutip AS requiere_tercero, c200.Grumva AS modifica_valor, c200.Gruinv AS mueve_inventario, c200.Gruabo AS es_abono, c200.Grutab AS tipo_abono,
                                c103.Propun AS procedimiento_puntos, c200.Grumca AS mueve_caja, c103.Pronom AS procedimiento_nom, c114.Paqdetcan AS wcantidad, c114.Paqdetvan, c114.Paqdetvac, c114.Paqdetfec, c114.Paqdetpro AS procedimiento_cod, c114.Paqdetter AS wtercero, c114.Paqdetpai, c114.Paqdetfac AS wfacturable,
                                c114.Paqdetrmm AS rango_tiempo
                        FROM    {$wbasedato}_000114 AS c114, {$wbasedato}_000200 AS c200, {$wbasedato}_000103 AS c103
                        WHERE   c114.Paqdetcod        = '{$procedimiento_liquidar_cod}'
                                AND  TRIM(c114.Paqdettar)  = '*'
                                AND  c114.Paqdetest        = 'on'
                                AND  c114.Paqdetcon        = c200.Grucod
                                AND  c114.Paqdetpro        = c103.Procod
                                AND  '{$wtiempo_minutos_cx}' <= (c114.Paqdetrmm*1)
                                AND  c114.Paqdetgen <> 'on'
                                AND  c103.Proest = 'on'
                        ORDER BY (c114.Paqdetrmm*1), c200.Grudes"; // [updt-68] Filtro que hacía falta Paqdetgen
        $result = mysql_query($q_paquete2,$conex) or die("Error en el query: ".$q_paquete2."<br>Tipo Error:".mysql_error());

        // $guardar = "q_paquete2: ".print_r($q_paquete2,true).PHP_EOL;
        // seguimiento($guardar);

        // Garantiza tomar solo los registros que tengan el mismo límite del primer elemento e ignorar los demás rangos de la consulta
        $limite_pqt = 0;
        while($row = mysql_fetch_assoc($result))
        {
            if($limite_pqt == 0)
            {
                $limite_pqt = $row["rango_tiempo"]*1;
            }

            if($limite_pqt == ($row["rango_tiempo"]*1))
            {
                $res_paquete[] = $row;
            }
        }
    }
    // $guardar = "res_paquete: ".print_r($res_paquete,true).PHP_EOL;
    // seguimiento($guardar);
    return $res_paquete;
}

/**
 * [listarDetalleLiquidaciones: * Función encargada de consultar el detalle de las liquidaciones de cirugías asociadas a una historia e ingreso de un paciente,
 *                                 esta función no mostrará los cargos que estén anulados.
 *                              * Se cosultan todos los eventos quirúrgicos activos realizados al paciente según la historia e ingreso consultado]
 * @param  [index]  $conex          [Conexión a la base de datos]
 * @param  [string] $wemp_pmla      [Código de empresa de promotora]
 * @param  [string] $wbasedato      [Prefijo de las tablas a consultar]
 * @param  [int]    $whistoria      [Número de historia del paciente que se va a consultar]
 * @param  [int]    $wing           [Número de ingreso de paciente asociado a la historia que se va a consultar]
 * @param  [array]  $arr_parametros [Array de parámetros generales para mostrar en el detalle de la liquidación]
 * @return [array]                  [Array con la información detallada almacenada en el log de liquidaciones de cirugía asociadas a una historia e ingreso, actos quirúrgicos del paciente]
 */
function listarDetalleLiquidaciones($conex, $wemp_pmla, $wbasedato, $whistoria, $wing, &$arr_parametros)
{
    $arr_parametros = array("arr_procedimientos" => array(), "arr_conceptos" => array(), "arr_terceros" => array(), "arr_bases_liquidacion" => array());
    $html = "";
    // Se debió hacer group by por id de la 106 porque si se hace cruce por procedimiento entre 199 y 198
    // no saldrían los cargos que corresponden a equipos. en el codigo del procedimiento se guarda es el código del equipo.
    $sql = "SELECT  t198.Liqcaq AS wdiferencia_acto_qx, t198.Liqhis AS whistoria, t198.Liqing AS wingreso, t198.Liqdoc AS wdocumento, t198.Liqpro AS wprocedimiento, t198.Liqdll AS wcodigo_dll, t198.Liqcon AS wconcepto, t198.Liqter AS wtercero,
                    t198.Liqesp AS wespecialidad, t198.Liqpor AS wporcentaje, t198.Liqvlr AS wvalor, t198.Liqvlf AS wvalor_final, t198.Liqfac AS wfacturable, t198.Liqgra AS wgrabar, t198.Liqblq AS wbaseliquidacion, t198.Liqtta AS wtipo_facturacion,
                    t198.Fecha_data, t198.Hora_data, t198.Liqfca AS wfecha_cargo, t198.Liqhca AS whora_cargo,
                    t106.Tcarpronom AS wnombre_guardado, t106.id AS id_cargo_106, t198.id AS id_cargo_198, t199.Enltur AS codigo_turno_cx, t199.Enlpqt AS espaquete
            FROM    {$wbasedato}_000199 AS t199
                    INNER JOIN
                    {$wbasedato}_000198 AS t198 ON (t199.Enlhis = t198.Liqhis AND t198.Liqing = t199.Enling AND t198.Liqdoc = t199.Enldoc AND t198.liqcaq = t199.Enlcaq AND t198.liqtur = t199.Enltur AND t198.Liqest = 'on')
                    INNER JOIN
                    {$wbasedato}_000106 AS t106 ON (t198.Liqidc = t106.id AND t106.Tcarest = 'on')
            WHERE   t199.Enlhis = '{$whistoria}'
                    AND t199.Enling = '{$wing}'
                    AND t198.Liqest = 'on'
                    AND t198.Liqgra = 'on'
                    AND t106.Tcarest = 'on'
            GROUP BY t106.id
            ORDER BY t198.Liqcaq DESC, t198.Liqfca ASC, wdiferencia_acto_qx, t198.Liqpro, Hora_data, t198.Liqcon";
    $result = mysql_query($sql,$conex) OR die(mysql_errno().' - '.mysql_error().' > '.$sql);
                    /*
                    AND t199.Enlpqt = 'off'
                    */

    // echo "<div style='text-align:left'><br><pre>"; print_r($sql); echo "</pre></div>";

    $arr_liquidados = array();
    while($row = mysql_fetch_array($result))
    {
        if(!array_key_exists($row['wdiferencia_acto_qx'], $arr_liquidados))
        {
            $arr_liquidados[$row['wdiferencia_acto_qx']] = array("Fecha_data"           => $row['Fecha_data'],
                                                                    "Hora_data"         => $row['Hora_data'],
                                                                    "whistoria"         => $row['whistoria'],
                                                                    "wingreso"          => $row['wingreso'],
                                                                    "wdocumento"        => $row['wdocumento'],
                                                                    "wfecha_cargo"      => $row['wfecha_cargo'],
                                                                    "whora_cargo"       => $row['whora_cargo'],
                                                                    "codigo_turno_cx"   => $row['codigo_turno_cx'],
                                                                    "espaquete"         => $row['espaquete'],
                                                                    "arr_liquidaciones" => array());
        }

        $arr_liquidados[$row['wdiferencia_acto_qx']]['arr_liquidaciones'][] = array(
                                                                    "Fecha_data"        => $row['Fecha_data'],
                                                                    "Hora_data"         => $row['Hora_data'],
                                                                    "whistoria"         => $row['whistoria'],
                                                                    "wingreso"          => $row['wingreso'],
                                                                    "wdocumento"        => $row['wdocumento'],
                                                                    "wfecha_cargo"      => $row['wfecha_cargo'],
                                                                    "whora_cargo"       => $row['whora_cargo'],
                                                                    "wcodigo_dll"       => $row['wcodigo_dll'],
                                                                    "wprocedimiento"    => $row['wprocedimiento'],
                                                                    "wprocedimiento_nom"=> $row['wnombre_guardado'],
                                                                    "wconcepto"         => $row['wconcepto'],
                                                                    "wtercero"          => $row['wtercero'],
                                                                    "wespecialidad"     => $row['wespecialidad'],
                                                                    "wporcentaje"       => $row['wporcentaje'],
                                                                    "wvalor"            => $row['wvalor'],
                                                                    "wvalor_final"      => $row['wvalor_final'],
                                                                    "wfacturable"       => $row['wfacturable'],
                                                                    "wbaseliquidacion"  => $row['wbaseliquidacion'],
                                                                    "wtipo_facturacion" => $row['wtipo_facturacion'],
                                                                    "id_cargo_106"      => $row['id_cargo_106'],
                                                                    "id_cargo_198"      => $row['id_cargo_198']);

        // Procedimientos
        if(!array_key_exists($row['wprocedimiento'], $arr_parametros['arr_procedimientos'])){ $arr_parametros['arr_procedimientos'][$row['wprocedimiento']] = $row['wnombre_guardado']; }
        // Conceptos
        if(!array_key_exists($row['wconcepto'], $arr_parametros['arr_conceptos'])){ $arr_parametros['arr_conceptos'][$row['wconcepto']] = $row['wconcepto']; }
        // Terceros
        // if(!array_key_exists($row['wtercero'], $arr_parametros['arr_terceros'])){ $arr_parametros['arr_terceros'][$row['wtercero']] = $row['wtercero']; }
        // Especialidades
        // if(!array_key_exists($row['wespecialidad'], $arr_parametros['arr_especialidades'])){ $arr_parametros['arr_especialidades'][$row['wespecialidad']] = $row['wespecialidad']; }
        // Bases liquidación
        if(!array_key_exists($row['wbaseliquidacion'], $arr_parametros['arr_bases_liquidacion'])){ $arr_parametros['arr_bases_liquidacion'][$row['wbaseliquidacion']] = $row['wbaseliquidacion']; }
    }

    if(count($arr_parametros) > 0)
    {
        $sql = "SELECT  Grucod AS codigo, Grudes AS nombre
                FROM    {$wbasedato}_000200
                WHERE   Grucod IN ('".implode("','", $arr_parametros['arr_conceptos'])."')";
        $result = mysql_query($sql,$conex) OR die(mysql_errno().' - '.mysql_error().' > '.$sql);
        while ($row = mysql_fetch_array($result))
        {
            $arr_parametros['arr_conceptos'][$row['codigo']] = $row['nombre'];
        }

        $sql = "SELECT  Blqclq AS codigo, Blqdes AS nombre
                FROM    {$wbasedato}_000186
                WHERE   Blqclq IN ('".implode("','", $arr_parametros['arr_bases_liquidacion'])."')";
        $result = mysql_query($sql,$conex) OR die(mysql_errno().' - '.mysql_error().' > '.$sql);
        while ($row = mysql_fetch_array($result))
        {
            $arr_parametros['arr_bases_liquidacion'][$row['codigo']] = $row['nombre'];
        }
    }

    return $arr_liquidados;
}

/**
 * [pintarDetalleLiquidaciones: Esta función se encarga de recorrer el array generado en la función "listarDetalleLiquidaciones" y genera el código html para
 *                             mostrarlo en la pantalla del usuario que esta consultando el detalle de liquidaciones para un paciente determinado]
 * @param  [array] $arr_detalle_liquidaciones [Array con todos los parámetros del detalle de liquidaciones]
 * @param  [array] $arr_parametros            [Array con otros parámetros generales para mostrar en el detalle, por ejemplo los terceros involucrados en el procedimiento]
 * @return [html]                             [Texto en código html para mostrar en la interfaz de usuario]
 */
function pintarDetalleLiquidaciones($conex, $wemp_pmla, $wbasedato, $arr_detalle_liquidaciones, $arr_parametros)
{
    $html_actos = "";
    $concepto_medicamentos_mueven_inv = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_medicamentos_mueven_inv');
    $concepto_materiales_mueven_inv   = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_materiales_mueven_inv');
    // Recorre todos los actos quirúrgicos realizados al paciente
    foreach ($arr_detalle_liquidaciones as $dif_acto => $arr_acto)
    {
        $whora_cargo     = $arr_acto['whora_cargo'];
        $wfecha_cargo    = $arr_acto['wfecha_cargo'];
        $codigo_turno_cx = $arr_acto['codigo_turno_cx'];
        $whistoria       = $arr_acto['whistoria'];
        $wingreso        = $arr_acto['wingreso'];
        $wdocumento      = $arr_acto['wdocumento'];
        $espaquete       = $arr_acto['espaquete'];
        $wfecha_cargo_exp = explode('-',$arr_acto['wfecha_cargo']);
        $anio = $wfecha_cargo_exp[0];
        $mex  = $wfecha_cargo_exp[1];
        $diax = $wfecha_cargo_exp[2];
        $nombre_dia = nombreDiaSemana($anio, $mex, $diax);
        $html_actos .= '<div id="div_contenedor_evento_qx_'.$dif_acto.'" class="margen-superior-eventos">
                            <div class="" style="width:100%;text-align:left;"><span class="encabezadoTabla">Evento Quirurgico: </span><span class="encabezadoTabla">'.$nombre_dia.' '.$wfecha_cargo.' '.$whora_cargo.', Turno cirugía: '.$codigo_turno_cx.'</span>&nbsp;<button style="font-size:9pt;" onclick="verOcultarLista(\'div_tabla_lista_cxs_'.$dif_acto.'\');">Ver / Ocultar cargos</button> <button class="alinear_derecha" style="font-size:9pt;" id="boton_add_cx_'.$dif_acto.'" class="btn_loading bloquear_todo" onclick="anularActoQuirurgico(this,\'hddn_cargo_anular_\',\''.$dif_acto.'\',\''.$whistoria.'\',\''.$wingreso.'\',\''.$wdocumento.'\',\''.$codigo_turno_cx.'\');" >Anular</button><span id="spn_anulando_'.$dif_acto.'" style="display:none;"><img class="" border="0" src="../../images/medical/ajax-loader2.gif" title="Cargando.." >Anulando..</span></div>
                            <div style="display:none; width:100%; height: 200px; overflow:auto;" id="div_tabla_lista_cxs_'.$dif_acto.'" >
                            <table id="tabla_lista_cxs_'.$dif_acto.'" align="center" width="100%;">
                                <tr class="encabezadoTabla">
                                <td style="text-align:center;">'.PROCEDIMIENTO.'</td>
                                <td style="text-align:center;">'.CONCEPTO_LABEL.'</td>
                                <td style="text-align:center;">'.TERCERO_LABEL.'</td>
                                <td style="text-align:center;">'.ESPECILALIDAD.'</td>
                                <td style="text-align:center;">%Liq.</td>
                                <!-- <td style="text-align:center;">Valor</td> -->
                                <td style="text-align:center;">Total</td>
                                <td style="text-align:center;">Facturable</td>
                                <td style="text-align:center;">Base Liq.</td>
                                <td style="text-align:center;">Tipo facturación</td>
                                <!-- <td style="text-align:center;">Anular <input type="checkbox" id="chk_anular_todos" name="chk_anular_todos" value="" ></td> -->
                            </tr>';

        // $arr_parametros = array("arr_procedimientos" => array(), "arr_conceptos" => array(), "arr_terceros" => array(), "arr_bases_liquidacion" => array());
        $sumatoria_total = 0;
        $cont = 0;
        // Por cada evento quirúrgico muestra los conceptos asociados a la liquidación
        foreach ($arr_acto['arr_liquidaciones'] as $key => $arr_registro)
        {
            $tercero = '';
            $especialidad = '';
            $css = ($cont % 2 == 0) ? 'fila1': 'fila2';

            if($arr_registro['wtercero'] != '')
            {
                $tercero = $arr_registro['wtercero'].'-'.$arr_parametros['arr_terceros'][$arr_registro['wtercero']]['nombre'];
                $exp_especialidades = explode(',', $arr_parametros['arr_terceros'][$arr_registro['wtercero']]['especialidad']);
                foreach ($exp_especialidades as $keyesp => $value_esps)
                {
                    $exp_esp = explode('-', $value_esps);
                    if($arr_registro['wespecialidad'] == $exp_esp[0])
                    {
                        $especialidad = $exp_esp[0].'-'.$exp_esp[1];
                        break;
                    }
                }
            }

            $id_cargo_106 = $arr_registro['id_cargo_106'];
            $id_cargo_198 = $arr_registro['id_cargo_198'];

            $valor_cargo         = $arr_registro['wvalor_final']*1;
            $valor_cargo_formato = number_format($valor_cargo,CANTIDAD_DECIMALES);
            $valor_cargo_html    = '<span style="font-weight:bold;" >'.$valor_cargo_formato.'</span>';
            if($arr_registro['wfacturable'] == "N")
            {
                $valor_cargo_html = '<span style=""><strike>'.$valor_cargo_formato.'</strike></span>';
                $valor_cargo = 0;
            }

            $nombre_pro = ($espaquete == 'on') ? $arr_registro["wprocedimiento_nom"]: utf8_encode($arr_parametros['arr_procedimientos'][$arr_registro['wprocedimiento']]);

            $nombre_procedimiento_o_insumo = $arr_registro['wprocedimiento'].'-'.$nombre_pro;
            if($arr_registro['wconcepto'] == $concepto_medicamentos_mueven_inv || $arr_registro['wconcepto'] == $concepto_materiales_mueven_inv)
            {
                $arr_datos_insumo = traer_medicamento ($conex, $wemp_pmla, $wbasedato, $arr_registro['wcodigo_dll']);
                if(!array_key_exists("error", $arr_datos_insumo) && $arr_datos_insumo['error'] == 1)
                {

                }
                else
                {
                    $nombre_procedimiento_o_insumo = $arr_datos_insumo['Artcod'].'-'.$arr_datos_insumo['Artcom'];
                }
            }

            $html_actos .= '<tr class="'.$css.'">
                                <td>
                                    <input type="hidden" id="hddn_cargo_anular_'.$dif_acto.'_'.$id_cargo_198.'" name="hddn_cargo_anular_'.$dif_acto.'_'.$id_cargo_198.'" id_cargo_106="'.$id_cargo_198.':'.$id_cargo_106.'" id_cargo_198="'.$id_cargo_198.'" value="" >
                                    '.$nombre_procedimiento_o_insumo.'
                                </td>
                                <td>'.$arr_registro['wconcepto'].'-'.$arr_parametros['arr_conceptos'][$arr_registro['wconcepto']].'</td>
                                <td>'.$tercero.'</td>
                                <td>'.$especialidad.'</td>
                                <td style="text-align:right;">'.$arr_registro['wporcentaje'].'</td>
                                <!-- <td>'.number_format($arr_registro['wvalor'],CANTIDAD_DECIMALES).'</td> -->
                                <td style="text-align:right;">'.$valor_cargo_html.'</td>
                                <td>'.$arr_registro['wfacturable'].'</td>
                                <td>'.$arr_registro['wbaseliquidacion'].'-'.$arr_parametros['arr_bases_liquidacion'][$arr_registro['wbaseliquidacion']].'</td>
                                <td>'.$arr_registro['wtipo_facturacion'].'</td>
                                <!-- <td style="text-align:center;" >
                                    <input type="checkbox" id="chk_cargo_anular" name="chk_cargo_anular" id_cargo_106="'.$id_cargo_198.':'.$id_cargo_106.'" id_cargo_198="'.$id_cargo_198.'" value="" >
                                </td> -->
                            </tr>';
            $sumatoria_total += ($valor_cargo*1);
            $cont++;
        }
        $html_actos .=      '<tr class="encabezadoTabla">
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <!-- <td>&nbsp;</td> -->
                                <td>'.number_format($sumatoria_total,CANTIDAD_DECIMALES).'</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <!-- <td>&nbsp;</td> -->
                            </tr>';
        $html_actos .= '    </table>
                            </div>
                        <!-- <div id="otros_datos_acto_qx_xx" class="datos-adds-eventos">
                            <table>
                                <tr>
                                    <td class="encabezadoTabla">Tipo anestesia</td>
                                    <td class="fila2">Lorem ipsum dolor sit amet</td>
                                    <td class="encabezadoTabla">Sala recuperación (horas)</td>
                                    <td class="fila2">Lorem ipsum dolor sit amet</td>
                                    <td class="encabezadoTabla">Tiempo uso equipos (horas)</td>
                                    <td class="fila2">Lorem ipsum dolor sit amet</td>
                                </tr>
                            </table>
                        </div> -->';
        $html_actos .= '</div>';
    }
    return $html_actos;
}

/**
 * [agregar_concepto_a_procedimiento: Función encargada de complementar los parámetros de liquidación de un concepto por ejemplo cuando este se agrega cuando se esta haciendo
 *                                     la liquidación y este no esta en la plantilla o en el caso en que se debe cobrar un concepto adicional si por ejemplo se debe cobrar un
 *                                     único valor por materiales y medicamentos (concepto de materiales y medicamentos no facturables)]
 * @param  [index]  $conex                         [Conexión a la base de datos]
 * @param  [string] $wemp_pmla                     [Código de empresa de promotora]
 * @param  [string] $wbasedato                     [Prefijo de las tablas de base de datos a usar]
 * @param  [string] $limite_concepto_cobro_insumos [Código del concepto que se cobra como único valor por ejemplo para materiales y medicamentos]
 * @param  [string] $procedimiento_liquidar_cod    [Código del procedimiento al que se le va a adicionar el nuevo concepto]
 * @param  [string] $procedimiento_bilat_dif       [Código del procedimiento diferenciando por la posición del organo o bilateralidad]
 * @param  [array]  $arr_lista_conceptos           [Array de conceptos para agregar el nuevo elemento a la lista]
 * @param  [array]  $arr_procedimientos_liquidar   [Array de procedimientos para agregar el nuevo concepto que hace parte del procedimiento y poderlo mostrar en pantalla]
 * @return [type]                                  [description]
 */
function agregar_concepto_a_procedimiento($conex, $wemp_pmla, $wbasedato, $limite_concepto_cobro_insumos, $procedimiento_liquidar_cod, $procedimiento_bilat_dif, &$arr_lista_conceptos, &$arr_procedimientos_liquidar, $wcod_empresa)
{
    global $orden_conceptos_por_procedimiento;
	
	// --> 2018-11-01: Jerson Trujillo. Se valida que el array exista y sino se crea.
	if(!is_array($orden_conceptos_por_procedimiento[$procedimiento_bilat_dif]))
		$orden_conceptos_por_procedimiento[$procedimiento_bilat_dif] = array();
	
	if(!is_array($arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar"]))
		$arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar"] = array();
	// --> Fin cambio jerson
	
    $sql = "SELECT  con.Grucod AS concepto_cod_ppal, con.Grudes AS concepto_nom_ppal, con.Grutip AS requiere_tercero, con.Grumva AS modifica_valor, con.Gruinv AS mueve_inventario, con.Gruarc AS tabla_valida_precios, con.Gruser AS wserv
            FROM    {$wbasedato}_000200 AS con
            WHERE   con.Grucod = '{$limite_concepto_cobro_insumos}'";
    $resultCon = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
    if(mysql_num_rows($resultCon) > 0)
    {
        $rowCon = mysql_fetch_array($resultCon);

        $arr_lista_conceptos[$limite_concepto_cobro_insumos] = $rowCon['concepto_nom_ppal'];

        if(!array_key_exists($limite_concepto_cobro_insumos, $arr_lista_conceptos))
        {
            $arr_lista_conceptos[$limite_concepto_cobro_insumos] = $rowCon['concepto_nom_ppal'];
        }

        if(!array_key_exists($limite_concepto_cobro_insumos, $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif])) { $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif][$limite_concepto_cobro_insumos] = $limite_concepto_cobro_insumos; }

        if(!array_key_exists($limite_concepto_cobro_insumos, $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar"]))
        {
            $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar"][$limite_concepto_cobro_insumos] = array();
        }

        // if(!array_key_exists($limite_concepto_cobro_insumos, $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar_empresa_plantilla"]))
        // {
        //     $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar_empresa_plantilla"][$limite_concepto_cobro_insumos] = array();
        // }

        if(count($arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar"][$limite_concepto_cobro_insumos]) == 0)
        {
            $arr_concepto_info = array( "cantidad_concepto"    => 1,
                                    "wserv"                => $rowCon['wserv'],
                                    "tipo_cobro"           => "",
                                    "requiere_tercero"     => $rowCon["requiere_tercero"],
                                    "tabla_valida_precios" => $rowCon["tabla_valida_precios"],
                                    "modifica_valor"       => $rowCon["modifica_valor"],
                                    "mueve_inventario"     => $rowCon["mueve_inventario"],
                                    "concepto_cod_ppal"    => $limite_concepto_cobro_insumos,
                                    "concepto_nom_ppal"    => $rowCon['concepto_nom_ppal'],
                                    "procedimiento_cod"    => $procedimiento_liquidar_cod,
                                    "procedimiento_nom"    => $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["nombre"],
                                    "procedimiento_tarifa" => $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["modalidad_facturacion"],
                                    "procedimiento_puntos" => $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["wnumero_puntos"],
                                    "progqx_puntos_gqx"    => $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["wgrupo_gqx"],
                                    "cobro_concepto"       => $limite_concepto_cobro_insumos,
                                    "cobro_procedimiento"  => $procedimiento_liquidar_cod,
                                    "empresa_plantilla"    => array(),
                                    "arr_cobrar"           => array(),
                                    "wvaltar"              => 0,
                                    "es_concepto_extra"    => true);
        }
        else
        {
            $arr_concepto_info = $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar"][$limite_concepto_cobro_insumos];
        }
        adicionarTipoCobroPorEmpresa($conex, $wemp_pmla, $wbasedato,$arr_concepto_info, $limite_concepto_cobro_insumos, "", $limite_concepto_cobro_insumos, $procedimiento_liquidar_cod, $wcod_empresa);
        $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar"][$limite_concepto_cobro_insumos] = $arr_concepto_info;
        // $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar_empresa_plantilla"][$limite_concepto_cobro_insumos] = array();
    }
}


/**
 * [consultarConceptosManuales: Consulta los conceptos que estan configurados en los manuales de cirugías, para ayudar a saber si
 *                             el concepto que se esté liquidando corresponde a uno de los conceptos de manuales de cirugías multiples]
 * @param  [index]  $conex     [Conexión a la base de datos]
 * @param  [string] $wemp_pmla [Código de empresa de promotora]
 * @param  [string] $wbasedato [Prefijo de las tablas de base de datos a usar]
 * @return [array]             [Retorna un array con los códigos de los conceptos activos que conformarán las columnas de configuración para los porcentajes de cada cirugía]
 */
function consultarConceptosManuales($conex, $wemp_pmla, $wbasedato)
{
    $arr_conceptos_manuales = array();
    $sql = "SELECT  Concod
            FROM    {$wbasedato}_000208
            WHERE   Conest = 'on'
            ORDER BY Conord ASC";
    $result = mysql_query($sql,$conex) or die ("Error: ".mysql_errno()." - en el query: ".$sql." - ".mysql_error());
    while($row = mysql_fetch_array($result))
    {
        $arr_conceptos_manuales[$row["Concod"]] = $row["Concod"];
    }
    return $arr_conceptos_manuales;
}

/**
 * [tipoPOS_procedimiento: Indica si la liquidación actual es de un procedimiento POS (false) o NO POS (true)]
 * @param  [type] $TIP_POS [description]
 * @return [type]          [description]
 */
function tipoPOS_procedimiento($TIP_POS)
{
    $expl_tip_pro = explode("_ORD_", $TIP_POS);
    $procedimiento_NOPOS = ($expl_tip_pro[1] == 'PRO_NOPOS') ? true: false;//En devoluciones si debe existir POS y NO POS porque es necesario saber con que valor de tarifa se debe devolver el insumo.
    // $procedimiento_NOPOS = (array_key_exists(1, $expl_tip_pro) && $expl_tip_pro[1] == 'PRO_NOPOS') ? true: false;//array_key_exists para las devoluciones, en esos casos no existe POS o NO POS
    return $procedimiento_NOPOS;
}

/**
 * [verificarManualSecundarioLiq: Consulta si el manual tiene configurado un código de manual secundario o tarífa secundaria, puede ser uno o el otro,
 *                                 si hay código de manual secundario entonces busca ese código para actualizar el id de ese nuevo manual con que se debe seguir
 *                                 liquidando]
 * @param  [type] $conex           [description]
 * @param  [type] $wbasedato       [description]
 * @param  [type] $TIP_POS         [description]
 * @param  [type] $id_cx_multiples [description]
 * @return [type]                  [description]
 */
function verificarManualSecundarioLiq($conex, $wbasedato, $TIP_POS, $id_cx_multiples)
{
    $procedimiento_NOPOS = tipoPOS_procedimiento($TIP_POS);
    $arr_parametros_adds = array("id_cx_multiples"=>$id_cx_multiples, "tarifa_secundaria"=>"");

    if($procedimiento_NOPOS)
    {
        $sqlEnc = " SELECT Blqmns AS cod_manual_secundario, Blqtrs AS tarifa_secundaria
                    FROM    {$wbasedato}_000186 AS t186
                    WHERE   t186.id = '{$id_cx_multiples}'";
        $resultEnc = mysql_query($sqlEnc, $conex) OR die(mysql_errno()." - ".mysql_error().' > '.$sql);
        $manual_enc = mysql_fetch_array($resultEnc);
        if($manual_enc["cod_manual_secundario"] != '')
        {
            $sqlSec             = " SELECT t186.id, t186.Blqmns AS cod_manual_secundario, t186.Blqtrs AS tarifa_secundaria
                                    FROM    {$wbasedato}_000186 AS t186
                                    WHERE   t186.Blqclq = '{$manual_enc["cod_manual_secundario"]}'";
            $resultSec          = mysql_query($sqlSec, $conex) OR die(mysql_errno()." - ".mysql_error().' > '.$sql);
            if(mysql_num_rows($resultSec) > 0)
            {
                $manual_enc = mysql_fetch_array($resultSec);
                $arr_parametros_adds["id_cx_multiples"] = $manual_enc["id"];
            }
        }

        if($manual_enc["tarifa_secundaria"] != '')
        {
            $arr_parametros_adds["tarifa_secundaria"] = $manual_enc["tarifa_secundaria"];
        }
    }
    return $arr_parametros_adds;
}

/**
 * [buscarLimitesEnManual: Busca un manual de cirugía para encontrar los posibles límites de uvr o código para materiales y medicamentos, asi como tambien límites
 *                         de cobro de ayudantía]
 * @param  [index]  $conex               [Conexión a la base de datos]
 * @param  [string] $wbasedato           [Código de empresa de promotora]
 * @param  [string] $tipoEmpresa         [Prefijo de las tablas de base de datos a usar]
 * @param  [string] $wcod_empresa        [Código de la empresa responsable del paciente]
 * @param  [string] $wpolitraumatizado   [La liquidación aplica para paciente politraumatizado o no politraumatizado (on u off)]
 * @param  [string] $TB_BASE_LIQUIDACION [Sufijo o consecutivo de la tabla donde se debe consultar el manual]
 * @return [array]                       [Array de campos consultados para el manual de liquidación]
 */
function buscarLimitesEnManual($conex, $wbasedato, $tipoEmpresa, $wcod_empresa, $wpolitraumatizado, $TB_BASE_LIQUIDACION, $procedimiento_manual, $TIP_POS)
{
    $row_limite = array();
    $variables = array();
    $variables = arrayVariablesManualCxMultiples($tipoEmpresa, $wcod_empresa, $wpolitraumatizado, $procedimiento_manual);

    $sql = generarQueryCombinado($variables, "{$wbasedato}_000186 AS enc");
    // $guardar = "wcod_empresa: $wcod_empresa | sql :".print_r($sql,true).PHP_EOL.PHP_EOL;
    // seguimiento($guardar);
    $result_limite = mysql_query($sql, $conex) OR die(mysql_errno()." - ".mysql_error().' > '.$sql);

    if(mysql_num_rows($result_limite) > 0)
    {
        $row_CxMul          = mysql_fetch_array($result_limite);
        $id_cx_multiples    = $row_CxMul['id'];
        // $arr_ConfSecundario = verificarManualSecundarioLiq($conex, $wbasedato, $TIP_POS, $id_cx_multiples);
        // $id_cx_multiples    = $arr_ConfSecundario["id_cx_multiples"]; //Si cambio al interior de la función entonces se actualiza, en caso contrario entonces quedará igual como se envió por parámetros a la función

        $result_limiteSelec = consultarManualDeLimite($conex, $wbasedato, $TB_BASE_LIQUIDACION, $id_cx_multiples);
        if(mysql_num_rows($result_limiteSelec) > 0)
        {
            $row_limite = mysql_fetch_array($result_limiteSelec);
        }
    }
    return $row_limite;
}

/**
 * [consultarManualDeLimite: Dado el ID de un manual, realiza un query para consultar todos los campos principales de un manual, por ejemplo
 *                           limites de uvr, grupo o ayudantía, clasificaciones de medicamentos que se deben facturar o no facturar tanto para uvr como para grupo]
 * @param  [index]  $conex               [conexión a la base de datos]
 * @param  [string] $wbasedato           [prefijo de tablas de base datos, según la empresa]
 * @param  [string] $TB_BASE_LIQUIDACION [Sufijo o consecutivo de la tabla donde se debe consultar el manual]
 * @param  [int]    $id_cx_multiples     [ID de base de datos correspondiente a un manual de liquidación]
 * @return [index]                       [Indice o puntero de una consulta a la base de datos que puede ser leída por fuera de esta función]
 */
function consultarManualDeLimite($conex, $wbasedato, $TB_BASE_LIQUIDACION, $id_cx_multiples)
{
    $sql = "SELECT  t186.Blqclq AS codigo_liquidacion, t186.Blqdes AS nombre_liquidacion,
                    t186.Blqtie AS requiere_tiempos, t186.Blquvr AS limite_med_uvr, t186.Blqccu AS cobro_limite_med_uvr, t186.Blqlgr AS limite_med_grupo,
                    t186.Blqccg AS cobro_limite_med_grupo, t186.Blqmuv AS limite_mat_uvr, t186.Blqcmu AS cobro_limite_mat_uvr, t186.Blqmgr AS limite_mat_grupo,
                    t186.Blqcmg AS cobro_limite_mat_grupo, t186.Blqcma AS excluido_medicamento_uvr, t186.Blqcmb AS excluido_material_uvr,
                    t186.Blqcmc AS excluido_medicamento_grupo, t186.Blqcmd AS excluido_material_grupo, t186.Blqnfa AS NoFactClase_medicamento_uvr,
                    t186.Blqnfb AS NoFactClase_material_uvr, t186.Blqnfc AS NoFactClase_medicamento_grupo, t186.Blqnfd AS NoFactClase_material_grupo,
                    t186.Blqanf AS winsumos_no_facturables, t186.Blqape AS validar_articuloPor_empresa, t186.Blqrce AS wredondear_centena
            FROM    {$wbasedato}_000186 AS t186
            WHERE   t186.id = '{$id_cx_multiples}'";
    $result_limite = mysql_query($sql, $conex) OR die(mysql_errno()." - ".mysql_error().' > '.$sql);
    return $result_limite;
}


/**
 * [guardar_datos_temporales encargada de guardar en la tabla temporal aquellos parametros datos necesarios para recuperar una liquidación en curso
 * luego de un cierre inesperado]
 * @param  [string] $conex            [conexión a la base de datos]
 * @param  [string] $wbasedato        [prefijo de tablas de base datos, según la empresa]
 * @param  [array]  $datos_temporales [parametros temporales que se necesitan para ser recuperados, se guardan temporalmente en campos hidden de código html
 *                                     posteriormente guardados en una tabla de base de datos y desde allí poderlos recuperar ante un eventual cierre inesperado del programa]
 * @return [null]                     [No hay respuesta de la función, simplemente hace una actualización a una tabla de base de datos]
 */
function guardar_datos_temporales($conex, $wbasedato, $datos_temporales, $fecha_actual, $hora_actual, $whistoria, $wing, $user_session, $temporal)
{
    /*$datos_temporales = array(  "tabla_lista_cxs"            => $tabla_lista_cxs,
                                    "arr_datos_liquidar"         => $arr_datos_liquidar
                                    "arr_datos_liquidados"       => $arr_datos_liquidados
                                    "arr_extras"                 => $arr_extras
                                    "wnumvias"                   => $wnumvias,
                                    "wfecha_cargo"               => $wfecha_cargo,
                                    "whora_cargo"                => $whora_cargo,
                                    "wpolitraumatizado"          => $wpolitraumatizado,
                                    "wtipo_anestesia_cx"         => $wtipo_anestesia_cx,
                                    "wtiempo_sala_recuperarcion" => $wtiempo_sala_recuperarcion,
                                    "wtiempo_uso_minutos"        => $wtiempo_uso_minutos,
                                    "wtiempo_minutos_cx"         => $wtiempo_minutos_cx,
                                    "arr_CARGOS_PARA_GRABAR"     => $arr_CARGOS_PARA_GRABAR);*/
    $div_recuperacion_datos = ' <input type="hidden" id="arr_datos_liquidar_tempRecuperar" name="arr_datos_liquidar_tempRecuperar" value="'.$datos_temporales["arr_datos_liquidar"].'" />
                                <input type="hidden" id="arr_extras_tempRecuperar" name="arr_extras_tempRecuperar" value="'.$datos_temporales["arr_extras"].'" />
                                <input type="hidden" id="wnumvias_tempRecuperar" name="wnumvias_tempRecuperar" value="'.$datos_temporales["wnumvias"].'" />
                                <input type="hidden" id="wfecha_cargo_tempRecuperar" name="wfecha_cargo_tempRecuperar" value="'.$datos_temporales["wfecha_cargo"].'" />
                                <input type="hidden" id="whora_cargo_tempRecuperar" name="whora_cargo_tempRecuperar" value="'.$datos_temporales["whora_cargo"].'" />
                                <input type="hidden" id="wpolitraumatizado_tempRecuperar" name="wpolitraumatizado_tempRecuperar" value="'.$datos_temporales["wpolitraumatizado"].'" />
                                <input type="hidden" id="wturno_cirugia_tempRecuperar" name="wturno_cirugia_tempRecuperar" value="'.$datos_temporales["wturno_cirugia"].'" />
                                <input type="hidden" id="wtipo_anestesia_cx_tempRecuperar" name="wtipo_anestesia_cx_tempRecuperar" value="'.$datos_temporales["wtipo_anestesia_cx"].'" />
                                <input type="hidden" id="wtiempo_sala_recuperarcion_tempRecuperar" name="wtiempo_sala_recuperarcion_tempRecuperar" value="'.$datos_temporales["wtiempo_sala_recuperarcion"].'" />
                                <input type="hidden" id="wtiempo_uso_minutos_tempRecuperar" name="wtiempo_uso_minutos_tempRecuperar" value="'.$datos_temporales["wtiempo_uso_minutos"].'" />
                                <input type="hidden" id="wtiempo_minutos_cx_tempRecuperar" name="wtiempo_minutos_cx_tempRecuperar" value="'.$datos_temporales["wtiempo_minutos_cx"].'" />
                                <input type="hidden" id="wliq_paquete_tempRecuperar" name="wliq_paquete_tempRecuperar" value="'.$datos_temporales["wliq_paquete"].'" />
                                <input type="hidden" id="wliq_soloInsumos_tempRecuperar" name="wliq_soloInsumos_tempRecuperar" value="'.$datos_temporales["wliq_soloInsumos"].'" />
                                <input type="hidden" id="arr_CARGOS_PARA_GRABAR_tempRecuperar" name="arr_CARGOS_PARA_GRABAR_tempRecuperar" value="'.$datos_temporales["arr_CARGOS_PARA_GRABAR"].'" />
                                <input type="hidden" id="id_encabezado_sin_tarifa_tempRecuperar" name="id_encabezado_sin_tarifa_tempRecuperar" value="'.$datos_temporales["id_encabezado_sin_tarifa"].'" />
                                <input type="hidden" id="arr_datos_liquidados_tempRecuperar" name="arr_datos_liquidados_tempRecuperar" value="'.$datos_temporales["arr_datos_liquidados"].'" />
                                ';

    $html = $datos_temporales["tabla_lista_cxs"]."[*****]".$div_recuperacion_datos;
    $html = str_replace("<tbody>", "", $html);  $html = str_replace("</tbody>", "", $html);
    $html = addslashes($html);
    $html = utf8_decode($html);
    // seguimiento($html);

    switch ($temporal) {
        case '000160':
            $infoEncabezado = estadoCongelacionCuentaPaciente($whistoria, $wing);
            if($infoEncabezado['hayEncabezado'])
            {
                $infoValores    = $infoEncabezado['valores'];

                $sql = "UPDATE  {$wbasedato}_000160
                        SET Ecofec = '{$fecha_actual}',
                            Ecohor = '{$hora_actual}',
                            Ecotem = '".$html."'
                        WHERE  id     = '{$infoValores['id']}' ";
                mysql_query($sql, $conex) or die("<b>ERROR EN QUERY MATRIX - ACTUALIZAR CAMPO TEMPORALES (000160):</b><br>".mysql_error()."<br>SQL: ".$sql);

                // html_entity_decode($salida);
            }
            break;

        case '000230':
            $id_encabezado_sin_tarifa = '';
            //Verificar si hay una cirugía pendiente de liquidar para una historia e ingreso
            if(empty($datos_temporales["id_encabezado_sin_tarifa"]))
            {
                $sql = "SELECT  id
                        FROM    {$wbasedato}_000230
                        WHERE   Ntrhis = '{$whistoria}'
                                AND Ntring = '{$wing}'
                                AND Ntrrcr = 'PR'
                                AND Ntrest = 'on'";

                $result = mysql_query($sql, $conex) or die("<b>ERROR EN QUERY MATRIX - CONSULTAR PENDIENTE (000230):</b><br>".mysql_error()."<br>SQL: ".$sql);
                if(mysql_num_rows($result) > 0)
                {
                    $rw = mysql_fetch_array($result);
                    $id_encabezado_sin_tarifa = $rw['id'];
                }
            }
            else
            {
                $id_encabezado_sin_tarifa = $datos_temporales["id_encabezado_sin_tarifa"];
            }

            // INSERTAR ENCABEZADO
            // Si ya hay un ID es porque se está editando un acto quirúrgico que con anterioridad ya había presentando algún error en tarifas
            // En ese caso no debe insertar un nuevo registro sino simplemente actualizar el detalle de errores o problema de tarifas
            if(empty($id_encabezado_sin_tarifa))
            {
                $sql = "INSERT INTO {$wbasedato}_000230
                            (Medico, Fecha_data, Hora_data, Ntrhis, Ntring, Ntrltm, Ntrrcr, Ntrest, Seguridad)
                            VALUES
                            ('{$wbasedato}', '{$fecha_actual}', '{$hora_actual}', '{$whistoria}', '{$wing}', '{$html}', 'PR', 'on', 'C-{$user_session}') ";
                mysql_query($sql, $conex) or die("<b>ERROR EN QUERY MATRIX - INSERTAR CAMPO TEMPORALES (000230):</b><br>".mysql_error()."<br>SQL: ".$sql);
                $id_encabezado_sin_tarifa = mysql_insert_id();
            }
            else
            {
                $sql = "UPDATE  {$wbasedato}_000230
                        SET     Fecha_data = '{$fecha_actual}',
                                Hora_data  = '{$hora_actual}',
                                Seguridad  = 'C-{$user_session}',
                                Ntrltm     = '".$html."'
                        WHERE  id     = '{$id_encabezado_sin_tarifa}' ";
                mysql_query($sql, $conex) or die("<b>ERROR EN QUERY MATRIX - ACTUALIZAR CAMPO TEMPORALES (000230):</b><br>".mysql_error()."<br>SQL: ".$sql);
            }
            return $id_encabezado_sin_tarifa;
            break;
    }
}


/**
 * [consultarGruposClasificados Permite consultar los grupos de medicamentos en la tabla 000004 a partir de la clasificación o clasificaciones concatenadas que llegan como parámetro
 *                              y son clasificaciones del maestro 000203]
 * @param  [type] $conex           [description]
 * @param  [type] $wbasedato       [description]
 * @param  [type] $clasificaciones [description]
 * @return [type]                  [description]
 */
function consultarGruposClasificados($conex, $wbasedato, $clasificaciones)
{
    $arr_grupos = array();
    if(!empty($clasificaciones))
    {
        $explode_grupos = explode("|", $clasificaciones);
        $filtro = implode("','", $explode_grupos);
        $sql_04 = " SELECT tc4.Grucod, tc4.Grudes
                    FROM {$wbasedato}_000004 tc4
                    WHERE tc4.Grucpg IN ('{$filtro}')
                            AND tc4.Gruest = 'on'";
        // $guardar = "sql_04: ".print_r($sql_04,true).PHP_EOL;
        // seguimiento($guardar);
        if($result_04 = mysql_query($sql_04))
        {
            while ($row_04 = mysql_fetch_array($result_04))
            {
                if(!array_key_exists($row_04['Grucod'], $arr_grupos))
                {
                    $arr_grupos[$row_04['Grucod']] = $row_04['Grucod'];
                }
            }
        }
    }
    return $arr_grupos;
}

/**
 * [generarArrayRelacionesNoFacturables: Para un manual de liquidación busca si existen configuradas restricciones de procedimientos relacionados,
 *                                     es decir, que pueden existir procedimientos que no se cobren si estan acompañados por otros procedimientos en específico.
 *                                     Esta función se encarga de crear un array con esas relaciones]
 * @param  [index]  $conex            [conexión a la base de datos]
 * @param  [string] $wbasedato        [prefijo de tablas de base datos, según la empresa]
 * @param  [int]    $wbaseliquidacion [ID de base de datos correspondiente a un manual de liquidación]
 * @return [array]                    [Array de procedimientos relacionados]
 */
function generarArrayRelacionesNoFacturables($conex, $wbasedato, $wbaseliquidacion)
{
    $arr_relaciones = array();
    $sql = "SELECT  Rnfpro, Rnfrel
            FROM    {$wbasedato}_000225
            WHERE   Rnfman = '{$wbaseliquidacion}'
                    AND Rnfest = 'on'
                    AND Rnfpro <> ''
                    AND Rnfrel <> ''";

    $result = mysql_query($sql) or die("Error ".mysql_errno()." => ".mysql_error()." => ".$sql);
    while($row = mysql_fetch_array($result))
    {
        if(!array_key_exists($row['Rnfpro'], $arr_relaciones))
        {
            $arr_relaciones[$row['Rnfpro']] = array();
        }
        $expl_arr = explode("|", $row['Rnfrel']);
        $arr_relaciones[$row['Rnfpro']] = $expl_arr;
    }
    return $arr_relaciones;
}

/**
 * [validarProcedimientoNoFacturable: Esta función se encarga de verificar si el procedimiento que se esta liquidando debe mostrarse como facturable o no facturable si y solo si
 *                                     encuentra que el código del procedimiento actual se encuentra relacionado en el mismo acto quirúrgico con otro procedimiento que se
 *                                     encuentra en la relación]
 * @param  [array] $arr_procedimientos_relacionados [Array de procedimientos liquidados en el acto quirúrgico relacionando cada procedimientos con cada uno de los otros procedimientos que lo
 *                                                    acompañan en la liquidación, este array se compara con el leído en el manual de cirugía y se verifica si
 *                                                    coincide alguna relación con la configuración leida en el manual]
 * @param  [type] $arr_proced_Manual_NoFact         [Array de procedimientos relacionados leídos en la configuración de manuales de cirugía]
 * @param  [type] $codigo_procedimiento             [Código del procedimiento que se está liquidando]
 * @return [type]                                   [Variable que indica facturable S o no facturable N]
 */
function validarProcedimientoNoFacturable($arr_procedimientos_relacionados, $arr_proced_Manual_NoFact, $codigo_procedimiento)
{
    $arr_result = array();
    if(array_key_exists($codigo_procedimiento, $arr_procedimientos_relacionados) && array_key_exists($codigo_procedimiento, $arr_proced_Manual_NoFact))
    {
        // Compara el array de procedimientos en liquidación que acompañan el procedimiento liquidado "$arr_procedimientos_relacionados[$codigo_procedimiento]"
        // contra la configuración de procedimientos del manual de cirugia "$arr_proced_Manual_NoFact[$codigo_procedimiento]", si entre los procedimientos que acompañan el procedimiento liquidado
        // hay equivalentes en el array de configuración, se va a devolver un array con todas las coincidencias y con que exista una coincidencia entonces
        // el procedimiento liquidado debe ser no facturable.
        $arr_result = array_intersect($arr_procedimientos_relacionados[$codigo_procedimiento], $arr_proced_Manual_NoFact[$codigo_procedimiento]);
    }

    // Si $arr_result es mayor a cero significa que un procedimiento que se está liquidando está acompañado por alguno de los procedimientos de la Lista de procedimientos facturables
    // que hace que el procedimiento actual sea NO FACTURABLE
    return (count($arr_result) > 0) ? "N": "";
}

/**
 * [marcarProcedimientosBilateralesParaOrdenar: Esta función se encarga de revisar si hay cirugias bilaterales y les suma una cantidad muy pequeña al número de puntos
 *     para poder ordenar primero las cirugías bilaterales que tienen igual cantidad de puntos que una tercer cirugía. "Las cirugías bilaterales deben quedar primero que una tercer cirugía de igual cantidad de puntos"]
 * @param  [type] $temporal_procedimientos_ordenados [description]
 * @return [type]                                    [description]
 */
function marcarProcedimientosBilateralesParaOrdenar(&$temporal_procedimientos_ordenados)
{
    $sum_temp_bilateral = 0.0001;
    $arr_temp_ordBilateralPrimeroConIgualPuntos = $temporal_procedimientos_ordenados;
    foreach ($arr_temp_ordBilateralPrimeroConIgualPuntos as $wespecialidad_ord => $arr_cxs)
    {
        foreach ($arr_cxs as $cod_key => $arr_value)
        {
            $dif_key = $cod_key;
            $pos = strpos($dif_key, "bilateral"); // Para veriricar si la posición corresponde a una cirugía derivada de una bilateral
                                                    // Entonces hay que intentar colocar las cirugías bilaterales en las primeras posiciones de la especialidad
                                                    // con esto las cirugías bilaterales que tienen igual pintaje que una tercer cirugía, deben quedar primero que
                                                    // las cirugías que no son bilaterales.

            if ($pos === false) {
            }
            else
            {
                $wnumero_puntos_tmp = $temporal_procedimientos_ordenados[$wespecialidad_ord][$cod_key]["wnumero_puntos"]*1;
                $wnumero_puntos_tmp = ($wnumero_puntos_tmp*1) + $sum_temp_bilateral;
                $temporal_procedimientos_ordenados[$wespecialidad_ord][$cod_key]["wnumero_puntos"] = $wnumero_puntos_tmp;
                // $guardar = "wnumero_puntos_tmp: ".print_r($wnumero_puntos_tmp,true).PHP_EOL;
                // seguimiento($guardar);
            }
        }
        arsort($temporal_procedimientos_ordenados[$wespecialidad_ord]);
    }
    // $guardar = "temporal_procedimientos_ordenados: ".print_r($temporal_procedimientos_ordenados,true).PHP_EOL;
    // seguimiento($guardar);
}

/**
 * [quitarMarcaProcedimientosBilateralesOrdenados: Esta función se encarga de modificar los números puntos de cada procedimientos específicamente cuando son puntos de cirugías bilaterales
 * porque al momento de ordenarlos en la función "marcarProcedimientosBilateralesParaOrdenar" se agregó un valor muy pequeño en la cantidad de puntos, en esta función se quita esa pequeña cantidad
 * de puntos para que no tengan efecto en ningún otro lado, solo en el ordenamiento.]
 * @param  [type] $temporal_procedimientos_ordenados [description]
 * @return [type]                                    [description]
 */
function quitarMarcaProcedimientosBilateralesOrdenados(&$temporal_procedimientos_ordenados)
{
    $arr_temp_ordBilateralPrimeroConIgualPuntos = $temporal_procedimientos_ordenados;
    foreach ($arr_temp_ordBilateralPrimeroConIgualPuntos as $wespecialidad_ord => $arr_cxs)
    {
        foreach ($arr_cxs as $cod_key => $arr_value)
        {
            $dif_key = $cod_key;
            $pos = strpos($dif_key, "bilateral");

            $dif_key = $temporal_procedimientos_ordenados[$wespecialidad_ord][$cod_key]["dif_key"];
            $pos = strpos($dif_key, "bilateral");
            if ($pos === false) {}
            else
            {
                $wnumero_puntos_tmp = $temporal_procedimientos_ordenados[$wespecialidad_ord][$cod_key]["wnumero_puntos"];
                $wnumero_puntos_tmp = str_replace(".0001", "", $wnumero_puntos_tmp);
                // Para ordenar primero los procedimientos bilaterales de igual cantidad de puntos que otras cirugías, se sumó un pequeño número para hacer la diferencia
                // en esta línea se quita esa pequeña diferencia para que el valor de puntos se muestre como llegó originalmente a esta función.
                $temporal_procedimientos_ordenados[$wespecialidad_ord][$cod_key]["wnumero_puntos"] = $wnumero_puntos_tmp;
            }
        }
    }
}

/**
 * [ordenarEspecialidadProcedimiento description: Este función se encarga de ordenar el array de mayor a menor puntos de procedimientos para cada especialidad y a su vez pone al principio
 *                                                 las especialidades que tienen los procedimientos mayores].
 * @param  [type] $temporal_procedimientos_ordenados [array de especialidades y procedimientos a ordenar]
 * @return [type]                                    [description]
 */
function ordenarEspecialidadProcedimiento(&$temporal_procedimientos_ordenados)
{
    // Ordenar bilaterales primero en comparación con cirugías que tengas igual cantidad de puntos que la bilateral
    marcarProcedimientosBilateralesParaOrdenar($temporal_procedimientos_ordenados);

    //arr_temporal para dejar primero la especialidad que tenga el procedimiento con el mayor número de puntos.
    $arr_temp_esp_puntos = array();

    // Este array ordena las cirugías por el número de puntos de cada especialidad.
    foreach ($temporal_procedimientos_ordenados as $wespecialidad_ord => $arr_cxs)
    {
        // ksort($temporal_procedimientos_ordenados[$wespecialidad_ord]);
        arsort($temporal_procedimientos_ordenados[$wespecialidad_ord]); // Ordena por el número de puntos de cada procedimiento, apesar de ser un array, esta función asume la primera posición como el valor por el que debe ordenar, en este caso el número de puntos
        // arsort($temporal_procedimientos_ordenados[$wespecialidad_ord]); // Ordena por el número de puntos de cada procedimiento, apesar de ser un array, esta función asume la primera posición como el valor por el que debe ordenar, en este caso el número de puntos
        $keys_arr_temp = array_keys($temporal_procedimientos_ordenados[$wespecialidad_ord]);

        if(count($keys_arr_temp) > 0)
        {
            $primer_procedimiento_especialidad = $keys_arr_temp[0];

            // $guardar = "primer_procedimiento_especialidad: ".print_r($primer_procedimiento_especialidad,true).PHP_EOL;
            // seguimiento($guardar);
            // Crea una llave con el numeroPunto_CodigoEspecialidad

            $numero_puntos = $temporal_procedimientos_ordenados[$wespecialidad_ord][$primer_procedimiento_especialidad]["wnumero_puntos"];

            $dif_key = $temporal_procedimientos_ordenados[$wespecialidad_ord][$primer_procedimiento_especialidad]["dif_key"];
            $pos = strpos($dif_key, "bilateral");
            if ($pos === false) {}
            else
            {
                $numero_puntos = str_replace(".0001", "", $numero_puntos)*1;
            }

            $llave_temp = $numero_puntos.'_'.$wespecialidad_ord;
            if(!array_key_exists($llave_temp, $arr_temp_esp_puntos))
            {
                $arr_temp_esp_puntos[$llave_temp] = $numero_puntos;
            }
        }

    }
    // ksort($temporal_procedimientos_ordenados); // Ordenas por la especialidad => // SE DEBIÓ IGNORAR ESTE ORDENAMIENTO PORQUE PRIMORDIALMENTE SE DEBE TENER EN CUENTA PONER DE PRIMERO LAS ESPECIALIDADES CON PROCEDIMIENTOS MAYORES !!!

    // Ordena de manor a mayor valor por número de puntos del procedimiento mayor de cada especialidad
    asort($arr_temp_esp_puntos);

    // Se invierte el orden realizado en asort para colocar la especialidad de mayor valor primero.
    arsort($arr_temp_esp_puntos);
    //Reescribir el array temporal_procedimientos_ordenados ahora ordenado colocando las especialidades con procedimientos mayores primero.
    $temp_ordenar = array();
    foreach ($arr_temp_esp_puntos as $key => $value)
    {
        $expl = explode("_", $key);
        $cod_esp = $expl[1];
        if(!array_key_exists($cod_esp, $temp_ordenar))
        {
            $temp_ordenar[$cod_esp] = array();
        }
        $temp_ordenar[$cod_esp] = $temporal_procedimientos_ordenados[$cod_esp];
    }
    $temporal_procedimientos_ordenados = $temp_ordenar;

    // Retirar el pequeño valor que se sumó a los puntos de las cirugías bilaterales.
    quitarMarcaProcedimientosBilateralesOrdenados($temporal_procedimientos_ordenados);
}


function modalidadPuntosProcedimiento($conex, $wbasedato, $wprocod, $wcodemp, $tipoEmpresa, $wccogra, $wtipo_emp_valida_nopos, $worgano = '*')
{
    $arr_procedimiento = array( "nombre"             => "PROCEDIMIENTO_NO_ENCONTRADO",
                                "tipo_facturacion"   => "ERR_NO_MODO",
                                "wnumero_uvrs"       => 0,
                                "valor_grupo"        => 0,
                                "tabla_relacion"     => "", // Tabla en la que se encuentra la relación. Para EPS lo que esta fuera de la 70 es NOPOS, o si esta en la 70 se especifica en un campo como NOPOS
                                                            // Lo NO POS (descrito en el anterior comentario) ya no depende de si esta en la 70 o 103, se creó una tabla nueva específicamente para marcar lo no pos
                                "pro_NOPOS"          => "off");
    // --> Obtener si existe una modalidad de facturacion especifica para la empresa responsable.
    // -->  Armar array con las variables, para enviarlo a la funcion que me genera el query con todas las combinaciones posibles
    //      para asi obtener cual es el de mayor prioridad que le aplica.
    $variables = array();
    // --> Codigo del procedimiento
    $variables['Proempcod']['combinar'] = false;
    $variables['Proempcod']['valor']    = $wprocod;
    // --> Codigo de la empresa
    $variables['Proempemp']['combinar'] = true;
    $variables['Proempemp']['valor']    = $wcodemp;
    // --> Tipo de empresa
    $variables['Proemptip']['combinar'] = true;
    $variables['Proemptip']['valor']    = $tipoEmpresa;
    // --> Centro de costos
    $variables['Proempcco']['combinar'] = true;
    $variables['Proempcco']['valor']    = $wccogra;
    // --> Organo, (parte del cuerpo, para definir tarifa a cobrar)
    $variables['Proemporg']['combinar'] = true;
    $variables['Proemporg']['valor']    = $worgano;
    // --> Estado
    $variables['Proempest']['combinar'] = false;
    $variables['Proempest']['valor']    = 'on';

    // --> Obtener query
    $q_TipoFacEsp   = generarQueryCombinado($variables, $wbasedato."_000070");
    $res_TipoFacEsp = mysql_query($q_TipoFacEsp, $conex) or die("Error en el query: ".$q_TipoFacEsp."<br>Tipo Error:".mysql_error());

    $ModoFactura    = '';
    $valor_grupo    = '';
    $encontro_en_la_70 = false;
    // --> Si hay una modalidad especifica la tomo
    if ($row_TipoFacEsp = mysql_fetch_array($res_TipoFacEsp))
    {
        $qInfoMod = " SELECT Proemptfa, Proempgqx, Proemppun, Proempnom
                        FROM ".$wbasedato."_000070
                       WHERE id = '".$row_TipoFacEsp['id']."'";

        $resInfoMod     = mysql_query($qInfoMod, $conex) or die("Error en el query: ".$qInfoMod."<br>Tipo Error:".mysql_error());
        $rowInfoMod     = mysql_fetch_array($resInfoMod);
        $ModoFactura    = trim($rowInfoMod['Proemptfa']);
        $valor_grupo    = trim($rowInfoMod['Proempgqx']);

        $arr_procedimiento["nombre"]             = $rowInfoMod['Proempnom'];
        $arr_procedimiento["tipo_facturacion"]   = trim($rowInfoMod['Proemptfa']);
        $arr_procedimiento["wnumero_uvrs"]       = $rowInfoMod['Proemppun'];
        $arr_procedimiento["valor_grupo"]        = $rowInfoMod['Proempgqx'];
        $arr_procedimiento["tabla_relacion"]     = '70';
        //$arr_procedimiento["pro_NOPOS"]          = $rowInfoMod['no_pos'];
        $encontro_en_la_70 = true;
    }

    // --> Si no hay modalidad en la 70, entonces se factura segun como este en la 103.
    if($ModoFactura == '')
    {
        $q_TipoFacGen =  "  SELECT  Pronom, Protfa, Propun, Progqx
                            FROM    {$wbasedato}_000103
                            WHERE   Procod = '{$wprocod}'
                                    AND Proest = 'on'";
        $res_TipoFacGen = mysql_query($q_TipoFacGen,$conex) or die ("Error: ".mysql_errno()." - en el query: ".$q_TipoFacGen." - ".mysql_error());
        if ($row_TipoFacGen = mysql_fetch_array($res_TipoFacGen))
        {
            $ModoFactura = $row_TipoFacGen['Protfa'];
            $arr_procedimiento["nombre"]             = $row_TipoFacGen['Pronom'];
            $arr_procedimiento["tipo_facturacion"]   = trim($row_TipoFacGen['Protfa']);
            $arr_procedimiento["wnumero_uvrs"]       = $row_TipoFacGen['Propun'];
            $arr_procedimiento["valor_grupo"]        = $row_TipoFacGen['Progqx'];
            $arr_procedimiento["tabla_relacion"]     = '103';
            // if(in_array($tipoEmpresa, $wtipo_emp_valida_nopos))
            // {
            //     $arr_procedimiento["pro_NOPOS"]      = 'on'; // Los procedimientos que no estan en la relacion con empresa en la 70 son no pos si el tipo de empresa está en el array de validación
            // }
            $encontro_en_la_70 = false;
        }
    }

    // Si la modalidad es GQX y el valor de grupo en la tabla 70 es vacío si es que encontró la modadlidad en la 70, entonces se debe consultar el valor en la tabla 000103
    if($ModoFactura == 'GQX' && $encontro_en_la_70 && empty($valor_grupo))
    {
        $q_TipoFacGen =  "  SELECT  Pronom, Protfa, Propun, Progqx
                            FROM    {$wbasedato}_000103
                            WHERE   Procod = '{$wprocod}'
                                    AND Proest = 'on'";
        $res_TipoFacGen = mysql_query($q_TipoFacGen,$conex) or die ("Error: ".mysql_errno()." - en el query: ".$q_TipoFacGen." - ".mysql_error());
        if ($row_TipoFacGen = mysql_fetch_array($res_TipoFacGen))
        {
            $arr_procedimiento["valor_grupo"] = $row_TipoFacGen['Progqx'];
        }
    }

    $arr_infoNoPos = consultarProcedimientoNoPos($conex, $wbasedato, $wprocod, $wcodemp, $tipoEmpresa, $wccogra, $wtipo_emp_valida_nopos);
    $arr_procedimiento["pro_NOPOS"] = $arr_infoNoPos["pro_NOPOS"];

    return $arr_procedimiento;
}


/**
 * [consultarProcedimientoNoPos: Consulta si la relación procedimiento empresa es una relación NO POS]
 * @param  [type] $conex                  [description]
 * @param  [type] $wbasedato              [description]
 * @param  [type] $wprocod                [description]
 * @param  [type] $wcodemp                [description]
 * @param  [type] $tipoEmpresa            [description]
 * @param  [type] $wccogra                [description]
 * @param  [type] $wtipo_emp_valida_nopos [description]
 * @return [type]                         [description]
 */
function consultarProcedimientoNoPos($conex, $wbasedato, $wprocod, $wcodemp, $tipoEmpresa, $wccogra, $wtipo_emp_valida_nopos)
{
    $arr_procedimiento = array("pro_NOPOS"=>"off");
    $variablesPnp = array();
    // --> Codigo del procedimiento
    $variablesPnp['Pnppro']['combinar'] = true;
    $variablesPnp['Pnppro']['valor']    = $wprocod;
    // --> Codigo de la empresa
    $variablesPnp['Pnpemp']['combinar'] = false;
    $variablesPnp['Pnpemp']['valor']    = $wcodemp;
    // --> Estado
    $variablesPnp['Pnpest']['combinar'] = false;
    $variablesPnp['Pnpest']['valor']    = 'on';

    // --> Obtener query para consultar si el procedimiento es no pos
    $q_NoPos   = generarQueryCombinado($variablesPnp, $wbasedato."_000249");
    $res_NoPos = mysql_query($q_NoPos, $conex) or die("Error en el query: ".$q_NoPos."<br>Tipo Error:".mysql_error());

    // --> Si hay un registro de relación procedimiento empresa como no pos, se modifica el array de procedimiento como no pos
    if ($row_NoPos = mysql_fetch_array($res_NoPos))
    {
        $qInfoPnp = "   SELECT Pnppnp AS no_pos, Pnpest
                        FROM   {$wbasedato}_000249
                        WHERE  id = '{$row_NoPos['id']}'";

        $resInfoPnp     = mysql_query($qInfoPnp, $conex) or die("Error en el query: ".$qInfoPnp."<br>Tipo Error:".mysql_error());
        if(mysql_num_rows($resInfoPnp) > 0)
        {
            $rowInfoPnp     = mysql_fetch_array($resInfoPnp);
            $arr_procedimiento["pro_NOPOS"] = ($rowInfoPnp['no_pos'] == 'on') ? $rowInfoPnp['no_pos'] : 'off';
        }
    }
    return $arr_procedimiento;
}

function cirugiasPendientesLiquidar($conex, $wbasedato, $whistoria, $wing)
{
    $arr_pendientes_liquidar = array();
    $filtros_his = '';
    if(!empty($whistoria))
    {
        $filtros_his = "c230.Ntrhis = '{$whistoria}'
                    AND c230.Ntring = '{$wing}'
                    AND ";
    }

    $sql = "SELECT  c230.id AS id_encabezado, c230.Ntrhis AS whistoria, c230.Ntring AS wing, c230.Ntrrcr AS estado_monitor, c230.Ntrltm AS html_procedimientos_liq
            FROM    {$wbasedato}_000230 AS c230
            WHERE   {$filtros_his} (c230.Ntrrcr = 'PR' OR c230.Ntrrcr = 'CO')
                    AND c230.Ntrest = 'on'
            ORDER BY c230.Ntrhis, c230.Ntring ";
    if($result = mysql_query($sql,$conex))
    {
        while ($row = mysql_fetch_array($result))
        {
            // consultar detalle de pendientes por liquidar
            $sql = "SELECT  c231.id AS id_detalle
                    FROM    {$wbasedato}_000231 AS c231
                    WHERE   c231.Tcaride = '{$row['id_encabezado']}'
                            AND c231.Tcarrcr = 'PR'
                            AND c231.Tcarest = 'on'";

            $estado_monitor = '';
            if($result_upd = mysql_query($sql,$conex))
            {
                $registros = mysql_num_rows($result_upd);
                if($registros == 0)
                {
                    $estado_monitor = 'CO';
                }
                elseif($registros > 0)
                {
                    $estado_monitor = 'PR';
                }
                $sql = "UPDATE  {$wbasedato}_000230
                            SET     Ntrrcr = '{$estado_monitor}'
                            WHERE  id      = '{$row['id_encabezado']}' ";
                mysql_query($sql, $conex) or die("<b>ERROR EN QUERY MATRIX - ACTUALIZAR CAMPO TEMPORALES (000230):</b><br>".mysql_error()."<br>SQL: ".$sql);
            }

            if(!array_key_exists($row['id_encabezado'], $arr_pendientes_liquidar))
            {
                $arr_pendientes_liquidar[$row['id_encabezado']] = array();
            }
            $arr_pendientes_liquidar[$row['id_encabezado']] = array("whistoria"               => $row['whistoria'],
                                                                    "wing"                    => $row['wing'],
                                                                    "estado_monitor"          => $estado_monitor,
                                                                    "html_procedimientos_liq" => $row['html_procedimientos_liq']);
        }
    }
    return $arr_pendientes_liquidar;
}

function html_cirugiasPendientes($arr_pendientes_liquidar)
{
    $html = '';
    $cont = 0;
    foreach ($arr_pendientes_liquidar as $id_encabezado => $arr_pendiente)
    {
        $html_recuperado = str_replace("[+]", "'", $arr_pendiente['html_procedimientos_liq']);
        $html_recuperado = stripslashes($html_recuperado);
        $expl_acto = explode("[*****]", $html_recuperado);
        $encabezado_acto_qx = utf8_encode(trim($expl_acto[0]));
        $encabezado_acto_qx = str_replace("tr_liqAdd_cxs_", "tr_TMP_liqAdd_cxs_", $encabezado_acto_qx);
        $encabezado_acto_qx = str_replace("img_del1", "img_del1 hidden_img", $encabezado_acto_qx);

        if(empty($encabezado_acto_qx))
        {
            $encabezado_acto_qx = '<tr><td style="text-align:center;">NO SE ENCONTRÓ DETALLE DE CIRUGÍA</td></tr>';
        }

        $dif_fila = "tmp_".$id_encabezado;

        $estado_monitor = '';
        $fondo_bk = '';
        switch ($arr_pendiente['estado_monitor'])
        {
            case 'PR':
                $estado_monitor = 'Pendiente revisión';
                $fondo_bk = 'background-color: orange;';
                break;

            case 'CO':
                $estado_monitor = 'Corregido';
                $fondo_bk = 'background-color: green;';
                break;
        }

        $css = ($cont % 2 == 0) ? 'fila1': 'fila2';
        $identif_his_ing = $arr_pendiente['whistoria'].'_'.$arr_pendiente['wing'];
        $html .= '  <tr class="'.$css.' trs_temp_pend_'.$identif_his_ing.'" onmouseover="posicionElemento(this); $(\'.hidden_img\').hide();" onmouseout="cerrarFlotante();" dif_fila="'.$dif_fila.'" style="cursor:pointer;" onclick="recuperarCirugiaEnRevision(\''.$arr_pendiente['whistoria'].'\', \''.$arr_pendiente['wing'].'\', \''.$id_encabezado.'\');">
                        <td>
                            '.$id_encabezado.'
                            <div id="caja_flotante_'.$dif_fila.'" class="caja_flotante" style="display:none; background-color: #FFFEE2; padding: 5px; z-index:1;">
                                <table>'.$encabezado_acto_qx.'</table>
                            </div>
                        </td>
                        <td>
                            '.$arr_pendiente['whistoria'].'
                        </td>
                        <td>'.$arr_pendiente['wing'].'</td>
                        <td style="'.$fondo_bk.' text-align:center;">'.$estado_monitor.'</td>
                    </tr>';
        $cont++;
    }

    if(empty($html))
    {
        $html = '<tr class="encabezadoTabla" >
                    <td colspan="4" >NO HAY CIRUGÍAS PENDIENTES EN REVISIÓN</td>
                </tr>';
    }

    $html = '<table align="center" >
                <tr class="encabezadoTabla" >
                    <td>Consecutivo pendiente</td>
                    <td>Historia</td>
                    <td>Ingreso</td>
                    <td>Estado revisión</td>
                </tr>
                '.$html.'
            </table>';
    return $html;
}

function validar_mercado_cerrado($conex,$wcodigo_turno,$wemp_pmla,$wbasedato)
{
    $sql = "SELECT  Mpacrm
            FROM    {$wbasedato}_000207
            WHERE   Mpatur = '{$wcodigo_turno}'
                    AND Mpaest = 'on'";
    $resPro = mysql_query($sql,$conex) or die("mercado cerrado - Error: ".mysql_errno()." ".$sql." - ".mysql_error());
    $mercadoCerrado = 'on';
    while ($row = mysql_fetch_array($resPro))
    {
        if ($row['Mpacrm'] =='off' )
        { $mercadoCerrado = $row['Mpacrm']; }
    }
    return $mercadoCerrado;
}

/**
 * [limpiarString: quita multiples espacios y espacios al final del string]
 * @param  [type] $string_ [description]
 * @return [type]          [description]
 */
function limpiarString($string_)
{
    return trim(preg_replace('/[ ]+/', ' ', $string_));
}


/**
 * [obtener_array_procedimientosEmpresa: Esta función se encarga de adicionar al array de procedimientos generales (000103) los procedimientos que
 * existan en la tabla 000070 para la empresa responsable del paciente, si se va a adicionar un código entonces se verifíca si el código ya existe en el array
 * que llega por parámetros y de ser así entonces actualiza el nombre del procedimiento tal como aparezca para esa empresa en 000070.]
 * @param  [type] $conex              [Conexión a la base de datos]
 * @param  [type] $wemp_pmla          [Código de la empresa de promotora las américas]
 * @param  [type] $wbasedato          [Prefijo de las tablas de la base de datos]
 * @param  [type] $wcod_empresa       [Código de la empresa para la que se van a buscar códigos de procedimientos en la relación procedimientos-empresa 000070]
 * @param  array  $arr_procedimientos [Array de procedimientos, pueden llegar inicialmente los procedimientos existentes en 000103]
 * @return [type]                     [Retorna un array con los procedimientos iniciales que hayan llegado por parámetros más los posibles procedimientos encontrados en la relación procedimiento-empresa]
 */
function obtener_array_procedimientosEmpresa($conex, $wemp_pmla, $wbasedato, $wcod_empresa, $arr_procedimientos = array())
{
    if(!empty($wcod_empresa))
    {
        $sql = "SELECT  Proempcod AS codigo, Proempnom AS nombre, Proemppro AS codigo_personalizado
                FROM    {$wbasedato}_000070
                WHERE   Proempemp = '{$wcod_empresa}'
                        AND Proempest = 'on'
                ORDER BY Proempnom";
        $resPro = mysql_query($sql,$conex) or die("Procedimientos por empresa - Error: ".mysql_errno()." ".$qPro." - ".mysql_error());
        while ($row = mysql_fetch_array($resPro))
        {
            $arr_procedimientos[$row['codigo']] = "(".$row['codigo_personalizado'].") ".utf8_encode(limpiarString($row['nombre']));
        }
    }
    return $arr_procedimientos;
}

/**
 * [validarCirugiaMayorACobrarConcepto: Función para ayudar a identificar hasta que número de cirugía máxima se debe cobrar un concepto]
 * @param  [type] $concepto_porcentaje          [description]
 * @param  [type] $cx_queNoSeCobran             [description]
 * @param  [type] $arr_conceptos_maximo_aCobrar [description]
 * @param  [type] $arr_procedimientos_orden     [description]
 * @param  [type] $indice_proced_concepNoCobro  [description]
 * @return [type]                               [description]
 */
function validarCirugiaMayorACobrarConcepto($concepto_porcentaje, $cx_queNoSeCobran, $arr_conceptos_maximo_aCobrar, $arr_procedimientos_orden, $indice_proced_concepNoCobro, &$cx_queSISeCobran, $valor_porcentaje)
{
    // $guardar = "cx_queNoSeCobran > ".print_r($cx_queNoSeCobran,true).PHP_EOL.PHP_EOL;
    // seguimiento($guardar);
    // $guardar = "indice_proced_concepNoCobro > ".print_r($indice_proced_concepNoCobro,true).PHP_EOL.PHP_EOL;
    // seguimiento($guardar);
    // if(!array_key_exists($indice_proced_concepNoCobro, $cx_queNoSeCobran))
    {
        $arr_cirugias_ordenadasTotal = array();
        $cont_pequeño = 0; // ayuda conservar el orden de dos o tres procedimientos que tienen la misma cantidad de puntos, para que no se altere el orden
                            // y de acuerdo a ese mismo orden pueda aplicarse el porcentaje adecuado por ejemplo en el caso de diferente vía diferente especialidad
                            // si no se asegura conservar el mismo orden de "arr_cirugias_ordenadasTotal" respecto a "arr_procedimientos_orden" para los
                            // procedimiento de igual cantidad de puntos, entonces al ordenar de nuevo el array "arr_cirugias_ordenadasTotal", puede cambiar el orden
                            // original y no se aplican los porcentajes que debe ser, este cambio surgió debído a ese problema, se modificaba el orden de los procedimientos
                            // de igual número de puntos.
        $cont_cx = 999;// deben conservarse la misma cantidad de dígitos para que el ordenamiento no se comporte diferente dependiendo de la cantidad de caracteres.
        foreach ($arr_procedimientos_orden as $esp_cod => $arr_esp)
        {
            foreach ($arr_esp as $procedCod => $puntos_cx)
            {
                $indice_proced_concepNoCobro_fn = $procedCod."_".$concepto_porcentaje;
                if(!array_key_exists($indice_proced_concepNoCobro_fn, $arr_cirugias_ordenadasTotal))
                {
                    $arr_cirugias_ordenadasTotal[$indice_proced_concepNoCobro_fn]                        = array();
                    $arr_cirugias_ordenadasTotal[$indice_proced_concepNoCobro_fn]['puntos_cx']           = $puntos_cx.".000".$cont_cx;
                    $arr_cirugias_ordenadasTotal[$indice_proced_concepNoCobro_fn]['puntos_cx_tempOrig']  = $puntos_cx;
                    $arr_cirugias_ordenadasTotal[$indice_proced_concepNoCobro_fn]['concepto_porcentaje'] = $concepto_porcentaje;
                    $arr_cirugias_ordenadasTotal[$indice_proced_concepNoCobro_fn]['valor_porcentaje']    = $valor_porcentaje;
                }
                $cont_cx--;
            }
        }

        arsort($arr_cirugias_ordenadasTotal);
        $temp_reestablecer_puntos = $arr_cirugias_ordenadasTotal;
        foreach ($temp_reestablecer_puntos as $indice_proced_concepNoCobro_fn => $arr_valores)
        {
            $arr_cirugias_ordenadasTotal[$indice_proced_concepNoCobro_fn]['puntos_cx'] = $arr_valores['puntos_cx_tempOrig'];
        }

        $cont_Cirugias = 1;
        $cirugias_maximo_cobro = array();
        foreach ($arr_cirugias_ordenadasTotal as $indice_proced_concepNoCobro_fn => $arr_value)
        {
            if($cont_Cirugias <= ($arr_conceptos_maximo_aCobrar[$concepto_porcentaje]*1))
            {
                if(!array_key_exists($indice_proced_concepNoCobro_fn, $cx_queSISeCobran))
                {
                    $cx_queSISeCobran[$indice_proced_concepNoCobro_fn] = $arr_value['valor_porcentaje'];
                }
            }
            else
            {
                if(!array_key_exists($indice_proced_concepNoCobro_fn, $cx_queNoSeCobran))
                {
                    $cx_queNoSeCobran[$indice_proced_concepNoCobro_fn] = $arr_value['concepto_porcentaje'];
                }
            }
            $cont_Cirugias++;
        }
    }

    return $cx_queNoSeCobran;
}


/**
 * [conceptoMatMedFacturable: Función encargada de agreagar el concepto 0168 a uno o varios procedimientos, ayuda a determinar si los materiales o medicamentos son facturables o no]
 * @param  [type] $conex                              [description]
 * @param  [type] $wemp_pmla                          [description]
 * @param  [type] $wbasedato                          [description]
 * @param  [type] $primer_procedimientos_mayor_puntos [description]
 * @param  [type] $limite_puntos_cobro_medicamento    [description]
 * @param  [type] $excluido_medicamento               [description]
 * @param  [type] $procedimiento_bilat_dif            [description]
 * @param  [type] $limite_concepto_cobro_medicamentos [description]
 * @param  [type] $procedimiento_liquidar_cod         [description]
 * @param  [type] $procedimiento_posicion_organo      [description]
 * @param  [type] $es_bilateral                       [description]
 * @param  [type] $arr_lista_conceptos                [description]
 * @param  [type] $arr_procedimientos_liquidar        [description]
 * @param  [type] $NoFactClase_medicamento            [description]
 * @param  [type] $limite_puntos_cobro_materiales     [description]
 * @param  [type] $NoFactClase_material               [description]
 * @param  [type] $matMedFacturable                   [description]
 * @param  [type] $limite_concepto_cobro_materiales   [description]
 * @return [type]                                     [description]
 */
function conceptoMatMedFacturable($conex, $wemp_pmla, $wbasedato, $primer_procedimientos_mayor_puntos, $limite_puntos_cobro_medicamento, $excluido_medicamento, $procedimiento_bilat_dif, $limite_concepto_cobro_medicamentos,
                                    $procedimiento_liquidar_cod, $procedimiento_posicion_organo, $es_bilateral, &$arr_lista_conceptos, &$arr_procedimientos_liquidar, $NoFactClase_medicamento, $limite_puntos_cobro_materiales, $NoFactClase_material,
                                    $matMedFacturable, $limite_concepto_cobro_materiales, $excluido_material, $wliq_soloInsumos, $wcod_empresa)
{
    $matMedFacturable["medicamentos_facturables"] = ($matMedFacturable["winsumos_no_facturables"] == 'on') ? 'N': 'S';
    if($primer_procedimientos_mayor_puntos <= $limite_puntos_cobro_medicamento)
    {
        //$hay_medicamentos > 0 && // no es necesario validar si hay o no materiales y medicamentos por cada procedimientos, si solo un procedimiento tiene mercado, ese se cobra para todos los demás.
        $matMedFacturable["excluido_insumos_med"] = $excluido_medicamento;
        $index_control_mat    = $procedimiento_bilat_dif.'_'.$limite_concepto_cobro_medicamentos;
        $diferencia_bilaterales_organos = $procedimiento_liquidar_cod.'_'.$procedimiento_posicion_organo.'_'.$es_bilateral;
        // if(!array_key_exists($index_control, $arr_control_bilateral_concepto_extra))
        {
            if($es_bilateral == 'on') { $arr_control_bilateral_concepto_extra[$diferencia_bilaterales_organos] = $index_control_mat; }
            // echo "if(($wnumero_puntos*1) <= ($limite_puntos_cobro_medicamento*1))";
            // Se debe crear un nuevo concepto encargado de cobrar todo el paquete que se guardará como no facturable.
            // $arr_conceptos_liquidar = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod]["configuracion_liquidar"];
            // $arr_procedimientos_liquidar[$procedimiento_liquidar_cod]["configuracion_liquidar"] = $arr_conceptos_liquidar;
            if(!$wliq_soloInsumos)
            {
                agregar_concepto_a_procedimiento($conex, $wemp_pmla, $wbasedato, $limite_concepto_cobro_medicamentos, $procedimiento_liquidar_cod, $procedimiento_bilat_dif, $arr_lista_conceptos, $arr_procedimientos_liquidar, $wcod_empresa);
            }
            // $guardar = "agregar_concepto_a_procedimiento($conex, $wemp_pmla, $wbasedato, $limite_concepto_cobro_medicamentos, $procedimiento_liquidar_cod, $procedimiento_bilat_dif, $arr_lista_conceptos, $arr_procedimientos_liquidar, $wcod_empresa);".PHP_EOL;
            // seguimiento($guardar);
        }
    }
    elseif($primer_procedimientos_mayor_puntos > $limite_puntos_cobro_medicamento)
    {
        //$hay_medicamentos > 0 && // no es necesario validar si hay o no materiales y medicamentos por cada procedimiento, si solo un procedimiento tiene mercado, ese se cobra para todos los demás.
        $matMedFacturable["NoFactClase_med"]      = $NoFactClase_medicamento;
    }

    $matMedFacturable["materiales_facturables"] = ($matMedFacturable["winsumos_no_facturables"] == 'on') ? 'N': 'S';
    if($primer_procedimientos_mayor_puntos <= $limite_puntos_cobro_materiales)
    {
        //$hay_materiales > 0 && // no es necesario validar si hay o no materiales y medicamentos por cada procedimientos, si solo un procedimiento tiene mercado, ese se cobra para todos los demás.
        $matMedFacturable["excluido_insumos_mat"] = $excluido_material;
        $index_control_med    = $procedimiento_bilat_dif.'_'.$limite_concepto_cobro_materiales;
        $diferencia_bilaterales_organos = $procedimiento_liquidar_cod.'_'.$procedimiento_posicion_organo.'_'.$es_bilateral;
        // if(!array_key_exists($index_control, $arr_control_bilateral_concepto_extra))
        {
            if($es_bilateral == 'on') { $arr_control_bilateral_concepto_extra[$diferencia_bilaterales_organos] = $index_control_med; }
            // Se debe crear un nuevo concepto encargado de cobrar todo el paquete que se guardará como no facturable.
            // $arr_conceptos_liquidar = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod]["configuracion_liquidar"];
            // $arr_procedimientos_liquidar[$procedimiento_liquidar_cod]["configuracion_liquidar"] = $arr_conceptos_liquidar;
            if(!$wliq_soloInsumos)
            {
                agregar_concepto_a_procedimiento($conex, $wemp_pmla, $wbasedato, $limite_concepto_cobro_materiales, $procedimiento_liquidar_cod, $procedimiento_bilat_dif, $arr_lista_conceptos, $arr_procedimientos_liquidar, $wcod_empresa);
            }
        }
    }
    elseif($primer_procedimientos_mayor_puntos > $limite_puntos_cobro_materiales)
    {
        //$hay_materiales > 0 && // no es necesario validar si hay o no materiales y medicamentos por cada procedimientos, si solo un procedimiento tiene mercado, ese se cobra para todos los demás.
        $matMedFacturable["NoFactClase_mat"]      = $NoFactClase_material;
    }
    return $matMedFacturable;
}


/**
 * [sumatoriaConceptosProcedimientoCODIGO: funcion encargada de sumar el valor de todos los conceptos de un procedimientos, retornando la sumatoria total en un solo valor que ayuda a determinar el
 *     orden de las cirugías liquidadas por código]
 * @param  [type] $conex                            [description]
 * @param  [type] $wemp_pmla                        [description]
 * @param  [type] $wbasedato                        [description]
 * @param  [type] $procedimiento_ord                [description]
 * @param  [type] $procedimiento_dif                [description]
 * @param  [type] $data_temp                        [description]
 * @param  [type] $arr_datos_liquidar               [description]
 * @param  [type] $arr_conceptos_liquidar_ModCODIGO [description]
 * @param  [type] $wprocedimiento_add               [description]
 * @param  [type] $wconcepto_add                    [description]
 * @param  [type] $arr_extras                       [description]
 * @param  [type] $arr_lista_conceptos_temp         [description]
 * @param  [type] $arr_conceptos_nombres            [description]
 * @param  [type] $arr_datos_liquidados             [description]
 * @param  [type] $wespecialidad                    [description]
 * @param  [type] $es_paquete                       [description]
 * @return [type]                                   [description]
 */
function sumatoriaConceptosProcedimientoCODIGO($conex, $wemp_pmla, $wbasedato, $procedimiento_ord, $procedimiento_dif, $data_temp, $arr_datos_liquidar, $arr_conceptos_liquidar_ModCODIGO, $wprocedimiento_add, $wconcepto_add, $arr_extras, $arr_lista_conceptos_temp, $arr_conceptos_nombres, $arr_datos_liquidados, $wespecialidad, $es_paquete, $wcentro_costo, $wcod_empresa, $wtipo_ingreso, $whora_cargo, $wtiempo_minutos_cx, $wtiempo_sala_recuperarcion, $wtiempo_uso_minutos, $wtipo_anestesia_cx, $validar_concepto_tarifa, $worgano)
{
    global $orden_conceptos_por_procedimiento, $id_concepto_uso_equipos, $concepto_recuperacion_erp, $id_concepto_examenes, $add_equipo, $add_examen, $add_equipo_nombre, $add_examen_nombre,
            $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $wfecha_cargo, $RESPONSABLE_VIRTUAL_PACIENTE, $arr_tarifas_modifican_valor_erp, $plantilla_codigo;

    $sumatoriaConceptosProcedimiento = array("sumatoria"=>0,"werrores_tarifas"=>array());

    consultarConfiguracionPlantilla($conex, $wemp_pmla, $wbasedato, $procedimiento_ord, $procedimiento_dif, $data_temp, $arr_datos_liquidar, $arr_conceptos_liquidar_ModCODIGO, $wprocedimiento_add, $wconcepto_add, $arr_extras, $arr_lista_conceptos_temp, $arr_conceptos_nombres, $arr_datos_liquidados, $arr_datos_liquidar['arr_datos_paciente']['wresponsable_eps_codigo'], $arr_datos_liquidar['arr_datos_paciente']['tarifa_original'], $arr_datos_liquidar['arr_datos_paciente']['tipoEmpresa'], $wespecialidad, $es_paquete, $wtiempo_minutos_cx);
    //optener la tarifa a los conceptos que traiga la plantilla

    $ctrl_consultar_tarifa = false; // Ayuda a verificar la tarifa para un solo concepto y evitar que tenga que consultar las tarifas para toda una plantilla sin necesidad.
                                    // Esto se hace para consultar por ejemplo la tarifa de un equipo o examen y no permitir agregarlo a la liquidación si no tiene tarifa.
    foreach ($arr_conceptos_liquidar_ModCODIGO as $codigo_concepto => $arr_info_conf)
    {
        $codigo_concepto = codConceptoLegible($codigo_concepto);
        if($validar_concepto_tarifa =="" || $codigo_concepto == $validar_concepto_tarifa)
        {
            $ctrl_consultar_tarifa = true; // Para evitar que consulte todas las tarifas, con esto solamente deberá consultar la tarifa del concepto que llega en el parámetro $validar_concepto_tarifa
        }
        else
        {
            $ctrl_consultar_tarifa = false;
        }

        if($ctrl_consultar_tarifa)
        {
            $arr_equipos_examenes_liquidar = array();
            if($codigo_concepto == $id_concepto_uso_equipos
                && array_key_exists("lista_equipos", $arr_info_conf))
            {
                $arr_equipos_examenes_liquidar = $arr_info_conf["lista_equipos"];
            }
            elseif($codigo_concepto == $id_concepto_examenes
                && array_key_exists("lista_examenes", $arr_info_conf))
            {
                $arr_equipos_examenes_liquidar = $arr_info_conf["lista_examenes"];
            }
            else
            {
                $arr_equipos_examenes_liquidar = array(""=>array("nombre"=>"","codigo"=>""));
            }

            // Suma todas las terifas de una posible lista de equipos o examenes que estén agregados a los conceptos respectivos de uso de equipo, ayudas o exámenes.
            // si no hay lista de examenes o equipos entonces solo hace el ciclo una vez para el concepto.
            foreach ($arr_equipos_examenes_liquidar as $codigo_equipo_examen => $arr_info_equipo_examen)
            {
                $modifica_valorCODIGO       = $arr_info_conf['modifica_valor'];
                $mueve_inventario           = $arr_info_conf['mueve_inventario'];
                $es_concepto_extra          = (array_key_exists('es_concepto_extra', $arr_info_conf)) ? true: false;
                $especialidad_procedimiento = $wespecialidad;
                $cobro_concepto             = "";
                $cobro_procedimiento        = "";
                $codigo_rango_tiempo = "";
                $valor_rango_buscar         = 0;
                // [2015-05-22] Ántes no existía esta función y se creó para poder utilizar la sección de código en diferentes momento debído al cambio de responsable que hace cambiar las condiciones en la forma de liquidar.
                $valor_rango_busco = conceptoProcedimientoCobroSegunTipoCobro($cobro_concepto, $cobro_procedimiento, $codigo_rango_tiempo, $wtiempo_minutos_cx, $wtipo_anestesia_cx, $arr_info_conf, $wcod_empresa, $procedimiento_dif, $codigo_concepto, $id_concepto_uso_equipos, $id_concepto_examenes, $concepto_recuperacion_erp, $es_concepto_extra, $wtiempo_uso_minutos, $wtiempo_sala_recuperarcion);
				$valor_rango_busco = "1|".$valor_rango_busco;
                if(!$es_paquete)
                {
                    // MODIFICACIONES PARA BUSCAR TARIFA POR TERCERO (GRUPO DE MEDICOS)
                    // * TENER EN CUENTA EL TERCERO POR DEFECTO PARA ENVIARLO DESDE LA PRIMER VEZ QUE SE LIQUIDE EL ACTO QUIRÚRGICO.
                    // * TENER EN CUENTA EL TERCERO QUE SE INGRESÓ EN LA INTERFAZ PARA ENVIARLO A LA FUNCIÓN QUE BUSCA LA TARÍFA AL MOMENTO DE RELIQUIDAR.
                    $codigo_wtercero_tarifa = '';
                    if(codConceptoLegible($cobro_concepto) != $id_concepto_uso_equipos && codConceptoLegible($cobro_concepto) != $id_concepto_examenes)
                    {
                        if(array_key_exists($procedimiento_dif, $arr_datos_liquidados))
                        {
                            if(array_key_exists($cobro_concepto, $arr_datos_liquidados[$procedimiento_dif]))
                            {
                                $codigo_wtercero_tarifa = $arr_datos_liquidados[$procedimiento_dif][$cobro_concepto]['wtercero'];
                            }
                        }

                        // Si no hay información de tercero entonces intenta buscar un tercero por defecto para este concepto y con ese código buscar una tarifa.
                        if(empty($codigo_wtercero_tarifa))
                        {
                            $userCargo = explode('-',$_SESSION['user']);
                            $wuse      = $userCargo[1];
                            global $wbasedato, $wemp_pmla, $conex, $wuse;
                            $arr_tercero_xdefecto = traer_terceros_por_defecto(codConceptoLegible($cobro_concepto));
                            $codigo_wtercero_tarifa = $arr_tercero_xdefecto['codigo'];
                        }
                    }

                    $cobro_procedimiento = (!empty($codigo_equipo_examen)) ? $codigo_equipo_examen: $cobro_procedimiento;

                    $arr_excepcionTarifaria = array("excepcionTarifaria"=>false);
                    $arr_valor_cobro = datos_desde_procedimiento($cobro_procedimiento, codConceptoLegible($cobro_concepto), $wcentro_costo, $wcentro_costo, $wcod_empresa, $wfecha_cargo, $wtipo_ingreso, $especialidad_procedimiento, 'on', false, $codigo_wtercero_tarifa, $wfecha_cargo, $whora_cargo, '*', '*', $worgano);
                    if($modifica_valorCODIGO == 'S')
                    {
                        $arr_excepcionTarifaria = medicoExcepcionTarifaria($conex, $wemp_pmla, $wbasedato, $codigo_wtercero_tarifa, codConceptoLegible($cobro_concepto), $wcod_empresa, $cobro_procedimiento);
                    }

                    // Si el concepto permite modificar o escribir un valor y si no se ha encontrado una tarífa definida para el concepto
                    // entonces puede retomar el valor que antes puedan haber digitado, si no hay valor digitado entonces el valor será vacío
                    if($modifica_valorCODIGO == 'S' && ($arr_valor_cobro['error'] == '1'
                        || array_key_exists($RESPONSABLE_VIRTUAL_PACIENTE["Ingtar"], $arr_tarifas_modifican_valor_erp)
                        || $arr_excepcionTarifaria['excepcionTarifaria']))
                    {
                        $wvaltar = 0;
                        if(array_key_exists($procedimiento_dif, $arr_datos_liquidados)
                            && array_key_exists($cobro_concepto, $arr_datos_liquidados[$procedimiento_dif]))
                        {
                            if(array_key_exists("wvalor_digitado", $arr_datos_liquidados[$procedimiento_dif][$cobro_concepto]))
                            {
                                $wvaltar = $arr_datos_liquidados[$procedimiento_dif][$cobro_concepto]['wvalor_digitado'];
                            }
                        }

                        if($arr_valor_cobro['error'] == '1' && $wvaltar == 0)
                        {
                            if(!array_key_exists($procedimiento_dif, $sumatoriaConceptosProcedimiento['werrores_tarifas']) )
                            {
                                $sumatoriaConceptosProcedimiento['werrores_tarifas'][$procedimiento_dif] = array();
                            }

                            if(!array_key_exists($cobro_concepto, $sumatoriaConceptosProcedimiento['werrores_tarifas'][$procedimiento_dif]) )
                            {
                                $sumatoriaConceptosProcedimiento['werrores_tarifas'][$procedimiento_dif][$cobro_concepto] = array("cobro_procedimiento"=>$cobro_procedimiento, "cobro_concepto"=>$cobro_concepto);
                            }
                        }

                        $sumatoriaConceptosProcedimiento["sumatoria"]+= ((trim($wvaltar) == "") ? 0 :  $wvaltar);
                    }
                    else
                    {
                        if($arr_valor_cobro['error'] == '1' && ($arr_valor_cobro["wvaltar"]*1) == 0)
                        {
                            if(!array_key_exists($procedimiento_dif, $sumatoriaConceptosProcedimiento['werrores_tarifas']) )
                            {
                                $sumatoriaConceptosProcedimiento['werrores_tarifas'][$procedimiento_dif] = array();
                            }

                            if(!array_key_exists($cobro_concepto, $sumatoriaConceptosProcedimiento['werrores_tarifas'][$procedimiento_dif]) )
                            {
                                $sumatoriaConceptosProcedimiento['werrores_tarifas'][$procedimiento_dif][$cobro_concepto] = array("cobro_procedimiento"=>$cobro_procedimiento, "cobro_concepto"=>$cobro_concepto);
                            }
                        }

                        $sumatoriaConceptosProcedimiento["sumatoria"] += ($arr_valor_cobro['wvaltar'])*1;
                    }
                }
                else
                {
                    $sumatoriaConceptosProcedimiento["sumatoria"] += $arr_info_conf["wvaltar"]*1;
                }
            }
        }
    }

    $orden_conceptos_por_procedimiento = array(); // Se inicializa de nuevo porque más adelante este array debe iniciar normalmente puesto que
                                                    // en el anterior llamado a la función "consultar Configuracion Plantilla" solo se estaba haciendo una simulación
    return $sumatoriaConceptosProcedimiento;
}


/**
 * [insertarDetalleSinTarifa: Inserta un array de VALUES en la tabla de detalle de cargos sin tarifa]
 * @param  [type] $arr_sql_tm_ins [description]
 * @return [type]                 [description]
 */
function insertarDetalleSinTarifa($conex, $wemp_pmla, $wbasedato, $arr_sql_tm_ins)
{
    if(count($arr_sql_tm_ins) > 0)
    {
        $sql_tm_ins = " INSERT INTO {$wbasedato}_000231
                        (Medico, Fecha_data, Hora_data,
                        Tcarhis, Tcaring,
                        Tcarsin,
                        Tcarres,
                        Tcarser,
                        Tcarcon,
                        Tcarpro,
                        Tcarter,
                        Tcaresp,
                        Tcartfa,
                        Tcartar,
                        Tcarins,
                        Tcarrcr,
                        Tcaride,
                        Tcarval,
                        Tcartip,
                        Tcarest,
                        Seguridad)
                        VALUES ".implode(",", $arr_sql_tm_ins);
            mysql_query($sql_tm_ins, $conex) or die("<b>ERROR EN QUERY MATRIX - INSERTAR DETALLE DE CARGOS TEMPORALES (000231):</b><br>".mysql_error()."<br>SQL: ".$sql_tm_ins);
    }
}

function liquidar_con_cco_quirofano($conex,$wemp_pmla, $wbasedato, &$wcentro_costo, $ccoquirofano)
{
    $liquidar_con_cco_quirofano = consultarAliasPorAplicacion($conex, $wemp_pmla, 'liquidar_con_cco_quirofano'); // Indica si se debe liquidar con el centro de costos asociado al quirófano o con el del grabador

    // Cuando esta variable esta en on significa que debe usar para la liquidación el centro de costos asociado al quirófano
    // esta modificación se hace porque para cirugía de tercer piso se debe grabar con el centro de costos correspondiente y no con el del segundo piso.
    // el cual esta asociado al mismo grabador que liquida las cirugías del tercer piso.
    if($liquidar_con_cco_quirofano == 'on')
    {
        $wcentro_costo = $ccoquirofano;
    }
}

/**
 * [arrayCargosInsumos: Crea un array con todos los insumos que hacen parte de la liquidación, verifica el estado del código en el maestro matrix]
 * @param  [type] $conex                            [description]
 * @param  [type] $wemp_pmla                        [description]
 * @param  [type] $wbasedato                        [description]
 * @param  [type] $wcco                             [description]
 * @param  [type] $wfecha_cargo                     [description]
 * @param  [type] $whora_cargo                      [description]
 * @param  [type] $arr_CARGOS_PARA_GRABAR           [description]
 * @param  [type] $concepto_medicamentos_mueven_inv [description]
 * @param  [type] $concepto_materiales_mueven_inv   [description]
 * @param  [type] $wbasedato_movhos                 [description]
 * @param  [type] &$arr_validaciones                [description]
 * @param  [type] $arr_datosGENERALES               [description]
 * @return [type]                                   [description]
 */
function arrayCargosInsumos($conex,$wemp_pmla, $wbasedato, $wcco, $wfecha_cargo, $whora_cargo, $arr_CARGOS_PARA_GRABAR, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $wbasedato_movhos, &$arr_validaciones, &$arr_insumosFactError, $arr_datosGENERALES)
{
    $arr_insumos_cargos = array(); // Array de los códigos solo de insumos, que se van a liquidar, no se incluyen aquí los cargos por conceptos.
    $insumos_diferenteValorUnix = array();

    foreach ($arr_CARGOS_PARA_GRABAR as $key_procedimiento => $arr_cargos_dll)
    {
        foreach ($arr_cargos_dll as $key_wconcepto_equipo_o_insumo => $arr_cargos_del_concepto)
        {
            foreach ($arr_cargos_del_concepto as $key_secuencia => $arr_CARGO)
            {
                if($arr_CARGO['wfacturable'] == '')
                {
                    if(!array_key_exists($arr_CARGO['wprocod'], $arr_insumosFactError))
                    {
                        $arr_insumosFactError[$arr_CARGO['wprocod']] =$arr_CARGO['wprocod'];
                    }
                }

                if($arr_CARGO['wgrabar'] == 'on')
                {
                    if($arr_CARGO['wcodcon'] == $concepto_medicamentos_mueven_inv || $arr_CARGO['wcodcon'] == $concepto_materiales_mueven_inv)
                    {
                        $cod_art_cargo = $arr_CARGO['wprocod'];
                        if(!array_key_exists($cod_art_cargo, $arr_insumos_cargos))
                        {
                            $arr_insumos_cargos[$cod_art_cargo] = array("codigo_insumo"=>$cod_art_cargo,"nombre_insumo"=>$arr_CARGO['wpronom'],"unidad_medida"=>"","wtar"=>$arr_CARGO['wtar'],"wtarifa_unitaria_mx"=>$arr_CARGO['wtarifa_unitaria_mx'],
                                                                        "valorActual"=>$arr_CARGO['valorActual'],"valorAnterior"=>$arr_CARGO['valorAnterior'],"fechaCambio"=>$arr_CARGO['fechaCambio'],"sql_sintarifa"=>"","sql_dif_valor"=>"",
                                                                        "valor_unix"=>"", "valor_matrix"=>"", "tipo_error_msj"=>"", "TIP_POS"=>$arr_CARGO['TIP_POS'], "wtar_cargo_POS"=>$arr_CARGO['wtar_cargo_POS']);

                            if(!isset($arr_CARGO['estado_insumo_mx']) || $arr_CARGO['estado_insumo_mx'] == '')
                            {
                                // Esta validación se usa porque puede llegar a pasar que por pólitica se agregue un cargo adicional de insumo o se reemplace por otro código
                                // en esos casos el campo estado_insumo_mx puede llegar a no existir o quedar vacío porque es el proceso de aplicación de políticas quien hace ese cambio y
                                // el control del programa de liquidación no llega hasta ese punto.
                                $sql = "SELECT Artcod, Artest
                                        FROM   {$wbasedato_movhos}_000026
                                        WHERE  Artcod = '{$cod_art_cargo}'";
                                $result = mysql_query($sql,$conex);
                                if(mysql_num_rows($result) > 0)
                                {
                                    $row_insumo = mysql_fetch_array($result);
                                    $arr_CARGO['estado_insumo_mx'] = $row_insumo["Artest"];
                                }
                            }

                            if($arr_CARGO['estado_insumo_mx'] != 'on')
                            {
                                $msj_inactivo = 'ARTICULO INACTIVO EN MATRIX';
                                if(!array_key_exists($cod_art_cargo, $insumos_diferenteValorUnix))
                                {
                                    $insumos_diferenteValorUnix[$cod_art_cargo]                  = array();
                                    $insumos_diferenteValorUnix[$cod_art_cargo]                  = $arr_insumos_cargos[$cod_art_cargo];
                                    $insumos_diferenteValorUnix[$cod_art_cargo]["sql_dif_valor"] = "";
                                    $insumos_diferenteValorUnix[$cod_art_cargo]["valor_unix"]    = number_format(0,CANTIDAD_DECIMALES);
                                    $insumos_diferenteValorUnix[$cod_art_cargo]["valor_matrix"]  = number_format(0,CANTIDAD_DECIMALES);
                                    $insumos_diferenteValorUnix[$cod_art_cargo]["tipo_error_msj"]= '<span style="color:red;"> '.$msj_inactivo.'</span>';
                                    $arr_validaciones["insumos_valores_unx_mtx"]           = false;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    $arr_validaciones["arr_diferente_valor"] = $insumos_diferenteValorUnix;
    return $arr_insumos_cargos;
}

/**
 * [validarSaldosYUnixLiquidacionCx: Valída saldos en unix, valor de tarifas unix vs matrix, fecha de cambio de tarifa.]
 * @param  [type] $conex                            [description]
 * @param  [type] $wemp_pmla                        [description]
 * @param  [type] $wbasedato                        [description]
 * @param  [type] $wcco                             [description]
 * @param  [type] $wfecha_cargo                     [description]
 * @param  [type] $whora_cargo                      [description]
 * @param  [type] $arr_CARGOS_PARA_GRABAR           [description]
 * @param  [type] $concepto_medicamentos_mueven_inv [description]
 * @param  [type] $concepto_materiales_mueven_inv   [description]
 * @param  [type] $wbasedato_movhos                 [description]
 * @param  [type] $arr_validaciones                 [description]
 * @param  [type] $arr_datosGENERALES               [description]
 * @param  [type] $arr_insumos_cargos               [description]
 * @return [type]                                   [description]
 *
 * [2015-11-11] Se crea el nuevo parámetro conexUnxAnular, que es enviado desde la anulación de cargos de cirugía para que no se tenga que crear una nueva conexión a unix, si es desde
 * la función de grabar liquidación esta variable llega vacía. La variable tipoaccion es para controlar que se eviten hacer algunas validaciones cuando es un cargo de devolución.
 */
function validarSaldosYUnixLiquidacionCx($conex, $conexUnxAnular, $wemp_pmla, $wbasedato, $wcco, $wfecha_cargo, $whora_cargo, $arr_CARGOS_PARA_GRABAR, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $wbasedato_movhos, $arr_validaciones, $arr_datosGENERALES, $arr_insumos_cargos, $tipoaccion)
{
    $validarFechaCambioTarifaUnxMxERP = $arr_datosGENERALES["validarFechaCambioTarifaUnxMxERP"];
    $fecha_actual = date("Y-m-d");
    $conexUnix = "";
    if($conexUnxAnular != '')
    {
        // Al devolver o anular la cirugía se usa una misma conexión a unix es por eso que se valída si ya existe la conexión anular a unix
        // y con esto evitar que se cierre la conexión a unix antes de terminar el proceso de devolución.
        $conexUnix = $conexUnxAnular;
    }
    else
    {
        if($conexUnix = @odbc_connect('facturacion','informix','sco'))
        {
            // OK
        }
    }

    if($conexUnix != '')
    {
        $IN_insumos = implode("','", array_keys($arr_insumos_cargos));

        $insumos_sin_saldo          = $arr_insumos_cargos;
        $insumos_sin_tarifa         = $arr_insumos_cargos;
        $insumos_diferenteValorUnix = $arr_validaciones["arr_diferente_valor"]; // En este array se guardan los insumos que quedarían con diferente valor de tarifa en unix y diferente en matrix.

        $wfecha_cargo_tmp = (str_replace("-", "", $wfecha_cargo))*1; // Para usarlo en la validación de tarifas respecto a unix.
        $exp_fec          = explode("-", $wfecha_cargo);
        $salano           = $exp_fec[0];
        $salmes           = $exp_fec[1];

        /*if($datosGrabarCargos['wcodcon'] == $concepto_medicamentos_mueven_inv || $datosGrabarCargos['wcodcon'] == $concepto_materiales_mueven_inv)*/
        {
            $anioMesAct    = date("Ym")*1;
            $xpl_a_m_cargo = explode("-", $wfecha_cargo);
            $anioMesCargo  = ($xpl_a_m_cargo[0].$xpl_a_m_cargo[1])*1;
            if($anioMesCargo < $anioMesAct)
            {
                // No era lo correcto validar el saldo con la fecha del cargo si corresponde al mes anterior, en ese caso se debe consultar el saldo es con el año y mes actual,
                // porque con esa fecha es que se va a intentar grabar el cargo de insumo en unix. Es posible que como estaba encontrara saldo para el mes anterior
                // pero al momento de grabar salir error en integrador diciendo que no hay saldo para el mes actual.
                //$datosGrabarCargos['wfeccar'] = $fecha_actual;
                $exp_fec          = explode("-", $fecha_actual);
                $salano           = $exp_fec[0];
                $salmes           = $exp_fec[1];
            }
        }

        $sql = "SELECT  salart
                FROM    ivsal
                WHERE   salart IN ('{$IN_insumos}')
                        AND salano = '{$salano}'
                        AND salmes = '{$salmes}'
                        AND salser = '{$wcco}'";

        $result = odbc_exec($conexUnix, $sql);
        $arr_PrimerTarifaInsumo = array();
        // $arr_insumos_con_saldo = array();
        while (odbc_fetch_row($result))
        {
            $cod_art = odbc_result($result, 'salart');

            $tarifa_empresa_cargo = $arr_insumos_cargos[$cod_art]['wtar'];
            // Si el cargo es tipo NO POS, el cargo debío haber quedado calculado con la tarifa de la empresa POS, entonces para comparar la tarifa
            // con unix se debe hacer con la tarifa de la empresa POS para que no exista problemas a intentar comparar por ejemplo tarifa particular con POS.
            $tar_POS = '';
            if(array_key_exists('TIP_POS', $arr_insumos_cargos[$cod_art]) && tipoPOS_procedimiento($arr_insumos_cargos[$cod_art]['TIP_POS'])
                && array_key_exists('wtar_cargo_POS', $arr_insumos_cargos[$cod_art]) && $arr_insumos_cargos[$cod_art]['wtar_cargo_POS'] != '')
            {
                $tarifa_empresa_cargo = $arr_insumos_cargos[$cod_art]['wtar_cargo_POS'];
                $tar_POS = ' ('.$tarifa_empresa_cargo.')';
            }

            $sqlTarifa = "  SELECT  arttartar, arttarvaa, arttarfec, arttarval, artact
                            FROM    ivarttar, ivart
                            WHERE   arttarcod = '{$cod_art}'
                                    AND arttarcod = artcod
                                    AND  (arttartar = '{$tarifa_empresa_cargo}' OR arttartar = '*')
                            order by arttartar desc ";
            $resTarifa = odbc_exec($conexUnix, $sqlTarifa);
            if(odbc_fetch_row($resTarifa)) // Si la consulta responde varios registros, solo se toma el primero que es el de mayor prioridad.
            {
                if((odbc_result($resTarifa, 'arttarval')*1) >= 0)
                {
                    $activoArt  = odbc_result($resTarifa, 'artact'); // Insumo activo en UNIX
                    // HAY TARIFA EN UNIX
                    if(array_key_exists($cod_art, $insumos_sin_tarifa) && $activoArt == "S") // Los insumos que tienen tarifa se sacan del array, al final lo que quede en este array es porque no se encontró tarifa en unix
                    {
                        unset($insumos_sin_tarifa[$cod_art]);
                    }

                    $valAntUnix = odbc_result($resTarifa, 'arttarvaa')*1; // Valor anterior UNIX
                    $fechaUnix  = odbc_result($resTarifa, 'arttarfec'); // Fecha cambio valor UNIX
                    $valActUnix = odbc_result($resTarifa, 'arttarval')*1; // Valor actual UNIX

                    $arr_insumos_cargos[$cod_art]['valorAnterior']	= (($arr_insumos_cargos[$cod_art]['valorAnterior'] == "") ? 0 : $arr_insumos_cargos[$cod_art]['valorAnterior']);
					$valAntMatrix = $arr_insumos_cargos[$cod_art]['valorAnterior']*1; // Valor anterior MATRIX
                    $fechaMatrix  = $arr_insumos_cargos[$cod_art]['fechaCambio'];   // Fecha cambio valor MATRIX
					$arr_insumos_cargos[$cod_art]['wtarifa_unitaria_mx']	= (($arr_insumos_cargos[$cod_art]['wtarifa_unitaria_mx'] == "") ? 0 : $arr_insumos_cargos[$cod_art]['wtarifa_unitaria_mx']);
                    $valActMatrix = $arr_insumos_cargos[$cod_art]['wtarifa_unitaria_mx']*1;   // Valor actual MATRIX

                    $fechaUnix_tmp  = (str_replace("-", "", $fechaUnix))*1;   // ej. 2015/03/21 => 20150321
                    $fechaMatrix_tmp= (str_replace("-", "", $fechaMatrix)); // ej. 2015-03-21 => 20150321

                    $fecha_actual_tmp =  (str_replace("-", "", $fecha_actual))*1;

                    // Si es Devolución no debe ingresar a esta validación, porque el cargo de devolución se debería crear con el mismo valor con el que se grabó inicialmente.
                    // y puede que al momento de devolver exista un cambio en la tarifa, el cargo no se dejaría devolver porque encontraría diferencia en las fechas de tarifa.
                    if($tipoaccion != "D")
                    {
                        // Validar que el valor de la tarifa a cobrar en unix sea la misma que quedará en matrix.
                        // Ahora se compara contra la fecha actual para que no siempre salga error de fecha de tarifa mayor, solo debería salir si la fecha actual
                        // no es mayor o igual a la fecha de modificación de la tarifa, en caso contrario todas las tarifas que cambiarían a partir de una fecha mucho mayor a la actual
                        // siempre marcarían error y no sería correcto modificar la fecha en unix a la fecha de la cirugía porque anticiparía muchísimo la nueva tarifa.
                        if($validarFechaCambioTarifaUnxMxERP == 'on' && $wfecha_cargo_tmp < $fechaUnix_tmp && $wfecha_cargo_tmp < $fechaMatrix_tmp && $valActUnix != $valActMatrix && $fecha_actual_tmp >= $fechaUnix_tmp)
                        {
                            //ERROR tarifas diferentes
                            if(!array_key_exists($cod_art, $insumos_diferenteValorUnix))
                            {
                                $insumos_diferenteValorUnix[$cod_art]                  = array();
                                $insumos_diferenteValorUnix[$cod_art]                  = $arr_insumos_cargos[$cod_art];
                                $insumos_diferenteValorUnix[$cod_art]["sql_dif_valor"] = $sqlTarifa;
                                $insumos_diferenteValorUnix[$cod_art]["valor_unix"]    = number_format($valActUnix,CANTIDAD_DECIMALES).$tar_POS;
                                $insumos_diferenteValorUnix[$cod_art]["valor_matrix"]  = number_format($valActMatrix,CANTIDAD_DECIMALES).$tar_POS;
                                $insumos_diferenteValorUnix[$cod_art]["tipo_error_msj"]= '<span style="color:red;">Fecha tarifa mayor a la cirug&iacute;a</span>';
                                $arr_validaciones["insumos_valores_unx_mtx"]           = false;
                            }
                            else
                            {
                                $insumos_diferenteValorUnix[$cod_art]["sql_dif_valor"] .= $sqlTarifa;
                                $insumos_diferenteValorUnix[$cod_art]["valor_unix"]    = number_format($valActUnix,CANTIDAD_DECIMALES).$tar_POS;
                                $insumos_diferenteValorUnix[$cod_art]["valor_matrix"]  = number_format($valActMatrix,CANTIDAD_DECIMALES).$tar_POS;
                                $insumos_diferenteValorUnix[$cod_art]["tipo_error_msj"].= '<span style="color:red;"> Fecha tarifa mayor a la cirug&iacute;a</span>';
                            }
                        }
                        elseif($fechaUnix_tmp != $fechaMatrix_tmp)
                        {
                            // Este caso puede suceder porque actualizaron la tarifa en unix pero no la actualizaron en matrix.
                            //ERROR tarifas - Fechas cambio de tarifa diferentes
                            if(!array_key_exists($cod_art, $insumos_diferenteValorUnix))
                            {
                                $insumos_diferenteValorUnix[$cod_art]                  = array();
                                $insumos_diferenteValorUnix[$cod_art]                  = $arr_insumos_cargos[$cod_art];
                                $insumos_diferenteValorUnix[$cod_art]["sql_dif_valor"] = $sqlTarifa." > [{$fechaUnix_tmp} != {$fechaMatrix_tmp}]";
                                $insumos_diferenteValorUnix[$cod_art]["valor_unix"]    = number_format($valActUnix,CANTIDAD_DECIMALES).$tar_POS;
                                $insumos_diferenteValorUnix[$cod_art]["valor_matrix"]  = number_format($valActMatrix,CANTIDAD_DECIMALES).$tar_POS;
                                $insumos_diferenteValorUnix[$cod_art]["tipo_error_msj"]= '<span style="color:red;">Fecha cambio tarifa en Matrix diferente a Unix</span>';
                                $arr_validaciones["insumos_valores_unx_mtx"]           = false;
                            }
                            else
                            {
                                $insumos_diferenteValorUnix[$cod_art]["sql_dif_valor"] .= $sqlTarifa." > [{$fechaUnix_tmp} != {$fechaMatrix_tmp}]";
                                $insumos_diferenteValorUnix[$cod_art]["valor_unix"]    = number_format($valActUnix,CANTIDAD_DECIMALES).$tar_POS;
                                $insumos_diferenteValorUnix[$cod_art]["valor_matrix"]  = number_format($valActMatrix,CANTIDAD_DECIMALES).$tar_POS;
                                $insumos_diferenteValorUnix[$cod_art]["tipo_error_msj"].= '<span style="color:red;"> Fecha cambio tarifa en Matrix diferente a Unix</span>';
                            }
                        }
                        /* // NO SE PUEDE HACER ESTA VALIDACION PORQUE LA TARIFA QUE LLEGA COMO ACTUAL EN MATRIX NO ES EXACTAMENTE LA ACTUAL PORQUE LA TARIFA
                            // SE CALCULA DEPENDIENDO DE LA FECHA DE LA CIRUGIA, PUEDE SER ENTONCES EL VALOR ANTERIOR DEBÍDO A QUE LA FECHA DE CAMBIO DE LA TARIFA ES MAYOR A LA CIRUGÍA.
                        elseif($valActUnix != $valActMatrix)
                        {
                            // Este caso puede suceder porque actualizaron la tarifa en unix pero no la actualizaron en matrix.
                            //ERROR tarifas - Fechas cambio de tarifa diferentes
                            if(!array_key_exists($cod_art, $insumos_diferenteValorUnix))
                            {
                                $insumos_diferenteValorUnix[$cod_art]                  = array();
                                $insumos_diferenteValorUnix[$cod_art]                  = $arr_insumos_cargos[$cod_art];
                                $insumos_diferenteValorUnix[$cod_art]["sql_dif_valor"] = $sqlTarifa;
                                $insumos_diferenteValorUnix[$cod_art]["valor_unix"]    = number_format($valActUnix,CANTIDAD_DECIMALES);
                                $insumos_diferenteValorUnix[$cod_art]["valor_matrix"]  = number_format($valActMatrix,CANTIDAD_DECIMALES);
                                $insumos_diferenteValorUnix[$cod_art]["tipo_error_msj"]= '<span style="color:red;">Valor actual en Unix y en Matrix son diferentes</span>';
                                $arr_validaciones["insumos_valores_unx_mtx"]           = false;
                            }
                            else
                            {
                                $insumos_diferenteValorUnix[$cod_art]["sql_dif_valor"] .= $sqlTarifa;
                                $insumos_diferenteValorUnix[$cod_art]["valor_unix"]    = number_format($valActUnix,CANTIDAD_DECIMALES);
                                $insumos_diferenteValorUnix[$cod_art]["valor_matrix"]  = number_format($valActMatrix,CANTIDAD_DECIMALES);
                                $insumos_diferenteValorUnix[$cod_art]["tipo_error_msj"].= '<span style="color:red;"> Valor actual en Unix y en Matrix son diferentes</span>';
                            }
                        }
                        elseif($valAntUnix != $valAntMatrix)
                        {
                            // Este caso puede suceder porque actualizaron la tarifa en unix pero no la actualizaron en matrix.
                            //ERROR tarifas - Fechas cambio de tarifa diferentes
                            if(!array_key_exists($cod_art, $insumos_diferenteValorUnix))
                            {
                                $insumos_diferenteValorUnix[$cod_art]                  = array();
                                $insumos_diferenteValorUnix[$cod_art]                  = $arr_insumos_cargos[$cod_art];
                                $insumos_diferenteValorUnix[$cod_art]["sql_dif_valor"] = $sqlTarifa;
                                $insumos_diferenteValorUnix[$cod_art]["valor_unix"]    = number_format($valAntUnix,CANTIDAD_DECIMALES);
                                $insumos_diferenteValorUnix[$cod_art]["valor_matrix"]  = number_format($valAntMatrix,CANTIDAD_DECIMALES);
                                $insumos_diferenteValorUnix[$cod_art]["tipo_error_msj"]= '<span style="color:red;">Valor anterior en Unix y en Matrix son diferentes</span>';
                                $arr_validaciones["insumos_valores_unx_mtx"]           = false;
                            }
                            else
                            {
                                $insumos_diferenteValorUnix[$cod_art]["sql_dif_valor"] .= $sqlTarifa;
                                $insumos_diferenteValorUnix[$cod_art]["valor_unix"]    = number_format($valAntUnix,CANTIDAD_DECIMALES);
                                $insumos_diferenteValorUnix[$cod_art]["valor_matrix"]  = number_format($valAntMatrix,CANTIDAD_DECIMALES);
                                $insumos_diferenteValorUnix[$cod_art]["tipo_error_msj"].= '<span style="color:red;"> Valor anterior en Unix y en Matrix son diferentes</span>';
                            }
                        }*/
                    }

                    if($activoArt != 'S')
                    {
                        $msj_inactivo = 'ARTICULO INACTIVO EN UNIX';
                        if(!array_key_exists($cod_art, $insumos_diferenteValorUnix))
                        {
                            $insumos_diferenteValorUnix[$cod_art]                  = array();
                            $insumos_diferenteValorUnix[$cod_art]                  = $arr_insumos_cargos[$cod_art];
                            $insumos_diferenteValorUnix[$cod_art]["sql_dif_valor"] = $sqlTarifa;
                            $insumos_diferenteValorUnix[$cod_art]["valor_unix"]    = number_format($valActUnix,CANTIDAD_DECIMALES).$tar_POS;
                            $insumos_diferenteValorUnix[$cod_art]["valor_matrix"]  = number_format($valActMatrix,CANTIDAD_DECIMALES).$tar_POS;
                            $insumos_diferenteValorUnix[$cod_art]["tipo_error_msj"]= '<span style="color:red;"> '.$msj_inactivo.'</span>';
                            $arr_validaciones["insumos_valores_unx_mtx"]           = false;
                        }
                        else
                        {
                            $insumos_diferenteValorUnix[$cod_art]["tipo_error_msj"].= '<span style="color:red;font-weight:bold;"> '.$msj_inactivo.'!</span>';
                            $arr_validaciones["insumos_valores_unx_mtx"]            = false;
                        }
                    }
                }
                else
                {
                    $arr_validaciones["insumos_tarifa"] = false;
                    $insumos_sin_tarifa[$cod_art]["sql_sintarifa"] = $sqlTarifa;
                }
            }
            else
            {
                $arr_validaciones["insumos_tarifa"] = false;
                $insumos_sin_tarifa[$cod_art]["sql_sintarifa"] = $sqlTarifa;
            }

            if(array_key_exists($cod_art, $insumos_sin_saldo))
            {
                unset($insumos_sin_saldo[$cod_art]); //$arr_insumos_con_saldo[$cod_art] = $cod_art;
            }
        }

        // Si en este array quedó algún dato significa que no se encontró un registro de saldo para ese artículo en la tabla de saldo de unix.
        if(count($insumos_sin_saldo) > 0)
        {
            // Consultar la unidad de cada insumo
            $IN_insumo_medida = implode("','", array_keys($insumos_sin_saldo));
            $sql = "SELECT Artcod, Artuni
                    FROM   {$wbasedato_movhos}_000026
                    WHERE  Artcod IN ('{$IN_insumo_medida}')";
            if($result = mysql_query($sql,$conex))
            {
                while($row_m26 = mysql_fetch_array($result))
                {
                    if(array_key_exists($row_m26['Artcod'], $insumos_sin_saldo))
                    {
                        $insumos_sin_saldo[$row_m26['Artcod']]['unidad_medida'] = $row_m26['Artuni'];
                    }
                }

                foreach ($insumos_sin_saldo as $codigo_insumo => $arr_info_insumo)
                {
                    $toupper_codigo_insumo = strtoupper($codigo_insumo); // Asegura que se inserte en mayúsculas
                    $sqlInSal = "   INSERT INTO ivsal ( salano,salmes,salser,salart,saluni,
                                                       salant, salvan,salent,salven,salsal,salvsa,salpro,salaju)
                                    VALUES            ('{$salano}','{$salmes}','{$wcco}','{$toupper_codigo_insumo}','{$arr_info_insumo['unidad_medida']}',
                                                       '0','0','0','0','0','0','0','0')";
                    if($resInSal = odbc_exec($conexUnix, $sqlInSal))
                    {
                        $arr_validaciones["query_sin_saldo"] .= "|".$sqlInSal;

                        // En esta tabla se guarda una copia de los saldos de los insumos que hay unix, si en algún momento unix está fuera de línea,
                        // es en esta tabla donde se consulta el saldo.
                        $sqlSalTmp = "  SELECT Salart
                                        FROM   {$wbasedato_movhos}_000141
                                        WHERE  Salser = '{$wcco}' AND Salart = '{$toupper_codigo_insumo}'";
                        if($resultSalTmp = mysql_query($sqlSalTmp,$conex))
                        {
                            if(mysql_num_rows($resultSalTmp) == 0)
                            {
                                $Hora_data  = date("H:i:s");
                                $sqlInSal = "   INSERT INTO {$wbasedato_movhos}_000141
                                                        (Medico, Fecha_data, Hora_data, Salser, Salart,
                                                         Salant, Salent, Salsal, Seguridad)
                                                VALUES  ('{$wbasedato_movhos}', '{$fecha_actual}', '{$Hora_data}', '{$wcco}', '{$toupper_codigo_insumo}',
                                                         '0', '0', '0', 'C-{$wbasedato}')";
                                if($resInSal = mysql_query($sqlInSal,$conex))
                                {
                                }
                            }
                        }
                        guardar_log_txt($sqlInSal.PHP_EOL, "LOG_ips_liquidacion_cirugiaERP_saldos_creados");
                    }
                    else
                    {
                        $arr_validaciones["insumos_saldo"]       = false;
                        $arr_validaciones["query_sin_saldo_err"] .= "|".$sqlInSal;
                    }
                }
            }
        }

        if($conexUnxAnular == '') { odbc_close($conexUnix); }
    }
    else
    {
        $arr_validaciones["unix_activo"] = false;
    }
    $arr_validaciones["arr_sin_tarifas"]     = $insumos_sin_tarifa;
    $arr_validaciones["arr_diferente_valor"] = $insumos_diferenteValorUnix;
    if($conexUnxAnular == '') { odbc_close_all(); }
    return $arr_validaciones;
}

/**
 * [medicoExcepcionTarifaria: Se trasladó a la librería funciones_facturacionERP.php]
 * @return [type] [description]
   function medicoExcepcionTarifaria()
 */

/**
 * [consultarPorcentajesTercero: función encargada de consultar el porcentaje del tercero, disponibilidad, cuadros de turno]
 * @param  [type] $arr_paramTer [parámetros generales del médico para consultar porcentaje y cuadros de turno]
 * @return [type]               [description]
 */
function consultarPorcentajesTercero($arr_paramTer)
{
    $codigo_wtercero         = $arr_paramTer['codigo_wtercero'];
    $wespecialidad_          = $arr_paramTer['wespecialidad_'];
    $wcodcon                 = codConceptoLegible($arr_paramTer['wcodcon']);
    $wtip_paciente           = $arr_paramTer['wtip_paciente'];
    $whora_cargo             = $arr_paramTer['whora_cargo'];
    $wfecha_cargo            = $arr_paramTer['wfecha_cargo'];
    $wtipoempresaToTer       = $arr_paramTer['wtipoempresaToTer'];
    $wtarifaToTer            = $arr_paramTer['wtarifaToTer'];
    $wempresaToTer           = $arr_paramTer['wempresaToTer'];
    $wccoToTer               = $arr_paramTer['wccoToTer'];
    $wcod_procedimientoToTer = arreglar_procedimientos_bilaterales($arr_paramTer['wcod_procedimientoToTer']);
    $wdisponibilidad         = $arr_paramTer['wdisponibilidad'];
    $wcuadroturno            = $arr_paramTer['wcuadroturno'];
    $grupoMedico             = $arr_paramTer['grupoMedico'];

    $arr_porTer = array();
    $arr_porTer = datos_desde_tercero($codigo_wtercero,$wespecialidad_,$wcodcon,$wtip_paciente,$whora_cargo,$wfecha_cargo,$wtipoempresaToTer,$wtarifaToTer,$wempresaToTer,$wccoToTer,$wcod_procedimientoToTer,$wcuadroturno,$wdisponibilidad);
    $arr_porTer["dobleCuadroDeTurno"] = $arr_porTer["dobleCuadroDeTurno"]*1;
    // $arr_porTer["cuadrosDeTurno"] = array("01"=>"cuadro 1", "02"=>"cuadro 2","03"=>"cuadro 3");
    return $arr_porTer;
}

/**
 * [verificarCodigoPorRango: Se encarga de verificar si el campo de código por rango tiene algún valor, si es así entonces reemplaza el código del procedimiento por ese nuevo código
 *                             para que a unix se vaya el código del rango y no el código de la cirugía.]
 * @param  [type] $conex     [description]
 * @param  [type] $wemp_pmla [description]
 * @param  [type] $wbasedato [description]
 * @param  [type] $arr_CARGO [description]
 * @return [type]            [description]
 */
function verificarCodigoPorRango($conex,$wemp_pmla, $wbasedato, &$arr_CARGO)
{
    if($arr_CARGO["codRangoTiempo"] != "")
    {
        // Cuando un cargo se genera a partir de un rango, el código cobrado es el que debe viajar hasta unix a cambio del código de la cirugía
        // porque en unix quedaría la tarifa como concepto-codigo_cirugía y no concepto-codigo_rango
        $arr_CARGO["wprocod"] 		= $arr_CARGO["codRangoTiempo"];
		$arr_CARGO["codigoRips"]	= trim(arreglar_procedimientos_bilaterales($arr_CARGO["procedimiento"]));
    }
}

/**
 * [validacionCargosUnixSimulacion: Función encargada de validar si los cargos tienen algún problema de tarífas en unix antes de grabar, si por lo menos un cargo resulta con un error
 *                                     no se podrá grabar ningún cargo a unix de la liquidacón en proceso]
 * @param  [type] $conex                            [description]
 * @param  [type] $wemp_pmla                        [description]
 * @param  [type] $wbasedato                        [description]
 * @param  [type] $wcco                             [description]
 * @param  [type] $wfecha_cargo                     [description]
 * @param  [type] $whora_cargo                      [description]
 * @param  [type] $arr_CARGOS_PARA_GRABAR           [description]
 * @param  [type] $concepto_medicamentos_mueven_inv [description]
 * @param  [type] $concepto_materiales_mueven_inv   [description]
 * @param  [type] $wbasedato_movhos                 [description]
 * @param  [type] $arr_cargosValidaciones           [Array para guardar los mensajes de error generados]
 * @return [type]                                   [description]
 */
function validacionCargosUnixSimulacion($conex,$wemp_pmla, $wbasedato, $wcco, $wfecha_cargo, $whora_cargo, $arr_CARGOS_PARA_GRABAR, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $wbasedato_movhos, $arr_cargosValidaciones, $arr_datosGENERALES)
{
    $conexUnix                   = odbc_connect('facturacion','informix','sco');
    $respuestaSimulacion         = array("validacionUnixCorrecto"=>true, "data_respuesta_mensajes_err"=>array());
    $validacionUnixCorrecto      = true;
    $data_respuesta_mensajes_err = array();

    foreach ($arr_CARGOS_PARA_GRABAR as $key_procedimiento => $arr_cargos_dll)
    {
        $wprocedimiento = $key_procedimiento;
        foreach ($arr_cargos_dll as $key_wconcepto_equipo_o_insumo => $arr_cargos_del_concepto)
        {
            foreach ($arr_cargos_del_concepto as $key_secuencia => $arr_CARGO)
            {
                // Verifica si debe cambiar el campo wprocod por codRangoTiempo, para no grabar con el código de la cirugía sino con el código del rango
                verificarCodigoPorRango($conex,$wemp_pmla, $wbasedato, $arr_CARGO);

                $procedimiento_log_cx = $arr_CARGO['procedimiento_liquidar_cod'];

                // Por el momento no validar insumos porque solo esta desarrollada la rutina para verificar tarifas de conceptos en unix, los insumos no se pueden verificar por
                // el momento, solo se pueden validar e insertar de inmediato y en esta función solo se pretende validar sin insertar.
                // sin_tarifa_no_grabar = 'on' - Cargos que por cambio de responsable o no tienen tarifa porque simplemente no superan un límite no se deben grabar (de entrada no tienen tarifa porque nunca se van a cobrar),
                // para que no salga error de tarifa en la validación con unix
                if($arr_CARGO["sin_tarifa_no_grabar"] != 'on' && $arr_CARGO['wgrabar'] == 'on' && $arr_CARGO['wcodcon'] != $concepto_medicamentos_mueven_inv && $arr_CARGO['wcodcon'] != $concepto_materiales_mueven_inv)
                {
					$datosGrabarCargos = fnArrayCargoLiquidar($conex,$wemp_pmla, $wbasedato, $arr_CARGO, $arr_datosGENERALES, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv);
										
                    $data_respuesta = validarTarifaUnix($conex, $wbasedato, $wemp_pmla, $conexUnix, $datosGrabarCargos);

                    if($data_respuesta["error"] == 0) //  && $idGuardadoBD > 0
                    {
                        // CARGO CORRECTO
                    }
                    else
                    {
                        $validacionUnixCorrecto = false;
                        // arr_cargosValidaciones

                        $msje_respuesta_err = $data_respuesta["mensaje"];
                        $error_tipo = $data_respuesta["error_tipo"];

                        if(!array_key_exists($error_tipo, $data_respuesta_mensajes_err))
                        {
                            $data_respuesta_mensajes_err[$error_tipo] = array("mensaje_err"=>$data_respuesta["mensaje_err"],"arr_errores"=>array(), "error_tipo"=>$error_tipo, "evidenciaError" => "");
                        }

                        // if($data_respuesta["cod_cargo"] != '')
                        {
                            $data_respuesta_mensajes_err[$error_tipo]["arr_errores"][] = $msje_respuesta_err;
                            $data_respuesta_mensajes_err[$error_tipo]["evidenciaError"] .= PHP_EOL.$data_respuesta["EvidenciaError"];
                        }
                    }
                }
            }
        }
    }
    $respuestaSimulacion["validacionUnixCorrecto"]      = $validacionUnixCorrecto;
    $respuestaSimulacion["data_respuesta_mensajes_err"] = $data_respuesta_mensajes_err;
    odbc_close($conexUnix);
    odbc_close_all();
    return $respuestaSimulacion;
}

function validarTarifaUnix($conex_fn, $wbasedato_fn, $wemp_pmla_fn, $conexUnix, $datos)
{					
    global $conex;
    global $wbasedato;
    global $wemp_pmla;

    $conex     = $conex_fn;
    $wbasedato = $wbasedato_fn;
    $wemp_pmla = $wemp_pmla_fn;

    $respuesta = array('error' => 0 , 'Accion' => array(), 'MensajeError' => '', 'EvidenciaError' => '', "mensaje_err"=>"", "mensaje"=>"", "cod_cargo"=>"", "error_tipo"=>"");

    // --> Creacion de variables
    foreach($datos as $NombreVariable => $ValorVariable)
    {
        $$NombreVariable = $ValorVariable;
    }

    $valorvto = $wvaltarReco+$wvaltarExce;

    if(!isset($aplicoRecfestivo))
            $aplicoRecfestivo = 'N';

    if(!isset($valorRecargoAplicado))
        $valorRecargoAplicado = 0;

    $variablesUnix  = array();
    // --> Variables basicas para grabar un cargo en unix
    $variablesUnix['historia']      = $whistoria;
    $variablesUnix['ingreso']       = $wing;
    $variablesUnix['fechaCargo']    = $wfeccar;
    $variablesUnix['horaCargo']     = $whora_cargo;
    $variablesUnix['porcenTercero'] = $wporter;
    $variablesUnix['cantidad']      = $wcantidad;
    $variablesUnix['valorUnitario'] = $wvaltar;
    $variablesUnix['valorTotal']    = $valorvto;
    $variablesUnix['recExe']        = $wrecexc;
    $variablesUnix['facturable']    = $wfacturable;
    $variablesUnix['festivo']       = $aplicoRecfestivo;
    $variablesUnix['valorRecargo']  = $valorRecargoAplicado;
    $variablesUnix['valorExceden']  = $wvaltarExce;
    $variablesUnix['valorReconoc']  = $wvaltarReco;
    $variablesUnix['ccoActualPac']  = $ccoActualPac;
    $variablesUnix['terceroUnix']   = $wterunix;
    $variablesUnix['grupoMedico']   = $grupoMedico;
    $variablesUnix['esPaquete']     = $wpaquete;
    $variablesUnix['codigoPaquete'] = $wcodpaq;

    // --> Variables para grabar la estancia en Unix.
    $variablesUnix['habitacion']    = $habitacion;
    $variablesUnix['fecIngHab']     = $fecIngHab;
    $variablesUnix['horIngHab']     = $horIngHab;
    $variablesUnix['diasFacturados']= $diasFacturados;
    $variablesUnix['diasEstancia']  = $diasEstancia;
    $variablesUnix['fecEgrHab']     = $fecEgrHab;
    $variablesUnix['horEgrHab']     = $horEgrHab;

    // --> Inicio Variables para realizar la homologacion
    $variablesUnix['concepto']      = $wcodcon;
    $variablesUnix['procedimiento'] = $wprocod;

    $variablesUnix['ccoGraba']      = $wccogra;
    $variablesUnix['tipoEmpresa']   = $tipoEmpresa;
    $variablesUnix['tarifa']        = $wtar;
    $variablesUnix['responsable']   = $wcodemp;
    $variablesUnix['tipoIngreso']   = $tipoIngreso;
    $variablesUnix['tipoPaciente']  = $tipoPaciente;
    $variablesUnix['tercero']       = $wcodter;
    $variablesUnix['especialidad']  = $wespecialidad;
    $variablesUnix['cobraHono']     = $cobraHonorarios;
    $variablesUnix['cuadroTurno']   = ((!isset($tipoCuadroTurno) || trim($tipoCuadroTurno) == '' || trim($tipoCuadroTurno) == 'NO APLICA') ? '1' : $tipoCuadroTurno);
    $variablesUnix['registroUnix']  = ((!isset($regCargoLabUnix) || trim($regCargoLabUnix) == '' || trim($regCargoLabUnix) == 'NO APLICA') ? '' : $regCargoLabUnix);
    $variablesUnix['codHomologar']  = ((!isset($codHomologar) || trim($codHomologar) == '' || trim($codHomologar) == 'NO APLICA') ? '' : $codHomologar);
    $variablesUnix['tipoLiquida']   = $wtipfac;
    $nitTercero = consultarNitTercero($conex, $wbasedato, $wemp_pmla, $wcodter, $wespecialidad);
    $variablesUnix['nitTercero']    = $nitTercero;
    $variablesUnix['estaEnTurno']   = $estaEnTurno;

    // --> Si el cargo es por paquete no se hace homologacion, ni verificacion de tarifa en unix
    // if($variablesUnix['esPaquete'] != 'on')
    {
        // --> Antes de grabar a unix primero debo realizar el proceso de homologacion
        //     para conocer con que concepto-procedimiento debo grabar en unix.
		$variablesUnix2 = $variablesUnix;
		homologarConUnix($variablesUnix);

        // --> Creacion de variables
        foreach($variablesUnix as $NombreVariable => $ValorVariable)
            $$NombreVariable = $ValorVariable;
		
        $infoTarifa = array('tieneTarifa' => true, 'queryTarifa' => '', 'mensaje' => '');
        if($variablesUnix['esPaquete'] != 'on')
        {
            // --> Validar si el procedimiento tiene tarifa en Unix
            $infoTarifa = obtenerTarifaUnix($conexUnix, $concepto, $procedimiento, $tarifa, $responsable);
        }

        // --> Si no tiene tarifa termino el proceso de grabacion a unix.
        if(!$infoTarifa['tieneTarifa'])
        {
			// echo "4<pre>";
			// print_r($variablesUnix2);
			// echo "</pre>";
			// echo "5<pre>";
			// print_r($variablesUnix);
			// echo "</pre>";
			
            $cod_homologacion = (($variablesUnix['codHomologar']!='') ? " (Homologación: {$variablesUnix['codHomologar']})": "");
            $respuesta['error']          = 1;
            $respuesta['error_tipo']     = "error_tarifa";
            $respuesta['mensaje_err']    = "No se encontro tarifa en Unix";
            $respuesta['mensaje']        = '<span style="font-weight:bold;">Procedimiento:</span> '.$procedimiento.$cod_homologacion.'; <span style="font-weight:bold;">Concepto:</span> '.$concepto.'; Tarifa: '.$tarifa.'; <span style="font-weight:bold;">Responsable:</span> '.$responsable.'';
            $respuesta['EvidenciaError'] = $infoTarifa['mensaje'].' (Pro: '.$procedimiento.')>> '.str_replace("'", "", $infoTarifa['queryTarifa']);
            return $respuesta;
        }
        else{
            $sql_unx_ter = "";
            // [updt-75] Se crea validación para comprobar que la relación concepto homologado y tercero, existan en unix, en caso contrario no permitir grabar la liquidación.
            if(!empty($terceroUnix))
            {
                $sqlTipoCon = " SELECT  contip
                                FROM    facon
                                WHERE   concod = '{$concepto}'";

                $resTipoCon = odbc_exec($conexUnix, $sqlTipoCon);
                odbc_fetch_row($resTipoCon);
                $tipoConcepto = trim(odbc_result($resTipoCon, 1));

                // Se valída la relación concepto-tercero solo si el concepto es compartirdo.
                if($tipoConcepto == "C")
                {
                    $sql_unx = generarSqlValidacionTerceroConcepto($concepto, $terceroUnix, $variablesUnix);
                    // $sql_unx = "SELECT  connitnit
                    //             FROM    faconnit
                    //             WHERE   connitcon = '{$concepto}'
                    //                     AND connitnit = '{$terceroUnix}'";
                    // $result = odbc_exec($conexUnix, $sql_unx);
                    $registro_unix  = false;
                    if($result_unx = odbc_exec($conexUnix, $sql_unx))
                    {
                        while(odbc_fetch_row($result_unx))
                        {
                            $connitnit = trim(odbc_result($result_unx,'connitnit'));
                            if($connitnit == $terceroUnix) { $registro_unix = true; }
                        }
                    }
                    $sql_unx_ter = $sql_unx;

                    if(!$registro_unix)
                    {
                        $respuesta['error_tipo']     = "error_con_ter_unx"; // No hay relación concepto-tercero en unix.
                        $respuesta['error']          = 1;
                        $respuesta['mensaje_err']    = "No se encontro relacion concepto-tercero en unix.";
                        $respuesta['mensaje']        = 'El tercero: <span style="font-weight:bold;">'.$terceroUnix.'</span> y concepto: <span style="font-weight:bold;">'.$concepto.'</span>, no están relacionados en unix';
                        $respuesta['EvidenciaError'] = $infoTarifa['mensaje'].' (Pro: '.$procedimiento.')>> '.str_replace("'", "", $sql_unx_ter);
                    }
                }
            }
            $respuesta['Accion']['queryTarifa'] = str_replace("'", "", $infoTarifa['queryTarifa'].$sql_unx_ter);
        }
    }

    return $respuesta;
}

/**
 * [fnArrayCargoLiquidar description]
 * @param  [type] $conex              [description]
 * @param  [type] $wemp_pmla          [description]
 * @param  [type] $wbasedato          [description]
 * @param  [type] $arr_CARGO          [Array con parámetros propios del cargo generado en la liquidación]
 * @param  [type] $arr_datosGENERALES [Array de parámetros generales o globales a la liquidación]
 * @return [type]                     [description]
 */
function fnArrayCargoLiquidar($conex,$wemp_pmla, $wbasedato, $arr_CARGO, $arr_datosGENERALES, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv)
{
    // Verificar si el cargo esta relacionado a un Equipo o Exámen
    // En este caso se debe tener en cuenta el campo de detalle de la tabla de log de liquidación
    // En la tabla 106 en el campo procedimiento guarda es el código del equipo o exámen.
    $codigo_equipo_examen         = arreglar_procedimientos_bilaterales($arr_CARGO['wprocod']);
    $codigo_procedimiento_dequipo = $arr_CARGO['wprocod'];
    $exp_nombPro                  = ($arr_CARGO['wpronom'] != '' && count(explode('-',$arr_CARGO['wpronom'])) > 1) ? explode('-',$arr_CARGO['wpronom']) : $arr_CARGO['wpronom'];
    $exp_nombPro                  = (is_array($exp_nombPro) && count($exp_nombPro) > 1) ? $exp_nombPro[1]: $exp_nombPro;
    if($arr_CARGO["cargo_examen_o_equipo"] == 'on')
    {
        // ESTE ES UN EXAMEN O EQUIPO!
        $codigo_equipo_examen         = $arr_CARGO["examen_equipo_codigo"];
        $codigo_procedimiento_dequipo = $arr_CARGO["examen_equipo_codigo"];

        $exp_nombPro = ($arr_CARGO['examen_equipo_nombre'] != '' && count(explode('-',$arr_CARGO['examen_equipo_nombre'])) > 1) ? explode('-',$arr_CARGO['examen_equipo_nombre']) : $arr_CARGO['examen_equipo_nombre'];
        $exp_nombPro = (is_array($exp_nombPro) && count($exp_nombPro) > 1) ? $exp_nombPro[1]: $exp_nombPro;

        // Por ejemplo en el caso de USO DE EQUIPOS el nombre del procedimiento queda vacío.
        if($exp_nombPro == '')
        {
            $exp_nombPro = ($arr_CARGO['procedimiento_liquidar_nomb'] != '' && count(explode('-',$arr_CARGO['procedimiento_liquidar_nomb'])) > 1) ? explode('-',$arr_CARGO['procedimiento_liquidar_nomb']) : $arr_CARGO['procedimiento_liquidar_nomb'];
            $exp_nombPro = (is_array($exp_nombPro) && count($exp_nombPro) > 1) ? $exp_nombPro[1]: $exp_nombPro;
        }

        $procedimiento_log_cx = $arr_CARGO["procedimiento_liquidar_cod"];
    }

    $wfecha    = $arr_datosGENERALES["fecha_actual"];
    $whora     = $arr_datosGENERALES["hora_actual"];
    $wcantidad = $arr_CARGO['wcantidad']*1;

    // Si es materiales o medicamentos se debe enviar en cantidad el valor del porcentaje (1.00 equivale al 100%)
    if($arr_CARGO['wcodcon'] != $concepto_medicamentos_mueven_inv && $arr_CARGO['wcodcon'] != $concepto_materiales_mueven_inv && $arr_CARGO['wcodcon'] != $arr_datosGENERALES["concepto_estancia"])
    {
        // Para mostrar el porcentaje de los cargos diferentes a insumos en matrix se debe enviar en la cantidad,
        // y el valor de porcentaje representado en decimal entre 0 y 1 siendo 1 el 100%, 0.50 el 50%
        $wcantidad = $arr_CARGO['porcentaje_cxMult_CARGO']/100;
    }

    $datosGrabarCargos                           = array();
    $datosGrabarCargos['whistoria']              = $arr_datosGENERALES["whistoria"];
    $datosGrabarCargos['wing']                   = $arr_datosGENERALES["wing"];
    $datosGrabarCargos['wno1']                   = $arr_datosGENERALES["wno1"];
    $datosGrabarCargos['wno2']                   = $arr_datosGENERALES["wno2"];
    $datosGrabarCargos['wap1']                   = $arr_datosGENERALES["wap1"];
    $datosGrabarCargos['wap2']                   = $arr_datosGENERALES["wap2"];
    $datosGrabarCargos['wdoc']                   = $arr_datosGENERALES["wdoc"];
    $datosGrabarCargos['wcodemp']                = $arr_CARGO['wcodemp'];
    $datosGrabarCargos['wnomemp']                = $arr_CARGO['wnomemp'];
    $datosGrabarCargos['wser']                   = $arr_datosGENERALES["wser"];
    $datosGrabarCargos['wfecing']                = $arr_datosGENERALES["wfecing"];
    $datosGrabarCargos['wtar']                   = $arr_CARGO['wtar'];

    $datosGrabarCargos['wcodcon']                = $arr_CARGO['wcodcon']; // !
    $datosGrabarCargos['wnomcon']                = $arr_CARGO['wnomcon']; // !

    $datosGrabarCargos['wprocod']                = arreglar_procedimientos_bilaterales($codigo_procedimiento_dequipo); // !
	$datosGrabarCargos['codigoRips']             = trim($arr_CARGO['codigoRips']);
    $datosGrabarCargos['wpronom']                = trim($exp_nombPro); // !

    $datosGrabarCargos['wcodter']                = $arr_CARGO['wcodter']; // !
    $exp_nombTer                                 = ($arr_CARGO['wnomter'] != '' && count(explode('-',$arr_CARGO['wnomter'])) > 0) ? explode('-',$arr_CARGO['wnomter']) : $arr_CARGO['wnomter'];
    $exp_nombTer = ($exp_nombTer != '' && is_array($exp_nombTer) && count($exp_nombTer) > 1) ? $exp_nombTer[1]: $exp_nombTer;
    $datosGrabarCargos['wnomter']                = $exp_nombTer; // !

    $datosGrabarCargos['wporter']                = $arr_CARGO["wporter"]; //
    $datosGrabarCargos['wcantidad']              = $wcantidad;
    $datosGrabarCargos['wvaltar']                = $arr_CARGO['wvaltar']; // !
    $datosGrabarCargos['wrecexc']                = $arr_CARGO['wrecexc']; // ??????????????  Antes tenía 'R'
    $datosGrabarCargos['wfacturable']            = $arr_CARGO['wfacturable']; // !
    $datosGrabarCargos['wcco']                   = $arr_datosGENERALES["wcco"];
    $datosGrabarCargos['wccogra']                = $arr_datosGENERALES["wcco"];
    $datosGrabarCargos['wfeccar']                = $arr_datosGENERALES["wfecha_cargo"];
    $datosGrabarCargos['whora_cargo']            = $arr_datosGENERALES["whora_cargo"];
    $datosGrabarCargos['wconinv']                = $arr_CARGO['wconinv']; //

    $cod_paq                                     = arreglar_procedimientos_bilaterales($arr_CARGO['procedimiento_liquidar_cod']);
    $datosGrabarCargos['wcodpaq']                = ($arr_CARGO['wpaquete'] == 'on') ? $cod_paq: "";
    $datosGrabarCargos['wpaquete']               = $arr_CARGO['wpaquete'];
    $datosGrabarCargos['wconabo']                = '';
    $datosGrabarCargos['wdevol']                 = '';
    $datosGrabarCargos['waprovecha']             = 'off';
    $datosGrabarCargos['wconmvto']               = '';
    $datosGrabarCargos['wexiste']                = $arr_CARGO['wexiste'];
    $datosGrabarCargos['wbod']                   = $arr_datosGENERALES["wbod"];
    $datosGrabarCargos['wconser']                = $arr_CARGO['wconser']; //
    $datosGrabarCargos['wtipfac']                = $arr_CARGO['wtipfac'];
    $datosGrabarCargos['wexidev']                = 0;
    $datosGrabarCargos['wfecha']                 = $wfecha;
    $datosGrabarCargos['whora']                  = $whora;
    $datosGrabarCargos['wespecialidad']          = (empty($arr_CARGO['wespecialidad'])) ? ' ': $arr_CARGO['wespecialidad']; // !
    $datosGrabarCargos['cobraHonorarios']        = $arr_CARGO['cobraHonorarios'] ;
    $datosGrabarCargos['wgraba_varios_terceros'] = false;
    $datosGrabarCargos['wcodcedula']             = '';

    $datosGrabarCargos['tipoEmpresa']            = $arr_CARGO['tipoEmpresa'];
    $datosGrabarCargos['nitEmpresa']             = $arr_CARGO['nitEmpresa'];
    $datosGrabarCargos['tipoIngreso']            = $arr_datosGENERALES["wtipo_ingreso"]; // Para evitar warnings en funciones
    $datosGrabarCargos['tipoPaciente']           = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['warctar']                = $arr_CARGO['warctar']; // SE DEBE ENVIAR LA TABLA DE VALIDAR PRECIOS COMO SE HACE EN LA SIMULACIÓN -- Para evitar warnings en funciones
    $datosGrabarCargos['wvaltarReco']            = $arr_CARGO["wvaltarReco"];
    $datosGrabarCargos['topeGeneral']            = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['saldoTope']              = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['wvaltarExce']            = $arr_CARGO["wvaltarExce"];
    $datosGrabarCargos['nomCajero']              = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['idParalelo']             = ''; // Si hay paralelo entonces en este campo se debe guardar el id del cargo nuevo creado como paralelo al cargo original.
    $datosGrabarCargos['enParalelo']             = $arr_CARGO["enParalelo"];
    $datosGrabarCargos['wauto']                  = ''; // Para evitar warnings en funciones

    $datosGrabarCargos['tipoCuadroTurno']        = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['habitacion']             = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['fecIngHab']              = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['horIngHab']              = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['diasFacturados']         = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['fecEgrHab']              = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['horEgrHab']              = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['diasEstancia']           = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['logRegistroCargo']       = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['logUnix']                = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['estadoMonitor']          = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['wnromvto']               = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['pendRevicion']           = ''; // Para evitar warnings en funciones
    $datosGrabarCargos['ccoActualPac']           = $arr_datosGENERALES["ccoActualPac"];
    $datosGrabarCargos['wterunix']               = $arr_CARGO["wterunix"];
    $datosGrabarCargos['grupoMedico']            = $arr_CARGO["grupoMedico"];
    $datosGrabarCargos['idTope']                 = (!empty($arr_CARGO["idTope"]) && $arr_CARGO["idTope"] != 'sin_limite' && $arr_CARGO["wfacturable"] == 'S') ? $arr_CARGO["idTope"] : '';
    $datosGrabarCargos['respuesta_array']        = 'on'; // Variable para que la función GrabarCargo responda mensaje en un array
    $datosGrabarCargos['codHomologar']           = $arr_CARGO['codHomologar']; // Variable para que la función GrabarCargo responda mensaje en un array
    $datosGrabarCargos['estaEnTurno']            = $arr_CARGO['estaEnTurno'];
    $datosGrabarCargos['desde_CargosPDA']        = false;// Para evitar warnings en funciones
    $datosGrabarCargos['idCargosAnexos']         = "";   // Para evitar warnings en funciones

    $datosGrabarCargos['wliquidacion_no_pos']        = (tipoPOS_procedimiento($arr_CARGO['TIP_POS'])) ? 'on': 'off';
    $datosGrabarCargos['wtar_cargo_POS']             = $arr_CARGO['wtar_cargo_POS'];
    $datosGrabarCargos['wres_cargo_POS']             = $arr_CARGO['wres_cargo_POS'];
    $datosGrabarCargos['winsumos_cambiar_ingreso']   = ($arr_CARGO['es_insumo'] == 'on') ? $arr_datosGENERALES['winsumos_cambiar_ingreso'] : 'off';
    $datosGrabarCargos['wingreso_reemplazable_unix'] = $arr_datosGENERALES['wingreso_reemplazable_unix'];
    $datosGrabarCargos['fecha_reemplazable_unix']    = ($arr_CARGO['es_insumo'] == 'on' && $datosGrabarCargos['winsumos_cambiar_ingreso'] == 'on') ? $arr_datosGENERALES['fecha_reemplazable_unix'] : '';
    $datosGrabarCargos['wingreso_activo_unx']        = $arr_datosGENERALES['wingreso_activo_unx'];

    if($datosGrabarCargos['fecha_reemplazable_unix'] != '')
    {
        $anioMesAct = date("Ym")*1;
        $fec_AnioMesing_unx = str_replace("/","-",$datosGrabarCargos['fecha_reemplazable_unix']);
        $fec_AnioMesing_unx = explode("-",$fec_AnioMesing_unx);
        $fec_AnioMesing_unx = ($fec_AnioMesing_unx[0].$fec_AnioMesing_unx[1])*1;

        if($fec_AnioMesing_unx < $anioMesAct)
        {
            // Si el año-mes del último ingreso activo en unix es menor al año-mes en que se está haciendo la liquidación, entonces el cargo se debe grabar con la fecha actual
            // para evitar erro en el integrado
            // "El mes [mes0] es diferente al mes del usuario [mes1]"
            $datosGrabarCargos['fecha_reemplazable_unix'] = $arr_datosGENERALES["fecha_actual"];
        }

        $fec_ing_unx = str_replace("-","",$datosGrabarCargos['fecha_reemplazable_unix']);
        $fec_ing_unx = str_replace("/","",$fec_ing_unx)*1;

        $wfeccar_mx = str_replace("-", "", $datosGrabarCargos['wfeccar']);
        $wfeccar_mx = str_replace("/", "", $wfeccar_mx)*1;

        // Si la fecha del cargo es igual o mayor a la fecha del ingreso unix no es necesario realizar una modificación de fechas en unix.
        if($wfeccar_mx >= $fec_ing_unx)
        {
            // En este punto $wfeccar_mx no se ha validado para verificar si es de un mes anterior, por eso se hace la validación
            // if($fec_AnioMesing_unx < $anioMesAct) para evitar que la fecha a grabar en unix quede en un mes anterior y genere error en el integrador.
            $datosGrabarCargos['fecha_reemplazable_unix'] = '';
        }
    }


    return $datosGrabarCargos;
}

function redondeoFn($valor, $redondear, $tipo)
{
    if($redondear && $tipo == "centena")
    {
        $valor = round($valor, -2);
    }
    return $valor;
}

/**
 * [conceptoProcedimientoCobroSegunTipoCobro: Según la empresa verifica como debe ser el tipo de cobro para el cargo, por tiempo o por hora, según los casos, retorna
 *                                             el código de concepto y procedimiento correcto con qué buscar la tarifa de acuerdo al tipo de cobro]
 * @param  [type] &$cobro_concepto                [Devuelve el código del concepto a cobrar]
 * @param  [type] &$cobro_procedimiento           [Devuelve el código del procedimiento a cobrar]
 * @param  [type] &$codigo_rango_tiempo           [PARÁMETROS DE LA CIRUGÍA]
 * @param  [type] $wtiempo_minutos_cx             [PARÁMETROS DE LA CIRUGÍA]
 * @param  [type] $wtipo_anestesia_cx             [PARÁMETROS DE LA CIRUGÍA]
 * @param  [type] $arr_info_conf                  [Datos del concepto que se está cobrando, tiene la información por empresa según su forma de cobrar]
 * @param  [type] $wcod_empresa                   [Código de la empresa a la que se está intentando cobrar el cargo]
 * @param  [type] $procedimiento_liquidar_cod_dif [description]
 * @param  [type] $codigo_concepto                [description]
 * @param  [type] $id_concepto_uso_equipos        [PARÁMETROS DE LA CIRUGÍA]
 * @param  [type] $id_concepto_examenes           [PARÁMETROS DE LA CIRUGÍA]
 * @param  [type] $concepto_recuperacion_erp      [PARÁMETROS DE LA CIRUGÍA]
 * @param  [type] $es_concepto_extra              [PARÁMETROS DE LA CIRUGÍA]
 * @param  [type] $wtiempo_uso_minutos            [PARÁMETROS DE LA CIRUGÍA]
 * @param  [type] $wtiempo_sala_recuperarcion     [PARÁMETROS DE LA CIRUGÍA]
 * @return [type]                                 [description]
 */
function conceptoProcedimientoCobroSegunTipoCobro(&$cobro_concepto, &$cobro_procedimiento, &$codigo_rango_tiempo, $wtiempo_minutos_cx, $wtipo_anestesia_cx, $arr_info_conf, $wcod_empresa, $procedimiento_liquidar_cod_dif, $codigo_concepto, $id_concepto_uso_equipos, $id_concepto_examenes, $concepto_recuperacion_erp, $es_concepto_extra, $wtiempo_uso_minutos, $wtiempo_sala_recuperarcion)
{
    if(count($arr_info_conf) > 0)
    {
        $tipo_cobro = "";//$arr_info_conf['tipo_cobro'];
        $cobro_conc = "";
        $cobro_pro  = "";
        if(array_key_exists($wcod_empresa, $arr_info_conf['empresa_plantilla']))
        {
            $tipo_cobro = $arr_info_conf['empresa_plantilla'][$wcod_empresa]["tipo_cobro"];
            // if($tipo_cobro == 'cobro_hora')
            {
                $cobro_conc = $arr_info_conf['empresa_plantilla'][$wcod_empresa]["cobro_concepto"];
                $cobro_pro  = $arr_info_conf['empresa_plantilla'][$wcod_empresa]["cobro_procedimiento"];
            }
        }
        else
        {
            // Este tipo, concepto y procedimiento de cobro corresponden a la forma de cobrar del primer responsable
            $tipo_cobro = $arr_info_conf["tipo_cobro"];
            if($tipo_cobro != 'cobro_anestesia' && $tipo_cobro != 'cobro_uso')
            {
                $cobro_conc = $arr_info_conf["cobro_concepto"];
                $cobro_pro  = $arr_info_conf["cobro_procedimiento"];
            }
        }

        $valor_rango_buscar = 0;
        switch ($tipo_cobro) {
            case 'cobro_hora':
                $cobro_concepto = $cobro_conc;
                $cobro_procedimiento = $cobro_pro;
                break;

            case 'cobro_anestesia':

                    // array(  "tipo_anestesia"      => $row['tipo_anestesia'],
                    //         "tiempo_inicio"       => $row['tiempo_inicio'],
                    //         "tiempo_final"        => $row['tiempo_final'],
                    //         "cobro_concepto"      => $row['cobro_concepto'],
                    //         "cobro_procedimiento" => $row['cobro_procedimiento']);

                // $wtipo_anestesia_cx = $arr_datos_procedimiento['wtipo_anestesia_cx'];
                // $valor_rango_buscar = $wtiempo_sala_recuperarcion; //$arr_datos_liquidar["arr_datos_paciente"]["wtiempo_sala_recuperarcion"];

                // Si es concepto de uso de equipos entonces debe tener en cuenta el tiempo del campo wtiempo_uso_minutos
                // Si es concepto de recuperación entonces debe tener en cuenta el tiempo de sala de recuperación, para el resto de conceptos tomaría el tiempo de la cirugía.
                if($id_concepto_uso_equipos == codConceptoLegible($codigo_concepto))        { $valor_rango_buscar = $wtiempo_uso_minutos; }
                elseif($concepto_recuperacion_erp == codConceptoLegible($codigo_concepto))  { $valor_rango_buscar = $wtiempo_sala_recuperarcion; }
                else
                {
                    $valor_rango_buscar = $wtiempo_minutos_cx;
                }
                foreach ($arr_info_conf['rangos'] as $key => $arr_rango)
                {
                    if($wtipo_anestesia_cx == $arr_rango['tipo_anestesia'] && $valor_rango_buscar >= $arr_rango['tiempo_inicio'] && $valor_rango_buscar <= $arr_rango['tiempo_final'])
                    {
                        $cobro_concepto = $arr_rango['cobro_concepto'];
                        $cobro_procedimiento = $arr_rango['cobro_procedimiento'];
                        $codigo_rango_tiempo = $cobro_procedimiento;
                    }
                }
                break;

            case 'cobro_uso':

                    // array(  "tiempo_inicio"       => $row['tiempo_inicio'],
                    //         "tiempo_final"        => $row['tiempo_final'],
                    //         "cobro_concepto"      => $row['cobro_concepto'],
                    //         "cobro_procedimiento" => $row['cobro_procedimiento']);

                // $valor_rango_buscar = $wtiempo_uso_minutos; //$arr_datos_procedimiento['wtiempo_uso_minutos'];

                // Si es concepto de uso de equipos entonces debe tener en cuenta el tiempo del campo wtiempo_uso_minutos
                // Si es concepto de recuperación entonces debe tener en cuenta el tiempo de sala de recuperación, para el resto de conceptos tomaría el tiempo de la cirugía.
                if($id_concepto_uso_equipos == codConceptoLegible($codigo_concepto))        { $valor_rango_buscar = $wtiempo_uso_minutos; }
                elseif($concepto_recuperacion_erp == codConceptoLegible($codigo_concepto))  { $valor_rango_buscar = $wtiempo_sala_recuperarcion; }
                else
                {
                    $valor_rango_buscar = $wtiempo_minutos_cx;
                }

                foreach ($arr_info_conf['rangos'] as $key => $arr_rango)
                {
                    if($valor_rango_buscar >= $arr_rango['tiempo_inicio'] && $valor_rango_buscar <= $arr_rango['tiempo_final'])
                    {
                        $cobro_concepto = $arr_rango['cobro_concepto'];
                        $cobro_procedimiento = $arr_rango['cobro_procedimiento'];
                        $codigo_rango_tiempo = $cobro_procedimiento;
                    }
                }
                break;

            default:
                if($es_concepto_extra)
                {
                    $cobro_concepto      = $cobro_conc;
                    $cobro_procedimiento = $cobro_pro;
                }
                break;
        }

        if($cobro_procedimiento == '*')
        {
            $cobro_procedimiento = arreglar_procedimientos_bilaterales($procedimiento_liquidar_cod_dif);
            $codigo_rango_tiempo = ($codigo_rango_tiempo != '') ? $cobro_procedimiento : $codigo_rango_tiempo;// Si había rango de tiempo (*) entonces tambien tome como procedimiento, el código de la cirugía actual
                                                                                                            // para evitar que se vaya un (*) en esta variable
        }
    }
	//JERSON
	return $valor_rango_buscar."|".$wtiempo_minutos_cx;
}

function limiteInsumosFactNoFactPorEmpresa($conex, $wemp_pmla, $wbasedato, $tipoEmpresa, $wcod_empresa, $wpolitraumatizado, $TB_BASE_LIQUIDACION, $arr_datos_liquidar, $result_insumos, $arr_insumos_procedimiento, $temporal_procedimientos_ordenados,
                                            $codigo_primer_procedimiento, $orden_conceptos_por_procedimiento, $wliq_soloInsumos, $arr_PARAMETROS_GENERALES, $TIP_POS, &$arr_cod_material_medicamento, &$arr_mercado_completo, &$procedimiento_manual, &$arr_procedimientos_liquidar, &$arr_lista_conceptos)
{
    foreach($arr_PARAMETROS_GENERALES as $NombreVariable => $ValorVariable)
    {
        $$NombreVariable = $ValorVariable;
    }

    // $arr_cod_material_medicamento = array("material"=>'', "medicamento"=>'');
    $arr_control_insumos_paralelo = array(); // Para controlar que un insumo se agrege solo una vez por ejemplo cuando hay paralelo, se agrege solo al primero.
    $arr_control_bilateral_concepto_extra = array(); // Este array es para controlar que los conceptos adicionales que no mueven inventarios no se adicionen a todos los procdimientos bilaterales sino a uno solamente.
    // Para todos los procedimientos de la lista buscar si hay medicamentos y materiales para liquidar

    $limite_puntos_cobro_medicamento    = 0;
    $limite_concepto_cobro_medicamentos = 0;
    $limite_puntos_cobro_materiales     = 0;
    $limite_concepto_cobro_materiales   = 0;

    $excluido_medicamento               = "";
    $excluido_material                  = "";

    $NoFactClase_medicamento            = "";
    $NoFactClase_material               = "";

    $excluido_insumos_med               = "";
    $excluido_insumos_mat               = "";

    $NoFactClase_med                    = "";
    $NoFactClase_mat                    = "";
    $matMedFacturable = array("medicamentos_facturables"=>"S", "materiales_facturables" => "S"
                            , "NoFactClase_med" => "", "NoFactClase_mat"=>""
                            , "excluido_insumos_med"=>"", "excluido_insumos_mat"=>""
                            , "excluido_medicamento"=>"", "excluido_material"=>""
                            , "winsumos_no_facturables" => "off"
                            , "validar_articuloPor_empresa" => "off"
                            , "default_insumos" => "S"); // Indica si por defecto todos los insumos son o no facturables

    $limite_puntos_cobro_medicamento_UVR    = 0;
    $limite_concepto_cobro_medicamentos_UVR = 0;
    $limite_puntos_cobro_materiales_UVR     = 0;
    $limite_concepto_cobro_materiales_UVR   = 0;
    $excluido_medicamento_UVR               = "";
    $excluido_material_UVR                  = "";
    $NoFactClase_medicamento_UVR            = "";
    $NoFactClase_material_UVR               = "";

    if(count($arr_procedimientos_liquidar) == 1)
    {
        $procedimiento_manual = $codigo_primer_procedimiento;
    }

    // if(mysql_num_rows($result_insumos) > 0) // no es necesario validar si hay o no insumos, el mercado no facturable por ejemplo se debe comprar para todos los procedimientos así solo este cargado para uno procedimiento en particular.
    {
        $row_limite = buscarLimitesEnManual($conex, $wbasedato, $tipoEmpresa, $wcod_empresa, $wpolitraumatizado, $TB_BASE_LIQUIDACION, $procedimiento_manual, $TIP_POS);
        // $guardar = "buscarLimitesEnManual($conex, $wbasedato, $tipoEmpresa, $wcod_empresa, $wpolitraumatizado, $TB_BASE_LIQUIDACION, $procedimiento_manual);".print_r($row_limite,true).PHP_EOL.PHP_EOL;
        // seguimiento($guardar);
        // $guardar = "row_limite :".print_r($row_limite,true).PHP_EOL.PHP_EOL;
        // seguimiento($guardar);

        if(count($row_limite) > 0)
        {
            $matMedFacturable["winsumos_no_facturables"]     = $row_limite["winsumos_no_facturables"];
            $matMedFacturable["validar_articuloPor_empresa"] = $row_limite["validar_articuloPor_empresa"];
            $matMedFacturable["default_insumos"]             = ($row_limite["winsumos_no_facturables"] == 'on') ? 'N' : 'S'; // si winsumos_no_facturables='on' significa que por defecto todos los insumos se asumen como NO FACTURABLES.

            // $row_limite = mysql_fetch_array($result_limite);
            // if($modalidad_facturacion == 'UVR')
            {
				$row_limite["limite_med_uvr"] = (int) $row_limite["limite_med_uvr"];
                // MEDICAMENTOS
                $limite_puntos_cobro_medicamento_UVR    = $row_limite["limite_med_uvr"]*1;
                $limite_concepto_cobro_medicamentos_UVR = $row_limite["cobro_limite_med_uvr"];

                // MATERIALES
				$row_limite["limite_mat_uvr"] = (int) $row_limite["limite_mat_uvr"];
                $limite_puntos_cobro_materiales_UVR     = $row_limite["limite_mat_uvr"]*1;
                $limite_concepto_cobro_materiales_UVR   = $row_limite["cobro_limite_mat_uvr"];

                // Clasificaciones de insumos que se deben facturar o no dependiendo si se supera o no el límite de facturable o no facturable para el concepto de insumos.
                $excluido_medicamento_UVR    = $row_limite["excluido_medicamento_uvr"];
                $excluido_material_UVR       = $row_limite["excluido_material_uvr"];

                $NoFactClase_medicamento_UVR = $row_limite["NoFactClase_medicamento_uvr"];
                $NoFactClase_material_UVR    = $row_limite["NoFactClase_material_uvr"];
            }
            // elseif($modalidad_facturacion == 'GQX')
            {
                // MEDICAMENTOS
				$row_limite["limite_med_grupo"]			= (($row_limite["limite_med_grupo"] == "") ? 0 : $row_limite["limite_med_grupo"]);
                $limite_puntos_cobro_medicamento_GQX    = $row_limite["limite_med_grupo"]*1;
                $limite_concepto_cobro_medicamentos_GQX = $row_limite["cobro_limite_med_grupo"];

                // MATERIALES
				$row_limite["limite_mat_grupo"]			= (($row_limite["limite_mat_grupo"] == "") ? 0 : $row_limite["limite_mat_grupo"]);
                $limite_puntos_cobro_materiales_GQX     = $row_limite["limite_mat_grupo"]*1;
                $limite_concepto_cobro_materiales_GQX   = $row_limite["cobro_limite_mat_grupo"];

                // Clasificaciones de insumos que se deben facturar o no dependiendo si se supera o no el límite de facturable o no facturable para el concepto de insumos.
                $excluido_medicamento_GQX    = $row_limite["excluido_medicamento_grupo"];
                $excluido_material_GQX       = $row_limite["excluido_material_grupo"];

                $NoFactClase_medicamento_GQX = $row_limite["NoFactClase_medicamento_grupo"];
                $NoFactClase_material_GQX    = $row_limite["NoFactClase_material_grupo"];
            }
        }
    }

    $primer_procedimientos_mayor        = "";
    $primer_procedimientos_mayor_puntos = "";

    foreach ($temporal_procedimientos_ordenados as $cod_espe => $arr_proceds)
    {
        // foreach ($arr_datos_liquidar['arr_para_liquidar'] as $dif_key => $arr_proc_liq)
        foreach ($arr_proceds as $cod_proced => $rowProced)
        {
            //APROVECHA PARA VERIFICAR SI SE ACABA DE ADICIONAR UN NUEVO CONCEPTO, SE DEBE ADICIONAR PARA TODOS LOS PROCEDIMIENTOS, VERIFICA SI HACE FALTA EN ALGUNO, SI ES ASÍ ENTONCES LO ADICIONA
            // if(!empty($wconcepto_add) && !array_key_exists($wconcepto_add, search))
            // {

            // }
            $dif_key = $rowProced["modo_liquida_empresa"][$wcod_empresa]["dif_key"];
            $arr_proc_liq = $arr_datos_liquidar['arr_para_liquidar'][$dif_key];

            $procedimiento_liquidar_cod    = $arr_proc_liq['wprocedimiento'];
            $procedimiento_bilat_dif       = $arr_proc_liq['wprocedimiento_dif'];
            $procedimiento_posicion_organo = $arr_proc_liq['wposicion_organo'];
            $es_bilateral                  = $arr_proc_liq['wbilateral'];
            $modalidad_facturacion         = $rowProced["modo_liquida_empresa"][$wcod_empresa]["modalidad_facturacion"];

            if($modalidad_facturacion == 'UVR')
            {
                $limite_puntos_cobro_medicamento    = $limite_puntos_cobro_medicamento_UVR * 1;
                $limite_concepto_cobro_medicamentos = $limite_concepto_cobro_medicamentos_UVR;
                $limite_puntos_cobro_materiales     = $limite_puntos_cobro_materiales_UVR * 1;
                $limite_concepto_cobro_materiales   = $limite_concepto_cobro_materiales_UVR;
                $excluido_medicamento               = $excluido_medicamento_UVR;
                $excluido_material                  = $excluido_material_UVR;
                $NoFactClase_medicamento            = $NoFactClase_medicamento_UVR;
                $NoFactClase_material               = $NoFactClase_material_UVR;
            }
            elseif($modalidad_facturacion == 'GQX')
            {
                $limite_puntos_cobro_medicamento    = $limite_puntos_cobro_medicamento_GQX * 1;
                $limite_concepto_cobro_medicamentos = $limite_concepto_cobro_medicamentos_GQX;
                $limite_puntos_cobro_materiales     = $limite_puntos_cobro_materiales_GQX * 1;
                $limite_concepto_cobro_materiales   = $limite_concepto_cobro_materiales_GQX;
                $excluido_medicamento               = $excluido_medicamento_GQX;
                $excluido_material                  = $excluido_material_GQX;
                $NoFactClase_medicamento            = $NoFactClase_medicamento_GQX;
                $NoFactClase_material               = $NoFactClase_material_GQX;
            }
            else
            {
                //La base de la configuración de ISS puede ayudar como configuración para las prepagadas.
                $limite_puntos_cobro_medicamento    = $limite_puntos_cobro_medicamento_UVR * 1;
                $limite_concepto_cobro_medicamentos = $limite_concepto_cobro_medicamentos_UVR;
                $limite_puntos_cobro_materiales     = $limite_puntos_cobro_materiales_UVR * 1;
                $limite_concepto_cobro_materiales   = $limite_concepto_cobro_materiales_UVR;
                $excluido_medicamento               = $excluido_medicamento_UVR;
                $excluido_material                  = $excluido_material_UVR;
                $NoFactClase_medicamento            = $NoFactClase_medicamento_UVR;
                $NoFactClase_material               = $NoFactClase_material_UVR;
            }

            // Inicia el procedimientos para darle un orden de liquidación de sus conceptos.
            if(!array_key_exists($procedimiento_bilat_dif, $orden_conceptos_por_procedimiento)) { $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif] = array(); }

            // Consultar si hay límite de UVR o Código en los manuales de Cirugías múltiples

            /**************************************************************************************************************************/
            /**************************************************************************************************************************/
            // $wnumero_puntos = $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["wnumero_puntos"];
            $wnumero_puntos = $rowProced["modo_liquida_empresa"][$wcod_empresa]["wnumero_puntos"]; // [updt-72] Estaba conservando el número de puntos de responsable principal cuando intentaba averiguar los límites para el segundo responsable
            if(empty($primer_procedimientos_mayor))
            {
                $primer_procedimientos_mayor        = $procedimiento_bilat_dif;
                $primer_procedimientos_mayor_puntos = $wnumero_puntos;
            }

            $matMedFacturable = conceptoMatMedFacturable($conex, $wemp_pmla, $wbasedato, $primer_procedimientos_mayor_puntos, $limite_puntos_cobro_medicamento, $excluido_medicamento, $procedimiento_bilat_dif, $limite_concepto_cobro_medicamentos,
                                $procedimiento_liquidar_cod, $procedimiento_posicion_organo, $es_bilateral, $arr_lista_conceptos, $arr_procedimientos_liquidar, $NoFactClase_medicamento, $limite_puntos_cobro_materiales, $NoFactClase_material,
                                $matMedFacturable, $limite_concepto_cobro_materiales, $excluido_material, $wliq_soloInsumos, $wcod_empresa);

            /**************************************************************************************************************************/

            while ($row_insumo = mysql_fetch_array($result_insumos))
            {
                $insumos_facturables           = $matMedFacturable["medicamentos_facturables"];
                $limite_puntos_cobro_insumos   = $limite_puntos_cobro_medicamento;
                $limite_concepto_cobro_insumos = $limite_concepto_cobro_medicamentos;
                $es_medicamento                = $row_insumo["Artesm"];
                // $guardar = "es_medicamento".print_r($es_medicamento,true).PHP_EOL;
                // seguimiento($guardar);
                // $excluido_insumos              = $excluido_insumos_med;
                // $NoFactClase_insumo            = $NoFactClase_med;
                $arr_ClasificInsumoNoFactLimInf = array(); // Clasificaciones de insumos no facturables en el límite inferior
                if(!empty($matMedFacturable["excluido_insumos_med"])) { $arr_ClasificInsumoNoFactLimInf[] = $matMedFacturable["excluido_insumos_med"]; }
                if(!empty($matMedFacturable["excluido_insumos_mat"])) { $arr_ClasificInsumoNoFactLimInf[] = $matMedFacturable["excluido_insumos_mat"]; }

                $arr_ClasificInsumoNoFactLimSup = array(); // Clasificaciones de insumos no facturables en el límite superior
                if(!empty($matMedFacturable["NoFactClase_med"])) { $arr_ClasificInsumoNoFactLimSup[] = $matMedFacturable["NoFactClase_med"]; }
                if(!empty($matMedFacturable["NoFactClase_mat"])) { $arr_ClasificInsumoNoFactLimSup[] = $matMedFacturable["NoFactClase_mat"]; }

                $excluido_insumos   = implode("|", $arr_ClasificInsumoNoFactLimInf); // Para unir clasificaciones tanto de medicamentos como de materiales.
                $NoFactClase_insumo = implode("|", $arr_ClasificInsumoNoFactLimSup); // Para unir clasificaciones tanto de medicamentos como de materiales.

                // $index_control = $index_control_mat;
                if($es_medicamento != 'on')
                {
                    $insumos_facturables                      = $matMedFacturable["materiales_facturables"];
                    $limite_puntos_cobro_insumos              = $limite_puntos_cobro_materiales;
                    $limite_concepto_cobro_insumos            = $limite_concepto_cobro_materiales;
                    $arr_cod_material_medicamento["material"] = $limite_concepto_cobro_insumos;
                    // $index_control = $index_control_med;
                    // $excluido_insumos                         = $excluido_insumos_mat;
                    // $NoFactClase_insumo                       = $NoFactClase_mat;
                }
                else
                {
                    $arr_cod_material_medicamento["medicamento"] = $limite_concepto_cobro_insumos;
                }

                if($es_paquete)
                {
                    $insumos_facturables                          = 'N'; // Siempre los insumos en paquetes van a ser no facturables.
                    $matMedFacturable["medicamentos_facturables"] = 'N';
                    $matMedFacturable["materiales_facturables"]   = 'N';
                }

                $diferencia_bilaterales_organos = $procedimiento_liquidar_cod.'_'.$procedimiento_posicion_organo.'_'.$es_bilateral;

                // Luego de separar medicamentos y materiales se debió quitar la validación "&& !in_array($diferencia_bilaterales_organos, $arr_control_bilateral_concepto_extra"
                // porque solamente estaba agregando un solo medicamento o un solo insumo y el resto no lo agregaba a la lista, aún asi, el programa siguió asociando todos los medicamentos
                // y materiales al primer procedimiento bilateral sin agregarlos al segundo bilateral como es debido (por ahora esta correcto).
                if(!array_key_exists($row_insumo['id_insumo'], $arr_control_insumos_paralelo) )//&& !in_array($diferencia_bilaterales_organos, $arr_control_bilateral_concepto_extra)
                {
                    $index_control = $procedimiento_bilat_dif.'_'.$limite_concepto_cobro_insumos;

                    if(array_key_exists($diferencia_bilaterales_organos, $arr_control_bilateral_concepto_extra))
                    {
                        // Esto es para garantizar que cuando hay un procedimiento bilateral solamente se adicionen los insumos para el primer
                        // procedimiento osea el bilateral1 y para el bilateral2 no le adicione insumos
                        // el arr_control_bilateral_concepto_extra en la posicion index_control ya tiene un valor pero esta compuesto por $procedimiento_bilat_dif.'_'.$limite_concepto_cobro_insumos;
                        // aqui se esta modificando por diferencia_bilaterales_organos solamente, y se hace justo cuando se agregan los insumos para el primer procedimiento bilateral, cuando llegue al segundo
                        // va a encontrar que ya tienen el valor diferencia_bilaterales_organos entonces no ingresará en el ciclo para agregar insumos al segundo bilateral.
                        // Garantiza que si hay un mismo procedimiento agregado como bilateral con dos posiciones de organo diferentes (p.e. procedimiento tibia o peroné, serían dos procedimientos bilaterales
                        // diferenciados por la posición del organo) entonces se pueda agregar los insumos solo a las primeras cirugías correspondientes a la bilateralidad.
                        $arr_control_bilateral_concepto_extra[$diferencia_bilaterales_organos] = $diferencia_bilaterales_organos;
                    }

                    $arr_control_insumos_paralelo[$row_insumo['id_insumo']] = $row_insumo["codigo_insumo"];
                    if(!array_key_exists($procedimiento_bilat_dif, $arr_insumos_procedimiento))
                    {
                        $arr_insumos_procedimiento[$procedimiento_bilat_dif] = array("lista_insumos"=>array(), "empresas"=>array());
                    }

                    if(!array_key_exists($wcod_empresa, $arr_insumos_procedimiento[$procedimiento_bilat_dif]["empresas"]))
                    {
                        $arr_insumos_procedimiento[$procedimiento_bilat_dif]["empresas"][$wcod_empresa] = array();
                    }

                    if(!array_key_exists($limite_concepto_cobro_insumos, $arr_insumos_procedimiento[$procedimiento_bilat_dif]["empresas"][$wcod_empresa]))
                    {
                        // Consultar los grupos de mendicamentos y materiales a partir de la clasificación general
                        $arr_FactClase_insumos_04 = array();
                        $arr_FactClase_insumos_04 = ($es_paquete || empty($excluido_insumos)) ? array() : consultarGruposClasificados($conex, $wbasedato, $excluido_insumos);

                        $NoFactClase_insumo_grupos_04 = array();
                        $NoFactClase_insumo_grupos_04 = ($es_paquete || empty($NoFactClase_insumo)) ? array() : consultarGruposClasificados($conex, $wbasedato, $NoFactClase_insumo);

                        $arr_insumos_procedimiento[$procedimiento_bilat_dif]["empresas"][$wcod_empresa][$limite_concepto_cobro_insumos] = array("parametros"=>array()/*,"lista_insumos"=>array()*/
                                                                                                                        ,"clasificacion_facturable"=>implode("|", $arr_FactClase_insumos_04)
                                                                                                                        ,"grupos_no_facturables"=>implode("|", $NoFactClase_insumo_grupos_04));
                    }

                    $clave_insumo = $row_insumo["codigo_insumo"].'_'.$row_insumo["id_insumo"];
                    if(!array_key_exists($clave_insumo, $arr_mercado_completo))
                    {
                        $arr_mercado_completo[$clave_insumo] = $row_insumo;
                    }

                    if(!array_key_exists($row_insumo["codigo_insumo"], $arr_insumos_procedimiento[$procedimiento_bilat_dif]["lista_insumos"]))
                    {
                        $arr_insumos_procedimiento[$procedimiento_bilat_dif]["lista_insumos"][$row_insumo["codigo_insumo"]] = array();
                    }

                    $arr_insumos_procedimiento[$procedimiento_bilat_dif]["lista_insumos"][$row_insumo["codigo_insumo"]] = $row_insumo;

                    $arr_insumos_procedimiento[$procedimiento_bilat_dif]["empresas"][$wcod_empresa][$limite_concepto_cobro_insumos]["parametros"]["insumos_facturables"]           = $insumos_facturables;
                    $arr_insumos_procedimiento[$procedimiento_bilat_dif]["empresas"][$wcod_empresa][$limite_concepto_cobro_insumos]["parametros"]["medicamentos_facturables"]      = $matMedFacturable["medicamentos_facturables"];
                    $arr_insumos_procedimiento[$procedimiento_bilat_dif]["empresas"][$wcod_empresa][$limite_concepto_cobro_insumos]["parametros"]["materiales_facturables"]        = $matMedFacturable["materiales_facturables"];
                    $arr_insumos_procedimiento[$procedimiento_bilat_dif]["empresas"][$wcod_empresa][$limite_concepto_cobro_insumos]["parametros"]["limite_puntos_cobro_insumos"]   = $limite_puntos_cobro_insumos;
                    $arr_insumos_procedimiento[$procedimiento_bilat_dif]["empresas"][$wcod_empresa][$limite_concepto_cobro_insumos]["parametros"]["limite_concepto_cobro_insumos"] = $limite_concepto_cobro_insumos;
                    $arr_insumos_procedimiento[$procedimiento_bilat_dif]["empresas"][$wcod_empresa][$limite_concepto_cobro_insumos]["parametros"]["winsumos_no_facturables"]       = $matMedFacturable["winsumos_no_facturables"];
                    $arr_insumos_procedimiento[$procedimiento_bilat_dif]["empresas"][$wcod_empresa][$limite_concepto_cobro_insumos]["parametros"]["validar_articuloPor_empresa"]   = $matMedFacturable["validar_articuloPor_empresa"];
                }
            }
            // **************************************** CONSULTAR INSUMOS ************************************************************************************************
        }
    }
    return $arr_insumos_procedimiento;
}

/**
 * [facturableInsumosPaquete: Función para consultar más facilmente si los insumos de la liquidación deben ser SI o NO facturables según la configuración de la tarifa.]
 * @param  [type] $conex                          [description]
 * @param  [type] $wemp_pmla                      [description]
 * @param  [type] $wbasedato                      [description]
 * @param  [type] $procedimiento_liquidar_cod_dif [description]
 * @param  [type] $cobro_concepto                 [description]
 * @param  [type] $RESPONSABLE_VIRTUAL_PACIENTE   [description]
 * @param  [type] $wtiempo_minutos_cx             [description]
 * @param  [type] $esfacturablepaquete            [description]
 * @param  [type] &$auxcodigo_procedimiento       [description]
 * @return [type]                                 [description]
 */
function facturableInsumosPaquete($conex, $wemp_pmla, $wbasedato, $procedimiento_liquidar_cod_dif, $cobro_concepto, $RESPONSABLE_VIRTUAL_PACIENTE, $wtiempo_minutos_cx, $esfacturablepaquete, &$auxcodigo_procedimiento)
{
    $auxcodigo_procedimiento = explode('_',$procedimiento_liquidar_cod_dif);
    $auxcodigo_procedimiento = $auxcodigo_procedimiento[0];
    $select_rango  = " SELECT Paqdetpro,(Paqdetrmm *1) AS minutos, Paqdetfac
                                  FROM ".$wbasedato."_000114
                                 WHERE  Paqdetcod = '".$auxcodigo_procedimiento."'
                                   AND  Paqdetcon = '".$cobro_concepto."'
                                   AND  Paqdettar = '".$RESPONSABLE_VIRTUAL_PACIENTE['Ingtar']."'
                                   AND  Paqdetgen <> 'on'
                                   AND  '".$wtiempo_minutos_cx."' <= (Paqdetrmm*1)
                              ORDER BY minutos "; // [updt-68]

    $res_select_rango = mysql_query( $select_rango, $conex ) or die("<b>ERROR EN QUERY MATRIX:</b><br>".mysql_error());

    if(mysql_num_rows ($res_select_rango) > 0)
    {
        if($rowrango = mysql_fetch_array($res_select_rango))
        {
            $esfacturablepaquete = $rowrango['Paqdetfac'];
        }
    }
    else
    {
        $select_rango  = " SELECT Paqdetpro,(Paqdetrmm *1) AS minutos, Paqdetfac
                                  FROM ".$wbasedato."_000114
                                 WHERE  Paqdetcod = '".$auxcodigo_procedimiento."'
                                   AND  Paqdetcon = '".$cobro_concepto."'
                                   AND  Paqdettar = '*'
                                   AND  Paqdetgen <> 'on'
                                   AND  '".$wtiempo_minutos_cx."' <= (Paqdetrmm*1)
                              ORDER BY minutos "; // [updt-68]
        $res_select_rango = mysql_query( $select_rango, $conex ) or die("<b>ERROR EN QUERY MATRIX:</b><br>".mysql_error());

        if($rowrango = mysql_fetch_array($res_select_rango))
        {
            $esfacturablepaquete = $rowrango['Paqdetfac'];
        }
    }
    return $esfacturablepaquete;
}

/**
 * [validarClasificacionInsumoSiNoFacturar: Función encargada de evaluar si un insumo es facturable o no según las condiciones de la empresa responsable (clasificaciones si y no facturables),
 *                                             como pueden varias las clasificaciones y condición de una empresa a otra por eso se evalúa de nuevo la clasificación]
 * @param  [type] $conex                            [description]
 * @param  [type] $wemp_pmla                        [description]
 * @param  [type] $wbasedato                        [description]
 * @param  [type] $arr_insumos_procedimiento        [description]
 * @param  [type] $procedimiento_liquidar_cod_dif   [description]
 * @param  [type] $wcod_empresa                     [Código de la empresa responsable virtual (Responsable principal en la simulación de la liquidación)]
 * @param  [type] $RESPONSABLE_VIRTUAL_PACIENTE     [description]
 * @param  [type] $concepto_medicamentos_mueven_inv [description]
 * @param  [type] $concepto_materiales_mueven_inv   [description]
 * @param  [type] $es_paquete                       [description]
 * @param  [type] $row_insumo_mov26                 [description]
 * @param  [type] $arr_concepto_cobrar              [description]
 * @param  [type] $wtiempo_minutos_cx               [description]
 * @return [type]                                   [description]
 */
function validarClasificacionInsumoSiNoFacturar($conex, $wemp_pmla, $wbasedato, $arr_insumos_procedimiento, $procedimiento_liquidar_cod_dif, $wcod_empresa, $RESPONSABLE_VIRTUAL_PACIENTE,
                                                $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $es_paquete, $row_insumo_mov26, $arr_concepto_cobrar, $codEmpParticular, $wtiempo_minutos_cx, $arr_datos_liquidados, &$saldo_insumo, &$arr_saldo_anexo)
{
    // $guardar = "arr_insumos_procedimiento: ".print_r($arr_insumos_procedimiento,true).PHP_EOL.PHP_EOL;
    // seguimiento($guardar);
    $arr_resp_validacion = array("cobro_concepto"=>"", "codigo_insumo"=>"", "facturable_insumo"=>"S", "validar_articuloPor_empresa"=>'off');
    $idx_concept_emp_insumos = "";
    if(array_key_exists($RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"], $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"]))
    {
        $expl_ins = array_keys($arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"]]);
        $idx_concept_emp_insumos = $expl_ins[0];
    }

    // $facturable_insumo           = "";
    // $facturable_medicamentos     = "";
    // $facturable_materiales       = "";
    // $winsumos_no_facturables     = "";
    // $validar_articuloPor_empresa = "";
    // $excluir_clases              = "";
    // $grupos_no_facturables       = "";
    // Si el código de la empresa no esta dentro de las condiciones de facturación de insumos por ejemplo cuando es la última empresa y siguió el particular,
    // entonces el programa trata de obtener la forma de liquidación de la última empresa y de esa manera le cobra el resto de insumos al particular.
    if(!array_key_exists($wcod_empresa, $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"]) && $wcod_empresa == $codEmpParticular)
    {
        $keys_emps = array_keys($arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"]);
        $wcod_empresa_par = $keys_emps[count($keys_emps)-1];
        // $guardar = "keys_emps: ".print_r($keys_emps,true).PHP_EOL.PHP_EOL;
        // $guardar .= "Count keys_emps: ".print_r(count($keys_emps),true).PHP_EOL.PHP_EOL;
        // $guardar .= "Última keys_emps: ".print_r($keys_emps[count($keys_emps)-1],true).PHP_EOL.PHP_EOL;
        // seguimiento($guardar);

        $facturable_insumo           = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa_par][$idx_concept_emp_insumos]["parametros"]["insumos_facturables"];
        $facturable_medicamentos     = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa_par][$idx_concept_emp_insumos]["parametros"]["medicamentos_facturables"];
        $facturable_materiales       = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa_par][$idx_concept_emp_insumos]["parametros"]["materiales_facturables"];
        $winsumos_no_facturables     = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa_par][$idx_concept_emp_insumos]["parametros"]["winsumos_no_facturables"];
        $validar_articuloPor_empresa = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa_par][$idx_concept_emp_insumos]["parametros"]["validar_articuloPor_empresa"];
        $excluir_clases               = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa_par][$idx_concept_emp_insumos]["clasificacion_facturable"];
        $grupos_no_facturables        = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa_par][$idx_concept_emp_insumos]["grupos_no_facturables"]; // si los insumos por límite son facturables, estas clasificaciones NO lo serán.
    }
    else //if(array_key_exists($wcod_empresa, $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"]))
    {
        $facturable_insumo           = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa][$idx_concept_emp_insumos]["parametros"]["insumos_facturables"];
        $facturable_medicamentos     = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa][$idx_concept_emp_insumos]["parametros"]["medicamentos_facturables"];
        $facturable_materiales       = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa][$idx_concept_emp_insumos]["parametros"]["materiales_facturables"];
        $winsumos_no_facturables     = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa][$idx_concept_emp_insumos]["parametros"]["winsumos_no_facturables"];
        $validar_articuloPor_empresa = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa][$idx_concept_emp_insumos]["parametros"]["validar_articuloPor_empresa"];
        $excluir_clases               = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa][$idx_concept_emp_insumos]["clasificacion_facturable"];
        $grupos_no_facturables        = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["empresas"][$wcod_empresa][$idx_concept_emp_insumos]["grupos_no_facturables"]; // si los insumos por límite son facturables, estas clasificaciones NO lo serán.
    }


    // $facturable_insumo_temp       = $facturable_insumo;
    $facturable_medicamentos_temp = $facturable_medicamentos;
    $facturable_materiales_temp   = $facturable_materiales;
    $arr_grupos_excluidos         = (!empty($excluir_clases)) ? explode("|",$excluir_clases) : array();
    $arr_grupos_no_facturables    = (!empty($grupos_no_facturables)) ? explode("|",$grupos_no_facturables) : array();


    $cobro_concepto = $arr_concepto_cobrar["concepto_codigo"];
    $codigo_insumo = $row_insumo_mov26["codigo_insumo"];
    // $facturable_insumo = $facturable_insumo_temp;
    // if($es_paquete)
    // {
        // if( isset($arr_datos_liquidados)
            // && array_key_exists($procedimiento_liquidar_cod_dif, $arr_datos_liquidados)
            // && array_key_exists($cobro_concepto, $arr_datos_liquidados[$procedimiento_liquidar_cod_dif])
          // )
        // {
            // if(array_key_exists($codigo_insumo, $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]))
            // {
                // if($arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto][$codigo_insumo]['wfacturable'] == 'S')
                // {
                    // $facturable_insumo = 'S';
                // }
                // else
                // {
                    // $facturable_insumo = 'N';
                // }
            // }
        // }
    // }
    if($es_paquete)
    {
        if( isset($arr_datos_liquidados)
            && array_key_exists($procedimiento_liquidar_cod_dif, $arr_datos_liquidados)
            && array_key_exists($cobro_concepto, $arr_datos_liquidados[$procedimiento_liquidar_cod_dif])
          )
        {
            if(array_key_exists($codigo_insumo, $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]))
            {

                if($arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto][$codigo_insumo]['wfacturable'] == 'S')
                {
                    $facturable_insumo = 'S';
                }
                else
                {
                   $facturable_insumo = 'N';
                }

                //--- [updt-74] En esta sección se cambia el si o no facturable según se haya seleccionado en la interfaz de liquidación pero actua sólo sobre el límite
                //  máximo del paquete que indica hasta qué cantidad es si o no facturable, si no hay cantidad máxima entonces aplica para toda la cantidad del insumo.
                $esfacturablepaquete = 'N';
                $auxcodigo_procedimiento = '';
                $esfacturablepaquete = facturableInsumosPaquete($conex, $wemp_pmla, $wbasedato, $procedimiento_liquidar_cod_dif, $cobro_concepto, $RESPONSABLE_VIRTUAL_PACIENTE, $wtiempo_minutos_cx, $esfacturablepaquete, $auxcodigo_procedimiento);

                // $facturable_insumo = $esfacturablepaquete;


                $select_paquete_insumos  = "SELECT Paqdetpro
                                            FROM   {$wbasedato}_000114
                                            WHERE  Paqdetcod = '$auxcodigo_procedimiento'
                                                   AND  Paqdetcon = '$cobro_concepto'
                                                   AND  Paqdetgen = 'on'"; // [updt-68] > [updt-82] Para consultar la lista de insumos del paquete se debe hacer con base al Detalle general 'Paqdetgen=on', antes estaba '<> on'

                $res_sql_paquete_insumo = mysql_query( $select_paquete_insumos, $conex ) or die("<b>ERROR EN QUERY MATRIX:</b><br>".mysql_error());
                if($rowqueteinsumo = mysql_fetch_array($res_sql_paquete_insumo))
                {
                    $resulpaquete =  explode('-',$rowqueteinsumo['Paqdetpro']);
                    $resulpaquete =  (count($resulpaquete) >1) ? $resulpaquete[1] :$resulpaquete[0];

                    // [updt-74] Nuevos campos para permitir cobrar una cantidad límite de un insumo desde paquetes.
                    $select_existe_insumo  = "  SELECT  Dincop, Dincan AS cantidad_max, Dinvca AS validar_cantidad_max
                                                FROM    {$wbasedato}_000191
                                                WHERE   Dincop = '{$resulpaquete}'
                                                        AND  Dincom = '{$codigo_insumo}'
                                                        AND  Dinest = 'on' ";

                    $res_existe_insumo = mysql_query( $select_existe_insumo, $conex ) or die("<b>ERROR EN QUERY MATRIX:</b><br>".mysql_error());

                    if(mysql_num_rows ($res_existe_insumo) > 0)
                    {
                        $row_max              = mysql_fetch_array($res_existe_insumo);
                        $cantidad_max         = $row_max["cantidad_max"]*1;
                        $validar_cantidad_max = $row_max["validar_cantidad_max"];

                        // NO facturable hasta la cantidad máxima, partir el cargo y el resto será SI facturable
                        if($validar_cantidad_max == 'on' && $saldo_insumo > $cantidad_max)
                        {
                            $arr_saldo_anexo["saldo_restante"]       = $saldo_insumo-$cantidad_max;
                            $saldo_insumo                            = $cantidad_max;
                            $arr_saldo_anexo["wfacturable_restante"] = $esfacturablepaquete; // El facturable restante, fuera del rango quedaría tal como diga la tarifa específicamente en el paquete.
                        }
                    }
                }
                //---
            }
        }
        else
        {
            $esfacturablepaquete = 'N';
            $auxcodigo_procedimiento = '';
            // [updt-74] Se crea función que consulta información del paquete (Insumos).
            $esfacturablepaquete = facturableInsumosPaquete($conex, $wemp_pmla, $wbasedato, $procedimiento_liquidar_cod_dif, $cobro_concepto, $RESPONSABLE_VIRTUAL_PACIENTE, $wtiempo_minutos_cx, $esfacturablepaquete, $auxcodigo_procedimiento);

            $facturable_insumo = $esfacturablepaquete;

            $select_paquete_insumos  = " SELECT Paqdetpro
                                          FROM ".$wbasedato."_000114
                                         WHERE  Paqdetcod = '".$auxcodigo_procedimiento."'
                                           AND  Paqdetcon = '".$cobro_concepto."'
                                           AND  Paqdetgen = 'on'"; // [updt-68] > [updt-82] Para consultar la lista de insumos del paquete se debe hacer con base al Detalle general 'Paqdetgen=on', antes estaba '<> on'

            $res_sql_paquete_insumo = mysql_query( $select_paquete_insumos, $conex ) or die("<b>ERROR EN QUERY MATRIX:</b><br>".mysql_error());
            if($rowqueteinsumo = mysql_fetch_array($res_sql_paquete_insumo))
            {
                $resulpaquete =  explode('-',$rowqueteinsumo['Paqdetpro']);
                $resulpaquete =  (count($resulpaquete) >1) ? $resulpaquete[1] :$resulpaquete[0];

                // [updt-74] Nuevos campos para permitir cobrar una cantidad límite de un insumo desde paquetes.
                $select_existe_insumo  = "SELECT  Dincop, Dincan AS cantidad_max, Dinvca AS validar_cantidad_max
                                            FROM ".$wbasedato."_000191
                                           WHERE  Dincop = '".$resulpaquete."'
                                             AND  Dincom = '".$codigo_insumo."'
                                             AND  Dinest = 'on' ";

                $res_existe_insumo = mysql_query( $select_existe_insumo, $conex ) or die("<b>ERROR EN QUERY MATRIX:</b><br>".mysql_error());

                if(mysql_num_rows ($res_existe_insumo) > 0)
                {
                    $row_max              = mysql_fetch_array($res_existe_insumo); // [updt-74] Se leen los parámetros que valídan si se debe crear un cargo anexó o no.
                    $cantidad_max         = $row_max["cantidad_max"]*1;
                    $validar_cantidad_max = $row_max["validar_cantidad_max"];

                    if($esfacturablepaquete == 'S')
                    {
                        $facturable_insumo = 'N';

                        // [updt-74] NO facturable hasta la cantidad máxima, partir el cargo y el resto será SI facturable tal como dice la tarifa del paquete.
                        if($validar_cantidad_max == 'on' && $saldo_insumo > $cantidad_max)
                        {
                            $arr_saldo_anexo["saldo_restante"]       = $saldo_insumo-$cantidad_max;
                            $saldo_insumo                            = $cantidad_max;
                            $arr_saldo_anexo["wfacturable_restante"] = $esfacturablepaquete; // El facturable restante, fuera del rango quedaría tal como diga la tarifa específicamente en el paquete.
                        }
                    }
                    else
                    {
                        $facturable_insumo = 'S';

                        // [updt-74] SI facturable hasta la cantidad máxima, partir el cargo y el resto será NO facturable tal como dice la tarifa del paquete.
                        if($validar_cantidad_max == 'on' && $saldo_insumo > $cantidad_max)
                        {
                            $arr_saldo_anexo["saldo_restante"]       = $saldo_insumo-$cantidad_max;
                            $saldo_insumo                            = $cantidad_max;
                            $arr_saldo_anexo["wfacturable_restante"] = $esfacturablepaquete; // El facturable restante, fuera del rango quedaría tal como diga la tarifa específicamente en el paquete.
                        }
                    }
                }
                else
                {
                    if($esfacturablepaquete == 'S'){
                        $facturable_insumo = 'S';
                    }
                    else{
                        $facturable_insumo = 'N';
                    }
                }
            }
            else
            {
                $facturable_insumo = 'S';
            }
        }
    }
    else
    {
        if($row_insumo_mov26["Artesm"] == 'on')
        {
            $facturable_insumo = $facturable_medicamentos_temp;
        }
        else
        {
            $facturable_insumo = $facturable_materiales_temp;
        }

        // Validar si los insumos son no facturables, si es así entonces revisar la clase o grupo del medicamento para ver si se debe excluir de los
        // no facturables
        // SEGUN REUNIONES DE FACTURACIÓN ESTA SECCIÓN DE CÓDIGO NO SE DEBE EVALUAR PORQUE POR DEFECTO TODOS LOS INSUMOS
        // DEBEN SER FACTURABLES Y SIMPLEMENTE SE DEBEN PONER COMO NO FACTURABLES TODOS LOS INSUMOS QUE PERTENEZCAN A LAS CLASIFICACIONES
        // QUE INDICAN QUE CIERTOS UNSUMOS DEBEN SER NO FACTURABLES SI SON MAYORES O MENORES AL LIMITE DE PUNTOS.
        // if($facturable_insumo == 'N')
        // {
        //     $grupo_art_exp = explode("-", $row_insumo_mov26["Artgru"]);
        //     $grupo_art = $grupo_art_exp[0];
        //     if(in_array($grupo_art, $arr_grupos_excluidos))
        //     {
        //         $facturable_insumo = 'S';
        //     }
        // }
        // else
        if($winsumos_no_facturables != 'on' && $facturable_insumo == 'S')
        {
            $grupo_art_exp = explode("-", $row_insumo_mov26["Artgru"]);
            $grupo_art = $grupo_art_exp[0];
            if(in_array($grupo_art, $arr_grupos_no_facturables) || in_array($grupo_art, $arr_grupos_excluidos))
            {
                $facturable_insumo = 'N';
            }
        }
        elseif($winsumos_no_facturables == 'on' && $facturable_insumo == 'N')
        {
            $grupo_art_exp = explode("-", $row_insumo_mov26["Artgru"]);
            $grupo_art = $grupo_art_exp[0];
            if(in_array($grupo_art, $arr_grupos_no_facturables) || in_array($grupo_art, $arr_grupos_excluidos))
            {
                $facturable_insumo = 'S';
            }
        }
    }

    $arr_resp_validacion["cobro_concepto"]              = $cobro_concepto;
    $arr_resp_validacion["codigo_insumo"]               = $codigo_insumo;
    $arr_resp_validacion["facturable_insumo"]           = $facturable_insumo;
    $arr_resp_validacion["validar_articuloPor_empresa"] = $validar_articuloPor_empresa;
    return $arr_resp_validacion;
}

function valorDisponibleParaHomologar(&$disponibilidad)
{
    if($disponibilidad == '1') { $disponibilidad = 'on'; }
    elseif($disponibilidad == '*') {  }
    else { $disponibilidad = 'off'; }
}

/**
 * [crearTemporalCargos: Crea tabla temporal donde se guardan los cargos virtuales de la liquidación para poder aplicar politicas sin tener que estar grabados
 *                         en la tabla de cargos real.][updt-69]
 * @param  [type] $conex      [description]
 * @param  [type] $wemp_pmla  [description]
 * @param  [type] $wbasedato  [description]
 * @param  [type] $TABLA_TEMP_106 [description]
 * @return [type]             [description]
 */
function crearTemporalCargos($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106, $whistoria, &$generar_temporal_1vez)
{
    $sql = "DROP TABLE IF EXISTS {$TABLA_TEMP_106}";
    if(!$generar_temporal_1vez) {
        $result = mysql_query($sql, $conex) or die("Error en el query: ".$sql."<br>Tipo Error:".mysql_error());
    }
    if($generar_temporal)
    {
        // $sql = "CREATE TEMPORARY TABLE {$wbasedato}_{$TABLA_TEMP_106}

        $sql = "CREATE TEMPORARY TABLE {$TABLA_TEMP_106}
                (
                    Fecha_data date DEFAULT '0000-00-00',
                    Hora_data time DEFAULT '00:00:00',
                    Tcarusu varchar(80) DEFAULT '',
                    Tcarhis varchar(80) DEFAULT '',
                    Tcaring varchar(80) DEFAULT '',
                    Tcarfec varchar(80) DEFAULT '0000-00-00',
                    Tcarres varchar(80) DEFAULT '',
                    Tcarser varchar(80) DEFAULT '',
                    Tcarconcod varchar(80) DEFAULT '',
                    Tcarprocod varchar(80) DEFAULT '',
                    Tcartercod varchar(80) DEFAULT '',
                    Tcaresp varchar(45) DEFAULT '',
                    Tcarath char(3) DEFAULT '',
                    Tcarcan varchar(80) DEFAULT '',
                    Tcarvun varchar(80) DEFAULT '',
                    Tcarvto varchar(80) DEFAULT '',
                    Tcarrec varchar(80) DEFAULT '',
                    Tcarfac varchar(80) DEFAULT '',
                    Tcartfa varchar(80) DEFAULT '',
                    Tcarest char(3) DEFAULT 'on',
                    Tcartar varchar(10) DEFAULT '',
                    Tcarvex double DEFAULT '0',
                    Tcarvre double DEFAULT '0',
                    Tcartur char(3) DEFAULT '',
                    Tcarfex double DEFAULT '0',
                    Tcarfre double DEFAULT '0',
                    Seguridad varchar(10) DEFAULT '',
                    id INT(11) AUTO_INCREMENT,
                    PRIMARY KEY(id)
                )";

        if(!$generar_temporal_1vez){
            $result = mysql_query($sql, $conex) or die("Error en el query: ".$sql."<br>Tipo Error:".mysql_error());
            $generar_temporal_1vez = true;
        }
    }
}

/**
 * [insertarCargoTemporal: Inserta un nuevo cargo temporal][updt-69]
 * @param  [type] $conex        [description]
 * @param  [type] $wemp_pmla    [description]
 * @param  [type] $wbasedato    [description]
 * @param  [type] $wuse         [description]
 * @param  [type] $arrCg        [description]
 * @param  [type] $fecha_actual [description]
 * @param  [type] $hora_actual  [description]
 * @param  [type] $ID_cargo     [description]
 * @return [type]               [description]
 */
function insertarCargoTemporal($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106, $wuse, $arrCg, $fecha_actual, $hora_actual, $ID_cargo='')
{
    foreach($arrCg as $NombreVariable => $ValorVariable)
    {
        $$NombreVariable = $ValorVariable;
    }

    // $sql = "INSERT INTO {$wbasedato}_{$TABLA_TEMP_106} (Tcarhis, Tcaring, Tcarest, Tcarvto, Tcarfac, Tcarconcod, Tcarusu,Tcarser, Tcarfex, Tcarfre)
    //         VALUES ('{$Topres}', '{$Tophis}', '{$Toping}', '{$Toptco}', '{$Topcla}', '{$Topcco}', '{$Topest}', '{$Toptop}', '{$Toprec}', '{$Topdia}')";

    // $q = "  INSERT INTO {$wbasedato}_{$TABLA_TEMP_106}
    //                    (Medico        , Fecha_data       , Hora_data       , Tcarusu  , Tcarhis       , Tcaring  , Tcarfec     , Tcarsin  , Tcarres   , Tcarno1               , Tcarno2               , Tcarap1               , Tcarap2               , Tcardoc  , Tcarser     , Tcarconcod  , Tcarconnom               , Tcarprocod  , Tcarpronom               , Tcartercod  , Tcarternom               , Tcaresp           , Tcarterpor  , Tcarath             , Tcarcan       , Tcarvun     , Tcarvto                      , Tcarrec     , Tcarfac         , Tcartfa     , Tcarest, Tcarnmo, Tcarcmo    , Tcarapr, Tcardev, Tcartar  , Tcarvex         , Tcarvre       , Tcaridp, Tcarpar, Tcarita, Tcarppr, Tcardoi, Tcarlin, Tcartur,            Seguridad           )
    //         VALUES     ('{$wbasedato}', '{$fecha_actual}', '{$hora_actual}', '{$wuse}', '{$whistoria}', '{$wing}', '{$wfeccar}', '{$wser}', '$wcodemp', '{utf8_decode($wno1)}', '{utf8_decode($wno2)}', '{utf8_decode($wap1)}', '{utf8_decode($wap2)}', '{$wdoc}', '{$wccogra}', '{$wcodcon}', '{utf8_decode($wnomcon)}', '{$wprocod}', '{utf8_decode($wpronom)}', '{$wcodter}', '{utf8_decode($wnomter)}', '{$wespecialidad}', '{$wporter}', '{$cobraHonorarios}', '{$wcantidad}', '{$wvaltar}', '{$wvaltarReco+$wvaltarExce}', '{$wrecexc}', '{$wfacturable}', '{$wtipfac}', 'on'   , ''     , '$wconmvto', 'off'  , ''     , '{$wtar}', '{$wvaltarExce}', '$wvaltarReco', ''     , ''     , ''     , ''     , ''     , ''     , '$estaEnTurno', 'C-".$wusuario."'   )";

    $Tcarvto = $wvaltarReco+$wvaltarExce;

    $sql = "INSERT INTO {$TABLA_TEMP_106}
                       (Fecha_data       , Hora_data       , Tcarusu  , Tcarhis       , Tcaring  , Tcarfec     , Tcarres   , Tcarser     , Tcarconcod  ,
                        Tcarprocod  , Tcartercod  , Tcaresp           , Tcarath             , Tcarcan       , Tcarvun     , Tcarvto                      ,
                        Tcarrec     , Tcarfac         , Tcartfa     , Tcarest, Tcartar  , Tcarvex         , Tcarvre       , Tcartur       , Seguridad      )
            VALUES     ('{$fecha_actual}', '{$hora_actual}', '{$wuse}', '{$whistoria}', '{$wing}', '{$wfeccar}', '$wcodemp', '{$wccogra}', '{$wcodcon}',
                        '{$wprocod}', '{$wcodter}', '{$wespecialidad}', '{$cobraHonorarios}', '{$wcantidad}', '{$wvaltar}', '{$Tcarvto}',
                        '{$wrecexc}', '{$wfacturable}', '{$wtipfac}', 'on'   , '{$wtar}', '{$wvaltarExce}', '$wvaltarReco', '$estaEnTurno', 'C-{$wuse}')";

    if($generar_temporal)
    {
        if(isset($idsNoFactTemp) && is_array($idsNoFactTemp) && count($idsNoFactTemp) > 0)
        {
            ActualizarCargoComoNoFacturableTemp($conex, $wemp_pmla, $wbasedato, $idsNoFactTemp, $TABLA_TEMP_106);
        }

        if($result = mysql_query($sql, $conex))
        {
            $ID_cargo = mysql_insert_id();
        }
        else
        {
            echo "Error en el query: ".$sql."<br>Tipo Error:".mysql_error();
        }
    }
    return $ID_cargo;
}

/**
 * [eliminarTemporalCargos: Elimina la tabla temporal de cargos virtuales en la liquidación de cirugía, antes de eliminar se deben actualizar los cargos en el array de cargos][updt-69]
 * @param  [type] $conex      [description]
 * @param  [type] $wemp_pmla  [description]
 * @param  [type] $wbasedato  [description]
 * @param  [type] $TABLA_TEMP_106 [description]
 * @return [type]             [description]
 */
function eliminarTemporalCargos($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106)
{
    if($generar_temporal)
    {
        $sql = "DROP TABLE {$TABLA_TEMP_106}";
        // $result = mysql_query($sql, $conex) or die("Error en el query: ".$sql."<br>Tipo Error:".mysql_error());
    }
}

/**
 * [ActualizarCargoComoNoFacturableTemp: Según uno o varios IDs, esta función actualiza los cargos temporales como SI o NO facturable
 *                                         según como se diga en el valor del array debído a la aplicación de un política que así lo indique][updt-69]
 * @param [type] $conex          [description]
 * @param [type] $wemp_pmla      [description]
 * @param [type] $wbasedato      [description]
 * @param [type] $arrayIdCargos  [description]
 * @param [type] $TABLA_TEMP_106 [description]
 */
function ActualizarCargoComoNoFacturableTemp($conex, $wemp_pmla, $wbasedato, $arrayIdCargos, $TABLA_TEMP_106)
{
    foreach($arrayIdCargos as $idCargo => $facturable)
    {
        // --> Actualizar el cargo en tabla temporal de cargos.
        $sql = "UPDATE {$TABLA_TEMP_106}
                       SET Tcarfac = '{$facturable}'
                WHERE id = '{$idCargo}'";
        $result = mysql_query($sql, $conex) or die ("Error: " . mysql_errno() . " - en el query: " . $sql . " - " . mysql_error());
    }
}

/**
 * [actualizarCargos: Se recorren todos los arrays de cargos y de visualización en la posición wfacturable para actualizarlos según como hayan quedado
 *                     en la tabla temporal de cargos luego de aplicación de políticas.][updt-69]
 * @param  [type] $conex                                   [description]
 * @param  [type] $wemp_pmla                               [description]
 * @param  [type] $wbasedato                               [description]
 * @param  [type] $arr_PARAMETROS_GENERALES                [description]
 * @param  [type] &$arr_CargosGrabadosResponsables_insumos [description]
 * @param  [type] &$arr_CargosGrabadosResponsables         [description]
 * @param  [type] &$arr_CARGOS_PARA_GRABAR                 [description]
 * @return [type]                                          [description]
 */
function actualizarCargos($conex, $wemp_pmla, $wbasedato, $arr_PARAMETROS_GENERALES, $whistoria, &$arr_CargosGrabadosResponsables_insumos, &$arr_CargosGrabadosResponsables, &$arr_CARGOS_PARA_GRABAR)
{
    foreach($arr_PARAMETROS_GENERALES as $NombreVariable => $ValorVariable) //[updt-71]
    {
        $$NombreVariable = $ValorVariable;
    }

    if($generar_temporal)
    {
        $sql = "SELECT tmp106.id AS id_temp, tmp106.Tcarfac AS wfacturable
                FROM {$TABLA_TEMP_106} AS tmp106";
        $result = mysql_query($sql, $conex) or die ("Error: " . mysql_errno() . " - en el query: " . $sql . " - " . mysql_error());
        $arr_cargos_temp_106 = array();
        while($row = mysql_fetch_array($result))
        {
            if(!array_key_exists($row['id_temp'], $arr_cargos_temp_106))
            {
                $arr_cargos_temp_106[$row['id_temp']] = $row['wfacturable'];
            }
        }

        // Actualizar CARGOS INSUMOS arr_CargosGrabadosResponsables_insumos (ARRAYS PARA INTERFAZ)
        foreach ($arr_CargosGrabadosResponsables_insumos as $proced => $arr_insumos)
        {
            foreach ($arr_insumos as $cod_insumos => $arr_cargos_responsable)
            {
                foreach ($arr_cargos_responsable["simulacion"] as $cod_resp => $arr_cargos_insumo)
                {
                    $cont_dll = 0; // [updt-74]
                    foreach ($arr_cargos_insumo as $key => $info_cargo)
                    {
                        $arr_CargosGrabadosResponsables_insumos[$proced][$cod_insumos]["simulacion"][$cod_resp][$key]['wfacturable'] = (array_key_exists($info_cargo['id_cargo_temp'], $arr_cargos_temp_106)) ? $arr_cargos_temp_106[$info_cargo['id_cargo_temp']]: $info_cargo['wfacturable'];
                        // [updt-74] Se limíta a que solo cambie wfacturable de datos reales solo si hay un solo cargo del insumo, si hay más de uno no lo permita hacer más de una vez porque
                        // 1. Si es un cargo que se partió o es un cargo anexo, entonces el dato real corresponde al primero.
                        // 2. Si se hace más de una vez entonces se puede sobreescribir con otro valor y no mostrarse adecuadamente en la interfaz.
                        // En la variable wfacturable de datos_reales se le da prioridad a que haya un cargo SI facturable, por ejemplo para que en los paquetes que tienen limite de cantidad,
                        // se muestre el select del insumo como facturable SI y el resto como no facturable.
                        if($cont_dll == 0)
                        {
                            $arr_CargosGrabadosResponsables_insumos[$proced][$cod_insumos]["datos_reales"]['wfacturable'] = (array_key_exists($info_cargo['id_cargo_temp'], $arr_cargos_temp_106)) ? $arr_cargos_temp_106[$info_cargo['id_cargo_temp']]: $info_cargo['wfacturable'];
                        }
                        $cont_dll++;
                    }
                }
            }
        }

        // Actualizar CARGOS CONCEPTOS arr_CargosGrabadosResponsables (ARRAYS PARA INTERFAZ)
        foreach ($arr_CargosGrabadosResponsables as $proced => $arr_procedimiento)
        {
            foreach ($arr_procedimiento as $cod_concepto => $arr_cargos_proced_pqte)
            {
                if($cod_concepto == $id_concepto_uso_equipos || $cod_concepto== $id_concepto_examenes) //[updt-71]
                {
                }
                else
                {
                    // Cuando es un paquete y es uso de equipo entonces suele haber un nivel adicional en el array porque para el procedimiento del paquete
                    // se le pueden asociar varios conceptos de uso de equipos, si es un concepto normal simplemente se crea un nivel con indice '0' para que ese indice
                    // sea entendido como un nivel del tipo uso de equipos, con esto evitar que el siguiente array falle porque los niveles de un array con uso de equipos
                    // sería diferente a un array con un concepto normal.
                    $arr_cargos_proced_pqte_tmp = $arr_cargos_proced_pqte;
                    $arr_cargos_proced_pqte=array();
                    $arr_cargos_proced_pqte[] = $arr_cargos_proced_pqte_tmp;
                }

                foreach ($arr_cargos_proced_pqte as $key_o_proced_pqte => $arr_cargos_responsable)
                {
                    foreach ($arr_cargos_responsable as $cod_resp => $info_cargo)
                    {
                        if($cod_concepto == $id_concepto_uso_equipos || $cod_concepto== $id_concepto_examenes) //[updt-71]
                        {
                            $arr_CargosGrabadosResponsables[$proced][$cod_concepto][$key_o_proced_pqte][$cod_resp]['wfacturable'] = (array_key_exists($info_cargo['id_cargo_temp'], $arr_cargos_temp_106)) ? $arr_cargos_temp_106[$info_cargo['id_cargo_temp']]: $info_cargo['wfacturable'];
                        }
                        else
                        {
                            $arr_CargosGrabadosResponsables[$proced][$cod_concepto][$cod_resp]['wfacturable'] = (array_key_exists($info_cargo['id_cargo_temp'], $arr_cargos_temp_106)) ? $arr_cargos_temp_106[$info_cargo['id_cargo_temp']]: $info_cargo['wfacturable'];
                        }
                    }
                }
            }
        }

        // Actualizar CARGOS A GRABAR arr_CARGOS_PARA_GRABAR (ARRAY DE TODOS LOS CARGOS PARA GRABAR)
        foreach ($arr_CARGOS_PARA_GRABAR as $proced => $arr_procedimiento)
        {
            foreach ($arr_procedimiento as $cod_concepto_insumos => $arr_cargos)
            {
                foreach ($arr_cargos as $key => $info_cargo)
                {
                    $arr_CARGOS_PARA_GRABAR[$proced][$cod_concepto_insumos][$key]['wfacturable'] = (array_key_exists($info_cargo['id_cargo_temp'], $arr_cargos_temp_106)) ? $arr_cargos_temp_106[$info_cargo['id_cargo_temp']]: $info_cargo['wfacturable'];
                }
            }
        }
    }
}

/**
 * [inicializarDatosInsumo: Inicializa datos del array arr_CargosGrabadosResponsables_insumos según un nuevo código de insumo
 *                             en el proceso de generación de la liquidación][updt-69]
 * @param  [type] $procedimiento_liquidar_cod_dif          [description]
 * @param  [type] $concepto_nombre                         [description]
 * @param  [type] $saldo_insumo                            [description]
 * @param  [type] $cobro_insumo                            [description]
 * @param  [type] $nombre_insumo                           [description]
 * @param  [type] $cobro_concepto                          [description]
 * @param  [type] $facturable_insumo                       [description]
 * @param  [type] $wbaseliquidacion                        [description]
 * @param  [type] $arr_datos_procedimiento                 [description]
 * @param  [type] $arr_valor_cobro_insumo                  [description]
 * @param  [type] $gru_servicio                            [description]
 * @param  [type] $mueve_inventario                        [description]
 * @param  [type] $Artesm                                  [description]
 * @param  [type] $id_insumo                               [description]
 * @param  [type] &$arr_CargosGrabadosResponsables_insumos [description]
 * @return [type]                                          [description]
 */
function inicializarDatosInsumo($procedimiento_liquidar_cod_dif, $concepto_nombre, $saldo_insumo, $cobro_insumo, $nombre_insumo, $cobro_concepto, $facturable_insumo, $wbaseliquidacion, $arr_datos_procedimiento, $arr_valor_cobro_insumo, $gru_servicio, $mueve_inventario, $Artesm, $id_insumo, &$arr_CargosGrabadosResponsables_insumos)
{
    // Inicializar datos REALES de insumos
    // $arr_CargosGrabadosResponsables_insumos =    (procedimiento =>   (insumo =>  (empresa_responsable => arra_información
    //                                                                              )
    //                                                                  )
    //                                              )
    if(!array_key_exists($procedimiento_liquidar_cod_dif, $arr_CargosGrabadosResponsables_insumos))
    {
        $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif] = array();
    }

    if(!array_key_exists($cobro_insumo, $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif]))
    {
        $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo] = array("simulacion"=>array(), "datos_reales"=>array());
        $datos_reales = array(  "wconcepto_nombre"           => $concepto_nombre,
                                "wcantidad"                  => $saldo_insumo,
                                "wprocedimiento"             => $cobro_insumo,
                                "wprocedimiento_nombre"      => $nombre_insumo,
                                "wconcepto"                  => $cobro_concepto,
                                "wtercero"                   => "",
                                "wtercero_nombre"            => "",
                                "wespecialidad"              => "",
                                "wespecialidad_nombre"       => "",
                                "wporcentaje"                => 0,
                                "wtipo_facturacion"          => "",
                                "wvalor_final"               => 0,
                                "wfacturable"                => $facturable_insumo,
                                "wgrabar"                    => 'on',
                                "wbaseliquidacion"           => $wbaseliquidacion,
                                "wvalor"                     => "",
                                "wturno_cirugia"             => $arr_datos_procedimiento["wturno_cirugia"],
                                "wtipo_anestesia_cx"         => $arr_datos_procedimiento["wtipo_anestesia_cx"],
                                "wtiempo_sala_recuperarcion" => $arr_datos_procedimiento["wtiempo_sala_recuperarcion"],
                                "wtiempo_uso_minutos"        => $arr_datos_procedimiento["wtiempo_uso_minutos"],
                                "wtiempo_minutos_cx"         => $arr_datos_procedimiento["wtiempo_minutos_cx"],
                                "wexiste"                    => $arr_valor_cobro_insumo["wexiste"],
                                "wserv"                      => $gru_servicio,
                                "mueve_inventario"           => $mueve_inventario,
                                "wes_medicamento"            => $Artesm,
                                "id_insumo"                  => $id_insumo,
                                "WTIENE_TARIFA"              => "off");
        $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo]["datos_reales"] = $datos_reales;
        // $guardar = "cobro_insumo: $cobro_insumo, facturable_insumo: ".print_r($facturable_insumo,true).PHP_EOL.PHP_EOL;
        // seguimiento($guardar);
    }
    elseif($facturable_insumo == "S")
    {
        $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo]["datos_reales"]["wfacturable"] = $facturable_insumo; //[updt-74]
        // $guardar .= "arr_valor_cobro_insumo".print_r($arr_valor_cobro_insumo,true).PHP_EOL.PHP_EOL;
        // seguimiento($guardar);
    }
}


function consultarTopesResponsables($conex, $wemp_pmla, $wbasedato, $whistoria, $wing, $arr_ccos_cirugia)
{
    $ccos_cx = implode("','", array_keys($arr_ccos_cirugia));
    $sql = "SELECT  Topres, Tophis, Toping, Topres, Toptco, Topcla, Topcco, Topest, Toptop, Toprec, Topdia, Topsal, id AS TopID
            FROM    {$wbasedato}_000204
            WHERE   Tophis = '{$whistoria}'
                    AND Toping = '{$wing}'
                    AND (Topcco = '*' OR Topcco IN ('{$ccos_cx}'))
                    AND Topest = 'on'";
    $resultTopes = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);

    // Se crea tope comodín para se usado cuando en la tabla de topes el campo de saldo está vacío, eso indica que el responsable no tiene limite por saldo
    // pero para que el programa de liquidación pueda continuar sin problema entonces se fija un saldo alto para que cada cargo se pueda descontar de ese valor,
    // se hace de esta manera porque no sería suficiente con ignorar el registro de tope puesto que el valor de reconocido si puede llegar a afectar el valor a pagar,
    // por ejemplo puede no tener tope por saldo pero si pagar solo el 70% de todos los cargos que se le cobren al responsable.
    // Todo cargo que se intente cobrar a un responsable que no tiene límite de saldo entonces se le resta al ID "sin_limite" del array de topes.
    $arr_TOPES_ENTIDADES = array("sin_limite" => array( "Topres" => "",
                                                        "Tophis" => $whistoria,
                                                        "Toping" => $wing,
                                                        "Topres" => "",
                                                        "Toptco" => "",
                                                        "Topcla" => "",
                                                        "Topcco" => "",
                                                        "Topest" => "",
                                                        "Toptop" => "",
                                                        "Toprec" => "",
                                                        "Topdia" => "",
                                                        "Topsal" => 500000000,
                                                        "Topsal2" => '*',
                                                        "TopID" =>"sin_limite")
                                );
    while ($rowTope = mysql_fetch_array($resultTopes))
    {
        if(!array_key_exists($rowTope["TopID"], $arr_TOPES_ENTIDADES))
        {
            $arr_TOPES_ENTIDADES[$rowTope["TopID"]] = array();
        }
        $arr_TOPES_ENTIDADES[$rowTope["TopID"]] = array("Topres" =>$rowTope["Topres"],
                                                        "Tophis" =>$rowTope["Tophis"],
                                                        "Toping" =>$rowTope["Toping"],
                                                        "Topres" =>$rowTope["Topres"],
                                                        "Toptco" =>$rowTope["Toptco"],
                                                        "Topcla" =>$rowTope["Topcla"],
                                                        "Topcco" =>$rowTope["Topcco"],
                                                        "Topest" =>$rowTope["Topest"],
                                                        "Toptop" =>$rowTope["Toptop"],
                                                        "Toprec" =>$rowTope["Toprec"],
                                                        "Topdia" =>$rowTope["Topdia"],
                                                        "Topsal" =>$rowTope["Topsal"],
                                                        "Topsal2"=>(($rowTope["Topsal"]=='') ? '*': $rowTope["Topsal"]), // Se usa en topes y paralelos para saber si originalmente es un saldo *, Topsal se vuelve cero al insertarse en la tabla temporal.
                                                        "TopID"  =>$rowTope["TopID"],
                                                        );
    }
    return $arr_TOPES_ENTIDADES;
}

function consultaInfoConceptosInventarios($conex, $wbasedato, $wemp_pmla, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv)
{
    $arr_info_conceptos_inventario = array($concepto_medicamentos_mueven_inv => array(),$concepto_materiales_mueven_inv => array());
    $sql = "SELECT Grucod, Grudes, Gruinv, Gruser, Gruarc
            FROM {$wbasedato}_000200
            WHERE Grucod IN ('$concepto_medicamentos_mueven_inv','$concepto_materiales_mueven_inv')";
    $result = mysql_query($sql,$conex) OR die ($sql.' <br> '.mysql_error());
    while ($row = mysql_fetch_array($result))
    {
        $arr_info_conceptos_inventario[$row["Grucod"]]["concepto_codigo"]      = $row["Grucod"];
        $arr_info_conceptos_inventario[$row["Grucod"]]["concepto_nombre"]      = $row["Grudes"];
        $arr_info_conceptos_inventario[$row["Grucod"]]["mueve_inventario"]     = $row["Gruinv"];
        $arr_info_conceptos_inventario[$row["Grucod"]]["servicio"]             = $row["Gruser"];
        $arr_info_conceptos_inventario[$row["Grucod"]]["tabla_valida_precios"] = $row["Gruarc"];
    }
    return $arr_info_conceptos_inventario;
}

function generarCargosLiquidacion($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106, &$arr_DATOS_PROGRAMA)
{
    // pasa el array de variables generales del programa al ambiente local de la función.
    foreach ($arr_DATOS_PROGRAMA as $key_gral => $value_gral) {
        $$key_gral = $value_gral;
    }
    global $id_cx_multiples, $wpolitraumatizado, $wpolitraumatizado, $CX_numero_especialidades, $CX_numero_vias;
    global $arr_especialidades_liq, $wesbilateral, $numero_cirugia, $porcentajes_CX_bilaterales, $via_primera_bilateral, $via_cirugia_en_curso, $especialid_primera_bilateral, $especialidad_cirugia_en_curso;
    global $arr_entidades_responsables, $arr_entidades_ORDEN_SIMULADO, $arr_TOPES_ENTIDADES,
                                       $arr_CargosGrabadosResponsables, $arr_CargosGrabadosResponsables_insumos;
    global $ctrl_primer_via_procedimiento, $ctrl_primer_especialidad_procedimiento;
    global $porcentaje_cxMult, $concepto_control_porcentaje_cx_multiple, $RESPONSABLE_VIRTUAL_PACIENTE, $arr_baseLiquidacion, $arr_porcentajes_multiples; // se debió poner en global porque en las funciones de simulación se pueden crear nuevos cargos en los que se debe aplicar porcentaje de descuento en su tarifa.

    $procedimiento_NOPOS = tipoPOS_procedimiento($TIP_POS);
    foreach ($arr_procedimientos_orden[$TIP_POS] as $wcodigo_especialidad_orden => $arr_procedimientos_orden_por_especialidad)
    {
        $arr_procedimientos_bilaterales    = array();
        $arr_procedimientos_NObilaterales  = array();
        $total_procedimientos_especialidad = 0;
        $via_primera_bilateral             = "";
        $via_cirugia_en_curso              = "";
        $cont_CX_bilaterales               = 0;
        if(!array_key_exists($wcodigo_especialidad_orden, $arr_ContadorCxPorEspecialidad))
        {
            $arr_ContadorCxPorEspecialidad[$wcodigo_especialidad_orden] = array();
        }

        foreach ($arr_procedimientos_orden_por_especialidad as $procedimiento_liquidar_cod_dif => $num_puntos)
        {
            // Contar las cirugías de cada especialidad, si la liquidación es para diferentes especialidades, los porcentajes del manual para honorarios
            // en todas las especialidades se deben repetir (SOLO PARA HONORARIOS)
            if(!array_key_exists($procedimiento_liquidar_cod_dif, $arr_ContadorCxPorEspecialidad[$wcodigo_especialidad_orden]))
            {
                // Array para contar las cirugías por especialidad.
                $arr_ContadorCxPorEspecialidad[$wcodigo_especialidad_orden][$procedimiento_liquidar_cod_dif] = $procedimiento_liquidar_cod_dif;
            }

            $total_procedimientos_especialidad++;
            //>> Orden a tener en cuenta para grabar los cargos originales al momento de liquidar.
            if(!array_key_exists($procedimiento_liquidar_cod_dif, $arr_procedimientos_orden_liquidar))
            {
                // Solo aplica para pos o no pos pero no ambos
                $arr_procedimientos_orden_liquidar[$procedimiento_liquidar_cod_dif] = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif];
            }
            if(!array_key_exists($procedimiento_liquidar_cod_dif, $arr_procedimientos_orden_liquidarPPNP))
            {
                // Si hay procedimientos pos y no pos entonces este se encarga de hacer un único orden sin importar lo pos o no pos, aplica para ambos
                $arr_procedimientos_orden_liquidarPPNP[$procedimiento_liquidar_cod_dif] = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif];
            }
            //<<
            $arr_datos_procedimiento = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif];
            // $guardar = "arr_datos_procedimiento: ".print_r($arr_datos_procedimiento,true).PHP_EOL;
            // seguimiento($guardar);

            // Este control fue creado para detectar si se debe aplicar manual de Cirugías múltiples con porcentajes bilaterales
            // solo si la cirugía mayor es bilateral y no hay mas de una especialidad, si hay más de una especialidad entonces se cobran porcentajes
            // de diferente via diferente especialidad.
            if(empty($primera_cirugia_enLista) && count($arr_especialidades_liq) <= 1)
            {
                $primera_cirugia_enLista = $procedimiento_liquidar_cod_dif;
                if($arr_datos_procedimiento["wesbilateral"] == 'on')
                {
                    $control_cx_mayor_esBilateral = true;
                }
            }


            // Si aplican condiciones para cirugías múltiples. BUSCA SI TIENE QUE APLICAR PORCENTAJES PARA CIRUGÍAS MÚLTIPLES.
            $arr_porcentajes = array();
            if(count($arr_porcentajes_multiples) > 0)
            {
                // Averigua si el procedimiento actual es bilateral o no, si lo es entonces agrega el procedimiento al array de procedimientos bilaterales
                // sino entonces lo agrega al array de procedimientos NO bilaterales.

                // Para asignar los porcentajes según el número de la cirugía (en el orden de prioridad que debe ser), entonces se cuentan los elementos de cada
                // array y el valor que arroja será el número de la cirugía (1era cirugía, 2da cirugía).

                // Si en el array de porcentajes múltiples no se encuentra el número de la cirugía entonces se busca el '*' y se asignan los porcentajes que éste
                // tenga configurados.

                $wesbilateral                  = $arr_datos_procedimiento['wesbilateral'];
                $via_cirugia_en_curso          = $arr_datos_procedimiento['wvia'];
                $especialidad_cirugia_en_curso = $arr_datos_procedimiento['wespecialidad'];
                if(!$esMultipleEspecialidadDifVia)
                {
                    // Si no es diferente especialidad, entonces reiniciar el conteo de cirugías y basarse en en la cantidad de cirugias guardadas en el array
                    // "arr_procedimientos_bilaterales" que se encarga de guardar cada diferente cirugía y para saber cuantas cirugías van simplemente se hace
                    // un count, con eso se sabe el número de cirugía, este array es útil porque cuando se está liquidando una cirugía bilateral
                    // se encarga de controlar que se cobren dos cirugías de bilateral,
                    $numero_cirugia = 0;
                }

                // Si es un procedimiento bilateral, suma al contador de bilaterales. SOLO SI LA CIRUGÍA MAYOR ES LA BILATERAL "control_cx_mayor_esBilateral=true"
                if($control_cx_mayor_esBilateral && $wesbilateral == 'on')
                {
                    $cont_CX_bilaterales++;
                    if(empty($via_primera_bilateral))
                    {
                        $via_primera_bilateral = $arr_datos_procedimiento['wvia'];
                    }

                    if(empty($especialid_primera_bilateral))
                    {
                        $especialid_primera_bilateral = $wcodigo_especialidad_orden;
                    }
                }

                // Si el contador de bilaterales es mayor a 1 entonces cambie a los porcentajes de cirugías bilaterales seteando a 'on' la variable porcentajes_CX_bilaterales
                if($cont_CX_bilaterales > 1)
                {
                    $porcentajes_CX_bilaterales = 'on';
                    if($total_procedimientos_especialidad > $cont_CX_bilaterales)
                    {
                        // $numero_cirugia = 1;
                        // Esta justificación ya no tiene validéz porque si hay una cirugía mayor a la bilateral, se pierde la bilateralidad, esto fué afirmado
                        // en una de las reuniones de facturación y para el desarrollo se tomó como regla "Si hay diferente especialidad se pierde la bilateralidad pero se conservan
                        // las dos cirugías resultantes y se aplica porcentajes de diferente vía diferente especialidad"
                                // Si hay cirugías no bilateralares ántes de llegar a las bilaterales
                                // implicaría un cambio de acto quirúrgico a bilaterales pero empezando en la cirugía número 2, no es la primera porque
                                // esa ya se debió haber tenido en cuenta en los porcentajes del acto quirúrgico anterior.
                        // $arr_procedimientos_bilaterales = array(); // Reiniciar el array de conteo de procedimientos para que empiece desde cero
                        // esto sucede cuando se deben cambiar los porcentajes a bilaterales, es como si se cambiara al acto quirúrgico bilateral
                        // se guarda el primer procedimientos bilateral y $numero_cirugia valdrá por ejemplo 2, debído a que se inicializó en 1
                        // esto ayuda que al momento de empezar a tomar los porcentajes de bilaterales, tome a partir de la segunda cirugía
                        // porque la primera es posible que ya se haya liquidado con el porcentaje de otro evento quirúrgico si es que antes
                        // había procedimiento mayor.
                    }
                }

                if(!$esMultipleEspecialidadDifVia && !array_key_exists($procedimiento_liquidar_cod_dif, $arr_procedimientos_bilaterales))
                {
                    $arr_procedimientos_bilaterales[$procedimiento_liquidar_cod_dif] = $procedimiento_liquidar_cod_dif;
                    //$numero_cirugia = count($arr_procedimientos_bilaterales)+$numero_cirugia;

                    if(!array_key_exists($via_cirugia_en_curso, $arr_cx_por_via))
                    {
                        $arr_cx_por_via[$via_cirugia_en_curso] = 1;
                        // Si ya es la segunda vía diferente que se inserta a este array significa que hay una cirugía mayor
                        // por una via diferente a la actual, entonces el número de la cirugía debe empezar en 2, porque si se
                        // deja inicializado en 1, al momento de buscar el porcentaje toma todo al 100% y es falso porque la cirugía
                        // mayor ya quedó al 100% y esta vía actual debe ser como mínimo la segunda cirugía por diferente vía. Por eso
                        // se debe inicializar en 2.
                        if(count($arr_cx_por_via) > 1)
                        {
                            $arr_cx_por_via[$via_cirugia_en_curso] = 2;
                        }
                    }
                    else
                    {
                        $arr_cx_por_via[$via_cirugia_en_curso] += 1;
                    }
                    $numero_cirugia = $arr_cx_por_via[$via_cirugia_en_curso];
                    // $guardar = "via_cirugia_en_curso: $via_cirugia_en_curso, arr_cx_por_via: ".print_r($arr_cx_por_via,true).PHP_EOL.PHP_EOL.PHP_EOL;
                    // seguimiento($guardar);
                }
                elseif($esMultipleEspecialidadDifVia)
                {
                    // Si es cirugias con diferente especialidad, simplemente contar las cirugias como si no existieran diferentes especialidadades.
                    $numero_cirugia++;
                }

                // global $arr_especialidades_liq, $wesbilateral, $numero_cirugia, $porcentajes_CX_bilaterales, $via_primera_bilateral, $via_cirugia_en_curso, $especialid_primera_bilateral, $especialidad_cirugia_en_curso;
                $arr_porcentajes = arrayPorcentajePorNumeroCirugia($arr_porcentajes_multiples, $arr_ContadorCxPorEspecialidad, $wcodigo_especialidad_orden, $esMultipleEspecialidadDifVia, $conceptoRepetirPorcentajeMultiple);
                // $guardar = "arrayPorcentajePorNumeroCirugia($arr_porcentajes_multiples, $arr_ContadorCxPorEspecialidad, $wcodigo_especialidad_orden, $esMultipleEspecialidadDifVia, $conceptoRepetirPorcentajeMultiple);".PHP_EOL;
                // $guardar .= "arr_porcentajes: ".print_r($arr_porcentajes,true).PHP_EOL.PHP_EOL.PHP_EOL;
                // $guardar .= "arr_porcentajes_multiples: ".print_r($arr_porcentajes_multiples,true).PHP_EOL.PHP_EOL.PHP_EOL;
                // seguimiento($guardar);

                // Si hay más de una especialidad, verificar si hay conceptos que solo se deben cobrar una vez o
                // solo hasta una determinada cantidad de cirugías (CIRUGIAS MAYORES SIN IMPORTAR LA ESPECIALIDAD)
                if(count($arr_especialidades_liq) > 1)
                {
                    // $arr_ordenProcedimientosTodos_NoEspecialidad
                    foreach ($arr_porcentajes as $concepto_porcentaje => $arr_info_porcentaje)
                    {
                        $valor_porcentaje = 0;
                        if($arr_info_porcentaje["hasta_la_mayor_marcada"] == 'on' && !array_key_exists($concepto_porcentaje, $arr_conceptos_maximo_aCobrar))
                        {
                            // Agregar el concepto y el número de cirugía a este array que tienen el valor "hasta_la_mayor_marcada=on"
                            // Debe garantizar que ese concepto solo se debe cobrar hasta la cirugía mayor marcada, es decir, si ese concepto en el manual de cirugias multiples
                            // esta marcado que solo debe cobrar hasta la cirugia 2, significa que ese concepto solo se va a cobrar hasta la segunda cirugía mayor sin importar especialidad,
                            // para el resto de cirugías en ese concepto debe seguir cobrando 0%.
                            $arr_conceptos_maximo_aCobrar[$concepto_porcentaje] = $numero_cirugia;// Es el número de cirugía hasta el que se debe cobrar el concepto.
                            $valor_porcentaje = $arr_info_porcentaje['valor_porcentaje'];
                        }

                        $indice_proced_concepNoCobro = $procedimiento_liquidar_cod_dif."_".$concepto_porcentaje;

                        // Este condicional-función se encarga de verificar los conceptos que no se deben cobrar si alguno de ellos esta marcado
                        // en el manual de cirugías indicando que para ese concepto solo se debe cobrar hasta X cirugía unicamente cobrando
                        // la mayor en ese nivel de cirugía. (p.e. Anestesia solo se cobra a la segunda cirugía mayor sin importar la especialidad.)
                        if(array_key_exists($concepto_porcentaje, $arr_conceptos_maximo_aCobrar))
                        {
                            $cx_queNoSeCobran = validarCirugiaMayorACobrarConcepto($concepto_porcentaje, $cx_queNoSeCobran, $arr_conceptos_maximo_aCobrar, $arr_procedimientos_orden[$TIP_POS], $indice_proced_concepNoCobro, $cx_queSISeCobran, $valor_porcentaje);
                        }

                        if(array_key_exists($indice_proced_concepNoCobro, $cx_queNoSeCobran))
                        {
                            $arr_porcentajes[$concepto_porcentaje]["valor_porcentaje"] = 0;
                        }
                        elseif(array_key_exists($indice_proced_concepNoCobro, $cx_queSISeCobran))
                        {
                            $arr_porcentajes[$concepto_porcentaje]["valor_porcentaje"] = $cx_queSISeCobran[$indice_proced_concepNoCobro];
                        }

                        // $guardar = "procedimiento_liquidar_cod_dif: ".$procedimiento_liquidar_cod_dif.PHP_EOL;
                        // $guardar .= "".@$numero_cirugia." > ".print_r($arr_conceptos_maximo_aCobrar,true).PHP_EOL;
                        // $guardar .= "".@$numero_cirugia." > (".@$arr_conceptos_maximo_aCobrar[$concepto_porcentaje]." * 1))".PHP_EOL;
                        // $guardar .= "arr_porcentajes[concepto_porcentaje][valor_porcentaje] : $concepto_porcentaje => ".print_r(@$arr_porcentajes[$concepto_porcentaje]["valor_porcentaje"],true).PHP_EOL;
                        // $guardar .= "arr_ordenProcedimientosTodos_NoEspecialidad: $concepto_porcentaje => ".print_r(@$numero_cirugia,true).PHP_EOL;
                        // $guardar .= "arr_conceptos_maximo_aCobrar: $concepto_porcentaje => ".print_r(@$arr_conceptos_maximo_aCobrar[$concepto_porcentaje],true).PHP_EOL;
                        // $guardar .= "*****************************: ".print_r('******************',true).PHP_EOL;
                        // seguimiento($guardar);
                    }
                }

                // Repetir el primer porcentaje de honorarios por ejemplo. pero solo para dif. via dif. espe. solo para la primer cirugía de cada especialista.
                // if($esMultipleEspecialidadDifVia && array_key_exists($conceptoRepetirPorcentajeMultiple, $arr_porcentajes) && !array_key_exists($wcodigo_especialidad_orden, $arrRepetiblePorEspecialidad))
                // {
                //     $arrRepetiblePorEspecialidad[$wcodigo_especialidad_orden] = array();
                //     if(empty($porcentajeRepetible))
                //     {
                //         // Es el porcentaje a repetir, solo se captura la primer vez que se encuentre y se repite ese valor para el mismo concepto en los procedimientos siquientes
                //         $porcentajeRepetible = $arr_porcentajes[$conceptoRepetirPorcentajeMultiple]['valor_porcentaje'];
                //     }
                // }

                // $arr_porcentajes = Array
                //                     (
                //                         [0024] => array(valor_porcentaje => 75, hasta_la_mayor_marcada => 'off'),
                //                         [0626] => array(valor_porcentaje => 75, hasta_la_mayor_marcada => 'off'),
                //                         [0076] => array(valor_porcentaje => 75, hasta_la_mayor_marcada => 'off'),
                //                         [0075] => array(valor_porcentaje => 75, hasta_la_mayor_marcada => 'off'),
                //                         [0072] => array(valor_porcentaje => 75, hasta_la_mayor_marcada => 'off')
                //                     )
            }
            // $guardar = "arr_porcentajes[concepto_porcentaje][valor_porcentaje] : $concepto_porcentaje => ".print_r($arr_porcentajes,true).PHP_EOL;
            // seguimiento($guardar);

            $codigo_procedimiento     = $arr_datos_procedimiento['codigo'];
            $arr_especialistas_proced = $arr_datos_procedimiento["especialistas"];
            $worgano                  = $arr_datos_procedimiento['worgano'];

            // Validar si por manual se deben poner como no facturable todos los conceptos (excepto insumos) para el procedimiento actual.
            $procedimiento_No_Facturable = "";
            $procedimiento_No_Facturable = validarProcedimientoNoFacturable($arr_procedimientos_relacionados, $arr_proced_Manual_NoFact, $codigo_procedimiento);

            $responsable_actual_temp = $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"];
            foreach ($arr_lista_conceptos as $codigo_concepto => $nombre_concepto)
            {
                $wcondicion_restriccion = "";
                // VALIDAR SI CAMBIA EL RESPONSABLE Y SI ES ASÍ VERIFICAR SI EL CONCEPTO ACTUAL CORRESPONDE A MATERIALES-MEDICAMENTOS QUE NO MUEVEN INVENTARIOS
                // SI ES ASI Y PARA EL NUEVO RESPONSABLE NO SE DEBE COBRAR ENTONCES NO CONTINUAR EL CARGO SIGUIENTE SI ES QUE PARA ESE RESPONSABLE NO SE DEBE COBRAR
                // POR TANTO LOS INSUMOS SERÁN FACTURABLES.

                // Si hubo cambio de responsable y esto hizo se cambiaran las condiciones de limite de UVR o Grupo respecto al manual de Cx Multiples del nuevo
                // responsable, entonces para todos los demas procedimientos que le correspondan al nuevo responsable y tenga el concepto de no mueve inventario
                // entonces dirá para todos esos otros procedimientos si ese concepto queda como facturable o no mintras se mantenga ese mismo responsable.
                // Aplica por ejemplo si primero esta soat se cobran medicamentos como no facturable mas un concepto adicional, pero para el caso de la prepagada
                // si se le acabó el tope a soat entonces la prepagada ya no tiene que pagar un concepto de materiales y medicamentos sino que debe pagar
                // los insumos por consumo y así seguir para los demas procedimientos que tengan insumos y sea la prepagada el mismo responsable.
                $facturable_init = ($concepto_no_facturar != codConceptoLegible($codigo_concepto)) ? "S": $no_facturable_porcambio_manual;

                $limite_cobro_ayudantia = 0;

                $limite_ayudantia_uvr   = (array_key_exists("limite_ayudantia_uvr", $arr_baseLiquidacion)) ? $arr_baseLiquidacion["limite_ayudantia_uvr"] : 0;
                $limite_ayudantia_grupo = (array_key_exists("limite_ayudantia_grupo", $arr_baseLiquidacion)) ? $arr_baseLiquidacion["limite_ayudantia_grupo"] : 0;
				$limite_ayudantia_grupo = (int) $limite_ayudantia_grupo;
				$limite_ayudantia_uvr 	= (int) $limite_ayudantia_uvr;
                // [updt-76] Para poder saber si se cambió de responsable y debe seguir redondeando a la centena, se adiciona esta línea en el foreach de "arr_lista_conceptos"
                // porque antes estaba por fuera y se seguía conservando el redondeo del primer responsable así haya cambiado a uno que ya no debe redondear.
                $wredondear_centena     = ($arr_baseLiquidacion['wredondear_centena'] == 'on') ? true: false;

                if(!$es_paquete && codConceptoLegible($codigo_concepto) == $concepto_honorario_ayudantia
                    && array_key_exists($codigo_concepto, $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]["configuracion_liquidar"]))
                {
                    $wprocedimientoModalidad = arreglar_procedimientos_bilaterales($procedimiento_liquidar_cod_dif);
                    $arr_mod_procedimiento_tmp = modalidadPuntosProcedimiento($conex, $wbasedato, $wprocedimientoModalidad, $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"], $RESPONSABLE_VIRTUAL_PACIENTE["tipoEmpre"], $wcentro_costo, $wtipo_emp_valida_nopos, $worgano);
                    $mod_facturacion = $arr_mod_procedimiento_tmp['tipo_facturacion'];
                    if($mod_facturacion == 'UVR')
                    {
                        $limite_cobro_ayudantia = $limite_ayudantia_uvr*1;
                        $num_puntos = $arr_mod_procedimiento_tmp["wnumero_uvrs"]; //[updt-72] Cuando se cambiaba de responsable estaba tomando el mismo número de puntos del responsable inicial.
                    }
                    elseif($mod_facturacion == 'GQX')
                    {
                        $limite_cobro_ayudantia = $limite_ayudantia_grupo*1;
                        $num_puntos = $arr_mod_procedimiento_tmp["valor_grupo"]; //[updt-72] Cuando se cambiaba de responsable estaba tomando el mismo número de puntos del responsable inicial.
                    }
                    // $guardar = "limite_cobro_ayudantia: ".print_r($limite_cobro_ayudantia,true).PHP_EOL;
                    // $guardar .= "mod_facturacion: ".print_r($mod_facturacion,true).PHP_EOL;
                    // seguimiento($guardar);
                }

                // Hay procedimientos que no se deben facturar si estan acompañados de otros, entonces sus conceptos serán no facturables
                // si la variable "procedimiento_No_Facturable" esta seteada (tendrá el valor "N") significa que el procedimiento no se debe cobrar
                if( !empty($procedimiento_No_Facturable)
                    && $arr_cod_material_medicamento["material"] != codConceptoLegible($codigo_concepto)
                    && $arr_cod_material_medicamento["medicamento"] != codConceptoLegible($codigo_concepto)
                    )
                {
                    $facturable_init = $procedimiento_No_Facturable;
                    $wcondicion_restriccion = "Restricción manuales, no facturables por relación de procedimientos.";
                }

                // Aqui se define si el concepto HONORARIOS AYUDANTÍA SE DEBE COBRAR O NO, esto según un parámetro en el manual de cirugía donde se lee el límite de cobro para ayudandtía
                $no_validar_tarifa = false;
                if(codConceptoLegible($codigo_concepto) == $concepto_honorario_ayudantia && ($num_puntos*1) < $limite_cobro_ayudantia)
                {
                    $facturable_init = "N";
                    $no_validar_tarifa = true;
                    $wcondicion_restriccion = "Restricción manuales, número de puntos menor al límite de cobro ayudantía [$num_puntos < $limite_cobro_ayudantia]";
                }
                // $guardar = "** if($codigo_concepto == $concepto_honorario_ayudantia && ($num_puntos*1) < $limite_cobro_ayudantia)".PHP_EOL;
                // seguimiento($guardar);

                $responsable_actual_temp = $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"];

                // foreach     ($arr_datos_procedimiento['configuracion_liquidar'] as $codigo_concepto => $arr_info_conf)
                if(array_key_exists($codigo_concepto, $arr_datos_procedimiento['configuracion_liquidar']))
                {
                    $arr_equipos_examenes_liquidar = array();

                    if(codConceptoLegible($codigo_concepto) == $id_concepto_uso_equipos
                        && array_key_exists($codigo_concepto, $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]['configuracion_liquidar'])
                        && array_key_exists("lista_equipos", $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]['configuracion_liquidar'][$codigo_concepto]))
                    {
                        $arr_equipos_examenes_liquidar = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]['configuracion_liquidar'][$codigo_concepto]["lista_equipos"];
                    }
                    elseif(codConceptoLegible($codigo_concepto) == $id_concepto_examenes
                        && array_key_exists($codigo_concepto, $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]['configuracion_liquidar'])
                        && array_key_exists("lista_examenes", $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]['configuracion_liquidar'][$codigo_concepto]))
                    {
                        $arr_equipos_examenes_liquidar = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]['configuracion_liquidar'][$codigo_concepto]["lista_examenes"];
                    }
                    else
                    {
                        $arr_equipos_examenes_liquidar = array(""=>array("nombre"=>"","codigo"=>"","valor_tarifa"=>"-1"));
                    }

                    foreach ($arr_equipos_examenes_liquidar as $codigo_equipo_examen => $arr_info_equipo_examen)
                    {
                        // Siempre estaba intentando seguir cobrando cargos al primer responsable así este haya terminado el saldo en el caso de soat-prepe por ejemplo
                        // de ser así entonces se debe tener en cuenta que ya cambió de responsable y aquí es donde se reasigna el código y tarifa de la nueva empresa
                        // para que el programa ya no intente cobrar algo que no debe al anterior responsable.
                        $wcod_empresa    = $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"];
                        $wtarifa_empresa = $RESPONSABLE_VIRTUAL_PACIENTE["Ingtar"];
                        $tipoEmpresa     = $RESPONSABLE_VIRTUAL_PACIENTE["tipoEmpre"];
                        $arr_info_conf = $arr_datos_procedimiento['configuracion_liquidar'][$codigo_concepto];
                        $concepto_cod_ppal = $codigo_concepto;
                        $especialidad_procedimiento = $arr_datos_procedimiento['wespecialidad'];

                        if(!array_key_exists($procedimiento_liquidar_cod_dif, $arr_CargosGrabadosResponsables))
                        {
                            $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif] = array();
                        }

                        if(!array_key_exists($concepto_cod_ppal, $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif]))
                        {
                            $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal] = array();
                        }

                        if(!array_key_exists($concepto_cod_ppal, $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif]))
                        {
                            $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal] = array();
                        }
                        // $guardar = "wcod_empresa: $wcod_empresa | arr_info_conf: ".print_r($arr_info_conf,true).PHP_EOL;
                        // seguimiento($guardar);
                        // $requiere_tercero     = $arr_info_conf['requiere_tercero']; // Si es "C" o "P" entonces requiere tercero
                        // $cantidad_pintar      = $arr_info_conf['cantidad_concepto'];

                        $tabla_valida_precios = $arr_info_conf['tabla_valida_precios'];
                        $modifica_valor       = $arr_info_conf['modifica_valor'];
                        $mueve_inventario     = $arr_info_conf['mueve_inventario'];
                        $es_concepto_extra    = (array_key_exists('es_concepto_extra', $arr_info_conf)) ? true: false;
                        $cobro_concepto       = "";
                        $cobro_procedimiento  = "";
                        $codigo_rango_tiempo  = ""; // Aqui debería quedar el código del procedimiento que hace parte del rango de tiempo, si el concepto efectivamente se liquida por tiempo

                        // Si es un procedimiento no pos y se ingresó un tiempo específico para el procedimiento entonces buscar tipo de cobro con el tiempo específico, sino con el tiempo total de la cirugía.
                        
						//JERSON: ASI ERA ANTES DE 2020-04-6
						//$tiempoCxProcedimiento = ($procedimiento_NOPOS && $arr_datos_procedimiento["arr_encabezado"]["wtiempo_procedimiento"] != '') ? $arr_datos_procedimiento["arr_encabezado"]["wtiempo_procedimiento"] : $wtiempo_minutos_cx;
                        
						//AHORA 2020-04-6						
						if(isset($arr_info_conf['aplicaAlTiempoDelPro']) && $arr_info_conf['aplicaAlTiempoDelPro'] == 'on')
							$tiempoCxProcedimiento = $arr_datos_procedimiento["arr_encabezado"]["wtiempo_procedimiento"];
						else{
							if(($procedimiento_NOPOS && $arr_datos_procedimiento["arr_encabezado"]["wtiempo_procedimiento"] != ''))
								$tiempoCxProcedimiento = $arr_datos_procedimiento["arr_encabezado"]["wtiempo_procedimiento"];
							else
								$tiempoCxProcedimiento = $wtiempo_minutos_cx;
						}
								
						
                        // $tiempoCxProcedimiento = $wtiempo_minutos_cx;
                        // [2015-05-22] Ántes no existía esta función y se creó para poder utilizar la sección de código en diferentes momentos debído al cambio de responsable que hace cambiar las condiciones en la forma de liquidar.
                        $valor_rango_busco = conceptoProcedimientoCobroSegunTipoCobro($cobro_concepto, $cobro_procedimiento, $codigo_rango_tiempo, $tiempoCxProcedimiento, $wtipo_anestesia_cx, $arr_info_conf, $wcod_empresa,
                            $procedimiento_liquidar_cod_dif, $codigo_concepto, $id_concepto_uso_equipos, $id_concepto_examenes, $concepto_recuperacion_erp, $es_concepto_extra, $wtiempo_uso_minutos, $wtiempo_sala_recuperarcion);
						
						$valor_rango_busco = "2|".$valor_rango_busco;
						
                        // Inicializa el array para controlar que cuando sean CX multiples solo se cobre tiempos a la primer cirugía
                        if($cx_multiples_requiere_tiempos == 'on' && count($arr_control_primera_cx_tiempos) == 0)
                        {
                            if(!array_key_exists($procedimiento_liquidar_cod_dif, $arr_control_primera_cx_tiempos))
                            {
                                $arr_control_primera_cx_tiempos[$procedimiento_liquidar_cod_dif] = array();
                            }
                        }

                        // Si se van a controlar tiempos para la primer cirugía entonces adicione, concepto a concepto, al array.
                        if(array_key_exists($procedimiento_liquidar_cod_dif, $arr_control_primera_cx_tiempos))
                        {
                            if(!array_key_exists($codigo_concepto, $arr_control_primera_cx_tiempos[$procedimiento_liquidar_cod_dif]))
                            {
                                $arr_control_primera_cx_tiempos[$procedimiento_liquidar_cod_dif][$codigo_concepto] = $codigo_concepto;
                            }
                        }

                        if($mueve_inventario != 'on')
                        {
                            $cont_pint = 0;
                            // Verifica si aplica un porcentaje diferente para el concepto por efectos de cirugías múltiples.
                            $porcentaje_cxMult = porcentajeCirugiaMultiple($concepto_cod_ppal, $arr_porcentajes);

                            // if($esMultipleEspecialidadDifVia
                            //     && $concepto_cod_ppal == $conceptoRepetirPorcentajeMultiple
                            //     && array_key_exists($wcodigo_especialidad_orden, $arrRepetiblePorEspecialidad)
                            //     && !array_key_exists($concepto_cod_ppal, $arrRepetiblePorEspecialidad[$wcodigo_especialidad_orden]))
                            // {
                            //     //Si es multiple cirugía diferente especialidad y diferente via y es concepto y porcentaje repetible entonces
                            //     //modifique el porcentaje repetible por el porcentaje inicial
                            //     $porcentaje_cxMult = $porcentajeRepetible;

                            //     // Solo se puede repetir ese porcentaje una vez por la primer vez que se encuentre ese concepto para cada especialidad.
                            //     $arrRepetiblePorEspecialidad[$wcodigo_especialidad_orden][$concepto_cod_ppal] = $concepto_cod_ppal;
                            // }

                            // $arr_valor_cobro = Array(
                            //         [wexiste] => 0
                            //         [wvaltar] => 7060.00
                            //         [wexidev] =>
                            //         [error] =>
                            //         [aprovechamiento] => off
                            //         [wtipfac] => UVR)
                            $cobro_procedimiento = (!empty($codigo_equipo_examen)) ? $codigo_equipo_examen: $cobro_procedimiento;
                            $arr_valor_cobro = array();
                            $arr_excepcionTarifaria = array("excepcionTarifaria"=>false);

                            // MODIFICACIONES PARA BUSCAR TARIFA POR TERCERO (GRUPO DE MEDICOS)
                            // * TENER EN CUENTA EL TERCERO POR DEFECTO PARA ENVIARLO DESDE LA PRIMER VEZ QUE SE LIQUIDE EL ACTO QUIRÚRGICO.
                            // * TENER EN CUENTA EL TERCERO QUE SE INGRESÓ EN LA INTERFAZ PARA ENVIARLO A LA FUNCIÓN QUE BUSCA LA TARÍFA AL MOMENTO DE RELIQUIDAR.
                            $codigo_wtercero_tarifa = '';
                            $disponibilidad_tercero = '*';
                            $grupoMedico_tercero    = '*';
                            // $codigo_especialidad_med = '';
                            // $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wespecialidad'];
                            if(codConceptoLegible($cobro_concepto) != $id_concepto_uso_equipos && codConceptoLegible($cobro_concepto) != $id_concepto_examenes)
                            {
                                if(array_key_exists($procedimiento_liquidar_cod_dif, $arr_datos_liquidados))
                                {
                                    if(array_key_exists($cobro_concepto, $arr_datos_liquidados[$procedimiento_liquidar_cod_dif]))
                                    {
                                        if($arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wtercero'] != '')
                                        {
                                            $codigo_wtercero_tarifa  = $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wtercero'];
                                            $disponibilidad_tercero  = $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wdisponibilidad'];
                                            // Si hay dualidad en el cuadro de turno (ahora grupoMedico) entonces verificar si seleccionaron alguno, si no hay ninguno seleccionado
                                            // entonces verificar si el campo grupoMedico tiene algún valor, el valor de este campo es seteado automáticamente por la función de terceros
                                            // que devuelve un valor de grupo médico si solo está en un único grupo médico.
                                            // wcuadroturno => Si hay dualidad
                                            // grupoMedico => Si no hay dualidad, si solo esta en un único grupo médico se escoge automáticamente.
                                            if($arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wcuadroturno'] != '')
                                            {
                                                $grupoMedico_tercero    = $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wcuadroturno'];
                                                if($grupoMedico_tercero=='')
                                                {
                                                    $grupoMedico_tercero = '*';
                                                }
                                            }
                                            elseif($arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['grupoMedico'] != '')
                                            {
                                                // Cuando el médico esta en un solo cuadro de turno, no hay es necesario escoger en el selec cuadro de turno sino que
                                                // el dato queda automaticamente en el campo grupoMedico
                                                $grupoMedico_tercero = $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['grupoMedico'];
                                            }

                                            valorDisponibleParaHomologar($disponibilidad_tercero);
                                        }

                                        if($arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wespecialidad'] != "")
                                        {
                                            $especialidad_procedimiento = $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wespecialidad'];
                                        }
                                    }
                                }

                                // Si no hay información de tercero entonces intenta buscar un tercero por defecto para este concepto y con ese código buscar una tarifa.
                                if(empty($codigo_wtercero_tarifa))
                                {
                                    $userCargo = explode('-',$_SESSION['user']);
                                    $wuse      = $userCargo[1];
                                    global $wbasedato, $wemp_pmla, $conex, $wuse;
                                    $arr_tercero_xdefecto = traer_terceros_por_defecto(codConceptoLegible($cobro_concepto));
                                    $codigo_wtercero_tarifa = $arr_tercero_xdefecto['codigo'];
                                    if(in_array($cobro_concepto, $erp_liq_cx_inactivar_cuadro_turno))
                                    {
                                        // Al inicializar como disponible se podría encontrar desde el principio el porcentaje para los terceros por defecto
                                        $disponibilidad_tercero = $codParticipacionMedicoDisponible;
                                        valorDisponibleParaHomologar($disponibilidad_tercero);
                                    }
                                }
                            }

                            if(!$es_paquete)
                            {
                                // [[++]] SI INDETIFICAR PLANTILLA POR RESPONSABLES SIN IMPORTAR SI ES SOAT+PREPA
                                //    Para identificar plantilla por cada responsable sería necesario hacer algo como esto, PROBAR BIEN Y CORREGIR
                                //    $arr_valor_cobro['sin_tarifa_no_grabar'] = "off"; // Es para marcar los cargos que realmente no tienen tarifa pero no se valida porque según el manual dice que se cobra el 0%, se marcan para que no den error al momento de grabar la liquidación.
                                //    if(array_key_exists($wcod_empresa, $arr_info_conf['empresa_plantilla']))
                                //    {
                                //        $arr_valor_cobro = datos_desde_procedimiento($cobro_procedimiento, $cobro_concepto, $wcentro_costo, $wcentro_costo, $wcod_empresa, $wfecha_cargo, $wtipo_ingreso, $especialidad_procedimiento, 'on', false, $codigo_wtercero_tarifa, $wfecha_cargo, $whora_cargo);
                                //        $arr_valor_cobro['sin_tarifa_no_grabar'] = "off";
                                //    }
                                //    else
                                //    {
                                //        $arr_valor_cobro["error"]=1;
                                //        $arr_valor_cobro['wvaltar']      = 0;
                                //        $arr_valor_cobro['wexiste']      = 0;
                                //        $arr_valor_cobro['wtipfac']      = "";
                                //        $arr_valor_cobro['error']        = 0;
                                //        $arr_valor_cobro['sin_tarifa_no_grabar'] = "on";
                                //    }

                                $arr_valor_cobro = datos_desde_procedimiento($cobro_procedimiento, codConceptoLegible($cobro_concepto), $wcentro_costo, $wcentro_costo, $wcod_empresa, $wfecha_cargo, $wtipo_ingreso, $especialidad_procedimiento, 'on', false, $codigo_wtercero_tarifa, $wfecha_cargo, $whora_cargo, $disponibilidad_tercero, $grupoMedico_tercero, $worgano);
                                $arr_valor_cobro['sin_tarifa_no_grabar'] = "off"; // Es para marcar los cargos que realmente no tienen tarifa pero no se valida porque según el manual dice que se cobra el 0%, se marcan para que no den error al momento de grabar la liquidación.
                                // Si la empresa que trae la plantilla es totalmente diferente al código de la empresa responsable que tiene el cargo entonces debe cobrarse el cargo
                                // es a la empresa que aparece en la plantilla, por ejemplo Si primer responsable SOAT y segundo Prepa. el concepto 0631 es de la plantilla de prepa.
                                // entonces no se le cobra al SOAT sino a la Prepa.
                                $plantillaDiferente = false;

                                // [[++]] SI INDETIFICAR PLANTILLA POR RESPONSABLES SIN IMPORTAR SI ES SOAT+PREPA .. Adicionar al IF
                                // $arr_entidades_responsables[$wcod_empresa]["simulacion_campos"]["Emppar"]=='on'
                                // && $arr_entidades_responsables[$wcod_empresa]["simulacion_campos"]["Emptar"]==$codTipoMpa
                                if($arr_valor_cobro['error'] == '1' && array_key_exists("empresa_plantilla", $arr_info_conf) && !array_key_exists($wcod_empresa, $arr_info_conf['empresa_plantilla']))
                                {
                                    // !!! ARREGLAR PARA QUE NO SE LO COBRE AL PRIMER RESPONSABLE
                                    // ¡¡¡
                                    $wcod_empresa_tmp = implode("",array_keys($arr_info_conf['empresa_plantilla']));

                                    // $guardar = "arr_entidades_responsables: ".print_r($arr_entidades_responsables,true)." wcod_empresa_tmp: ".$wcod_empresa_tmp." if(!array_key_exists($wcod_empresa, {$RESPONSABLE_VIRTUAL_PACIENTE["resp_inactivos"]})
                                    //     && array_key_exists($wcod_empresa_tmp, $arr_entidades_responsables)
                                    //     && {$arr_entidades_responsables[$wcod_empresa_tmp]["simulacion_campos"]["Emppar"]}!='on'
                                    //     && {$arr_entidades_responsables[$wcod_empresa_tmp]["simulacion_campos"]["Emptar"]}!=$codTipoMpa)".PHP_EOL.PHP_EOL;
                                    // seguimiento($guardar);
                                    // Cuando los responsables son SOAT-EPS, el sistema detecta que debe cobrar 0168 al soat incluso cuando es mayor
                                    // a grupo 13 porque el sistema tambien consulta si por UVR la eps debe pagar el cargo en caso tal que el soat se le agote
                                    // el saldo, pero se están intentando cobrar el 0168 al soat aún cuando todavía tiene saldo, en ese caso entonces se verifica
                                    // si soat esta en el array de responsables inactivos (por tope-saldo) y se verifica que la empresa siguiente no es prepagada
                                    // ni que aplica paralelo, en ese caso entonces ignorar los errores de tarifa del cargo y ademas marcar el cargo con valor cero como
                                    // sin tarifa y no permitido para grabar, para que al momento de grabar la liquidación no se genere ese cargo innecesario.
                                    /*
                                    [updt-72] Se cancela esta modificación porque cuando cambia de responsable deja de cobrar los cambios al siguiente responsable.
                                     if(!array_key_exists($wcod_empresa, $RESPONSABLE_VIRTUAL_PACIENTE["resp_inactivos"])
                                        && array_key_exists($wcod_empresa_tmp, $arr_entidades_responsables)
                                        && $arr_entidades_responsables[$wcod_empresa_tmp]["simulacion_campos"]["Emppar"]!='on'
                                        && $arr_entidades_responsables[$wcod_empresa_tmp]["simulacion_campos"]["Emptar"]!=$codTipoMpa)  //[updt-71]
                                    {
                                        $arr_valor_cobro['sin_tarifa_no_grabar'] = "on";
                                        $plantillaDiferente = true;
                                    }
                                    else*/
                                    {
                                        // $guardar = "arr_entidades_responsables: ".print_r($arr_entidades_responsables,true).PHP_EOL.PHP_EOL;
                                        // $guardar .= "RESPONSABLE_VIRTUAL_PACIENTE: ".print_r($RESPONSABLE_VIRTUAL_PACIENTE,true).PHP_EOL.PHP_EOL;
                                        // seguimiento($guardar);

                                        $cobrar_concepto_plantilla = true;
                                        // Si el responsable principal no esta entre los inactivos,
                                        // el código de empresa del cargo es el código del responsable principal
                                        // el responsable principal es prepagada
                                        // la empresa responsable de la plantilla esta entre las entidades responsables
                                        // la empresa de la plantilla no hace paralelo
                                        // la empresa de la plantilla no es prepagada (EPS o particular, ...) [updt-161109]
                                        if(!array_key_exists($wcod_empresa, $RESPONSABLE_VIRTUAL_PACIENTE["resp_inactivos"])
                                            && ($wcod_empresa == $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"])
                                            && in_array($arr_entidades_responsables[$wcod_empresa]["simulacion_campos"]["Emptem"],$arr_PARAMETROS_GENERALES["arr_codTipoMpa"])
                                            && array_key_exists($wcod_empresa_tmp, $arr_entidades_responsables)
                                            && ($arr_entidades_responsables[$wcod_empresa_tmp]["simulacion_campos"]["Emppar"]!='on')
                                            && !in_array($arr_entidades_responsables[$wcod_empresa_tmp]["simulacion_campos"]["Emptem"],$arr_PARAMETROS_GENERALES["arr_codTipoMpa"]))
                                        {
                                            $arr_valor_cobro['sin_tarifa_no_grabar'] = "on";
                                            // $plantillaDiferente = true;
                                            $cobrar_concepto_plantilla = false;
                                            // $guardar = "RESPONSABLE_VIRTUAL_PACIENTE: ".print_r($RESPONSABLE_VIRTUAL_PACIENTE,true).PHP_EOL.PHP_EOL;
                                            // seguimiento($guardar);
                                        }

                                        if(!array_key_exists($wcod_empresa_tmp, $RESPONSABLE_VIRTUAL_PACIENTE["resp_inactivos"]) && $cobrar_concepto_plantilla)
                                        {
                                            $wcod_empresa        = $wcod_empresa_tmp;
                                            $wtarifa_empresa     = $arr_entidades_responsables[$wcod_empresa]["simulacion_campos"]['Emptar'];
                                            $cobro_concepto      = "";
                                            $cobro_procedimiento = "";
                                            $codigo_rango_tiempo = "";
                                            $tiempoCxProcedimiento = ($procedimiento_NOPOS && $arr_datos_procedimiento["arr_encabezado"]["wtiempo_procedimiento"] != '') ? $arr_datos_procedimiento["arr_encabezado"]["wtiempo_procedimiento"] : $wtiempo_minutos_cx;
                                            // [2015-05-22] Ántes no existía esta función y se creó para poder utilizar la sección de código en diferentes momento debído al cambio de responsable que hace cambiar las condiciones en la forma de liquidar.
                                            $valor_rango_busco = conceptoProcedimientoCobroSegunTipoCobro($cobro_concepto, $cobro_procedimiento, $codigo_rango_tiempo, $tiempoCxProcedimiento, $wtipo_anestesia_cx, $arr_info_conf, $wcod_empresa,
                                                                                    $procedimiento_liquidar_cod_dif, $codigo_concepto, $id_concepto_uso_equipos, $id_concepto_examenes, $concepto_recuperacion_erp, $es_concepto_extra, $wtiempo_uso_minutos, $wtiempo_sala_recuperarcion);
											
											$valor_rango_busco = "3|".$valor_rango_busco;
											
											$arr_valor_cobro = datos_desde_procedimiento($cobro_procedimiento, codConceptoLegible($cobro_concepto), $wcentro_costo, $wcentro_costo, $wcod_empresa, $wfecha_cargo, $wtipo_ingreso, $especialidad_procedimiento, 'on', false, $codigo_wtercero_tarifa, $wfecha_cargo, $whora_cargo, $disponibilidad_tercero, $grupoMedico_tercero, $worgano);
                                            $arr_valor_cobro['sin_tarifa_no_grabar'] = "off"; // Es para marcar los cargos que realmente no tienen tarifa pero no se valida porque según el manual dice que se cobra el 0%, se marcan para que no den error al momento de grabar la liquidación.

                                            // [updt-80] En esta sección se consulta si para el responsable de la plantilla se debe redondear o no el valor a cobrar.
                                            $id_cx_multiplesPrincipal      = $id_cx_multiples; // Se debe seguir conservando el id de cirugías múltiples principal y no cambiarlo nuevamente al llamar la función de porcentaje múltiples, si más adelante se detecta que tambien debe ser necesario afectar el id original puede hacerse.
                                            $arr_parametros_extraTemp      = array();
                                            $tipoEmpresaPlantillaTmp       = (array_key_exists($wcod_empresa, $arr_entidades_responsables)) ? $arr_entidades_responsables[$wcod_empresa]["simulacion_campos"]['Emptem'] : '';
                                            $tipo_porcentaje = ($es_paquete) ? 'pqte': 'actividad';
                                            $arr_porcentajes_multiplesTemp = crearArrayPorcentajesMultiples($conex, $wbasedato, $tipo_porcentaje, $tipoEmpresaPlantillaTmp, $wcod_empresa, $wpolitraumatizado, $CX_numero_vias, $CX_numero_especialidades, $TIP_POS, $arr_parametros_extraTemp);
                                            $wredondear_centena            = ($arr_parametros_extraTemp['wredondear_centena'] == 'on') ? true: false; // Si para la empresa que ha en la plantilla debe redondear o no el cargo que se le va a cobrar
                                            $id_cx_multiples               = $id_cx_multiplesPrincipal;

                                            // $guardar = "wredondear_centena".print_r($wredondear_centena,true).PHP_EOL;
                                            // $guardar = "arr_valor_cobro".print_r($arr_valor_cobro,true).PHP_EOL;
                                            // $guardar = "datos_desde_procedimiento($cobro_procedimiento, $cobro_concepto, $wcentro_costo, $wcentro_costo, $wcod_empresa, $wfecha_cargo, $wtipo_ingreso, $especialidad_procedimiento, 'on', false, $codigo_wtercero_tarifa, $wfecha_cargo, $whora_cargo);".PHP_EOL.PHP_EOL;
                                            // seguimiento($guardar);
                                            // Se hace este paso adicional porque por ejemplo si se tiene el caso de dos responsables SOAT - Prepagada, la plantilla va a traer el concepto
                                            // 0631 que es solo de prepagada, entonces para el SOAT va a salir error de tarifa, entonces con este condicional se verifica que si hay error de tarifa
                                            // pero el concepto de plantilla no es de la misma empresa responsable del cargo entonces no valíde tarifa.
                                            // $no_validar_tarifa = true;
                                        }
                                        else
                                        {
                                            $plantillaDiferente = true;//Significa que es un concepto que para el responsable principal no esta en su plantilla, por tanto el error de no tarifa se debe ignorar.
                                        }
                                    }
                                }
                                /*
                                [updt-72]
                                elseif(array_key_exists("empresa_plantilla", $arr_info_conf) && !array_key_exists($wcod_empresa, $arr_info_conf['empresa_plantilla']))
                                {
                                    // $arr_valor_cobro['sin_tarifa_no_grabar'] = "on";
                                    $plantillaDiferente = true; //[updt-71]
                                }*/
                                $codigo_wtercero_excep = $codigo_wtercero_tarifa;
                                $cobro_concepto_excep  = $cobro_concepto;
                                $wcod_empresa_excep    = $wcod_empresa;
                                if($modifica_valor == 'S')
                                {
                                    /*if(array_key_exists($procedimiento_liquidar_cod_dif, $arr_datos_liquidados)
                                        && array_key_exists($cobro_concepto, $arr_datos_liquidados[$procedimiento_liquidar_cod_dif]))
                                    {
                                        $codigo_wtercero_excep = $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wtercero'];
                                        // $cobro_concepto_excep  = $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wespecialidad'];
                                        $cobro_concepto_excep  = $cobro_concepto;
                                    }*/

                                    if($codigo_wtercero_excep != '')
                                    {
                                        $arr_excepcionTarifaria = medicoExcepcionTarifaria($conex, $wemp_pmla, $wbasedato, $codigo_wtercero_excep, codConceptoLegible($cobro_concepto_excep), $wcod_empresa_excep, $cobro_procedimiento);
                                    }
                                }
                                // $guardar = print_r($arr_tarifas_modifican_valor_erp,true).PHP_EOL;
                                // seguimiento($guardar);
                                // Si el concepto permite modificar o escribir un valor y si no se ha encontrado una tarífa definida para el concepto
                                // entonces puede retomar el valor que antes puedan haber digitado, si no hay valor digitado entonces el valor será vacío
                                if  ($modifica_valor == 'S' && ($arr_valor_cobro['error'] == '1'
                                        || array_key_exists($RESPONSABLE_VIRTUAL_PACIENTE["Ingtar"], $arr_tarifas_modifican_valor_erp)
                                        || $arr_excepcionTarifaria["excepcionTarifaria"])
                                    )
                                {
                                    $wtipfac = "_INDETERMINADO_";

                                    if(array_key_exists($codigo_concepto, $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]["configuracion_liquidar"]))
                                    {
                                        $wtipfac = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]["configuracion_liquidar"][$codigo_concepto]["procedimiento_tarifa"];
                                    }

                                    $wvaltar = '';
                                    if(array_key_exists($procedimiento_liquidar_cod_dif, $arr_datos_liquidados)
                                        && array_key_exists($cobro_concepto, $arr_datos_liquidados[$procedimiento_liquidar_cod_dif]))
                                    {
                                        if(array_key_exists("wvalor_digitado", $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]))
                                        {
                                            $wvaltar = $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wvalor_digitado'];
                                        }
                                        else
                                        {
                                            $wvaltar = $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wvalor_final'];
                                        }
                                    }

                                    // NO DEBE INGRESAR A ESTE IF CUANDO SE CAMBIO EL VALOR A COBRAR A CAUSA DE UNA EXCEPCIÓN TARIFARIA
                                    // PORQUE ES UN CASO ESPECIAL EN EL QUE AL HABER TARIFA, EL MÉDICO PUEDE CONTRATAR UN VALOR DIFERENTE.
                                    // ENTONCES NO SE DEBE INTERPRETAR COMO UN ERROR DE TARIFA O FALTA DE TARIFA.
                                    if(!$arr_excepcionTarifaria["excepcionTarifaria"])
                                    {
                                        $arr_valor_cobro['wvaltar']      = ($arr_valor_cobro['error'] == '0' && ($arr_valor_cobro['wvaltar']*1) > 0) ? $arr_valor_cobro['wvaltar'] : $wvaltar;
                                        $arr_valor_cobro['wexiste']      = 0;
                                        $arr_valor_cobro['wtipfac']      = $wtipfac;
                                        $arr_valor_cobro['error']        = 0;
                                        $arr_valor_cobro['error_tarifa'] = 1;
                                        if($modifica_valor == 'S' && array_key_exists($RESPONSABLE_VIRTUAL_PACIENTE["Ingtar"], $arr_tarifas_modifican_valor_erp))
                                        {
                                            $arr_valor_cobro['error_tarifa'] = 0;
                                        }

                                        if($porcentaje_cxMult == 0 || $no_validar_tarifa || $plantillaDiferente)
                                        {
                                            $arr_valor_cobro['error_tarifa'] = 0;
                                            $arr_valor_cobro['wvaltar']      = 0; // Cuando hay error de tarifa pero el manual de cx dice que se debe cobrar cero por ese concepto entonces se asume como tarifa cero.
                                            // if($porcentaje_cxMult == 0)
                                            {
                                                $arr_valor_cobro['sin_tarifa_no_grabar'] = "on";
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if(!array_key_exists($codigo_wtercero_excep, $arr_control_excepcionTarifaria))
                                        {
                                            $arr_valor_cobro['wvaltar'] = $wvaltar;
                                            $arr_control_excepcionTarifaria[$codigo_wtercero_excep] = array(   "wtercero"             => $codigo_wtercero_excep,
                                                                                                                "wconcepto"            => $cobro_concepto_excep,
                                                                                                                "wempresa_responsable" => $wcod_empresa_excep,
                                                                                                                "excepcionTarifaria"   => $arr_excepcionTarifaria,
                                                                                                                "numero_cargo"         => 0);
                                                                                                                // al momento de pintar la liquidación solo se debe pedir o modificar valor para el primer cargo del médico
                                                                                                                // la variable "numero_cargo" permitirá controlar ese comportamiento, si el contador el mayor a 1 entonces no
                                                                                                                // se permitirá modificar valor y se cobrará cero para los siquientes cargos del mismo médico.
                                            if(!array_key_exists($codigo_wtercero_excep, $data["excepcionTarifaria"]))
                                            {
                                                $data["excepcionTarifaria"][$codigo_wtercero_excep] = $arr_control_excepcionTarifaria;
                                            }
                                        }
                                        else
                                        {
                                            $arr_valor_cobro['wvaltar'] = 0; //SOLO SE PERMITE COBRAR Y MODIFICAR EL PRIMER CARGO PARA CADA MÉDICO, LOS DEMÁS CARGOS PARA EL MÉDICO SERÁN CERO Y NO MODIFICABLE
                                        }
                                    }
                                }

                                if(( ($arr_valor_cobro['error']*1) == 1 && $porcentaje_cxMult == 0) || $no_validar_tarifa || $plantillaDiferente)
                                {
                                    $wtipfac_excep = "_INDETERMINADO_";
                                    if(array_key_exists($codigo_concepto, $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]["configuracion_liquidar"]))
                                    {
                                        $wtipfac_excep = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]["configuracion_liquidar"][$codigo_concepto]["procedimiento_tarifa"];
                                    }

                                    /*$wvaltar_excep = '';
                                    if(array_key_exists($procedimiento_liquidar_cod_dif, $arr_datos_liquidados)
                                        && array_key_exists($cobro_concepto, $arr_datos_liquidados[$procedimiento_liquidar_cod_dif]))
                                    {
                                        if(array_key_exists("wvalor_digitado", $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]))
                                        {
                                            $wvaltar_excep = $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wvalor_digitado'];
                                        }
                                        else
                                        {
                                            $wvaltar_excep = $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$cobro_concepto]['wvalor_final'];
                                        }
                                    }*/

                                    // $arr_valor_cobro['wvaltar']      = $wvaltar_excep;
                                    $arr_valor_cobro['wexiste']      = 0;
                                    $arr_valor_cobro['wtipfac']      = $wtipfac_excep;
                                    $arr_valor_cobro['error']        = 0;

                                    $arr_valor_cobro['error_tarifa'] = 0;
                                    $arr_valor_cobro['wvaltar']      = 0; // Cuando hay error de tarifa pero el manual de cx dice que se debe cobrar cero por ese concepto entonces se asume como tarifa cero.
                                    if( (($arr_valor_cobro['error']*1) == 1 && $porcentaje_cxMult == 0) || $no_validar_tarifa || $plantillaDiferente)
                                    {
                                        $arr_valor_cobro['sin_tarifa_no_grabar'] = "on";
                                    }
                                }

                                if($porcentaje_cxMult == 0 || $no_validar_tarifa || $plantillaDiferente)
                                {
                                    $facturable_init = "N";
                                    $arr_valor_cobro['error']        = 0;
                                    $arr_valor_cobro['error_tarifa'] = 0;
                                    if($porcentaje_cxMult == 0)
                                    {
                                        $wcondicion_restriccion = "Restricción manuales, porcentaje de cobro 0%";
                                    }
                                    elseif($no_validar_tarifa)
                                    {
                                        //Validado más atrás, restricción por límite de número de puntos.
                                    }
                                    elseif($plantillaDiferente)
                                    {
                                        $wcondicion_restriccion = "Por cambio de responsable este concepto ya no corresponde a la plantilla del siguiente responsable.";
                                    }
                                }

                                if($modifica_valor != 'S' && ($arr_valor_cobro['error']*1) == 1)
                                {
                                    // Identificar los cargos que no tienen tarifa para mostrarlos en pantalla y no continuar con la liquidación hasta crear las tarifas
                                    // faltantes en el maestro de tarifas.
                                    if(!array_key_exists($procedimiento_liquidar_cod_dif, $cargosSinTarifasConceptos))
                                    {
                                        $explode_dif_proced = explode("_", $procedimiento_liquidar_cod_dif);
                                        $procedimiento_sin_posicion_org = $procedimiento_liquidar_cod_dif;

                                        $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif] = array("info_procedimiento"=>array(),"lista_cargos"=>array());
                                        $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["info_procedimiento"]["procedimiento_liquidado_cod"] = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]["codigo"];
                                        $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["info_procedimiento"]["procedimiento_liquidado_nom"] = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]["nombre"];
                                        $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["info_procedimiento"]["modalidad_facturacion"]       = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]["modalidad_facturacion"];
                                    }
                                    if(!array_key_exists($concepto_cod_ppal, $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"]))
                                    {
                                        $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal] = array();
                                    }
                                    //datos_desde_procedimiento($cobro_procedimiento, $cobro_concepto, $wcentro_costo, $wcentro_costo, $wcod_empresa, $wfecha_cargo, $wtipo_ingreso, $especialidad_procedimiento, 'on', false, $codigo_wtercero_tarifa, $wfecha_cargo, $whora_cargo);

                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["cobro_procedimiento"]        = $cobro_procedimiento;
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["cobro_concepto_cod"]         = codConceptoLegible($cobro_concepto);
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["cobro_concepto_nom"]         = $arr_conceptos_nombres[codConceptoLegible($cobro_concepto)];
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["wcentro_costo"]              = $wcentro_costo;
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["wcod_empresa"]               = $wcod_empresa;
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["wfecha_cargo"]               = $wfecha_cargo;
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["whora_cargo"]                = $whora_cargo;
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["wtipo_ingreso"]              = $wtipo_ingreso;
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["wtipo_ingreso_nom"]          = $wtipo_ingreso_nom;
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["especialidad_procedimiento"] = $especialidad_procedimiento;
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["codigo_wtercero_tarifa"]     = $codigo_wtercero_tarifa;
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["responsable_tarifa"]         = $wtarifa_empresa;
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["wservicio_graba"]            = $wcentro_costo;
                                    $cargosSinTarifasConceptos[$procedimiento_liquidar_cod_dif]["lista_cargos"][$concepto_cod_ppal]["wserv_ingreso"]              = $wser;
                                }
                            }
                            else
                            {
                                $arr_valor_cobro['sin_tarifa_no_grabar'] = "off";
                                $arr_valor_cobro['wvaltar'] = $arr_info_conf["wvaltar"];
                                if(!empty($codigo_equipo_examen))
                                {
                                    $arr_valor_cobro['wvaltar'] = $arr_info_equipo_examen["valor_tarifa"];// La tarifa está asociada a cada equípo o exámen.
                                }

                                $arr_valor_cobro['wexiste'] = 0;
                                $arr_valor_cobro['wtipfac'] = TIPO_FACTURACION_PAQUETE;
                                $arr_valor_cobro['error']   = 0;
                            }

                            if(!array_key_exists("error_tarifa", $arr_valor_cobro))
                            {
                                $arr_valor_cobro['error_tarifa'] = 0;
                            }

                            // $arr_valor_cobro['wvaltar'] = 0 si solo se debe cobrar para el primer procedimiento, para el resto no se debe cobrar.
                            // Si se requieren tiempos de uso, recuperación, cirugía, entonces verifique si no es la primer cirugía entonces cobre valor cero (0).
                            // [updt-68] Las prepagadas generalmente se liquidan por tiempo, en ese sentido entonces se cobran los conceptos por tiempo del primer procedimiento
                            //      y el resto de conceptos de los siguientes procedimientos no se cobra pero se hace la modificación para que los conceptos adicionales
                            //      a la plantilla ($es_concepto_extra) SI se cobren y se liquiden según como dice el manual en sus porcentajes, si el concepto existe en el manual.
                            if(!$es_paquete && $cx_multiples_requiere_tiempos == 'on'
                                && !array_key_exists($procedimiento_liquidar_cod_dif, $arr_control_primera_cx_tiempos)
                                && !$es_concepto_extra
                                //&& !array_key_exists($codigo_concepto, $arr_control_primera_cx_tiempos[$procedimiento_liquidar_cod_dif])
                               )
                            {
                                $arr_valor_cobro['wvaltar'] = 0; // Si es multiple cirugía solo se cobra el valor de la primer cirugía, el resto no se cobra.
                                $wcondicion_restriccion = 'Restricción, liquidación por tiempo, se cobra la cirugía mayor.';
                            }

                            $concepto_control_porcentaje_cx_multiple = $concepto_cod_ppal; // Se usará en validacionTopesyParalelosERP
                            $arr_valor_cobro['wvaltar'] = (int)$arr_valor_cobro['wvaltar'];
							$valor_tarifa  = ($arr_valor_cobro['wvaltar'])*1;
                            $valor_final = ($porcentaje_cxMult < 100) ? (($porcentaje_cxMult * $valor_tarifa)/100) : $valor_tarifa;
                            $valor_final = ($porcentaje_cxMult == 0) ? 0 : $valor_final; // Este valor se guarda en el array de liquidación listo para enviar a la función de GrabarCargos, se asigna a una variable de simulación.

                            $valor_final_simulado = $valor_final;

                            // $guardar = "concepto_cod_ppal: ".print_r($concepto_cod_ppal,true).PHP_EOL;
                            // $guardar = print_r($porcentaje_cxMult,true).PHP_EOL;
                            // $guardar = print_r($RESPONSABLE_VIRTUAL_PACIENTE,true).PHP_EOL;
                            // $guardar = "concepto_cod_ppal: $concepto_cod_ppal, arr_valor_cobro: ".print_r($arr_valor_cobro,true).PHP_EOL;
                            // seguimiento($guardar);

                            $tipo_facturacion = '';
                            // INFORMA, DICE QUE SI TIENE O NO TARIFA
                            $wexiste          = $arr_valor_cobro['wexiste'];

                            $datosGrabarCargos = array();
                            $info_tarifa = '';

                            if(!array_key_exists($procedimiento_liquidar_cod_dif, $arr_CargosGrabadosResponsables))
                            {
                                $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif] = array();
                            }
                            if(!array_key_exists($concepto_cod_ppal, $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif]))
                            {
                                $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal] = array();
                            }

                            $CARGO_procedimiento = $procedimiento_liquidar_cod_dif; // !
                            $CARGO_wprocod       = $procedimiento_liquidar_cod_dif; // !
                            $CARGO_wpronom       = trim($arr_datos_procedimiento['nombre']); // !

                            if(!empty($codigo_equipo_examen))
                            {
                                $CARGO_procedimiento = $arr_info_equipo_examen["codigo"];
                                $CARGO_wprocod       = $arr_info_equipo_examen["codigo"];
                                $CARGO_wpronom       = trim($arr_info_equipo_examen["nombre"]);
                            }
                            elseif($es_paquete)
                            {
                                $CARGO_wprocod       = $arr_info_conf["procedimiento_cod"];
                                $CARGO_wpronom       = trim($arr_info_conf["procedimiento_nom"]);
                            }

                            $datos_default = array( "wnomcon"           => $arr_lista_conceptos[$concepto_cod_ppal],
                                                    "wcantidad"                  => 1,
                                                    "wprocedimiento"             => $CARGO_procedimiento,
                                                    "wprocedimiento_nombre"      => $CARGO_wpronom,
                                                    "wcodcon"                    => $cobro_concepto,
                                                    "wtercero"                   => "",
                                                    "wtercero_nombre"            => "",
                                                    "wespecialidad"              => "",
                                                    "wespecialidad_nombre"       => "",
                                                    "wporcentaje"                => 0,
                                                    "wtipo_facturacion"          => "",
                                                    "wvalor_final"               => 0,
                                                    "wfacturable"                => $facturable_init,                             // "wfacturable"                => $facturable_insumo,//// FALTA DEFINIRLO SEGÚN LOS LIMITES DE UVRS Y POLITICAS CON LA EMPRESA SI CUBRE O NO CUBRE
                                                    "wgrabar"                    => 'on',
                                                                                 // "wbaseliquidacion"           => $wbaseliquidacion,
                                                    "wvalor"                     => "",
                                                    "wturno_cirugia"             => $arr_datos_procedimiento["wturno_cirugia"],
                                                    "wtipo_anestesia_cx"         => $arr_datos_procedimiento["wtipo_anestesia_cx"],
                                                    "wtiempo_sala_recuperarcion" => $arr_datos_procedimiento["wtiempo_sala_recuperarcion"],
                                                    "wtiempo_uso_minutos"        => $arr_datos_procedimiento["wtiempo_uso_minutos"],
                                                    "wtiempo_minutos_cx"         => $arr_datos_procedimiento["wtiempo_minutos_cx"],
                                                    "wexiste"                    => $arr_valor_cobro["wexiste"],
                                                                                 // "wserv"                      => $gru_servicio,
                                                    "mueve_inventario"           => $mueve_inventario,
                                                                                 // "wes_medicamento"            => $row["Artesm"],
                                                                                 // "id_insumo"                  => $row["id_insumo"],
                                                    "porcentaje_cxMult_CARGO"          => $porcentaje_cxMult,
                                                    "valor_final_original"       => 0,
                                                    "wvaltarReco"                => 0,
                                                    "wvaltarExce"                => 0,
                                                    "wvalorTarifaBase"           => 0,
                                                    "WTIENE_TARIFA"              => "off",
                                                    "cargo_examen_o_equipo"      => ((!empty($codigo_equipo_examen)) ? 'on': 'off'),
                                                    "examen_equipo_codigo"       => $arr_info_equipo_examen["codigo"],
                                                    "examen_equipo_nombre"       => $arr_info_equipo_examen["nombre"]);

                            // Si no hay tarifa entonces guardarlo en el array de cargos sin tarifas, pendientes por corregir
                            // y se guardarán temporalmente en una tabla desde donde se mostrarán en el monitor de revisión.
                            if(array_key_exists("error_tarifa", $arr_valor_cobro) && ($arr_valor_cobro["error_tarifa"]*1) == 1)
                            {
                                // Agregar al array de cargos sin tarifa
                                $arr_cargos_sinTarifaModifValor[] = array("whistoria"      => $whistoria,
                                                                "wingreso"                 => $wing,
                                                                "wserv_ingreso"            => $wser,
                                                                "wempresa_responsable"     => $wcod_empresa,
                                                                "wservicio_graba"          => $wcentro_costo,
                                                                "wconcepto"                => codConceptoLegible($cobro_concepto),
                                                                "wprocedimiento"           => $cobro_procedimiento,
                                                                "wtercero"                 => $codigo_wtercero_tarifa,
                                                                "wespecialidad"            => $especialidad_procedimiento,
                                                                "wmodalidad"               => $arr_procedimientos_liquidar[$procedimiento_liquidar_cod_dif]["configuracion_liquidar"][$codigo_concepto]["procedimiento_tarifa"],
                                                                "wvalor"                   => $arr_valor_cobro['wvaltar'],
                                                                "wtarifa_empresa"          => $wtarifa_empresa,
                                                                "wes_insumo"               => "",
                                                                "id_encabezado_sin_tarifa" => '',
                                                                "id_detalle_sin_tarifa"    => ''
                                                                );
                            }

                            if($arr_valor_cobro['error'] == 1)
                            {
                                if($concepto_cod_ppal == $id_concepto_uso_equipos || $concepto_cod_ppal== $id_concepto_examenes)
                                {
                                    // $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal][$wcod_empresa]["lista_examen_equipo"] = array();

                                    if(!array_key_exists($CARGO_procedimiento, $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal]))
                                    {
                                        $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal][$CARGO_procedimiento] = array();
                                    }

                                    if(!array_key_exists($wcod_empresa, $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal][$CARGO_procedimiento]))
                                    {
                                        $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal][$CARGO_procedimiento][$wcod_empresa] = array();
                                    }
                                        $arr_CargosGrabadosResponsables[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal][$CARGO_procedimiento][$wcod_empresa] = $datos_default;
                                }
                            }
                            else
                            {
                                $tipo_facturacion = $arr_valor_cobro['wtipfac'];
                                // Validar terceros, topes, saldos
                                // if(strtoupper($wfacturable) == 'S' && strtoupper($wrecexc) == 'R')
                                {
                                    // RESPONSABLE_VIRTUAL_PACIENTE Ingcem Ingent Ingtar
                                    $explode_dif_proced = explode("_", $procedimiento_liquidar_cod_dif);
                                    $procedimiento_sin_posicion_org = $procedimiento_liquidar_cod_dif;

                                    // Es procedimiento bilateral y se diferencia porque tiene concatenada una posición
                                    $guardar_temp_posicion = "";
                                    if(count($explode_dif_proced) > 1)
                                    {
                                        $procedimiento_sin_posicion_org = $explode_dif_proced[0];
                                        $guardar_temp_posicion          = $explode_dif_proced[1];
                                    }

                                    if($CARGO_wprocod == $procedimiento_liquidar_cod_dif)
                                    {
                                        $CARGO_procedimiento = $procedimiento_sin_posicion_org;
                                        $CARGO_wprocod       = $procedimiento_sin_posicion_org;
                                    }

                                    // codigo_rango_tiempo vacío para diferenciarlo de un código que es por rango de tiempo.
                                    // Se colocó esta parte principalmente porque no estaba dejando en los conceptos por hora, el procedimiento
                                    // que le colocan específicamente en la plantilla, estaba dejando el procedimiento de la cirugía y no el de la plantilla. Ej, 0023 para tarifa 23
                                    if((!$es_paquete) && $codigo_rango_tiempo == '' && $CARGO_wprocod != $cobro_procedimiento)
                                    {
                                        $CARGO_wprocod = $cobro_procedimiento;
                                    }

                                    // Este condicional se encarga de validar si en la interface se desmarcó el check de grabar, entonces no debe tener
                                    // en cuenta ese valor para descontarlo del saldo del responsable durante la sumulación.
                                    if( isset($arr_datos_liquidados)
                                        && array_key_exists($procedimiento_liquidar_cod_dif, $arr_datos_liquidados)
                                        && array_key_exists($concepto_cod_ppal, $arr_datos_liquidados[$procedimiento_liquidar_cod_dif])
                                      )
                                    {
                                        if(array_key_exists($arr_info_equipo_examen["codigo"], $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal])
                                            && $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal][$arr_info_equipo_examen["codigo"]]['wgrabar'] == 'off')
                                        {
                                            $facturable_init = 'N';
                                        }
                                        elseif(array_key_exists($arr_info_equipo_examen["codigo"], $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal])
                                            && $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal][$arr_info_equipo_examen["codigo"]]['wgrabar'] == 'on'
                                            // && $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal][$arr_info_equipo_examen["codigo"]]['wfacturable'] == 'S'
                                        )
                                        {
                                            // Había un problema cuando se liquidaban varios equipos, si se descarcaba uno como no grabar, todos los equipo de la lista quedaban como
                                            // no facturables, se adiciona entonces esta validación para cada equipo que indica que si está chequeado grabar entonces por defecto
                                            // coloque el cargo de equipo como si facturable.
                                            $facturable_init = 'S';
                                        }
                                        elseif($concepto_cod_ppal != $id_concepto_uso_equipos && $concepto_cod_ppal != $id_concepto_examenes
                                                && $arr_datos_liquidados[$procedimiento_liquidar_cod_dif][$concepto_cod_ppal]['wgrabar'] == 'off')
                                        {
                                            // Se adicionó validación del concepto para confirmar que si es concepto de equipos y exámenes
                                            // no complete este condicional porque la posición "wgrabar" no existirá en ese nivel.
                                            $facturable_init = 'N';
                                        }
                                    }

                                    $cod_pro_paqte = $arr_datos_procedimiento['configuracion_liquidar'][$codigo_concepto]['procedimiento_cod'];
                                    $wcantidad_concepto_pqte = $arr_datos_procedimiento["configuracion_liquidar"][$codigo_concepto]["cantidad_concepto"];

                                    $wfecha = $fecha_actual;
                                    $whora  = $hora_actual;
                                    $wcantidad = ($es_paquete) ? $wcantidad_concepto_pqte:1;

                                    $wtarifa_unitaria_mx           = $valor_tarifa; // El valor que existe en matrix como tarífa
                                    $wtarifa_unit_recalculado      = $valor_tarifa; // Si hay redondeo, es el valor modificado de la tarifa, ajustada para que sea el 100% de la tarifa unitaria con el porcentaje de descuento según manual de cirugía
                                    $wtarifa_porcentaje_redondeado = $valor_final;  // Es la tarifa con el porcentaje del manual de cirugía y redondeado de centenas.
                                    if($wredondear_centena && $porcentaje_cxMult > 0)
                                    {
                                        // $porcentaje_cxMult = ($porcentaje_cxMult == 0) ? 100 : $porcentaje_cxMult;
                                        $wtarifa_porcentaje_redondeado = redondeoFn($wtarifa_porcentaje_redondeado, $wredondear_centena, "centena");
                                        $wtarifa_unit_recalculado      = (100 * $wtarifa_porcentaje_redondeado) / $porcentaje_cxMult;
                                        $valor_final                   = $wtarifa_porcentaje_redondeado;
                                        $valor_final_simulado          = $wtarifa_porcentaje_redondeado;
                                    }

                                    $datosGrabarCargos['valor_final_original']       = $valor_final;
                                    $datosGrabarCargos['wtarifa_unitaria_mx']        = $wtarifa_unitaria_mx;
                                    $datosGrabarCargos['wtarifa_unit_recalculado']   = $wtarifa_unit_recalculado;
                                    $datosGrabarCargos['wredondear_centena']         = $wredondear_centena;
                                    $datosGrabarCargos['porcentaje_cxMult_CARGO']    = $porcentaje_cxMult;
                                    $datosGrabarCargos['info_tarifa']                = '';
                                    $datosGrabarCargos['error_tarifa']               = $arr_valor_cobro['error_tarifa'];
                                    $datosGrabarCargos['sin_tarifa_no_grabar']       = $arr_valor_cobro['sin_tarifa_no_grabar'];
                                    $datosGrabarCargos['tarifa_empresa_cargo']       = $RESPONSABLE_VIRTUAL_PACIENTE['Ingtar'];
                                    $datosGrabarCargos['idTope']                     = '';
                                    $datosGrabarCargos['enParalelo']                 = 'off';
                                    $datosGrabarCargos['idParalelo']                 = '';
                                    $datosGrabarCargos['cargo_examen_o_equipo']      = ((!empty($codigo_equipo_examen)) ? 'on': 'off');
                                    $datosGrabarCargos['examen_equipo_codigo']       = $arr_info_equipo_examen["codigo"];
                                    $datosGrabarCargos['examen_equipo_nombre']       = $arr_info_equipo_examen["nombre"];
                                    $datosGrabarCargos['WTIENE_TARIFA']              = "on";

                                    $datosGrabarCargos['historia']                   = $whistoria;
                                    $datosGrabarCargos['ingreso']                    = $wing;
                                    $datosGrabarCargos['entidad']                    = $nitEmpresa;
                                    $datosGrabarCargos['cambio_responsable']         = $RESPONSABLE_VIRTUAL_PACIENTE['Ingcem'];

                                    $datosGrabarCargos['whistoria']                  = $whistoria;
                                    $datosGrabarCargos['wing']                       = $wing;
                                    $datosGrabarCargos['wno1']                       = $wno1;
                                    $datosGrabarCargos['wno2']                       = $wno2;
                                    $datosGrabarCargos['wap1']                       = $wap1;
                                    $datosGrabarCargos['wap2']                       = $wap2;
                                    $datosGrabarCargos['wdoc']                       = $wdoc;
                                    $datosGrabarCargos['wcodemp']                    = $wcod_empresa;
                                    $datosGrabarCargos['wnomemp']                    = $wnomemp_tal;
                                    $datosGrabarCargos['wser']                       = $wser;
                                    $datosGrabarCargos['wfecing']                    = $wfecing;
                                    $datosGrabarCargos['wtar']                       = $wtarifa_empresa;

                                    $datosGrabarCargos['concepto']                   = codConceptoLegible($concepto_cod_ppal);
                                    $datosGrabarCargos['wcodcon']                    = codConceptoLegible($concepto_cod_ppal);
                                    $datosGrabarCargos['wnomcon']                    = $arr_lista_conceptos[$concepto_cod_ppal];

                                    $datosGrabarCargos['procedimiento']              = $CARGO_procedimiento;
                                    $datosGrabarCargos['wprocod']                    = ($es_paquete) ? $cod_pro_paqte: $CARGO_wprocod;
                                    $datosGrabarCargos['wpronom']                    = $CARGO_wpronom;

                                    $datosGrabarCargos['wcodter']                    = $codigo_wtercero_tarifa;
                                    $datosGrabarCargos['wnomter']                    = "";

                                    $datosGrabarCargos['wvalorTarifaBase']           = $wtarifa_unit_recalculado;
                                    $datosGrabarCargos['wporter']                    = 0;
                                    $datosGrabarCargos['wcantidad']                  = $wcantidad;
                                    $datosGrabarCargos['wvaltar']                    = $wtarifa_unit_recalculado;
                                    $datosGrabarCargos['wrecexc']                    = 'R';
                                    $datosGrabarCargos['wfacturable']                = $facturable_init;
                                    $datosGrabarCargos['wcantidad_concepto_pqte']    = $wcantidad_concepto_pqte;

                                    $datosGrabarCargos['centroCostos']               = $wcentro_costo;
                                    $datosGrabarCargos['wcco']                       = $wcentro_costo;
                                    $datosGrabarCargos['wccogra']                    = $wcentro_costo;
                                    $datosGrabarCargos['wfeccar']                    = $wfecha_cargo;
                                    $datosGrabarCargos['whora_cargo']                = $whora_cargo;
                                    $datosGrabarCargos['wconinv']                    = $mueve_inventario;
                                    $datosGrabarCargos['wcodpaq']                    = ($es_paquete) ? $CARGO_wprocod:'';
                                    $datosGrabarCargos['wpaquete']                   = ($es_paquete) ? 'on': 'off';
                                    $datosGrabarCargos['wconabo']                    = '';
                                    $datosGrabarCargos['wdevol']                     = '';
                                    $datosGrabarCargos['waprovecha']                 = 'off';
                                    $datosGrabarCargos['wconmvto']                   = '';
                                    $datosGrabarCargos['wexiste']                    = $wexiste;
                                    $datosGrabarCargos['wbod']                       = $wbod;
                                    $datosGrabarCargos['wconser']                    = "H" ; //$arr_guardar['wserv']
                                    $datosGrabarCargos['wtipfac']                    = $tipo_facturacion;
                                    $datosGrabarCargos['wexidev']                    = 0;
                                    $datosGrabarCargos['wfecha']                     = $wfecha;
                                    $datosGrabarCargos['whora']                      = $whora;
                                    $datosGrabarCargos['wespecialidad']              = $especialidad_procedimiento; //
                                    $datosGrabarCargos['cobraHonorarios']            = "on";
                                    $datosGrabarCargos['wgraba_varios_terceros']     = false;
                                    $datosGrabarCargos['wcodcedula']                 = '';

                                    $datosGrabarCargos['tipoEmpresa']                = $tipoEmpresa;
                                    $datosGrabarCargos['tipoIngreso']                = ''; // Para evitar warnings en funciones
                                    $datosGrabarCargos['tipoPaciente']               = ''; // Para evitar warnings en funciones
                                    $datosGrabarCargos['warctar']                    = $arr_info_conf['tabla_valida_precios'];
                                    $datosGrabarCargos['wvaltarReco']                = 0; // Para evitar warnings en funciones
                                    $datosGrabarCargos['saldoTope']                  = ''; // Para evitar warnings en funciones
                                    $datosGrabarCargos['topeGeneral']                = ''; // Para evitar warnings en funciones

                                                                                     // Para no enviarlos como parámetros a la función.
                                    $datosGrabarCargos['wcod_empresa']               = $wcod_empresa;
                                    $datosGrabarCargos['wfecha_cargo']               = $wfecha_cargo;
                                    $datosGrabarCargos['cobro_concepto']             = $cobro_concepto;
                                    $datosGrabarCargos['procedimiento_liquidar_cod'] = $procedimiento_sin_posicion_org;
                                    $datosGrabarCargos['procedimiento_liquidar_nomb']= $arr_datos_procedimiento['nombre'];
                                    $datosGrabarCargos['wcentro_costo']              = $wcentro_costo;
                                    $datosGrabarCargos['nomCajero']                  = "";
                                    $datosGrabarCargos['wvaltarExce']                = 0;

                                    $datosGrabarCargos['wturno_cirugia']             = $arr_datos_procedimiento["wturno_cirugia"];
                                    $datosGrabarCargos['wtipo_anestesia_cx']         = $arr_datos_procedimiento["wtipo_anestesia_cx"];
                                    $datosGrabarCargos["wtiempo_sala_recuperarcion"] = $arr_datos_procedimiento["wtiempo_sala_recuperarcion"];
                                    $datosGrabarCargos["wtiempo_uso_minutos"]        = $arr_datos_procedimiento["wtiempo_uso_minutos"];
                                    $datosGrabarCargos["wtiempo_minutos_cx"]         = $arr_datos_procedimiento["wtiempo_minutos_cx"];

                                    $datosGrabarCargos["IdNoFacturables"]            = "";
                                    $datosGrabarCargos["codigo_especialidad"]        = "";
                                    $datosGrabarCargos["wespecialidad_nombre"]       = "";
                                    $datosGrabarCargos["wgrabar"]                    = "";
                                    $datosGrabarCargos['nitEmpresa']                 = $nitEmpresa;
                                    $datosGrabarCargos['id_insumo']                  = "";
                                    $datosGrabarCargos['estado_insumo_mx']           = "";
                                    $datosGrabarCargos["wbaseliquidacion"]           = $wbaseliquidacion;
                                    $datosGrabarCargos["arr_cambio_responsable"]     = $cambioResponsablePorFechaFin; // Puede llegar inicializado con los datos de cambio de responsable por superar la fecha de cobertura como responsable, esto indica al sistema que debe hacer el cambio de responsable.
                                    $datosGrabarCargos["arr_encabezado"]             = $arr_datos_procedimiento["arr_encabezado"];
                                    $datosGrabarCargos["wterunix"]                   = "";
                                    $datosGrabarCargos["grupoMedico"]                = $grupoMedico_tercero;
                                    $datosGrabarCargos["wprocedimiento_paqte"]       = $cod_pro_paqte;
                                    $datosGrabarCargos["valorActual"]                = (array_key_exists("valorActual", $arr_valor_cobro)) ? $arr_valor_cobro['valorActual'] : 0;
                                    $datosGrabarCargos["valorAnterior"]              = (array_key_exists("valorAnterior", $arr_valor_cobro)) ? $arr_valor_cobro['valorAnterior'] : 0;
                                    $datosGrabarCargos["fechaCambio"]                = (array_key_exists("fechaCambio", $arr_valor_cobro)) ? $arr_valor_cobro['fechaCambio'] : '';
                                    $datosGrabarCargos["wtar_cargo_POS"]             = (array_key_exists("wtar", $arr_valor_cobro)) ? $arr_valor_cobro['wtar'] : '';
                                    $datosGrabarCargos["wres_cargo_POS"]             = '';
                                    $datosGrabarCargos['codHomologar']               = "";
                                    $datosGrabarCargos['codRangoTiempo']             = $codigo_rango_tiempo;
                                    $datosGrabarCargos['valor_rango_busco']          = $valor_rango_busco;
                                    $datosGrabarCargos['estaEnTurno']                = $disponibilidad_tercero;
                                    $datosGrabarCargos['tabla_temp']                 = ($generar_temporal) ? $TABLA_TEMP_106: ""; //[updt-69]
                                    $datosGrabarCargos['id_cargo_temp']              = 0;
                                    $datosGrabarCargos['TIP_POS']                    = $TIP_POS;
                                    $datosGrabarCargos['wcondicion_restriccion']     = array();
                                    if($wcondicion_restriccion != '')
                                    {
                                        $datosGrabarCargos['wcondicion_restriccion'][]   = $wcondicion_restriccion;
                                    }
                                    // $datosGrabarCargos["ccoActualPac"]               = $ccoActualPac;
                                    $cambioResponsablePorFechaFin = array();

                                    if(array_key_exists("codHomologar", $arr_valor_cobro))
                                    {
                                        $datosGrabarCargos['codHomologar'] = $arr_valor_cobro['codHomologar'];
                                    }

                                    $datosGrabarCargos["es_insumo"]         = "off";

                                    // --> Si la empresa es particular esto se graba como excedente
                                    // Se comenta porque si la empresa es 01-particular, entonces el cargo si debe quedar grabado para la empresa particular
                                    // y no como excedente. Algo quedará como excedente pero por ejemplo cuando las condiciones de insumo dice que la empresa (diferente a particular)
                                    // no lo paga sino que se cobra como excedente.
                                    /*if($wcod_empresa == $codEmpParticular)
                                        $datosGrabarCargos['wrecexc'] = 'E';*/

                                    // --> Valor excedente
                                    if($datosGrabarCargos['wrecexc'] == 'E')
                                        $datosGrabarCargos['wvaltarExce'] = round($wcantidad*($valor_final_simulado*1));
                                    // --> Valor reconocido
                                    else
                                        $datosGrabarCargos['wvaltarReco'] = round($wcantidad*($valor_final_simulado*1));

                                    $userCargo = explode('-',$_SESSION['user']);
                                    $wuse      = $userCargo[1];
                                    global $wuse;
                                    // print_r($datosGrabarCargos);

                                    // --> Validar politicas
                                    $datosGrabarCargos['PermitirGrabar'] = true;
                                    $CargosAnexos   =   array();
                                    if(!$es_paquete)
                                    {
                                        ValidarGrabacion($datosGrabarCargos, $CargosAnexos, true);

                                        // Se debe buscar es por los datos del responsable del cargo y no del responsable principal, porque hay casos en que el cargo
                                        // a cobrar hacer parte de un paralelo entonces no estaría buscando o validando condiciones de la empresa paralela sino de la principal.
                                        $CodTipEmp = $arr_entidades_responsables[$datosGrabarCargos["wcod_empresa"]]["simulacion_campos"]['Emptem'];
                                        $CodTar    = $arr_entidades_responsables[$datosGrabarCargos["wcod_empresa"]]["simulacion_campos"]['Emptar'];
                                        $CodEnt    = $arr_entidades_responsables[$datosGrabarCargos["wcod_empresa"]]["simulacion_campos"]['Resnit'];

                                        // $CodTipEmp = $RESPONSABLE_VIRTUAL_PACIENTE['tipoEmpre']; //'*';
                                        // $CodTar = $RESPONSABLE_VIRTUAL_PACIENTE['Ingtar']; //'*';
                                        // $CodEnt = $RESPONSABLE_VIRTUAL_PACIENTE['Ingcem']; //'*';
                                        $CodNit = '*';
                                        $CodEsp = ($datosGrabarCargos['wespecialidad'] == '') ? '*': $datosGrabarCargos['wespecialidad'];
                                        $CodCco = $datosGrabarCargos['wcco'];
                                        if(!ValidarSiEsFacturable($datosGrabarCargos['wcodcon'], $datosGrabarCargos['wprocod'], $CodTipEmp, $CodTar, $CodNit, $datosGrabarCargos['wcodemp'], $CodEsp, $CodCco, $whistoria, $wing))
                                        {
                                            $datosGrabarCargos['wfacturable'] = 'N';
                                            $msj_pol = "Política, para toda empresa [*]".(($CodEsp=='*') ? ', toda especialidad [*]': ', Especialidad ['.$CodEsp.']').' y centro de costo ['.$CodCco.'] con estos datos de liquidación, el cargo es No facturable';
                                            $datosGrabarCargos['wcondicion_restriccion'][] = $msj_pol;
                                        }
                                    }
                                    $datosGrabarCargos['id_cargo_temp'] = insertarCargoTemporal($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106, $wuse, $datosGrabarCargos, $fecha_actual, $hora_actual);

                                    $datosGrabarCargos['procedimiento']              = $datosGrabarCargos['procedimiento'].((!empty($guardar_temp_posicion)) ? "_$guardar_temp_posicion": ""); // Se completa la llave que diferencia a los procedimientos de igual código p.e.   01102_ARRIBA,   01102_ABAJO, ...
                                    $datosGrabarCargos['wprocod']                    = $datosGrabarCargos['wprocod'].((!empty($guardar_temp_posicion)) ? "_$guardar_temp_posicion": ""); // Se completa la llave que diferencia a los procedimientos de igual código p.e.   01102_ARRIBA,   01102_ABAJO, ...
                                    $datosGrabarCargos['procedimiento_liquidar_cod'] = $datosGrabarCargos['procedimiento_liquidar_cod'].((!empty($guardar_temp_posicion)) ? "_$guardar_temp_posicion": ""); // Se completa la llave que diferencia a los procedimientos de igual código p.e.   01102_ARRIBA,   01102_ABAJO, ...
                                    if(isset($datosGrabarCargos['IdNoFacturables']))
                                    {
                                       // ActualizarCargoComoNoFacturable($datosGrabarCargos['IdNoFacturables']);
                                    }
                                    // if($datosGrabarCargos['PermitirGrabar'])
                                    // {
                                    //     SimularGrabarCargo($conex, $wemp_pmla, $wbasedato, $user_session, $datosGrabarCargos, $concepto_cod_ppal, $procedimiento_liquidar_cod_dif, $arr_cargos_req_autorizar);
                                    // }
                                    if($datosGrabarCargos['PermitirGrabar'])
                                    {
                                        // $datosGrabarCargos['procedimiento_liquidar_cod'] = $procedimiento_liquidar_cod_dif;
                                        SimularGrabarCargo($conex, $wemp_pmla, $wbasedato, $es_paquete, $user_session, $datosGrabarCargos, $concepto_cod_ppal, $procedimiento_liquidar_cod_dif, $arr_ContadorCxPorEspecialidad, $wcodigo_especialidad_orden, $esMultipleEspecialidadDifVia, $conceptoRepetirPorcentajeMultiple, $arr_info_conf, $arr_PARAMETROS_GENERALES, $arr_cargos_req_autorizar, $arr_requerir_autorizacion);
                                        if(count($CargosAnexos)>0)
                                        {
                                            foreach($CargosAnexos as $arr_variables_anexo)
                                            {
                                                $arr_variables_anexo['procedimiento']              = $arr_variables_anexo['procedimiento'].((!empty($guardar_temp_posicion)) ? "_$guardar_temp_posicion": ""); // Se completa la llave que diferencia a los procedimientos de igual código p.e.   01102_ARRIBA,   01102_ABAJO, ...
                                                $arr_variables_anexo['wprocod']                    = $arr_variables_anexo['wprocod'].((!empty($guardar_temp_posicion)) ? "_$guardar_temp_posicion": ""); // Se completa la llave que diferencia a los procedimientos de igual código p.e.   01102_ARRIBA,   01102_ABAJO, ...
                                                $arr_variables_anexo['procedimiento_liquidar_cod'] = $arr_variables_anexo['procedimiento_liquidar_cod'].((!empty($guardar_temp_posicion)) ? "_$guardar_temp_posicion": ""); // Se completa la llave que diferencia a los procedimientos de igual código p.e.   01102_ARRIBA,   01102_ABAJO, ...
                                                $arr_variables_anexo['tabla_temp']                 = ($generar_temporal) ? $TABLA_TEMP_106: "";
                                                $arr_variables_anexo['id_cargo_temp']              = insertarCargoTemporal($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106, $wuse, $arr_variables_anexo, $fecha_actual, $hora_actual);
                                                // $arr_variables_anexo
                                                SimularGrabarCargo($conex, $wemp_pmla, $wbasedato, $es_paquete, $user_session, $arr_variables_anexo, $concepto_cod_ppal, $procedimiento_liquidar_cod_dif, $arr_ContadorCxPorEspecialidad, $wcodigo_especialidad_orden, $esMultipleEspecialidadDifVia, $conceptoRepetirPorcentajeMultiple, $arr_info_conf, $arr_PARAMETROS_GENERALES, $arr_cargos_req_autorizar, $arr_requerir_autorizacion);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            //
                        }
                    }
                }
                else
                {
                    //
                }
            }

            // **********************************  BUSCAR Y SIMULAR INSUMOS ***********************************
            // **********************************  BUSCAR Y SIMULAR INSUMOS ***********************************
            // Despues de liquidar conceptos toma los datos del reponsable actual-virtual del paciente para seguir cobrando los insumos
            $wcod_empresa    = $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"];
            $wtarifa_empresa = $RESPONSABLE_VIRTUAL_PACIENTE["Ingtar"];
            $tipoEmpresa     = $RESPONSABLE_VIRTUAL_PACIENTE["tipoEmpre"];
            // $guardar = "arr_insumos_procedimiento: ".print_r($arr_insumos_procedimiento,true).PHP_EOL.PHP_EOL;
            // $guardar = "wcod_empresa: ".print_r($wcod_empresa,true).PHP_EOL.PHP_EOL;
            // seguimiento($guardar);
            $html_insumos_medicamentos = "";
            $row_insumos = array();
            $row_parametos_generales = array();
            $facturable_insumo = "S";
            if(array_key_exists($procedimiento_liquidar_cod_dif, $arr_insumos_procedimiento))
            {
                $arr_insumos_liquidar = array();
                if(array_key_exists($procedimiento_liquidar_cod_dif, $arr_insumos_procedimiento) && array_key_exists("lista_insumos", $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]))
                {
                    $arr_insumos_liquidar = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif]["lista_insumos"];
                }
                foreach($arr_insumos_liquidar as $es_medicamento => $arr_datos_insumos)
                {
                    // $guardar = "($ arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif][$wcod_empresa] as $es_medicamento => $arr_datos_insumos)".PHP_EOL.PHP_EOL;
                    // seguimiento($guardar);
                    // $row_insumos                 = $arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif][$es_medicamento]["lista_insumos"];
                    // Ahora lo si y no facturable, las clasificaciones, se hacen para cada insumo dentro de la función validarClasificacionInsumoSiNoFacturar
                    // para tener las restricciones por empresa si hubo cambio de responsable.
                    foreach($arr_mercado_completo_temp as $codigo_insumo => $row)
                    {
                        // $guardar = "wcod_empresa: ".print_r($wcod_empresa,true).PHP_EOL.PHP_EOL;
                        // seguimiento($guardar);
                        $arr_concepto_cobrar = array();
                        $saldo_insumo = $row["saldo_insumo"]*1;

                        if($row["Artesm"] == 'on')
                        {
                            $arr_concepto_cobrar = $arr_info_conceptos_inventario[$concepto_medicamentos_mueven_inv];
                        }
                        else
                        {
                            $arr_concepto_cobrar = $arr_info_conceptos_inventario[$concepto_materiales_mueven_inv];
                        }

                        // Cada que va a liquidar un insumo entonces se lee de nuevo el responsable virtual para llamar la nueva función validarClasificacionInsumoSiNoFacturar encargada
                        // de validar si un insumo es si o no facturable dependiente del reponsable y sus clasificaciones.
                        $wcod_empresa    = $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"];
                        $wtarifa_empresa = $RESPONSABLE_VIRTUAL_PACIENTE["Ingtar"];
                        $tipoEmpresa     = $RESPONSABLE_VIRTUAL_PACIENTE["tipoEmpre"];

                        // [updt-74] Permite crear un cargo anexo de insumos si por paquetes dice que solo se puede tener una cantidad máxima como Si facturables y el resto No facturable o viceversa.
                        $arr_saldo_anexo = array("saldo_restante"=>0, "wfacturable_restante"=>"");

                        // La sección de código que ántes determinaba si un insumo era si o no facturable se encapsuló en esta nueva función para permitir evaluar
                        // cada insumo según el nuevo responsable.
                        $arr_resp_validacion = validarClasificacionInsumoSiNoFacturar($conex, $wemp_pmla, $wbasedato, $arr_insumos_procedimiento, $procedimiento_liquidar_cod_dif, $wcod_empresa, $RESPONSABLE_VIRTUAL_PACIENTE,
                                                                                       $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $es_paquete, $row, $arr_concepto_cobrar, $codEmpParticular, $wtiempo_minutos_cx, $arr_datos_liquidados, $saldo_insumo, $arr_saldo_anexo);

                        $cobro_concepto              = $arr_resp_validacion["cobro_concepto"];
                        $codigo_insumo               = $arr_resp_validacion["codigo_insumo"];
                        $facturable_insumo           = $arr_resp_validacion["facturable_insumo"];
                        $validar_articuloPor_empresa = $arr_resp_validacion["validar_articuloPor_empresa"];
                        // $guardar = "wcod_empresa: {$RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"]}, es_medicamento: ".print_r(array_keys($arr_insumos_procedimiento[$procedimiento_liquidar_cod_dif][$RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"]]),true).PHP_EOL.PHP_EOL;
                        // seguimiento($guardar);

                        if($saldo_insumo > 0)
                        {
                            // $wnumero_puntos
                            // $modalidad_facturacion
                            $tabla_valida_precios = $arr_concepto_cobrar["tabla_valida_precios"];
                            $cobro_insumo         = $row["codigo_insumo"];
                            $nombre_insumo        = trim($row["nombre_insumo"]);
                                                  // $wcentro_costo        = $wcentro_costo;
                                                  // $wtarifa_empresa      = $wtarifa_empresa;
                                                  // $wcod_empresa         = $wcod_empresa;
                            $mueve_inventario     = $arr_concepto_cobrar["mueve_inventario"];
                            $concepto_nombre      = $arr_concepto_cobrar["concepto_nombre"];
                            $gru_servicio         = $arr_concepto_cobrar['servicio'];

                            $wcod_empresa_cargo = $wcod_empresa;
                            if($procedimiento_NOPOS)
                            {
                                $wcod_empresa_cargo = $RESPONSABLE_VIRTUAL_PACIENTE_POS["Ingcem"];
                            }

                            // $tipo_cobro           = $arr_concepto_cobrar["tipo_cobro"];
                                                  // $wfecha_cargo         = $wfecha_cargo;
                                                  // $wtipo_ingreso        = $wtipo_ingreso;
                            // echo "datos_desde_procedimiento($cobro_insumo, $cobro_concepto, $wcentro_costo, $wcentro_costo, $wcod_empresa, $wfecha_cargo, $wtipo_ingreso, '*', 'on', false ,'', $wfecha_cargo, $whora_cargo)";
                            //                        datos_desde_procedimiento(653653       , 0626           , 1016          , 1016          , 43677633     , 2015-01-05   , A             , '*', 'on', false ,'', 2015-01-05   , 07:00)
                            $arr_valor_cobro_insumo = datos_desde_procedimiento($cobro_insumo, $cobro_concepto, $wcentro_costo, $wcentro_costo, $wcod_empresa_cargo, $wfecha_cargo, $wtipo_ingreso, "*", "on", false ,'', $wfecha_cargo, $whora_cargo);
                            // $guardar = "datos_desde_procedimiento($cobro_insumo, $cobro_concepto, $wcentro_costo, $wcentro_costo, $wcod_empresa_cargo, $wfecha_cargo, $wtipo_ingreso, *, on, false ,'', $wfecha_cargo, $whora_cargo);".PHP_EOL;
                            // $guardar .= "arr_valor_cobro_insumo".print_r($arr_valor_cobro_insumo,true).PHP_EOL.PHP_EOL;
                            // seguimiento($guardar);

                            // ------- ELIMINAR TODO ESTO, ES SOLO PARA SIMULAR QUE LOS INSUMOS NO TIENEN TARIFA!!!!!!!!!!!!!!!!
                            // $arr_valor_cobro_insumo["error"] = 1;
                            // $arr_valor_cobro_insumo["wexiste"] = 0;
                            // -------

                            inicializarDatosInsumo($procedimiento_liquidar_cod_dif, $concepto_nombre, $saldo_insumo, $cobro_insumo, $nombre_insumo, $cobro_concepto, $facturable_insumo, $wbaseliquidacion, $arr_datos_procedimiento, $arr_valor_cobro_insumo, $gru_servicio, $mueve_inventario, $row["Artesm"], $row["id_insumo"], $arr_CargosGrabadosResponsables_insumos); //[updt-69]

                            $info_tarifa = "";
                            $tipo_facturacion = '';
                            if($arr_valor_cobro_insumo['error'] == 1)
                            {
                                $info_tarifa = 'off';
                                // Agregar al array de cargos sin tarifa
                                // INSUMOS SIN TARIFA - POR AHORA NO INSERTAR EN LAS TABLAS 230 Y 231 DE CLIAME ESTOS INSUMOS SIN TARIFA, SOLO APLICA PARA CONCEPTOS QUE PERMITAN MODIFICAR VALOR
                                $cargosSinTarifasInsumos[] = array("whistoria"             => $whistoria,
                                                                "wingreso"                 => $wing,
                                                                "wserv_ingreso"            => $wser,
                                                                "wempresa_responsable"     => $wcod_empresa,
                                                                "wservicio_graba"          => $wcentro_costo,
                                                                "cobro_concepto_cod"       => $cobro_concepto,
                                                                "cobro_procedimiento"      => $cobro_insumo,
                                                                "cobro_procedimiento_nom"  => $nombre_insumo,
                                                                "wtercero"                 => '',
                                                                "wespecialidad"            => '',
                                                                "wmodalidad"               => '',
                                                                "wtarifa_empresa"          => $wtarifa_empresa,
                                                                "wvalor"                   => 0,
                                                                "wes_insumo"               => "on",
                                                                "id_encabezado_sin_tarifa" => '',
                                                                "id_detalle_sin_tarifa"    => '',
                                                                "wnombre_insumo"           => $nombre_insumo,
                                                                "wcantidad"                => $saldo_insumo,
                                                                "wtipo_ingreso"            => $wtipo_ingreso,
                                                                "wtipo_ingreso_nom"        => $wtipo_ingreso_nom
                                                                );
                            }
                            else
                            {
                                if($es_paquete)
                                {
                                    $arr_valor_cobro_insumo['wtipfac'] = TIPO_FACTURACION_PAQUETE;
                                }

                                $tipo_facturacion = $arr_valor_cobro_insumo['wtipfac'];
                                $info_tarifa      = $arr_valor_cobro_insumo["wvaltar"]*1;
                                $valor_tarifa     = $arr_valor_cobro_insumo["wvaltar"]*1;
                                $wexiste          = $arr_valor_cobro_insumo["wexiste"];

                                // Verifica si aplica un porcentaje diferente para el concepto por efectos de cirugías multiples.
                                $porcentaje_cxMult  = 100;
                                if(array_key_exists($cobro_concepto, $arr_porcentajes))
                                {
                                    $porcentaje_cxMult  = ($arr_porcentajes[$cobro_concepto])*1;
                                }
                                $valor_final_porcent = ($porcentaje_cxMult < 100) ? (($porcentaje_cxMult * $valor_tarifa)/100) : $valor_tarifa;
                                $valor_final = ($porcentaje_cxMult == 0) ? 0 : $valor_final_porcent; // Este valor se guarda en el array de liquidación listo para enviar a la función de GrabarCargos, se asigna a una variable de simulación.

                                $concepto_cod_ppal = $cobro_concepto;

                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo]["datos_reales"]["wporcentaje"]       = $porcentaje_cxMult;
                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo]["datos_reales"]["wvalor_final"]      = $valor_final;
                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo]["datos_reales"]["wtipo_facturacion"] = $tipo_facturacion;
                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo]["datos_reales"]["wvalor"]            = $valor_tarifa;
                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo]["datos_reales"]["wexiste"]           = $wexiste;
                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo]["datos_reales"]["WTIENE_TARIFA"]     = "on";
                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo]["datos_reales"]["cobraHonorarios"]   = "on";

                                if(($valor_final*1) > 0)
                                {
                                    if($mueve_inventario == 'on')
                                    {
                                        global $porcentaje_cxMult; // se debió poner en global porque en las funciones de simulación se pueden crear nuevos cargos en los que se debe aplicar porcentaje de descuento en su tarifa.

                                        $valor_final_simulado = $valor_final;

                                        // INFORMA SI DICE QUE NO TIENE TARIFA

                                        $datosGrabarCargos = array();
                                        // $info_tarifa = '';

                                        // $info_tarifa = '<img style="cursor:pointer" id="" class="tooltip" title="NO TIENE TARIFA" width="16" height="16" src="../../images/medical/sgc/Warning-32.png" />';
                                        // $datosGrabarCargos['info_tarifa'] = $info_tarifa;
                                        // $arr_CargosGrabadosResponsables_insumos[$cobro_insumo][$concepto_cod_ppal] = array();

                                        // Validar terceros, topes, saldos
                                        // if(strtoupper($wfacturable) == 'S' && strtoupper($wrecexc) == 'R')
                                        {

                                            $wfecha = $fecha_actual;
                                            $whora  = $hora_actual;
                                            $wcantidad = $saldo_insumo;

                                            $wtarifa_unitaria_mx      = $valor_tarifa; // El valor que existe en matrix como tarífa
                                            $wtarifa_unit_recalculado = $valor_tarifa; // Si hay redondeo, es el valor modificado de la tarifa, ajustada para que sea el 100% de la tarifa unitaria con el porcentaje de descuento según manual de cirugía

                                            $datosGrabarCargos['valor_final_original']   = $valor_final;
                                            $datosGrabarCargos['wtarifa_unitaria_mx']    = $wtarifa_unitaria_mx;
                                            $datosGrabarCargos['wtarifa_unit_recalculado']= $wtarifa_unit_recalculado;
                                            $datosGrabarCargos['wredondear_centena']     = false; // para insumos no redondea centenas
                                            $datosGrabarCargos['porcentaje_cxMult_CARGO']= $porcentaje_cxMult;
                                            $datosGrabarCargos['info_tarifa']            = '';
                                            $datosGrabarCargos['error_tarifa']           = '';
                                            $datosGrabarCargos['sin_tarifa_no_grabar']   = 'off';
                                            $datosGrabarCargos['tarifa_empresa_cargo']   = '';
                                            $datosGrabarCargos['idTope']                 = '';
                                            $datosGrabarCargos['enParalelo']             = 'off';
                                            $datosGrabarCargos['idParalelo']             = '';
                                            $datosGrabarCargos['cargo_examen_o_equipo']  = "";
                                            $datosGrabarCargos['examen_equipo_codigo']   = "";
                                            $datosGrabarCargos['examen_equipo_nombre']   = "";

                                            $datosGrabarCargos['historia']               = $whistoria;
                                            $datosGrabarCargos['ingreso']                = $wing;
                                            $datosGrabarCargos['entidad']                = $nitEmpresa;
                                            $datosGrabarCargos['cambio_responsable']     = $RESPONSABLE_VIRTUAL_PACIENTE['Ingcem'];

                                            $datosGrabarCargos['whistoria']              = $whistoria;
                                            $datosGrabarCargos['wing']                   = $wing;
                                            $datosGrabarCargos['wno1']                   = $wno1;
                                            $datosGrabarCargos['wno2']                   = $wno2;
                                            $datosGrabarCargos['wap1']                   = $wap1;
                                            $datosGrabarCargos['wap2']                   = $wap2;
                                            $datosGrabarCargos['wdoc']                   = $wdoc;
                                            $datosGrabarCargos['wcodemp']                = $wcod_empresa;
                                            $datosGrabarCargos['wnomemp']                = $wnomemp_tal;
                                            $datosGrabarCargos['wser']                   = $wser;
                                            $datosGrabarCargos['wfecing']                = $wfecing;
                                            $datosGrabarCargos['wtar']                   = $wtarifa_empresa;

                                            $datosGrabarCargos['concepto']               = codConceptoLegible($concepto_cod_ppal);
                                            $datosGrabarCargos['wcodcon']                = codConceptoLegible($concepto_cod_ppal);
                                            $datosGrabarCargos['wnomcon']                = $concepto_nombre; //

                                            $datosGrabarCargos['procedimiento']          = $cobro_insumo; //
                                            $datosGrabarCargos['wprocod']                = $cobro_insumo; //
                                            $datosGrabarCargos['wpronom']                = $nombre_insumo; //

                                            $datosGrabarCargos['wcodter']                = ""; //
                                            $datosGrabarCargos['wnomter']                = ""; //

                                            $datosGrabarCargos['wvalorTarifaBase']       = $valor_tarifa; //
                                            $datosGrabarCargos['wporter']                = 0; //
                                            $datosGrabarCargos['wcantidad']              = $wcantidad;
                                            $datosGrabarCargos['wvaltar']                = $wtarifa_unit_recalculado; //
                                            $datosGrabarCargos['wrecexc']                = 'R'; //
                                            $datosGrabarCargos['wfacturable']            = $facturable_insumo; //
                                            $datosGrabarCargos['wcantidad_concepto_pqte']= ''; //

                                            $datosGrabarCargos['centroCostos']           = $wcentro_costo;
                                            $datosGrabarCargos['wcco']                   = $wcentro_costo;
                                            $datosGrabarCargos['wccogra']                = $wcentro_costo;
                                            $datosGrabarCargos['wfeccar']                = $wfecha_cargo;
                                            $datosGrabarCargos['whora_cargo']            = $whora_cargo;
                                            $datosGrabarCargos['wconinv']                = $mueve_inventario; //
                                            $datosGrabarCargos['wcodpaq']                = ($es_paquete) ? $procedimiento_liquidar_cod_dif:'';
                                            $datosGrabarCargos['wpaquete']               = ($es_paquete) ? 'on': 'off';
                                            $datosGrabarCargos['wconabo']                = '';
                                            $datosGrabarCargos['wdevol']                 = '';
                                            $datosGrabarCargos['waprovecha']             = 'off';
                                            $datosGrabarCargos['wconmvto']               = '';
                                            $datosGrabarCargos['wexiste']                = $wexiste;
                                            $datosGrabarCargos['wbod']                   = $wbod;
                                            $datosGrabarCargos['wconser']                = $gru_servicio;
                                            $datosGrabarCargos['wtipfac']                = $tipo_facturacion;
                                            $datosGrabarCargos['wexidev']                = 0;
                                            $datosGrabarCargos['wfecha']                 = $wfecha;
                                            $datosGrabarCargos['whora']                  = $whora;
                                            $datosGrabarCargos['wespecialidad']          = "*"; //
                                            $datosGrabarCargos['cobraHonorarios']        = "on"; //
                                            $datosGrabarCargos['wgraba_varios_terceros'] = false;
                                            $datosGrabarCargos['wcodcedula']             = '';

                                            $datosGrabarCargos['tipoEmpresa']            = $tipoEmpresa;
                                            $datosGrabarCargos['tipoIngreso']            = ''; // Para evitar warnings en funciones
                                            $datosGrabarCargos['tipoPaciente']           = ''; // Para evitar warnings en funciones
                                            $datosGrabarCargos['warctar']                = $tabla_valida_precios;
                                            $datosGrabarCargos['wvaltarReco']            = 0; // Para evitar warnings en funciones
                                            $datosGrabarCargos['saldoTope']              = ''; // Para evitar warnings en funciones
                                            $datosGrabarCargos['topeGeneral']            = ''; // Para evitar warnings en funciones

                                            // Para no enviarlos como parámetros a la función.
                                            $datosGrabarCargos['whistoria']                  = $whistoria;
                                            $datosGrabarCargos['wing']                       = $wing;
                                            $datosGrabarCargos['wcod_empresa']               = $wcod_empresa;
                                            $datosGrabarCargos['wfecha_cargo']               = $wfecha_cargo;
                                            $datosGrabarCargos['cobro_concepto']             = $concepto_cod_ppal;
                                            $datosGrabarCargos['procedimiento_liquidar_cod'] = $procedimiento_liquidar_cod_dif;
                                            $datosGrabarCargos['procedimiento_liquidar_nomb']= $arr_datos_procedimiento['nombre'];
                                            $datosGrabarCargos['wcentro_costo']              = $wcentro_costo;
                                            $datosGrabarCargos['nomCajero']                  = "";
                                            $datosGrabarCargos['wvaltarExce']                = 0;

                                            $datosGrabarCargos['wturno_cirugia']             = $arr_datos_procedimiento["wturno_cirugia"];
                                            $datosGrabarCargos['wtipo_anestesia_cx']         = $arr_datos_procedimiento["wtipo_anestesia_cx"];
                                            $datosGrabarCargos["wtiempo_sala_recuperarcion"] = $arr_datos_procedimiento["wtiempo_sala_recuperarcion"];
                                            $datosGrabarCargos["wtiempo_uso_minutos"]        = $arr_datos_procedimiento["wtiempo_uso_minutos"];
                                            $datosGrabarCargos["wtiempo_minutos_cx"]         = $arr_datos_procedimiento["wtiempo_minutos_cx"];

                                            $datosGrabarCargos["codigo_especialidad"]        = "";
                                            $datosGrabarCargos["wespecialidad_nombre"]       = "";
                                            $datosGrabarCargos["wgrabar"]                    = "on";
                                            $datosGrabarCargos['nitEmpresa']                 = $nitEmpresa;
                                            $datosGrabarCargos['id_insumo']                  = $row["id_insumo"];
                                            $datosGrabarCargos['estado_insumo_mx']           = $row["Artest"];
                                            $datosGrabarCargos["wbaseliquidacion"]           = $wbaseliquidacion;
                                            $datosGrabarCargos["arr_cambio_responsable"]     = $cambioResponsablePorFechaFin; // Puede llegar inicializado con los datos de cambio de responsable por superar la fecha de cobertura como responsable, esto indica al sistema que debe hacer el cambio de responsable.
                                            $datosGrabarCargos["arr_encabezado"]             = $arr_datos_procedimiento["arr_encabezado"];
                                            $datosGrabarCargos["wterunix"]                   = "";
                                            $datosGrabarCargos["grupoMedico"]                = "";
                                            $datosGrabarCargos["wprocedimiento_paqte"]       = "";
                                            $datosGrabarCargos["valorActual"]                = (array_key_exists("valorActual", $arr_valor_cobro_insumo)) ? $arr_valor_cobro_insumo['valorActual'] : 0;
                                            $datosGrabarCargos["valorAnterior"]              = (array_key_exists("valorAnterior", $arr_valor_cobro_insumo)) ? $arr_valor_cobro_insumo['valorAnterior'] : 0;
                                            $datosGrabarCargos["fechaCambio"]                = (array_key_exists("fechaCambio", $arr_valor_cobro_insumo)) ? $arr_valor_cobro_insumo['fechaCambio'] : '';
                                            $datosGrabarCargos["wtar_cargo_POS"]             = (array_key_exists("wtar", $arr_valor_cobro_insumo)) ? $arr_valor_cobro_insumo['wtar'] : '';
                                            $datosGrabarCargos["wres_cargo_POS"]             = ($procedimiento_NOPOS) ? $RESPONSABLE_VIRTUAL_PACIENTE_POS["Ingcem"] : "";
                                            $datosGrabarCargos['codHomologar']               = "";
                                            $datosGrabarCargos['codRangoTiempo']             = "";
                                            $datosGrabarCargos['estaEnTurno']                = "";
                                            $datosGrabarCargos['tabla_temp']                 = ($generar_temporal) ? $TABLA_TEMP_106: ""; //[updt-69]
                                            $datosGrabarCargos['id_cargo_temp']              = 0;
                                            $datosGrabarCargos['TIP_POS']                    = $TIP_POS;
                                            $datosGrabarCargos['wcondicion_restriccion']     = array();
                                            // $datosGrabarCargos["ccoActualPac"]               = $ccoActualPac;
                                            $cambioResponsablePorFechaFin = array();

                                            if(array_key_exists("codHomologar", $arr_valor_cobro_insumo))
                                            {
                                                $datosGrabarCargos['codHomologar']       = $arr_valor_cobro_insumo['codHomologar'];
                                            }

                                            $datosGrabarCargos["es_insumo"]         = "on";

                                            // --> Si la empresa es particular esto se graba como excedente
                                            // Se comenta porque si la empresa es 01-particular, entonces el cargo si debe quedar grabado para la empresa particular
                                            // y no como excedente. Algo quedará como excedente pero por ejemplo cuando las condiciones de insumo dice que la empresa (diferente a particular)
                                            // no lo paga sino que se cobra como excedente.
                                            /*if($wcod_empresa == $codEmpParticular)
                                            { $datosGrabarCargos['wrecexc'] = 'E'; }*/

                                            $userCargo = explode('-',$_SESSION['user']);
                                            $wuse      = $userCargo[1];
                                            global $wuse;
                                            // En una de las reuniones de facturación se determinó no tener en cuenta la condición de medicamento por empresa
                                            // debído a que por defecto todos los insumos deben ser facturables con excepción de las clasificaciones que indican cuando
                                            // determinados insumos deben ser no facturables
                                            // <<< El 02 de febrero de 2015 se vuelve a habilitar esta función porque SI hay insumos que se salen de la clasificación
                                            // general y así por ejemplo la clasificación sea no facturable, algunos insumos de esa clasificación SI se facturan
                                            // para alguna o algunas empresas.

                                            if($wcod_empresa != $codEmpParticular && $validar_articuloPor_empresa == 'on')
                                            {
                                                $condicion = CondicionMedicamento($cobro_insumo, $wcod_empresa, $wcentro_costo);
                                                switch($condicion)
                                                {
                                                    //  P --> va para excedente (no lo cubre)
                                                    //  N --> no facturable
                                                    //  C --> lo cubre la entidad
                                                    case "EXCEDENTE" :
                                                        $datosGrabarCargos['wrecexc']     = "E";
                                                    break;
                                                    case "NOFACTURABLE" :
                                                        $datosGrabarCargos['wfacturable'] = "N";
                                                        $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo]["datos_reales"]["wfacturable"] = "N";
                                                        $datosGrabarCargos['wcondicion_restriccion'][] = "Condición de medicamento por empresa";
                                                    break;
                                                }
                                            }
                                            elseif($wcod_empresa == $codEmpParticular && tipoPOS_procedimiento($TIP_POS) && $RESPONSABLE_VIRTUAL_PACIENTE_POS["Ingcem"] != $wcod_empresa)
                                            {
                                                // Si es procedimiento NO POS entonces se deben aplicar las condiciones de medicamento para la empresa POS, aún cuando
                                                // el cargo se grabe como tarifa particular.
                                                $wcod_empresa_pos = $RESPONSABLE_VIRTUAL_PACIENTE_POS["Ingcem"];
                                                $condicion = CondicionMedicamento($cobro_insumo, $wcod_empresa_pos, $wcentro_costo);
                                                switch($condicion)
                                                {
                                                    // Cuando es NO POS solo se debe tener en cuenta si es excedente o no, según al empresa POS,
                                                    // Si para la empresa POS el insumo es no facturable entonces no tener en cuenta esa condición.
                                                    //  P --> va para excedente (no lo cubre)
                                                    //  N --> no facturable
                                                    //  C --> lo cubre la entidad
                                                    case "EXCEDENTE" :
                                                        $datosGrabarCargos['wrecexc']     = "E";
                                                    break;

                                                    // default:
                                                    // break;
                                                }
                                            }

                                            // --> Valor excedente
                                            if($datosGrabarCargos['wrecexc'] == 'E')
                                            { $datosGrabarCargos['wvaltarExce'] = round($wcantidad*($valor_final_simulado*1)); }
                                            else{
                                                // --> Valor reconocido
                                                    $datosGrabarCargos['wvaltarReco'] = round($wcantidad*($valor_final_simulado*1));
                                            }

                                            $userCargo = explode('-',$_SESSION['user']);
                                            $wuse      = $userCargo[1];
                                            global $wuse;
                                            // print_r($datosGrabarCargos);

                                            // --> Validar politicas
                                            $datosGrabarCargos['PermitirGrabar'] = true;
                                            $CargosAnexos   =   array();
                                            if($arr_saldo_anexo["saldo_restante"] > 0) // [updt-74] Se genera el cargo anexo completo.
                                            {
                                                $cargo_anexo_limite_cantidad                = $datosGrabarCargos;
                                                $cargo_anexo_limite_cantidad["wcantidad"]   = $arr_saldo_anexo["saldo_restante"];
                                                $cargo_anexo_limite_cantidad["wfacturable"] = $arr_saldo_anexo["wfacturable_restante"];

                                                if($cargo_anexo_limite_cantidad['wrecexc'] == 'E')
                                                { $cargo_anexo_limite_cantidad['wvaltarExce'] = round($wcantidad*($valor_final_simulado*1)); }
                                                else{
                                                    // --> Valor reconocido
                                                        $cargo_anexo_limite_cantidad['wvaltarReco'] = round($cargo_anexo_limite_cantidad["wcantidad"]*($valor_final_simulado*1));
                                                }

                                                $CargosAnexos[] = $cargo_anexo_limite_cantidad;
                                            }

                                            if(!$es_paquete)
                                            {
                                                ValidarGrabacion($datosGrabarCargos, $CargosAnexos, true);

                                                $CodTipEmp = $arr_entidades_responsables[$datosGrabarCargos["wcod_empresa"]]["simulacion_campos"]['Emptem'];
                                                $CodTar    = $arr_entidades_responsables[$datosGrabarCargos["wcod_empresa"]]["simulacion_campos"]['Emptar'];
                                                $CodEnt    = $arr_entidades_responsables[$datosGrabarCargos["wcod_empresa"]]["simulacion_campos"]['Resnit'];

                                                // $CodTipEmp = $RESPONSABLE_VIRTUAL_PACIENTE['tipoEmpre']; //'*';
                                                // $CodTar    = $RESPONSABLE_VIRTUAL_PACIENTE['Ingtar']; //'*';
                                                // $CodEnt    = $RESPONSABLE_VIRTUAL_PACIENTE['Ingcem']; //'*';
                                                $CodNit    = '*';
                                                $CodEsp    = ($datosGrabarCargos['wespecialidad'] == '') ? '*': $datosGrabarCargos['wespecialidad'];
                                                $CodCco    = $datosGrabarCargos['wcco'];
                                                if(!ValidarSiEsFacturable($datosGrabarCargos['wcodcon'], $datosGrabarCargos['wprocod'], $CodTipEmp, $CodTar, $CodNit, $datosGrabarCargos['wcodemp'], $CodEsp, $CodCco, $whistoria, $wing))
                                                {
                                                    $datosGrabarCargos['wfacturable'] = 'N';
                                                    $msj_pol = "Política, para toda empresa [*]".(($CodEsp=='*') ? ', toda especialidad [*]': ', Especialidad ['.$CodEsp.']').' y centro de costo ['.$CodCco.'] con estos datos de liquidación, el cargo es No facturable';
                                                    $datosGrabarCargos['wcondicion_restriccion'][] = $msj_pol;
                                                }
                                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$cobro_insumo]["datos_reales"]["wfacturable"] = $datosGrabarCargos['wfacturable'];
                                            }
                                            $datosGrabarCargos['id_cargo_temp'] = insertarCargoTemporal($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106, $wuse, $datosGrabarCargos, $fecha_actual, $hora_actual);

                                            if($datosGrabarCargos['PermitirGrabar'])
                                            {
                                                // No envío $cobro_insumo sino procedimiento_liquidar_cod_dif para poder asociar el medicamento al procedimiento original al que pertenece.
                                                $arr_concepto_plantilla_empresa = array();
                                                SimularGrabarCargo($conex, $wemp_pmla, $wbasedato, $es_paquete, $user_session, $datosGrabarCargos, $concepto_cod_ppal, $procedimiento_liquidar_cod_dif, $arr_ContadorCxPorEspecialidad, $wcodigo_especialidad_orden, $esMultipleEspecialidadDifVia, $conceptoRepetirPorcentajeMultiple, $arr_concepto_plantilla_empresa, $arr_PARAMETROS_GENERALES, $arr_cargos_req_autorizar, $arr_requerir_autorizacion);
                                                if(count($CargosAnexos) > 0) //[updt-69]
                                                {
                                                    // $guardar = "CargosAnexos: ".print_r($CargosAnexos,true).PHP_EOL;
                                                    // seguimiento($guardar);
                                                    foreach($CargosAnexos as $key => $arr_variables_anexo)
                                                    {
                                                        // [updt-73] Se generan las condiciones, valores y posiciones requeridas para crear el nuevo cargo anexo de insumos creado desde las políticas.
                                                        if(!array_key_exists($codigo_insumo, $arr_mercado_completo_temp)
                                                            && ($concepto_medicamentos_mueven_inv == $arr_variables_anexo['wcodcon'] || $concepto_materiales_mueven_inv == $arr_variables_anexo['wcodcon']))
                                                        {
                                                            // $arr_variables_anexo['wfacturable'] => inicialmente el que esta en el array, una posibilidad es que la misma política determine si el cargo anexo sea o no facturable.
                                                            // Verificar si no existe el insumo en el mercado, en ese caso entonces consultar todos los datos necesarios para actualizar el nuevo array del cargo de insumo.
                                                            $arr_valor_cobro_insumo["wexiste"] = $arr_variables_anexo["wexiste"];// Deberia llegar en el nuevo array actualizado.
                                                            $arr_concepto_cobrar               = array();
                                                            $saldo_insumo_anexo                = 1; // Debería llegar en el array nuevo cargo

                                                            $sql = "SELECT  Artcom AS nombre_insumo, Artgru, Artesm, Artest
                                                                    FROM    {$wbasedato_movhos}_000026
                                                                    WHERE   Artcod = '{$arr_variables_anexo['wprocod']}'
                                                                    ORDER BY Artesm";
                                                            $result_nw          = mysql_query($sql, $conex);
                                                            $gru_servicio_anexo = "";
                                                            $Artesm_anexo       = "";
                                                            $id_insumo_anexo    = "";
                                                            $estado_26_anexo    = "";
                                                            if(mysql_num_rows($result_nw) > 0)
                                                            {
                                                                $row_nw          = mysql_fetch_array($result_nw);
                                                                $Artesm_anexo    = $row_nw["Artesm"];
                                                                $estado_26_anexo = $row_nw["Artest"];
                                                            }

                                                            if($Artesm_anexo == 'on')
                                                            {
                                                                $arr_concepto_cobrar = $arr_info_conceptos_inventario[$concepto_medicamentos_mueven_inv];
                                                            }
                                                            else
                                                            {
                                                                $arr_concepto_cobrar = $arr_info_conceptos_inventario[$concepto_materiales_mueven_inv];
                                                            }
                                                            $gru_servicio_anexo         = $arr_concepto_cobrar['servicio'];

                                                            $valor_tarifa        = $arr_variables_anexo['wvaltar'];
                                                            $valor_final_porcent = ($porcentaje_cxMult < 100) ? (($porcentaje_cxMult * $valor_tarifa)/100) : $arr_variables_anexo['wvaltar'];
                                                            $valor_final         = ($porcentaje_cxMult == 0) ? 0 : $valor_final_porcent;

                                                            $arr_variables_anexo["valor_final_original"]     = $valor_final;
                                                            $arr_variables_anexo["wtarifa_unitaria_mx"]      = $valor_tarifa;
                                                            $arr_variables_anexo["wtarifa_unit_recalculado"] = $valor_tarifa;
                                                            $arr_variables_anexo["wvalorTarifaBase"]         = $valor_tarifa;
                                                            $arr_variables_anexo["id_insumo"]                = ""; // - Si es un insumo que no esta en el mercado entonces por ahora dejarlo vacío
                                                            $arr_variables_anexo["estado_insumo_mx"]         = $estado_26_anexo;

                                                            // Crear datos_reales solo si es un insumo nuevo que no está en el mercado pero se agregó por política.
                                                            // if(!array_key_exists($procedimiento_liquidar_cod_dif, $arr_CargosGrabadosResponsables_insumos) || !array_key_exists($arr_variables_anexo['wprocod'], $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif]))
                                                            {
                                                                inicializarDatosInsumo($procedimiento_liquidar_cod_dif, $arr_variables_anexo['wnomcon'], $saldo_insumo_anexo, $arr_variables_anexo['wprocod'], $arr_variables_anexo['wpronom'], $arr_variables_anexo['wcodcon'], $arr_variables_anexo['wfacturable'], $wbaseliquidacion, $arr_datos_procedimiento, $arr_valor_cobro_insumo, $gru_servicio_anexo, $mueve_inventario, $Artesm_anexo, $id_insumo_anexo, $arr_CargosGrabadosResponsables_insumos);

                                                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$arr_variables_anexo['wprocod']]["datos_reales"]["wporcentaje"]       = $porcentaje_cxMult;
                                                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$arr_variables_anexo['wprocod']]["datos_reales"]["wvalor_final"]      = $valor_final;
                                                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$arr_variables_anexo['wprocod']]["datos_reales"]["wtipo_facturacion"] = $tipo_facturacion;
                                                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$arr_variables_anexo['wprocod']]["datos_reales"]["wvalor"]            = $valor_tarifa;
                                                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$arr_variables_anexo['wprocod']]["datos_reales"]["wexiste"]           = $arr_valor_cobro_insumo["wexiste"];
                                                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$arr_variables_anexo['wprocod']]["datos_reales"]["WTIENE_TARIFA"]     = "on";
                                                                $arr_CargosGrabadosResponsables_insumos[$procedimiento_liquidar_cod_dif][$arr_variables_anexo['wprocod']]["datos_reales"]["cobraHonorarios"]   = "on";
                                                            }
                                                        }
                                                        // $arr_variables_anexo['procedimiento']              = $arr_variables_anexo['procedimiento'].((!empty($guardar_temp_posicion)) ? "_$guardar_temp_posicion": ""); // Se completa la llave que diferencia a los procedimientos de igual código p.e.   01102_ARRIBA,   01102_ABAJO, ...
                                                        // $arr_variables_anexo['wprocod']                    = $arr_variables_anexo['wprocod'].((!empty($guardar_temp_posicion)) ? "_$guardar_temp_posicion": ""); // Se completa la llave que diferencia a los procedimientos de igual código p.e.   01102_ARRIBA,   01102_ABAJO, ...
                                                        $arr_variables_anexo['procedimiento_liquidar_cod'] = $arr_variables_anexo['procedimiento_liquidar_cod'].((!empty($guardar_temp_posicion)) ? "_$guardar_temp_posicion": ""); // Se completa la llave que diferencia a los procedimientos de igual código p.e.   01102_ARRIBA,   01102_ABAJO, ...
                                                        $arr_variables_anexo['tabla_temp']                 = ($generar_temporal) ? $TABLA_TEMP_106: "";
                                                        $arr_variables_anexo['id_cargo_temp']              = insertarCargoTemporal($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106, $wuse, $arr_variables_anexo, $fecha_actual, $hora_actual);
                                                        SimularGrabarCargo($conex, $wemp_pmla, $wbasedato, $es_paquete, $user_session, $arr_variables_anexo, $concepto_cod_ppal, $procedimiento_liquidar_cod_dif, $arr_ContadorCxPorEspecialidad, $wcodigo_especialidad_orden, $esMultipleEspecialidadDifVia, $conceptoRepetirPorcentajeMultiple, $arr_concepto_plantilla_empresa, $arr_PARAMETROS_GENERALES, $arr_cargos_req_autorizar, $arr_requerir_autorizacion);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                // $valor_total_insumos += $info_tarifa;
                            }
                            /*$html_insumos_medicamentos .= '  <tr class="" >
                                                    <td style="text-align:left;" >'.$row["codigo_insumo"]."-".$row["nombre_insumo"].'</td>
                                                    <td style="text-align:right;" >'.$row["saldo_insumo"].'</td>
                                                    <td>'.(($row["Artesm"]=='on') ? "[Medicamento]": "[Artículo]").'</td>
                                                    <td>--</td>
                                                    <td style="font-weight:bold;" >'.$info_tarifa.'</td>
                                                </tr>';*/
                        }
                    }
                    $arr_mercado_completo_temp = array(); // Se inicializa el array del mercado para que no sea cobrado de nuevo, solo se muestre y se cobre el mercado una vez.
                }
            }
            // **********************************  BUSCAR Y SIMULAR INSUMOS ***********************************
            // **********************************  BUSCAR Y SIMULAR INSUMOS ***********************************
        }
    }

    // Actualiza en el array general las variables que hayan podido cambiar al ejecutar la función
    $arr_temp_actualizado = array();
    foreach ($arr_DATOS_PROGRAMA as $key_gral => $value_gral) {
        $arr_temp_actualizado[$key_gral] = $$key_gral;
    }
    $arr_DATOS_PROGRAMA = $arr_temp_actualizado;
}


function separar_procedimientos_pos_nopos($conex, $wbasedato, $wemp_pmla, $temporal_procedimientos_ordenados, $arr_PARAMETROS_GENERALES, $RESPONSABLE_VIRTUAL_PACIENTE)
{
    foreach($arr_PARAMETROS_GENERALES as $key => $value) {
        $$key = $value;
    }

    $arr_temporal_procedimientos_ordenados_POS_NOPOS = array(); // Array para separar los procedimientos ordenándo por separado los POS de los NO POS
    foreach ($temporal_procedimientos_ordenados as $cod_especialidad => $arr_procedimientos)
    {
        foreach ($arr_procedimientos as $cod_procedimiento => $info_procedimiento)
        {
            // solo se tiene en cuenta si el procedimiento es pos o no para el responsable principal.
            $pro_NOPOS = "off";
            $modalidad_empresa = "";
            if(array_key_exists($RESPONSABLE_VIRTUAL_PACIENTE['Ingcem'], $info_procedimiento["modo_liquida_empresa"]))
            {
                $pro_NOPOS = $info_procedimiento["modo_liquida_empresa"][$RESPONSABLE_VIRTUAL_PACIENTE['Ingcem']]["pro_NOPOS"];
                $modalidad_empresa = $info_procedimiento["modo_liquida_empresa"][$RESPONSABLE_VIRTUAL_PACIENTE['Ingcem']]['modalidad_facturacion'];
            }

            // ORD separa el número de orden que debe tomar el arreglo y el tipo de procedimientos que contiene
            // 1 + _ORD_ + (PRO_NOPOS o PROPOS)
            $pro_NOPOS_key = ($pro_NOPOS == 'on') ? '0_ORD_PRO_NOPOS': '1_ORD_PROPOS';

            if($pro_NOPOS == 'off' && $modalidad_empresa == 'CODIGO')
            {
                $pro_NOPOS_key = '2_ORD_PROPOS';
            }

            if(!array_key_exists($pro_NOPOS_key, $arr_temporal_procedimientos_ordenados_POS_NOPOS))
            {
                $arr_temporal_procedimientos_ordenados_POS_NOPOS[$pro_NOPOS_key] = array();
            }

            if(!array_key_exists($cod_especialidad, $arr_temporal_procedimientos_ordenados_POS_NOPOS[$pro_NOPOS_key]))
            {
                $arr_temporal_procedimientos_ordenados_POS_NOPOS[$pro_NOPOS_key][$cod_especialidad] = array();
            }

            if(!array_key_exists($cod_especialidad, $arr_temporal_procedimientos_ordenados_POS_NOPOS[$pro_NOPOS_key]))
            {
                $arr_temporal_procedimientos_ordenados_POS_NOPOS[$pro_NOPOS_key][$cod_especialidad] = array();
            }

            if(!array_key_exists($cod_procedimiento, $arr_temporal_procedimientos_ordenados_POS_NOPOS[$pro_NOPOS_key][$cod_especialidad]))
            {
                $arr_temporal_procedimientos_ordenados_POS_NOPOS[$pro_NOPOS_key][$cod_especialidad][$cod_procedimiento] = array();
            }

            $arr_temporal_procedimientos_ordenados_POS_NOPOS[$pro_NOPOS_key][$cod_especialidad][$cod_procedimiento] = $info_procedimiento;
        }
    }
    return $arr_temporal_procedimientos_ordenados_POS_NOPOS;
}


function consultarResponsables($conex, $wbasedato, $wemp_pmla, $whistoria, $wing, $arr_ccos_cirugia)
{
    // Se modificó por left join porque en el caso de particulares no se va a encontrar código de particular en
    // 000024, esos datos se deben reemplazar por los equivalentes a código y tarífas particulares.
    /*$sql = "SELECT  c205.Resord AS orden_resp, c205.Resnit, c205.Restpa AS tipo_paciente, c24.Emppar, c24.Emptar, c24.Emptem, c24.Empnom, c24.Empnit, c24.Emppar,
                    c204.id AS id_204, c204.Topsal AS saldo_res
            FROM    {$wbasedato}_000205 AS c205
                    LEFT JOIN
                    {$wbasedato}_000024 AS c24 ON (c205.Resnit = c24.Empcod AND c24.Empest = 'on')
                    LEFT JOIN
                    {$wbasedato}_000204 AS c204 ON (c205.Resnit = c204.Topres AND c204.Topest = 'on' AND c204.Tophis = '{$whistoria}' AND c204.Toping = '{$wing}')
            WHERE   c205.Reshis = '{$whistoria}'
                    AND c205.Resing = '{$wing}'
                    AND c205.Resest = 'on'
            ORDER BY c205.Resord ASC";*/

    // Hay casos en los que se modifican los responsables desde unix, en ese caso, se guarda el nuevo reponsable en la 101 pero en la 205 solo se cambia la fecha
    // de fin como responsable para la empresa enterior, pero el nuevo responsable no alcanza a quedar en la 205, en ese caso se une el responsable
    // principal de la 101 con los responsables de la 205 y se tiene en cuenta la fecha de inicio y fin como responsables para saber qué empresas realmente
    // son responsables para la liquidación actual.
    $ccos_cx = implode("','", array_keys($arr_ccos_cirugia));
    $sql = "SELECT t.orden_resp, t.Resord, t.Resnit, t.tipo_paciente, t.plan_emp_cod, t.plan_emp_nom, t.Emppar, t.Emptar, t.Emptem, t.Empnom, t.Empnit, t.Empcod, t.aut_segundo_resp, t.id_204, t.saldo_res, t.fec_ini_resp, t.fec_fin_resp, t.complementario,
                   t.saldo_tipo_concepto, t.saldo_clasificacion, t.saldo_centro_costo
            FROM
            (
                SELECT '-1' AS orden_resp, c205.Resord, c101.Ingcem AS Resnit, c101.Ingtpa AS tipo_paciente, c101.Ingpla AS plan_emp_cod, c153.Plades AS plan_emp_nom, c24.Emppar, c24.Emptar, c24.Emptem, c24.Empnom, c24.Empnit,
                        c24.Empcod, c24.Empvas AS aut_segundo_resp, c204.id AS id_204, c204.Topsal AS saldo_res, c205.Resfir AS fec_ini_resp, c205.Resffr AS fec_fin_resp, c205.Rescom AS complementario,
                        c204.Toptco AS saldo_tipo_concepto, c204.Topcla AS saldo_clasificacion, c204.Topcco AS saldo_centro_costo
                FROM    {$wbasedato}_000101 AS c101
                        LEFT JOIN
                        {$wbasedato}_000024 AS c24 ON (c101.Ingcem = c24.Empcod AND c24.Empest = 'on')
                        LEFT JOIN
                        {$wbasedato}_000205 AS c205 ON (c101.Ingcem = c205.Resnit AND c205.Reshis = '{$whistoria}' AND c205.Resing = '{$wing}' AND c205.Resest = 'on' AND c205.Resdes <> 'on')
                        LEFT JOIN
                        {$wbasedato}_000204 AS c204 ON (c205.Resnit = c204.Topres AND c204.topest = 'on' AND c204.Tophis = '{$whistoria}' AND c204.Toping = '{$wing}')
                        LEFT JOIN
                        {$wbasedato}_000153 AS c153 ON (c101.Ingpla = c153.Placod)
                WHERE   c101.Inghis = '{$whistoria}'
                        AND c101.Ingnin = '{$wing}'

                UNION

                SELECT  c205.Resord AS orden_resp, c205.Resord, c205.Resnit, c205.Restpa AS tipo_paciente, c205.Respla AS plan_emp_cod, c153.Plades AS plan_emp_nom, c24.Emppar, c24.Emptar, c24.Emptem, c24.Empnom, c24.Empnit,
                        c24.Empcod, c24.Empvas AS aut_segundo_resp, c204.id AS id_204, c204.Topsal AS saldo_res, Resfir AS fec_ini_resp, Resffr AS fec_fin_resp, c205.Rescom AS complementario,
                        c204.Toptco AS saldo_tipo_concepto, c204.Topcla AS saldo_clasificacion, c204.Topcco AS saldo_centro_costo
                FROM    {$wbasedato}_000205 AS c205
                        LEFT JOIN
                        {$wbasedato}_000024 AS c24 ON (c205.Resnit = c24.Empcod AND c24.Empest = 'on')
                        LEFT JOIN
                        {$wbasedato}_000204 AS c204 ON (c205.Resnit = c204.Topres AND c204.Topest = 'on' AND c204.Tophis = '{$whistoria}' AND c204.Toping = '{$wing}')
                        LEFT JOIN
                        {$wbasedato}_000153 AS c153 ON (c205.Respla = c153.Placod)
                WHERE   c205.Reshis = '{$whistoria}'
                        AND c205.Resing = '{$wing}'
                        AND c205.Resest = 'on'
                        AND c205.Resdes <> 'on'
            ) AS t
            GROUP BY t.Resnit
            ORDER BY t.Resord ASC";
    $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
    return $result;
}


/**
 * [recuperarDatosLiquidadosTercero: Funciona encargada de inicializar variables relacionadas con datos de terceros ya sea de un concepto que requiere tercero o un equipo o exámen]
 * @param  [type] $conex                      [description]
 * @param  [type] $wemp_pmla                  [description]
 * @param  [type] $wbasedato                  [description]
 * @param  [type] $dif_concepto               [description]
 * @param  [type] $arr_datos_liquidados       [description]
 * @param  [type] $procedimiento_liquidar_cod [description]
 * @param  [type] $arr_datosLiquidadosTercero [description]
 * @return [type]                             [description]
 */
function recuperarDatosLiquidadosTercero($conex, $wemp_pmla, $wbasedato, $dif_concepto, $arr_datos_liquidados, $procedimiento_liquidar_cod, $id_concepto_uso_equipos, $id_concepto_examenes, $arr_datosLiquidadosTercero, $esEquipoExamen)
{
    foreach ($arr_datosLiquidadosTercero as $var_ => $var_value) {
        $$var_ = $var_value;
    }

    if(!$esEquipoExamen)
    {
        if(array_key_exists($dif_concepto, $arr_datos_liquidados[$procedimiento_liquidar_cod]) && codConceptoLegible($dif_concepto) != $id_concepto_uso_equipos && codConceptoLegible($dif_concepto) != $id_concepto_examenes)
        {
            $option_especialidad = '<option value="'.$arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wespecialidad'].'" selected="selected">
                                        '.$arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wespecialidad_nombre'].'
                                    </option>';

            if(array_key_exists("wdisponibilidad", $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]))
            {
                $wdisponibilidad = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wdisponibilidad'];
            }
            if(array_key_exists("wcuadroturno", $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]))
            {
                $wcuadroturno = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wcuadroturno'];
            }
            if(array_key_exists("grupoMedico", $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]))
            {
                $grupoMedico = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['grupoMedico'];
                if($wcuadroturno == '' && $grupoMedico !='')
                {
                    $wcuadroturno = $grupoMedico;
                }
            }

            $codigo_wtercero       = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wtercero'];
            $nombre_wtercero       = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wtercero_nombre'];
            $wespecialidad_        = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wespecialidad'];
            $wespecialidad_nombre_ = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wespecialidad_nombre'];
            $mensaje_no_tarifa     .= " ".$nombre_wtercero;
        }
    }
    else
    {
        $option_especialidad = '<option value="'.$arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]['wespecialidad'].'" selected="selected">
                                    '.$arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]['wespecialidad_nombre'].'
                                </option>';

        if(array_key_exists("wdisponibilidad", $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]))
        {
            $wdisponibilidad = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]['wdisponibilidad'];
        }
        if(array_key_exists("wcuadroturno", $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]))
        {
            $wcuadroturno = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]['wcuadroturno'];
        }
        if(array_key_exists("grupoMedico", $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]))
        {
            $grupoMedico = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]['grupoMedico'];
            if($wcuadroturno == '' && $grupoMedico !='')
            {
                $wcuadroturno = $grupoMedico;
            }
        }

        $codigo_wtercero       = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]['wtercero'];
        $nombre_wtercero       = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]['wtercero_nombre'];
        $wespecialidad_        = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]['wespecialidad'];
        $wespecialidad_nombre_ = $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codigo_equipo_examen_temp]['wespecialidad_nombre'];
        $mensaje_no_tarifa     .= " ".$nombre_wtercero;
    }

    $arr_datosLiquidadosTercero["option_especialidad"]   = $option_especialidad;
    $arr_datosLiquidadosTercero["wdisponibilidad"]       = $wdisponibilidad;
    $arr_datosLiquidadosTercero["wcuadroturno"]          = $wcuadroturno;
    $arr_datosLiquidadosTercero["codigo_wtercero"]       = $codigo_wtercero;
    $arr_datosLiquidadosTercero["nombre_wtercero"]       = $nombre_wtercero;
    $arr_datosLiquidadosTercero["wespecialidad_"]        = $wespecialidad_;
    $arr_datosLiquidadosTercero["wespecialidad_nombre_"] = $wespecialidad_nombre_;
    $arr_datosLiquidadosTercero["mensaje_no_tarifa"]     = $mensaje_no_tarifa;
    if($esEquipoExamen)
    {
        $arr_datosLiquidadosTercero["codigo_equipo_examen_temp"] = $codigo_equipo_examen_temp;
    }

    return $arr_datosLiquidadosTercero;
}

/**
 * [procesarDatosTerceroCargo: Consultar porcentajes de terceros, cuadros de turno, actualizar cargo de tercero]
 * @param  [type] $conex                    [description]
 * @param  [type] $wemp_pmla                [description]
 * @param  [type] $wbasedato                [description]
 * @param  [type] $arr_ActualizaInfoTercero [description]
 * @return [type]                           [description]
 */
function procesarDatosTerceroCargo($conex, $wemp_pmla, $wbasedato, $arr_ActualizaInfoTercero)
{
    foreach ($arr_ActualizaInfoTercero as $var_ => $var_value) {
        $$var_ = $var_value;
    }

    if(array_key_exists($procedimiento_liquidar_cod, $arr_CARGOS_PARA_GRABAR) && array_key_exists($dif_concepto, $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod]))
    {
        $cargos_editar = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto];
        foreach ($cargos_editar as $secuencial => $arr_editar)
        {
            $porcentaje_tercero  = 0;
            $codigo_tercero_UNIX = '';
            if($requiere_tercero == "C")
            {
                // Por cada cargo verificar cual es el porcentaje de participación para el tercero.
                // se debe hacer por cada cargo puesto que pudo haber cambiado de responsable entonces las condiciones pueden variar.
                $wcodcon                 = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["wcodcon"];
                $wtipoempresaToTer       = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["tipoEmpresa"];
                $wtarifaToTer            = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["wtar"];
                $wempresaToTer           = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["wcodemp"];
                $wccoToTer               = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["centroCostos"];
                $wcod_procedimientoToTer = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["procedimiento_liquidar_cod"];

                $arr_paramTer = array();
                $arr_paramTer['codigo_wtercero']         = $codigo_wtercero;
                $arr_paramTer['wespecialidad_']          = $wespecialidad_;
                $arr_paramTer['wcodcon']                 = $wcodcon;
                $arr_paramTer['wtip_paciente']           = $wtip_paciente;
                $arr_paramTer['whora_cargo']             = $whora_cargo;
                $arr_paramTer['wfecha_cargo']            = $wfecha_cargo;
                $arr_paramTer['wtipoempresaToTer']       = $wtipoempresaToTer;
                $arr_paramTer['wtarifaToTer']            = $wtarifaToTer;
                $arr_paramTer['wempresaToTer']           = $wempresaToTer;
                $arr_paramTer['wccoToTer']               = $wccoToTer;
                $arr_paramTer['wcod_procedimientoToTer'] = $wcod_procedimientoToTer;
                $arr_paramTer['wdisponibilidad']         = $wdisponibilidad;
                $arr_paramTer['wcuadroturno']            = $wcuadroturno;
                $arr_paramTer['grupoMedico']             = $grupoMedico;

                $arr_porTer          = consultarPorcentajesTercero($arr_paramTer);
                $porcentaje_tercero  = trim($arr_porTer["wporter"]);
                $codigo_tercero_UNIX = $arr_porTer["wterunix"];
                $grupoMedico         = ($arr_porTer["grupoMedico"]=='no') ? '': $arr_porTer["grupoMedico"]; // [updt-76] Nuevo campo de terceros para ser tenido en cuenta en la homolagación.

                if($porcentaje_tercero == '')
                {
                    $codigo_wtercero       = "";
                    $nombre_wtercero       = "";
                    $wespecialidad_        = "";
                    $wespecialidad_nombre_ = "";
                    $option_especialidad   = "";
                }
                else
                {
                    $mensaje_no_tarifa = "";
                    $porcentaje_terceroVer = "%".$porcentaje_tercero;
                }

                // Array para guardar parámetros que pueden usar para determinar el cuadro de turno de los terceros cuando se cambie un médico desde la liquidación
                if(!array_key_exists($procedimiento_liquidar_cod,$arr_datosDelCargo_tercero))
                {
                    $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod] = array();
                }

                if(!array_key_exists($dif_concepto, $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod]))
                {
                    $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto] = array();
                }

                if($arr_porTer["dobleCuadroDeTurno"]*1 > 0)
                {
                    $activar_select_cuadroTurno = true;
                    $arr_cuadrosTurnoTercero = $arr_porTer["cuadrosDeTurno"];
                    $grupoMedico = '';
                }
                elseif($wcuadroturno != "")
                {
                    // Si hay cuadro de turno es porque desde la interfaz se seleccionó un cuadro de turno desde el select.
                    // entonces consultar de nuevo todos los posibles cuadro de turno para pintar el select completo de nuevo y
                    // seleccionar automaticamente la opción acabada de seleccionar para un cuadro de turno deseado.
                    $arr_paramTer['wcuadroturno'] = ""; // Se envía cuadro de turno vacío para obligar a generar nuevamente las opciones completas de cuadro de turno para el médico escogido
                    $arr_paramTer['grupoMedico']  = ""; // Se envía cuadro de turno vacío para obligar a generar nuevamente las opciones completas de cuadro de turno para el médico escogido
                    $arr_porTerComplemento = consultarPorcentajesTercero($arr_paramTer);
                    $grupoMedico           = ($arr_paramTer["grupoMedico"]=='no') ? '': $arr_paramTer["grupoMedico"];
                    $arr_cuadrosTurnoTercero = array();
                    if($arr_porTerComplemento["dobleCuadroDeTurno"]*1 > 0)
                    {
                        $activar_select_cuadroTurno = true;
                        $arr_cuadrosTurnoTercero = $arr_porTerComplemento["cuadrosDeTurno"];
                        $grupoMedico = '';
                    }

                    // if($activar_select_cuadroTurno)
                    // {
                    //     if(count($arr_cuadrosTurnoTercero) > 0)
                    //     {
                    //         foreach ($arr_cuadrosTurnoTercero as $cod_cuadro => $value_cuadro)
                    //         {
                    //             $optionsCuadroTurno .= '<option value="'.$cod_cuadro.'" >'.$cod_cuadro.'-'.$value_cuadro.'</option>';
                    //         }
                    //     }
                    // }
                }

                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wporter_ant"]              = $porcentaje_tercero;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wcodter_ant"]              = $codigo_wtercero;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wnomter_ant"]              = $nombre_wtercero;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["codigo_especialidad_ant"]  = $wespecialidad_;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wespecialidad_ant"]        = $wespecialidad_;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wespecialidad_nombre_ant"] = $wespecialidad_nombre_;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["dobleCuadroDeTurno_ant"]   = $arr_porTer["dobleCuadroDeTurno"]*1;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wcodcon"]                  = $wcodcon;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wtip_paciente"]            = $wtip_paciente;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["whora_cargo"]              = $whora_cargo;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wfecha_cargo"]             = $wfecha_cargo;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wtipoempresaToTer"]        = $wtipoempresaToTer;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wtarifaToTer"]             = $wtarifaToTer;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wempresaToTer"]            = $wempresaToTer;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wccoToTer"]                = $wccoToTer;
                $arr_datosDelCargo_tercero[$procedimiento_liquidar_cod][$dif_concepto]["wcod_procedimientoToTer"]  = $wcod_procedimientoToTer;
            }

            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["wporter"]              = $porcentaje_tercero;
            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["wcodter"]              = $codigo_wtercero;
            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["wnomter"]              = $nombre_wtercero;
            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["codigo_especialidad"]  = $wespecialidad_;
            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["wespecialidad"]        = $wespecialidad_;
            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["wespecialidad_nombre"] = $wespecialidad_nombre_;
            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["wdisponibilidad"]      = $wdisponibilidad;
            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["wcuadroturno"]         = $wcuadroturno;
            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["grupoMedico"]          = $wcuadroturno;
            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencial]["wterunix"]             = $codigo_tercero_UNIX;
        }
    }

    // Actualiza las variables en el array antes de retornarlo.
    foreach ($arr_ActualizaInfoTercero as $var_ => $var_value) {
        $arr_ActualizaInfoTercero[$var_] = $$var_;
    }

    return $arr_ActualizaInfoTercero;
}

function descripcionProcedimiento($TIP_POS)
{
    $expl_tip_pro = explode("_ORD_", $TIP_POS);
    $desc = constant($expl_tip_pro[1]);
    return $desc;
}

function consultarModalidadYPuntosProcedimientos($conex, $wbasedato, $wemp_pmla, $wcentro_costo, $wfecha_cargo, $arr_datos_liquidar, $wtipo_emp_valida_nopos, $wprocedimiento_add, $wconcepto_add, $arr_extras, $arr_conceptos_nombres, $arr_datos_liquidados,
                                                 $es_paquete, $wcod_empresa, $tarifa_original, $wtipo_ingreso, $whora_cargo, $wtiempo_minutos_cx, $wtiempo_sala_recuperarcion, $wtiempo_uso_minutos, $wtipo_anestesia_cx,
                                                 $arr_primero_segundo_responsable, &$temporal_procedimientos_ordenadosPPNP)
{
    $arr_procedimientos_relacionados = array();
    $arr_return = array("temporal_procedimientos_ordenadosPPNP"=>array(),"arr_procedimientos_relacionados"=>array());
    foreach ($arr_datos_liquidar['arr_para_liquidar'] as $dif_key => $arr_info_temp)
    {
        $wespecialidad         = $arr_info_temp["wespecialidad"];
        $procedimiento_ord     = $arr_info_temp["wprocedimiento"];
        $procedimiento_dif     = $arr_info_temp["wprocedimiento_dif"];
        $wtiempo_procedimiento = $arr_info_temp["wtiempo_procedimiento"];
        $worgano               = $arr_info_temp["worgano"];

        if(!array_key_exists($procedimiento_ord, $arr_procedimientos_relacionados))
        {
            $arr_procedimientos_relacionados[$procedimiento_ord] = $procedimiento_ord;
        }

        // Consulta los uvrs y se crea un array para ordenarlo
        $wnumero_puntos        = 0;
        $valor_grupo           = "";
        $modalidad_facturacion = "";
        //$arr_primero_segundo_responsable["primer_responsable"]["codigo"]
        // Ciclo adicional para recorrer este array de responsables y por cada uno saber el modo de facturar, es útil por ejemplo para poder consultar más
        // adelante las clasificaciones SI y NO facturables de insumos por cada responsable.
        foreach ($arr_primero_segundo_responsable as $idx_resp => $arr_info_resp)
        {
            if($arr_info_resp["codigo"] != '')
            {
                $empresa_responsable = $arr_info_resp["codigo"];
                $tipoEmpresa_respons = $arr_info_resp["tipoEmpresa"];
                $tabla_relacion = "";
                $pro_NOPOS      = "";
                if(!$es_paquete)
                {
                    $arr_mod_procedimiento = modalidadPuntosProcedimiento($conex, $wbasedato, $procedimiento_ord, $empresa_responsable, $tipoEmpresa_respons, $wcentro_costo, $wtipo_emp_valida_nopos, $worgano);
                    $tabla_relacion = $arr_mod_procedimiento["tabla_relacion"];
                    $pro_NOPOS      = $arr_mod_procedimiento["pro_NOPOS"];
                    if($arr_mod_procedimiento['tipo_facturacion'] != 'ERR_NO_MODO')
                    {
                        // $rowProced = mysql_fetch_array($resPro);
                        $modalidad_facturacion = $arr_mod_procedimiento['tipo_facturacion'];
                        if($modalidad_facturacion == 'UVR')
                        {
                            $wnumero_puntos = $arr_mod_procedimiento['wnumero_uvrs']*1;
                        }
                        elseif($modalidad_facturacion == 'GQX')
                        {
                            // Consulta el valor del grupo
                            $valor_grupo = $arr_mod_procedimiento['valor_grupo'];
                            $wnumero_puntos = $valor_grupo*1;
                        }
                        else
                        {
                            // CONSULTAR LA PLANTILLA, CONSULTAR LAS TARIFAS DE LOS PROCEDIMIENTOS ENCONTRADOS Y SUMAR EN UN SOLO TOTAL PARA CADA PROCEDIMIENTO
                            $data_temp = array("mensaje"=>"");
                            $arr_conceptos_liquidar_ModCODIGO = array();
                            $arr_lista_conceptos_temp = array();
                            $sumatoriaConceptosProcedimiento = 0;

                            $arr_sumatoriaConceptosProcedimiento = sumatoriaConceptosProcedimientoCODIGO($conex, $wemp_pmla, $wbasedato, $procedimiento_ord, $procedimiento_dif, $data_temp, $arr_datos_liquidar, $arr_conceptos_liquidar_ModCODIGO, $wprocedimiento_add, $wconcepto_add, $arr_extras, $arr_lista_conceptos_temp, $arr_conceptos_nombres, $arr_datos_liquidados, $wespecialidad, $es_paquete, $wcentro_costo, $wcod_empresa, $wtipo_ingreso, $whora_cargo, $wtiempo_minutos_cx, $wtiempo_sala_recuperarcion, $wtiempo_uso_minutos, $wtipo_anestesia_cx,'', $worgano);
                            $sumatoriaConceptosProcedimiento = $arr_sumatoriaConceptosProcedimiento["sumatoria"];
                            $wnumero_puntos = $sumatoriaConceptosProcedimiento;
                        }
                    }
                }
                else
                {
                    $res_paquete = consultarPaquete($conex, $wbasedato, $wemp_pmla, $procedimiento_ord, $tarifa_original, $wtiempo_minutos_cx);
                    $sumar_valores_paquete = 0;
                    foreach ($res_paquete as $keyPqt => $row_pte)
                    {
                        $valor_tarifa = 0;
                        if (strtotime($wfecha_cargo) < strtotime($row_pte['Paqdetfec']))
                        {
                            $valor_tarifa = $row_pte['Paqdetvan'];
                        }
                        else
                        {
                            $valor_tarifa = $row_pte['Paqdetvac'];
                        }

                        $sumar_valores_paquete += $valor_tarifa*1;
                    }
                    $wnumero_puntos = $sumar_valores_paquete;
                }

                if(!array_key_exists($wespecialidad, $temporal_procedimientos_ordenadosPPNP))
                {
                    $temporal_procedimientos_ordenadosPPNP[$wespecialidad] = array();
                }

                if(!array_key_exists($procedimiento_dif, $temporal_procedimientos_ordenadosPPNP[$wespecialidad]))
                {
                    // En este primer nivel del array queda la forma de liquidación solo del primer responsable (Responsable principal hasta el momento de la liquidación)
                    // Con estos datos consulta la plantilla
                    $temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif] = array();
                    $temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif] = array( "wnumero_puntos"        => 0,
                                                                                                        "dif_key"               => "",
                                                                                                        "wprocedimiento"        => "",
                                                                                                        "valor_grupo"           => 0,
                                                                                                        "modalidad_facturacion" => "",
                                                                                                        "wtiempo_procedimiento" => $wtiempo_procedimiento,
                                                                                                        "modo_liquida_empresa"  =>array());
                }
                // $temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif]["wnumero_puntos"]        = $wnumero_puntos*1;
                $temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif]["dif_key"]               = $dif_key;
                $temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif]["wprocedimiento"]        = $dif_key;
                $temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif]["valor_grupo"]           =  $valor_grupo;
                if($temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif]["modalidad_facturacion"] == '')
                {
                    $temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif]["modalidad_facturacion"] =  $modalidad_facturacion;
                }

                if($temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif]["wnumero_puntos"] == '')
                {
                    $temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif]["wnumero_puntos"] =  $wnumero_puntos*1;
                }

                if(!array_key_exists($empresa_responsable, $temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif]["modo_liquida_empresa"]))
                {
                    // Diferencia la forma de liquidación por cada uno de los responsables
                    $temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif]["modo_liquida_empresa"][$empresa_responsable] = array();
                }
                $temporal_procedimientos_ordenadosPPNP[$wespecialidad][$procedimiento_dif]["modo_liquida_empresa"][$empresa_responsable] = array(   "wnumero_puntos"        => $wnumero_puntos*1,
                                                                                                                                                    "dif_key"               => $dif_key,
                                                                                                                                                    "wprocedimiento"        => $dif_key,
                                                                                                                                                    "valor_grupo"           => $valor_grupo,
                                                                                                                                                    "modalidad_facturacion" => $modalidad_facturacion,
                                                                                                                                                    "wtiempo_procedimiento" => $wtiempo_procedimiento,
                                                                                                                                                    "tabla_relacion"        => $tabla_relacion,
                                                                                                                                                    "pro_NOPOS"             => $pro_NOPOS);
            }
        }
    }
    $arr_return = array("temporal_procedimientos_ordenadosPPNP"=>$temporal_procedimientos_ordenadosPPNP,"arr_procedimientos_relacionados"=>$arr_procedimientos_relacionados);
    return $arr_return;
}

function actualizarResponsablePrincipalPrimerResponsable($conex, $wbasedato, $wemp_pmla, $arr_entidades_responsables, $arr_primero_segundo_responsable, $whistoria, $wing, $wnomemp_tal, $procedimiento_NOPOS, &$RESPONSABLE_VIRTUAL_PACIENTE, &$arr_datos_liquidar, &$wcod_empresa, &$cambioResponsablePorFechaFin)
{
    if($arr_primero_segundo_responsable['primer_responsable']['codigo'] != $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"]
        && array_key_exists($arr_primero_segundo_responsable['primer_responsable']['codigo'], $arr_entidades_responsables))
    {
        $codigo_primer_responsable = $arr_primero_segundo_responsable['primer_responsable']['codigo'];
        // Se debe hacer cambio de responsable por cambio de fecha por ejemplo, solo si el procedimiento actual es POS, porque si es NO POS, necesariamente el responsable va a ser diferente
        // porque lo no pos se liquida como particular pero el responsable principal seguirá siendo una entidad diferente a particular.
        if(!$procedimiento_NOPOS)
        {
            // $guardar = "cambioResponsablePorFechaFin: ".print_r($cambioResponsablePorFechaFin,true).PHP_EOL;
            // seguimiento($guardar);
            $cambioResponsablePorFechaFin = array(  "historia"          => $whistoria,
                                                    "ingreso"           => $wing,
                                                    "newResposable"     => $arr_entidades_responsables[$codigo_primer_responsable]["simulacion_campos"]["Resnit"],
                                                    "antResponsable"    => $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"],
                                                    "tipoRespAnterior"  => $RESPONSABLE_VIRTUAL_PACIENTE["tipoEmpre"],
                                                    "nomPaciente"       => "",
                                                    "antNomResponsable" => $wnomemp_tal,
                                                    "nomCajero"         => "");
        }

        $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"]    = $arr_entidades_responsables[$codigo_primer_responsable]["simulacion_campos"]["Resnit"];
        $RESPONSABLE_VIRTUAL_PACIENTE["Ingent"]    = $arr_entidades_responsables[$codigo_primer_responsable]["simulacion_campos"]["Empnom"];
        $RESPONSABLE_VIRTUAL_PACIENTE["Ingtar"]    = $arr_entidades_responsables[$codigo_primer_responsable]["simulacion_campos"]["Emptar"];
        $RESPONSABLE_VIRTUAL_PACIENTE["tipoEmpre"] = $arr_entidades_responsables[$codigo_primer_responsable]["simulacion_campos"]["Emptem"];
        $wcod_empresa = $codigo_primer_responsable;

        $arr_datos_liquidar["arr_datos_paciente"]["wnomemp_eps"]             = $RESPONSABLE_VIRTUAL_PACIENTE["Ingent"];
        $arr_datos_liquidar["arr_datos_paciente"]["wresponsable_eps_codigo"] = $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"];
        $arr_datos_liquidar["arr_datos_paciente"]["wresponsable_eps"]        = $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"].'-'.$RESPONSABLE_VIRTUAL_PACIENTE["Ingent"];
        $arr_datos_liquidar["arr_datos_paciente"]["tarifa_original"]         = $RESPONSABLE_VIRTUAL_PACIENTE["Ingtar"];
        $arr_datos_liquidar["arr_datos_paciente"]["tipoEmpresa"]             = $RESPONSABLE_VIRTUAL_PACIENTE["tipoEmpre"];
    }
}

/**
 * [validarCargoFacturadoUnix: Valída si un cargo en unix no ha sido facturado aún]
 * @param  [type] $conex     [description]
 * @param  [type] $wbasedato [description]
 * @param  [type] $wemp_pmla [description]
 * @param  [type] $id_cargo  [description]
 * @return [type]            [description]
 */
function validarCargoFacturadoUnix($conex, $wbasedato, $wemp_pmla, $id_cargo, $conexUnix, $wbasedato_mov)
{
    $data = array("error"=>0,"mensaje"=>"", "cargoFacturadoUnx"=>false,"sql_err"=>"","vlr_fact"=>"","facturable"=>"");
    $sqlOff = " SELECT  t106.id AS id_106, t200.Gruinv AS mueve_inventario, t106.Tcardoi, t106.Tcarlin, t107.Audrcu
                FROM    {$wbasedato}_000106 AS t106
                        INNER JOIN
                        {$wbasedato}_000107 AS t107 ON (t106.id = t107.Audreg)
                        INNER JOIN
                        {$wbasedato}_000200 AS t200 ON (t106.Tcarconcod = t200.Grucod)
                WHERE   t106.id = '{$id_cargo}'";

    if($resultOff = mysql_query($sqlOff,$conex))
    {
        if(mysql_num_rows($resultOff) > 0)
        {
            $rowCargo         = mysql_fetch_array($resultOff);
            $id_106           = $rowCargo['id_106'];
            $mueve_inventario = $rowCargo['mueve_inventario'];
            $Tcardoi          = $rowCargo['Tcardoi'];
            $Tcarlin          = $rowCargo['Tcarlin'];
            $registroUnix     = $rowCargo['Audrcu'];

            if($rowCargo['mueve_inventario'] == 'on')
            {
                // Buscar cargo con linea y documento
                $sql2 = "   SELECT  Fenfue
                            FROM    {$wbasedato_mov}_000002
                            WHERE   Fennum  = '{$Tcardoi}'";
                if($res2 = mysql_query( $sql2, $conex  ))
                {
                    $fuente ='';
                    if($row2 = mysql_fetch_array($res2))
                    {
                        $fuente = $row2['Fenfue'];

                        $sqlu = "   SELECT  drodocdoc
                                    FROM    ITDRODOC
                                    WHERE   drodocnum  = '{$Tcardoi}'
                                            AND drodocfue  = '{$fuente}'";
                        if($resu = odbc_do( $conexUnix, $sqlu ))
                        {
                            $drodocdoc = odbc_result($resu,"drodocdoc");
                            $selectfacar = "    SELECT  cardetvfa, cardetfac
                                                FROM    FACARDET
                                                WHERE   cardetfue = '{$fuente}'
                                                        AND cardetdoc = '{$drodocdoc}'
                                                        AND cardetlin = '{$Tcarlin}'";

                            if($resfacar = odbc_do( $conexUnix, $selectfacar ))
                            {
                                $cardetfacturado = odbc_result($resfacar,"cardetvfa");
                                $cardetfacturable = odbc_result($resfacar,"cardetfac");
                                $data["cardetfacturable"] = $cardetfacturable;

                                // if(($cardetfacturado*1) > 0 || (($cardetfacturado*1) == 0 && $cardetfacturable == 'N')) // Lo cargos No facturables no generan factura, pero para el correcto funcionamiento de esta función se asume como facturado.
                                if(($cardetfacturado*1) > 0)
                                {
                                    $data["cargoFacturadoUnx"] = true; // Ya ha sido facturado
                                    $data["vlr_fact"] = "[$id_cargo:$cardetfacturado, FACARDET=>cardetfac:$cardetfacturable, cardetfue:$fuente, cardetdoc:$drodocdoc, cardetlin:$Tcarlin]";
                                }
                                else
                                {
                                    $data["vlr_fact"] = "[$id_cargo=> cardetfac:$cardetfacturable]";
                                }
                            }
                            else
                            {
                                $data["error"] = 1;
                                $data["sql_err"] = $selectfacar;
                            }
                        }
                        else
                        {
                            $data["error"] = 1;
                            $data["sql_err"] = $sqlu;
                        }
                    }
                    else
                    {
                        $data["error"] = 1;
                        $data["sql_err"] = $sql2;
                    }
                }
                else
                {
                    // Err
                    $data["error"] = 1;
                    $data["sql_err"] = $sql2;
                }
            }
            else
            {
                // Buscar con número de registro directamente
                if($registroUnix != '')
                {
                    $selectfacar = "SELECT cardetvfa, cardetfac
                                    FROM   FACARDET
                                    WHERE  cardetreg = '{$registroUnix}'";

                    if($resfacar = odbc_do( $conexUnix, $selectfacar ))
                    {
                        $cardetfacturado = odbc_result($resfacar,"cardetvfa");
                        $cardetfacturable = odbc_result($resfacar,"cardetfac");
                        $data["cardetfacturable"] = $cardetfacturable;

                        // if(($cardetfacturado*1) > 0 || (($cardetfacturado*1) == 0 && $cardetfacturable == 'N')) // Lo cargos No facturables no generan factura, pero para el correcto funcionamiento de esta función se asume como facturado.
                        if(($cardetfacturado*1) > 0)
                        {
                            $data["cargoFacturadoUnx"] = true; // Ya ha sido facturado
                            $data["vlr_fact"] = "[$id_cargo:$cardetfacturado, cardetfacturable:$cardetfacturable, cardetreg:$registroUnix]";
                        }
                        else
                        {
                            $data["vlr_fact"] = "[id_cargo:$id_cargo, cardetreg:$registroUnix, cardetfac:$cardetfacturable]";
                        }
                    }
                    else
                    {
                        $data["error"] = 1;
                        $data["sql_err"] = $selectfacar;
                    }
                }
                else
                {
                    $data["error"] = 1;
                }
            }
        }
        else
        {
            $data["error"] = 1;
            $data["sql_err"] = $sqlOff;
        }
    }
    else
    {
        $data["error"] = 1;
        $data["sql_err"] = $sqlOff;
    }
    return $data;
}

/**
 * [crearCargoDevolucion: Se encarga de crear el array del cargo para la devolución de insumos, similar al array de cargos que se genera al momento de grabar la liquidación]
 * @param  [type] $conex                   [description]
 * @param  [type] $conexUnix               [description]
 * @param  [type] $wemp_pmla               [description]
 * @param  [type] $wbasedato               [description]
 * @param  [type] $id_cargo                [description]
 * @param  [type] $arr_InfoCargo106        [description]
 * @param  [type] &$arr_parametosGenerales [description]
 * @param  [type] &$wfecha_cargo           [description]
 * @param  [type] &$whora_cargo            [description]
 * @return [type]                          [description]
 */
function crearCargoDevolucion($conex, $conexUnix, $wemp_pmla, $wbasedato, $id_cargo, $arr_InfoCargo106, &$arr_parametosGenerales, &$wfecha_cargo, &$whora_cargo)
{
    foreach ($arr_parametosGenerales as $key => $value) {
        $$key = $value;
    }

    $tipoEmpresa = "";
    $sqlEmp = " SELECT  c24.Emptem
                FROM    {$wbasedato}_000024 AS c24
                WHERE   c24.Empcod = '{$arr_InfoCargo106['Tcarres']}'";
    if($result24 = mysql_query($sqlEmp, $conex))
    {
        if(mysql_num_rows($result24) > 0)
        {
            $row24 = mysql_fetch_assoc($result24);
            $tipoEmpresa = $row24['Emptem'];
        }
    }

    $cargoDevolucion = array();

    $arr_InfoCargo106["Fecha_data"] = $fecha_actual;
    $arr_InfoCargo106["Hora_data"]  = $hora_actual;
    $arr_InfoCargo106["Tcardev"]    = 'on';
    $arr_InfoCargo106["Seguridad"]  = $user_session;

    $cargoDevolucion["wfecha"]                 = $arr_InfoCargo106["Fecha_data"];
    $cargoDevolucion["whora"]                  = $arr_InfoCargo106["Hora_data"];
    $cargoDevolucion["whora_cargo"]            = $arr_InfoCargo106["Hora_data"];
    $cargoDevolucion["whistoria"]              = $arr_InfoCargo106['Tcarhis'];
    $cargoDevolucion["wing"]                   = $arr_InfoCargo106['Tcaring'];
    $cargoDevolucion["wfeccar"]                = $arr_InfoCargo106['Tcarfec'];
    $cargoDevolucion["wser"]                   = $arr_InfoCargo106['Tcarsin'];
    $cargoDevolucion["wcodemp"]                = $arr_InfoCargo106['Tcarres'];
    $cargoDevolucion["wno1"]                   = $arr_InfoCargo106['Tcarno1'];
    $cargoDevolucion["wno2"]                   = $arr_InfoCargo106['Tcarno2'];
    $cargoDevolucion["wap1"]                   = $arr_InfoCargo106['Tcarap1'];
    $cargoDevolucion["wap2"]                   = $arr_InfoCargo106['Tcarap2'];
    $cargoDevolucion["wdoc"]                   = $arr_InfoCargo106['Tcardoc'];
    $cargoDevolucion["wccogra"]                = $arr_InfoCargo106['Tcarser'];
    $cargoDevolucion["wcodcon"]                = $arr_InfoCargo106['Tcarconcod'];
    $cargoDevolucion["wnomcon"]                = $arr_InfoCargo106['Tcarconnom'];
    $cargoDevolucion["wprocod"]                = $arr_InfoCargo106['Tcarprocod'];
    $cargoDevolucion["wpronom"]                = $arr_InfoCargo106['Tcarpronom'];
    $cargoDevolucion["wcodter"]                = $arr_InfoCargo106['Tcartercod'];
    $cargoDevolucion["wnomter"]                = $arr_InfoCargo106['Tcarternom'];
    $cargoDevolucion["wespecialidad"]          = $arr_InfoCargo106['Tcaresp'];
    $cargoDevolucion["wporter"]                = $arr_InfoCargo106['Tcarterpor'];
    $cargoDevolucion["cobraHonorarios"]        = $arr_InfoCargo106['Tcarath'];
    $cargoDevolucion["wcantidad"]              = $arr_InfoCargo106['Tcarcan'];
    $cargoDevolucion["wvaltar"]                = $arr_InfoCargo106['Tcarvun'];
    $cargoDevolucion["valorvto"]               = $arr_InfoCargo106['Tcarvto'];
    $cargoDevolucion["wrecexc"]                = $arr_InfoCargo106['Tcarrec'];
    $cargoDevolucion["wfacturable"]            = $arr_InfoCargo106['Tcarfac'];
    $cargoDevolucion["wtipfac"]                = $arr_InfoCargo106['Tcartfa'];
    $cargoDevolucion["Tcarest"]                = $arr_InfoCargo106['Tcarest'];
    $cargoDevolucion["wnromvto"]               = $arr_InfoCargo106['Tcarnmo'];
    $cargoDevolucion["wconmvto"]               = $arr_InfoCargo106['Tcarcmo'];
    $cargoDevolucion["waprovecha"]             = $arr_InfoCargo106['Tcarapr'];
    $cargoDevolucion["wdevol"]                 = $arr_InfoCargo106['Tcardev'];
    $cargoDevolucion["wtar"]                   = $arr_InfoCargo106['Tcartar'];
    $cargoDevolucion["wvaltarExce"]            = $arr_InfoCargo106['Tcarvex'];
    $cargoDevolucion["wvaltarReco"]            = $arr_InfoCargo106['Tcarvre'];
    $cargoDevolucion["idParalelo"]             = $arr_InfoCargo106['Tcaridp'];
    $cargoDevolucion["enParalelo"]             = $arr_InfoCargo106['Tcarpar'];
    $cargoDevolucion["idTope"]                 = $arr_InfoCargo106['Tcarita'];
    $cargoDevolucion["estadoMonitor"]          = $arr_InfoCargo106['Tcarppr'];
    $cargoDevolucion["numCargoInvC"]           = ""; //$arr_InfoCargo106['Tcardoi'];
    $cargoDevolucion["linCargoInvC"]           = ""; //$arr_InfoCargo106['Tcarlin'];
    $cargoDevolucion["numCargoInvD"]           = ""; //$arr_InfoCargo106['Tcardod'];
    $cargoDevolucion["linCargoInvD"]           = ""; //$arr_InfoCargo106['Tcarlid'];
    $cargoDevolucion["estaEnTurno"]            = $arr_InfoCargo106['Tcartur'];
    $cargoDevolucion["grupoMedico"]            = $arr_InfoCargo106['Tcargru'];
    $cargoDevolucion["wterunix"]               = (isset($arr_InfoCargo106['Tcartun'])) ? $arr_InfoCargo106['Tcartun']: "";
    $cargoDevolucion["wconinv"]                = $arr_InfoCargo106['mueve_inventario'];
    $cargoDevolucion["wusuario"]               = $arr_InfoCargo106['Seguridad'];
    $cargoDevolucion["tipoCuadroTurno"]        = '';
    $cargoDevolucion["habitacion"]             = '';
    $cargoDevolucion["fecIngHab"]              = '';
    $cargoDevolucion["horIngHab"]              = '';
    $cargoDevolucion["diasFacturados"]         = '';
    $cargoDevolucion["fecEgrHab"]              = '';
    $cargoDevolucion["horEgrHab"]              = '';
    $cargoDevolucion["diasEstancia"]           = '';
    $cargoDevolucion["logRegistroCargo"]       = '';
    $cargoDevolucion["logUnix"]                = '';
    $cargoDevolucion["pendRevicion"]           = '';
    $cargoDevolucion["wnomemp"]                = '';
    $cargoDevolucion["wfecing"]                = '';
    $cargoDevolucion["wcodpaq"]                = '';
    $cargoDevolucion["wpaquete"]               = '';
    $cargoDevolucion["wconabo"]                = '';
    $cargoDevolucion["wexiste"]                = '';
    $cargoDevolucion["wbod"]                   = '';
    $cargoDevolucion["wconser"]                = $arr_InfoCargo106['Gruser'];
    $cargoDevolucion["wexidev"]                = 0;
    $cargoDevolucion["wgraba_varios_terceros"] = false;
    $cargoDevolucion["wcodcedula"]             = '';
    $cargoDevolucion["tipoEmpresa"]            = $tipoEmpresa;
    $cargoDevolucion["nitEmpresa"]             = '';
    $cargoDevolucion["tipoIngreso"]            = $wtipo_ingreso;
    $cargoDevolucion["tipoPaciente"]           = '';
    $cargoDevolucion["warctar"]                = $arr_InfoCargo106['Gruarc'];
    $cargoDevolucion["topeGeneral"]            = '';
    $cargoDevolucion["saldoTope"]              = '';
    $cargoDevolucion["nomCajero"]              = '';
    $cargoDevolucion["wauto"]                  = '';
    $cargoDevolucion["ccoActualPac"]           = $ccoActualPac;
    $cargoDevolucion["respuesta_array"]        = 'on'; // Variable para que la función GrabarCargo responda mensaje en un array
    $cargoDevolucion["codHomologar"]           = '';

    $TIPO_POS = ($arr_InfoCargo106['Tcarnps'] == 'on') ? '0_ORD_PRO_NOPOS': '1_ORD_PROPOS';

    $cargoDevolucion["wgrabar"]                = 'on';
    $cargoDevolucion["wtarifa_unitaria_mx"]    = '';
    $cargoDevolucion["valorActual"]            = '';
    $cargoDevolucion["valorAnterior"]          = '';
    $cargoDevolucion["fechaCambio"]            = '';
    $cargoDevolucion["TIP_POS"]                = $TIPO_POS;
    $cargoDevolucion["desde_CargosPDA"]        = false;
    $cargoDevolucion["idCargosAnexos"]         = '';

    $es_insumo = 'off';
    if($arr_InfoCargo106['Tcarconcod'] == $concepto_medicamentos_mueven_inv || $arr_InfoCargo106['Tcarconcod'] == $concepto_materiales_mueven_inv)
    {
        $es_insumo = 'on';
    }

    $cargoDevolucion['wliquidacion_no_pos']        = $arr_InfoCargo106['Tcarnps'];
    $cargoDevolucion["wtar_cargo_POS"]             = $arr_InfoCargo106['Tcartrp'];
    $cargoDevolucion["wres_cargo_POS"]             = $arr_InfoCargo106['Tcarrps'];
    $cargoDevolucion['winsumos_cambiar_ingreso']   = ($es_insumo == 'on') ? $arr_InfoCargo106['Tcarmiu'] : 'off';
    $cargoDevolucion['wingreso_reemplazable_unix'] = $wingreso_reemplazable_unix;// Es el ingreso que al momento de anular esta activo en unix.
    $cargoDevolucion['fecha_reemplazable_unix']    = ($es_insumo == 'on' && $cargoDevolucion['winsumos_cambiar_ingreso'] == 'on') ? $fecha_reemplazable_unix : '';// Fecha del ingreso activo en unix.
    $cargoDevolucion['wingreso_activo_unx']        = $wingreso_activo_unx;

    // if($cargoDevolucion['wcodcon'] == $concepto_medicamentos_mueven_inv || $cargoDevolucion['wcodcon'] == $concepto_materiales_mueven_inv)
    {
        $anioMesAct = date("Ym")*1;

        $xpl_a_m_cargo = explode("-", $cargoDevolucion['wfeccar']);
        $anioMesCargo = ($xpl_a_m_cargo[0].$xpl_a_m_cargo[1])*1;
        if($anioMesCargo < $anioMesAct)
        {
            $cargoDevolucion['wfeccar'] = $fecha_actual;
        }

        if($cargoDevolucion['fecha_reemplazable_unix'] != '')
        {
            $fec_AnioMesing_unx = str_replace("/","-",$cargoDevolucion['fecha_reemplazable_unix']);
            $fec_AnioMesing_unx = explode("-",$fec_AnioMesing_unx);
            $fec_AnioMesing_unx = ($fec_AnioMesing_unx[0].$fec_AnioMesing_unx[1])*1;

            if($fec_AnioMesing_unx < $anioMesAct)
            {
                // Si el año-mes del último ingreso activo en unix es menor al año-mes en que se está haciendo la liquidación, entonces el cargo se debe grabar con la fecha actual
                // para evitar erro en el integrado
                // "El mes [mes0] es diferente al mes del usuario [mes1]"
                $cargoDevolucion['fecha_reemplazable_unix'] = $fecha_actual;
            }

            $fec_ing_unx = str_replace("-","",$cargoDevolucion['fecha_reemplazable_unix']);
            $fec_ing_unx = str_replace("/","",$fec_ing_unx)*1;

            $wfeccar_mx = str_replace("-", "", $cargoDevolucion['wfeccar']);
            $wfeccar_mx = str_replace("/", "", $wfeccar_mx)*1;

            // Si la fecha del cargo es igual o mayor a la fecha del ingreso unix no es necesario realizar una modificación de fechas en unix.
            if($wfeccar_mx >= $fec_ing_unx)
            {
                $cargoDevolucion['fecha_reemplazable_unix'] = '';
            }
        }
        // Si el cargo era de un mes anterior entonces se debe devolver con la fecha actual porque de lo contrario puede generar error
        // en el integrador por encontrarse con un cierre del mes anterior.
    }

    // Se usan en los parámetros de validación de saldos y tarifas de unix
    $wfecha_cargo = $cargoDevolucion['wfeccar'];
    $whora_cargo  = $cargoDevolucion["whora_cargo"];

    return $cargoDevolucion;
}

/**
 * [devolverCargoInventario: Función encargada de generar el cargo de devolución para los insumos que son anulados desde liquidación de cirugía]
 * @param  [type] $conex                   [description]
 * @param  [type] $conexUnix               [description]
 * @param  [type] $wemp_pmla               [description]
 * @param  [type] $wbasedato               [description]
 * @param  [type] $id_cargo                [description]
 * @param  [type] $arr_InfoCargo106        [description]
 * @param  [type] &$arr_parametosGenerales [description]
 * @param  [type] &$idGuardadoBD           [description]
 * @return [type]                          [description]
 */
function devolverCargoInventario($conex, $conexUnix, $wemp_pmla, $wbasedato, $id_cargo, $cargoDevolucion, &$arr_parametosGenerales, &$idGuardadoBD)
{
    foreach ($arr_parametosGenerales as $key => $value) {
        $$key = $value;
    }

    $data_respuesta = array("mensaje"=>"", "cod_cargo"=>"", "error"=>0);

    $cargoDevolucion["bloqueo_global_fuentes"]    = $bloqueo_global_fuentes; // Indica que la tabla de fuentes en unix ya fue bloqueada para que en la función
                                                                             // GrabarCargo no intenta bloquear de nuevo la tabla
    $cargoDevolucion["conexUnix_FacturacionPpal"] = $conexUnix; // Conexión a unix que puede ser usado dentro de las funciones de facturación para no tener que abrir una nueva conexión.
    $cargoDevolucion["usa_fuente_cargo"]          = $usa_fuente_cargo; // Esta variable se encarga de identificar si por ejemplo se usó la tabla de fuentes sifue y es necesario realizar un commit en unix.
                                                                       // Despues de terminar el proceso de liquidación, si por ejemplo se liquidaron solo insumos entonces no es necesario ejecutar el commit.

    // Los cargos que no tienen tarifa pero el manual dice que se cobra 0% no se guardan en cliame_106 ni unix. Pero se graban en el log de cirugía.
    $data_respuesta = GrabarCargo($cargoDevolucion,$idGuardadoBD, false);
    if(isset($data_respuesta["usa_fuente_cargo"]) && $data_respuesta["usa_fuente_cargo"])
    {
        $usa_fuente_cargo = $data_respuesta["usa_fuente_cargo"];
    }
    // $guardar = "cargoDevolucion: ".print_r($cargoDevolucion,true).PHP_EOL;
    // seguimiento($guardar);

    if(!$error_bloqueoUnix)
    {
        // Se evalúa Error y no Error_liqCx, para que la liquidación no contiúe ante cualquier problema con un cargo reportado desde unix,
        // se alcanzarían a grabar los primeros cargos antes de generarse un posible error, en el mejor de los casos si se reporta un problema
        // en el primer cargo, la liquidación quedará sin grabar ni un solo cargo.
        if((array_key_exists("Error", $data_respuesta) && $data_respuesta["Error"]) || (array_key_exists("error", $data_respuesta) && $data_respuesta["error"] == 1))
        {
            $error_bloqueoUnix = true;
        }
    }

    foreach ($arr_parametosGenerales as $key => $value) {
        $arr_parametosGenerales[$key] = $$key;
    }

    return $data_respuesta;
}


/**
 * [codConceptoLegible: para poder agregar un concepto más de una vez a mismo procedimiento o paquete se le agregó un consecutivo al código para poderlos diferenciar
 *                         esta función se encarga de retornar el código limpio del concepto para poderlo comparar con otras variables]
 * @param  [type] $concepto_ [description]
 * @return [type]            [description]
 */
function codConceptoLegible($concepto_)
{
    $exp = explode("_", $concepto_);
    return $exp[0];
}

/**
 * [existeTabla: Función para consultar si una tabla está creada o no en la base de datos] [updt-83]
 * @param  [type] $conex     [description]
 * @param  [type] $wemp_pmla [description]
 * @param  [type] $wbasedato [Prefijo de la tabla en la que se quere buscar]
 * @param  [type] $tabla     [Tabla sin prefijo que se quiere verificar]
 * @return [type]            [description]
 */
function existeTabla($conex, $wemp_pmla, $wbasedato, $tabla)
{
    $tabla  = $wbasedato.'_'.$tabla;
    $sql    = "SHOW TABLES LIKE '{$tabla}'";
    $result = mysql_query($sql);
    return (mysql_num_rows($result) == 1) ? true: false;
}

/**
 * [procedimientoSeDebeAutorizarLiquidacion: Se encarga de consultar si el procedimiento requiere autorización para la empresa responsable]
 * @param  [type] $conex         [description]
 * @param  [type] $wemp_pmla     [description]
 * @param  [type] $wbasedato     [description]
 * @param  [type] $codEnt        [description]
 * @param  [type] $nitEnt        [description]
 * @param  [type] $tipEnt        [description]
 * @param  [type] $planEmp       [description]
 * @param  [type] $clasifProc    [description]
 * @param  [type] $procedimiento [description]
 * @return [type]                [description]
 */
function procedimientoSeDebeAutorizarLiquidacion($conex, $wemp_pmla, $wbasedato, $codEnt, $nitEnt, $tipEnt, $planEmp, $clasifProc, $procedimiento)
{
    // --> Generar query combinado para saber si alguna regla le aplica al articulo, para que este deba ser autorizado
    $variables = array();
    // --> Procedimiento
    $variables['Paucop']['combinar']    = true;
    $variables['Paucop']['valor']       = $procedimiento;
    // --> Clasificacion
    $variables['Paucla']['combinar']    = true;
    $variables['Paucla']['valor']       = $clasifProc;
    // --> Plan de empresa
    $variables['Paupla']['combinar']    = true;
    $variables['Paupla']['valor']       = $planEmp;
    // --> Entidad
    $variables['Paucem']['combinar']    = true;
    $variables['Paucem']['valor']       = $codEnt;
    // --> Nit Entidad
    $variables['Paunit']['combinar']    = true;
    $variables['Paunit']['valor']       = $nitEnt;
    // --> Tipo de empresa
    $variables['Pautem']['combinar']    = true;
    $variables['Pautem']['valor']       = $tipEnt;
    // --> Estado
    $variables['Pauest']['combinar']    = false;
    $variables['Pauest']['valor']       = 'on';

    // --> Obtener query
    $sqlDebeAuto = generarQueryCombinado($variables, $wbasedato."_000260");
    $resDebeAuto = mysql_query($sqlDebeAuto, $conex) or die("ERROR EN QUERY MATRIX (sqlDebeAuto): ".mysql_error());

    if($rowDebeAuto = mysql_fetch_array($resDebeAuto))
    {
        $sqlAut = "
        SELECT Paupau
          FROM ".$wbasedato."_000260
         WHERE id = '".$rowDebeAuto['id']."'
        ";
        $resAut = mysql_query($sqlAut, $conex) or die("ERROR EN QUERY MATRIX (sqlAut): ".mysql_error());
        $rowAut = mysql_fetch_array($resAut);
        if($rowAut['Paupau'] == 'on')
            return true;
        else
            return false;
    }
    else
        return false;
}

/**
 * [articuloSeDebeAutorizar: Se encarga de consultar si el insumo requiere autorización para la empresa responsable]
 * @param  [type] $conex      [description]
 * @param  [type] $wemp_pmla  [description]
 * @param  [type] $wbasedato  [description]
 * @param  [type] $infoArtMer [description]
 * @param  [type] $codEnt     [description]
 * @param  [type] $nitEnt     [description]
 * @param  [type] $tipEnt     [description]
 * @param  [type] $planEmp    [description]
 * @return [type]             [description]
 */
function articuloSeDebeAutorizar($conex, $wemp_pmla, $wbasedato, $infoArtMer, $codEnt, $nitEnt, $tipEnt, $planEmp)
{
    // --> Generar query combinado para saber si alguna regla le aplica al articulo, para que este deba ser autorizado
    $variables = array();
    // --> Codigo del articulo
    $variables['Paucom']['combinar']    = true;
    $variables['Paucom']['valor']       = $infoArtMer['codigo'];
    // --> Grupo de articulo
    $variables['Paugru']['combinar']    = true;
    $variables['Paugru']['valor']       = $infoArtMer['grupo'];
    // --> Clasificacion
    $variables['Paucla']['combinar']    = true;
    $variables['Paucla']['valor']       = (($infoArtMer['clasificacionArt'] != '' && $infoArtMer['clasificacionArt'] != '*' && $infoArtMer['clasificacionArt'] != 'NO APLICA') ? $infoArtMer['clasificacionArt'] : $infoArtMer['clasificacionGru']);
    // --> Plan de empresa
    $variables['Paupla']['combinar']    = true;
    $variables['Paupla']['valor']       = $planEmp;
    // --> Entidad
    $variables['Paucem']['combinar']    = true;
    $variables['Paucem']['valor']       = $codEnt;
    // --> Nit Entidad
    $variables['Paunit']['combinar']    = true;
    $variables['Paunit']['valor']       = $nitEnt;
    // --> Tipo de empresa
    $variables['Pautem']['combinar']    = true;
    $variables['Pautem']['valor']       = $tipEnt;
    // --> Estado
    $variables['Pauest']['combinar']    = false;
    $variables['Pauest']['valor']       = 'on';

    // --> Obtener query
    $sqlDebeAuto = generarQueryCombinado($variables, $wbasedato."_000258");
    $resDebeAuto = mysql_query($sqlDebeAuto, $conex) or die("ERROR EN QUERY MATRIX (sqlDebeAuto): ".mysql_error());

    if($rowDebeAuto = mysql_fetch_array($resDebeAuto))
    {
        $sqlAut = "
        SELECT Paupau
          FROM ".$wbasedato."_000258
         WHERE id = '".$rowDebeAuto['id']."'
        ";
        $resAut = mysql_query($sqlAut, $conex) or die("ERROR EN QUERY MATRIX (sqlAut): ".mysql_error());
        $rowAut = mysql_fetch_array($resAut);
        if($rowAut['Paupau'] == 'on')
            return true;
        else
            return false;
    }
    else
        return false;
}

/**
 * [comprobarRequiereAutorizacion: Inicia las validaciones para comprobar si el cargo requiere autorización de la empresa responsable]
 * @param  [type] $conex                      [description]
 * @param  [type] $wemp_pmla                  [description]
 * @param  [type] $wbasedato                  [description]
 * @param  [type] $wbasedato_movhos           [description]
 * @param  [type] $wturno_cirugia             [description]
 * @param  [type] $codEmpPartic               [description]
 * @param  [type] $TIP_POS                    [description]
 * @param  [type] $es_paquete                 [description]
 * @param  [type] $es_insumo                  [description]
 * @param  [type] $wprocod                    [description]
 * @param  [type] $wcodcon                    [description]
 * @param  [type] $wcod_empresa               [description]
 * @param  [type] $datosCargo                 [description]
 * @param  [type] &$arr_cargos_req_autorizar  [description]
 * @param  [type] &$arr_requerir_autorizacion [description]
 * @return [type]                             [description]
 */
function comprobarRequiereAutorizacion($conex, $wemp_pmla, $wbasedato, $wbasedato_movhos, $wturno_cirugia, $codEmpPartic, $TIP_POS, $es_paquete, $es_insumo, $wprocod, $wcodcon, $wcod_empresa, $datosCargo, $autorizarTodosLosCargosSdoResp, &$arr_cargos_req_autorizar, &$arr_requerir_autorizacion)
{
    // $arr_requerir_autorizacion["requerir_autorizacion"] = true;
    // if(!in_array($wcod_empresa, $arr_requerir_autorizacion["empresa_autorizar"]))
    // {
    //     $arr_requerir_autorizacion["empresa_autorizar"][] = $wcod_empresa;
    // }
    // $guardar = "es_insumo $wprocod, $wcodcon:".print_r($es_insumo,true).PHP_EOL;
    // seguimiento($guardar);
    // No validar si requiere autorización si
    // Es un partiruclar | El valor el cargo es cero | Es un cargo sin tarifa
    if($codEmpPartic != $wcod_empresa && is_numeric($datosCargo['wvaltarReco']) && $datosCargo['wvaltarReco'] > 0
        && $datosCargo['wfacturable'] == 'S' && $datosCargo['wgrabar'] != 'off' && $datosCargo['sin_tarifa_no_grabar'] != 'on')
    {
        $nitEnt     = '';
        $tipEnt     = '';
        $planEmp    = '';
        $clasifiPro = '';

        $sqlEmpresa  = "SELECT  c24.Empnit AS nit, c24.Emptar AS tarifa_emp, c24.Emptem AS tipo_empresa, c205.Respla
                        FROM    {$wbasedato}_000205 AS c205
                                LEFT JOIN
                                {$wbasedato}_000024 AS c24 ON (c24.Empcod = '{$wcod_empresa}' AND c205.Resnit = c24.Empcod)
                        WHERE   Reshis = '{$datosCargo['whistoria']}'
                                AND c205.Resing = '{$datosCargo['wing']}'
                                AND c205.Resnit = '{$wcod_empresa}'";
        $resEmpresa = mysql_query($sqlEmpresa, $conex) or die("<b>ERROR EN QUERY MATRIX(sqlEmpresa):</b><br>".mysql_error());
        if(mysql_num_rows($resEmpresa) > 0)
        {
            $rowEmpresa = mysql_fetch_array($resEmpresa);
            $nitEnt     = $rowEmpresa['nit'];
            $tipEnt     = $rowEmpresa['tarifa_emp'];
            $planEmp    = $rowEmpresa['Respla'];
        }

        if($es_insumo != 'on')
        {
            $pideAutorizacion = true;
            if($autorizarTodosLosCargosSdoResp != 'on')
            {
                //Verificar si el cargo para el nuevo responsable requiere autorización
                // --> Obtener clasificacion del procedimiento
                $sqlClasPro = "SELECT   Procpg
                               FROM     {$wbasedato}_000103
                               WHERE    Procod = '{$wprocod}'";
                $resClasPro = mysql_query($sqlClasPro, $conex) or die("<b>ERROR EN QUERY MATRIX(sqlClasPro):</b><br>".mysql_error());
                if($rowClasPro = mysql_fetch_array($resClasPro))
                { $clasifiPro = $rowClasPro['Procpg']; }
                else
                { $clasifiPro = '*'; }

                $pideAutorizacion = procedimientoSeDebeAutorizarLiquidacion($conex, $wemp_pmla, $wbasedato, $wcod_empresa, $nitEnt, $tipEnt, $planEmp, $clasifiPro, $wprocod);
            }

            if($pideAutorizacion)
            {
                registrarCargosRequierenAutorizacion($conex, $wemp_pmla, $wbasedato, $wturno_cirugia, $wcod_empresa, $wprocod, $es_insumo, $datosCargo, $arr_cargos_req_autorizar);
            }
        }
        else
        {
            $pideAutorizacion = true;
            if($autorizarTodosLosCargosSdoResp != 'on')
            {
                $infoArtMer = array("codigo"=>"", "grupo"=>"", "clasificacionArt"=>"", "clasificacionGru"=>"");
                $sqlinsumo  = " SELECT  c207.Mpacom, (c207.Mpacan-c207.Mpadev) saldo, c207.id, c207.Mpanau, c207.Mpauia, mv26.Artcom, mv26.Artcla, c24.Grucod, c24.Grucpg
                                FROM    {$wbasedato}_000207 AS c207
                                        INNER JOIN
                                        {$wbasedato_movhos}_000026 AS mv26 ON(mv26.Artcod = '{$wprocod}' AND c207.Mpacom = mv26.Artcod)
                                        INNER JOIN
                                        {$wbasedato}_000004 AS c24 ON(SUBSTRING_INDEX(mv26.Artgru, '-', 1) = c24.Grucod)
                                WHERE   c207.Mpatur = '{$wturno_cirugia}'
                                        AND c207.Mpaest = 'on'";
                $resInsumo = mysql_query($sqlinsumo, $conex) or die("<b>ERROR EN QUERY MATRIX(sqlinsumo):</b><br>".mysql_error());
                if(mysql_num_rows($resInsumo) > 0)
                {
                    $rowInsumo                      = mysql_fetch_array($resInsumo);
                    $infoArtMer["codigo"]           = $wprocod;
                    $infoArtMer["grupo"]            = $rowInsumo["Grucod"];
                    $infoArtMer["clasificacionArt"] = $rowInsumo["Artcla"];
                    $infoArtMer["clasificacionGru"] = $rowInsumo["Grucpg"];
                }

                $pideAutorizacion = articuloSeDebeAutorizar($conex, $wemp_pmla, $wbasedato, $infoArtMer, $wcod_empresa, $nitEnt, $tipEnt, $planEmp);
            }

            if($pideAutorizacion)
            {
                // $guardar = "infoArtMer:".print_r($infoArtMer,true).PHP_EOL;
                // seguimiento($guardar);
                registrarCargosRequierenAutorizacion($conex, $wemp_pmla, $wbasedato, $wturno_cirugia, $wcod_empresa, $wprocod, $es_insumo, $datosCargo, $arr_cargos_req_autorizar);
            }
        }
    }
}

/**
 * [registrarCargosRequierenAutorizacion: Incluye el cargo que requere autorización en un arreglo de cargos a autorizar]
 * @param  [type] $conex                     [description]
 * @param  [type] $wemp_pmla                 [description]
 * @param  [type] $wbasedato                 [description]
 * @param  [type] $wturno_cirugia            [description]
 * @param  [type] $wcod_empresa              [description]
 * @param  [type] $wprocod                   [description]
 * @param  [type] $es_insumo                 [description]
 * @param  [type] $datosCargo                [description]
 * @param  [type] &$arr_cargos_req_autorizar [description]
 * @return [type]                            [description]
 */
function registrarCargosRequierenAutorizacion($conex, $wemp_pmla, $wbasedato, $wturno_cirugia, $wcod_empresa, $wprocod, $es_insumo, $datosCargo, &$arr_cargos_req_autorizar)
{
    $clasificacion_cargo = ($es_insumo == 'on') ? "insumo": "procedimiento";

    if(!array_key_exists($wturno_cirugia, $arr_cargos_req_autorizar))
    {
        $arr_cargos_req_autorizar[$wturno_cirugia] = array();
    }

    if(!array_key_exists($clasificacion_cargo, $arr_cargos_req_autorizar[$wturno_cirugia]))
    {
        $arr_cargos_req_autorizar[$wturno_cirugia][$clasificacion_cargo] = array();
    }

    if(!array_key_exists($wcod_empresa, $arr_cargos_req_autorizar[$wturno_cirugia][$clasificacion_cargo]))
    {
        $arr_cargos_req_autorizar[$wturno_cirugia][$clasificacion_cargo][$wcod_empresa] = array();
    }

    if(!array_key_exists($wprocod, $arr_cargos_req_autorizar[$wturno_cirugia][$clasificacion_cargo][$wcod_empresa]))
    {
        // $guardar = "datosCargo:".print_r($datosCargo,true).PHP_EOL;
        // seguimiento($guardar);
        $arr_cargos_req_autorizar[$wturno_cirugia][$clasificacion_cargo][$wcod_empresa][$wprocod] = array("wcodcon" => $datosCargo["wcodcon"],
                                                                                                          "wnomcon" => $datosCargo["wnomcon"],
                                                                                                          "wprocod" => $datosCargo["wprocod"],
                                                                                                          "wpronom" => $datosCargo["wpronom"],
                                                                                                          "wcodemp" => $datosCargo["wcodemp"],
                                                                                                          "wnomemp" => $datosCargo["wnomemp"],
                                                                                                          "numauto" => "",);
    }
}

/**
 * [solicitarAutorizacion: En la tablas de mercado y auditoria-autorizaciones se marcan los registros que requieren autorización]
 * @param  [type] $conex              [description]
 * @param  [type] $wemp_pmla          [description]
 * @param  [type] $wbasedato          [description]
 * @param  [type] $wturno_cirugia_aut [description]
 * @param  [type] $wcod_empresa_aut   [description]
 * @param  [type] $tipo_cargo         [description]
 * @param  [type] $wprocod_aut        [description]
 * @return [type]                     [description]
 */
function solicitarAutorizacion($conex,$wemp_pmla, $wbasedato, $wturno_cirugia_aut, $wcod_empresa_aut, $tipo_cargo, $wprocod_aut)
{

}

/**
 * [registrarResponsableRequiereAutorizacion: ]
 * @param  [type] $conex       [description]
 * @param  [type] $wemp_pmla   [description]
 * @param  [type] $wbasedato   [description]
 * @param  [type] $wturno_cx   [description]
 * @param  [type] $wcodempresa [description]
 * @param  [type] &$data       [description]
 * @return [type]              [description]
 */
function registrarResponsableRequiereAutorizacion($conex, $wemp_pmla, $wbasedato, $wturno_cx, $wcodempresa, $user_session, &$data)
{
    $sqlSelEmp = "SELECT Auesra FROM {$wbasedato}_000252 WHERE Auetur = '{$wturno_cx}' AND Auesra <> ''";
    $data["sqlSelEmp"] = $sqlSelEmp;
    if($resultSelEmp = mysql_query($sqlSelEmp, $conex))
    {
        if(mysql_num_rows($resultSelEmp) == 0)
        {
            $rolAlertaSuperacionTopeSoat = consultarAliasPorAplicacion($conex, $wemp_pmla, 'rolAlertaSuperacionTopeSoat');
            $sqlUdt252 = "UPDATE {$wbasedato}_000252 SET Auesra = '{$wcodempresa}', Auelli = 'off', Aueecx = '{$rolAlertaSuperacionTopeSoat}' WHERE Auetur = '{$wturno_cx}'";
            $data["sqlUdt252"] = $sqlUdt252;
            if($resultUpd252 = mysql_query($sqlUdt252, $conex))
            {
                $msj_noliq = utf8_decode("Requiere autoriación segundo reponsable");
                // --> Guardar el log de movimientos
                $sqlLogMov = "  INSERT INTO {$wbasedato}_000259
                                        (Medico,                Fecha_data,         Hora_data,              Movtur,         Movest, Movdes,                 Movusu,         Seguridad)
                                VALUES
                                        ('{$wbasedato}', '".date("Y-m-d")."', '".date("H:i:s")."',  '{$wturno_cx}',      '{$rolAlertaSuperacionTopeSoat}',  '{$msj_noliq}', '{$user_session}',  'C-{$user_session}')";
                if($resultsqlLogMov = mysql_query($sqlLogMov, $conex))
                {
                    // mysql_query($sqlLogMov, $conex) or die("<b>ERROR EN QUERY MATRIX(sqlLogMov):</b><br>".mysql_error());
                }
                else
                {
                    $data["sqlLogMov"] .= " > ".mysql_error();
                }
            }
            else
            {
                $data["error"] = 1;
                $data["mensaje"] = "No se pudo registrar el responsable que requere autorización";
                $data["sqlUdt252"] .= " > ".mysql_error();
            }
        }
    }
    else
    {
        $data["error"] = 1;
        $data["mensaje"] = "No se pudo consultar si existía un segundo responsable pendiente de autorización.";
        $data["sqlSelEmp"] .= " > ".mysql_error();
    }
}

function registroCargosAutorizar($conex, $wemp_pmla, $wbasedato, $arr_cargos_req_autorizar, $user_session, &$data)
{
    if(count($arr_cargos_req_autorizar) > 0)
    {
        $errores = array("procedimiento"=>"", "insumos"=>"");
        foreach ($arr_cargos_req_autorizar as $wturno_cx => $arr_empresaCargos)
        {
            if(array_key_exists("procedimiento", $arr_empresaCargos))
            {
                foreach ($arr_empresaCargos["procedimiento"] as $wcodempresa => $arr_aut_cargos)
                {
                    // Marcar todos los procedimientos que requieren autorización
                    foreach ($arr_aut_cargos as $wcod_cargo => $arr_inforcargo)
                    {
                        $udt253 = "UPDATE {$wbasedato}_000253 SET Audsra = 'on' WHERE Audtur = '{$wturno_cx}' AND Audpro='{$wcod_cargo}'";
                        $data["udt253"] = $udt253;
                        if($resultudt253 = mysql_query($udt253, $conex))
                        {
                            //
                        }
                        else
                        {
                            $data["error"] = 1;
                            $errores["procedimiento"] = "* No se pudo solicitar autorización para algunos procedimientos";
                            // $data["mensaje"] = "* No se pudo solicitar autorización para algunos procedimientos";
                            $data["udt253"] .= " > ".mysql_error();
                        }
                    }
					
					if($data["error"] != 1){
						// Si en la tabla de encabezado no hay segundo responsable para solicitar autorización entonces se guarda el responsable actual
						// al que se le va a pedir autorización.
						registrarResponsableRequiereAutorizacion($conex, $wemp_pmla, $wbasedato, $wturno_cx, $wcodempresa, $user_session, $data);
					}
				}
            }

            if(array_key_exists("insumo", $arr_empresaCargos))
            {
                foreach ($arr_empresaCargos["insumo"] as $wcodempresa => $arr_aut_cargos)
                { 
                    // Marcar todos los insumos que requieren autorización
                    foreach ($arr_aut_cargos as $wcod_cargo => $arr_inforcargo)
                    {
                        $udt207 = "UPDATE {$wbasedato}_000207 SET Mpasra = 'on' WHERE Mpatur = '{$wturno_cx}' AND Mpacom = '{$wcod_cargo}'";
                        $data["udt207"] = $udt207;
                        if($resultudt207 = mysql_query($udt207, $conex))
                        {
                            //
                        }
                        else
                        {
                            $data["error"] = 1;
                            $errores["insumos"] = "* No se pudo solicitar autorización para algunos insumos";
                            // $data["mensaje"] = "* No se pudo solicitar autorización para algunos insumos";
                            $data["udt207"] .= " > ".mysql_error();
                        }
                    }
					
					if($data["error"] != 1){
						 // Si en la tabla de encabezado no hay segundo responsable para solicitar autorización entonces se guarda el responsable actual
						// al que se le va a pedir autorización.
						registrarResponsableRequiereAutorizacion($conex, $wemp_pmla, $wbasedato, $wturno_cx, $wcodempresa, $user_session, $data);
					}
                }
                $data["mensaje"] = implode("<br>", array("0"=>$errores["procedimiento"], "1"=>$errores["insumos"]));
            }
        }
    }
}

/**
 * [htmlCargosPendientesAutorizar: Muestra un html de los cargos que quedaron para el segundo responsable que requieren autorización cuando el SOAT superó tope]
 * @param  [type] $conex                    [description]
 * @param  [type] $wemp_pmla                [description]
 * @param  [type] $wbasedato                [description]
 * @param  [type] $arr_cargos_req_autorizar [description]
 * @param  [type] $user_session             [description]
 * @return [type]                           [description]
 */
function htmlCargosPendientesAutorizar($conex, $wemp_pmla, $wbasedato, $arr_cargos_req_autorizar, $user_session)
{
    $html_autorizar_cargos = "";
    // Si hay cargos que requieren autorización
    if(count($arr_cargos_req_autorizar) > 0)
    {
        $arr_cargosAntsRequierenAut = array();
        $tr_pro_aut   = "";
        $tr_insum_aut = "";
        $cont_trs     = 0;
        foreach ($arr_cargos_req_autorizar as $wturno_cirugia_aut => $arr_clasificacionAut)
        {
            // Consultar los procedimientos que antes se les haya solicitado autorización
            // Consultar los insumos que antes se les haya solicitado autorización
            // Con esos datos crear un array y verificar en los for siguientes si continúan los mismo cargos y eliminarlos del array,
            // al final del ciclo lo que sobre desmarcarlo
            // Consultar autorizaciones para procedimientos anteriores
            // $sqlAutAntPro = "SELECT Audpro, Audnau FROM {$wbasedato}_000253 WHERE Audtur = '{$wturno_cirugia_aut}' AND Audsra = 'on'";
            // if($resultTm = mysql_query($sqlAutAntPro,$conex))
            // {
            //     while ($rowPro = mysql_fetch_assoc($resultTm))
            //     {
            //         if(!array_key_exists($wturno_cirugia_aut, $arr_cargosAntsRequierenAut))
            //         {
            //             $arr_cargosAntsRequierenAut[$wturno_cirugia_aut] = array("procedimiento"=>array());
            //         }

            //         if(!array_key_exists($rowPro["Audpro"], $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["procedimiento"]))
            //         {
            //             $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["procedimiento"][$rowPro["Audpro"]] = $rowPro["Audnau"];
            //         }
            //     }
            // }

            // // Consultar autorizaciones para insumos anteriores
            // $sqlAutAntIns = "SELECT Mpacom, Mpanau FROM {$wbasedato}_000207 WHERE Mpatur = '{$wturno_cirugia_aut}' AND Mpasra = 'on'";
            // if($resultTm = mysql_query($sqlAutAntIns,$conex))
            // {
            //     while ($rowIns = mysql_fetch_assoc($resultTm))
            //     {
            //         if(!array_key_exists($wturno_cirugia_aut, $arr_cargosAntsRequierenAut))
            //         {
            //             $arr_cargosAntsRequierenAut[$wturno_cirugia_aut] = array("insumo"=>array());
            //         }
            //         elseif(!array_key_exists("insumo", $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]))
            //         {
            //             $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["insumo"] = array();
            //         }

            //         if(!array_key_exists($rowIns["Mpacom"], $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["insumo"]))
            //         {
            //             $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["insumo"][$rowIns["Mpacom"]] = $rowIns["Mpanau"];
            //         }
            //     }
            // }

            // Autorizar procedimientos
            $arr_aut_pro = (array_key_exists("procedimiento", $arr_clasificacionAut)) ? $arr_clasificacionAut["procedimiento"]: array();
            foreach ($arr_aut_pro as $wcod_empresa_aut => $arr_cargos_aut)
            {
                foreach ($arr_cargos_aut as $wprocod_aut => $arr_cargo_aut)
                {
                    // if(array_key_exists($wprocod_aut, $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["procedimiento"]))
                    // {
                    //     $arr_cargos_req_autorizar[$wturno_cirugia_aut]["procedimiento"][$wcod_empresa_aut][$wprocod_aut]["numauto"] = $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["procedimiento"][$wprocod_aut];
                    //     $arr_cargo_aut["numauto"] = $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["procedimiento"][$wprocod_aut];
                    //     unset($arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["procedimiento"][$wprocod_aut]);
                    // }

                    // $estado_autoriazado = (limpiarString($arr_cargo_aut["numauto"]) != '') ? '<span style="background-color:green;font-weight:bold;color:#ffffff;">Autorizado</span>': '<span style="background-color:lightyellow;font-weight:bold;">Pendiente</span>';
                    // solicitarAutorizacion($conex, $wemp_pmla, $wbasedato, $wturno_cirugia_aut, $wcod_empresa_aut, 'procedimiento', $wprocod_aut);
                    $css_tr_aut = ($cont_trs % 2 == 0) ? 'fila1': 'fila2';
                    $tr_pro_aut .= '<tr class="'.$css_tr_aut.'">
                                        <td>'.$arr_cargo_aut["wpronom"].'</td>
                                        <td>'.$arr_cargo_aut["wcodemp"].'-'.$arr_cargo_aut["wnomemp"].'</td>
                                        <td>&nbsp;</td>
                                    </tr>';
                    $cont_trs++;
                }
            }
            // Autorizar insumos
            $arr_aut_insumo = (array_key_exists("insumo", $arr_clasificacionAut)) ? $arr_clasificacionAut["insumo"]: array();
            foreach ($arr_aut_insumo as $wcod_empresa_aut => $arr_cargos_aut)
            {
                foreach ($arr_cargos_aut as $wprocod_aut => $arr_cargo_aut)
                {
                    // if(array_key_exists($wprocod_aut, $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["insumo"]))
                    // {
                    //     $arr_cargos_req_autorizar[$wturno_cirugia_aut]["insumo"][$wcod_empresa_aut][$wprocod_aut]["numauto"] = $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["insumo"][$wprocod_aut];
                    //     $arr_cargo_aut["numauto"] = $arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["insumo"][$wprocod_aut];
                    //     unset($arr_cargosAntsRequierenAut[$wturno_cirugia_aut]["insumo"][$wprocod_aut]);
                    // }

                    // $estado_autoriazado = (limpiarString($arr_cargo_aut["numauto"]) != '') ? '<span style="background-color:green;font-weight:bold;color:#ffffff;">Autorizado</span>': '<span style="background-color:lightyellow;font-weight:bold;">Pendiente</span>';
                    // solicitarAutorizacion($conex, $wemp_pmla, $wbasedato, $wturno_cirugia_aut, $wcod_empresa_aut, 'insumo', $wprocod_aut);
                    $css_tr_aut = ($cont_trs % 2 == 0) ? 'fila1': 'fila2';
                    $tr_insum_aut .= '<tr class="'.$css_tr_aut.'">
                                        <td>'.$arr_cargo_aut["wprocod"].'-'.$arr_cargo_aut["wpronom"].'</td>
                                        <td>'.$arr_cargo_aut["wcodemp"].'-'.$arr_cargo_aut["wnomemp"].'</td>
                                        <td>&nbsp;</td>
                                    </tr>';
                    $cont_trs++;
                }
            }
        }

        // $guardar = "arr_cargosAntsRequierenAut: ".print_r($arr_cargosAntsRequierenAut,true).PHP_EOL;
        // seguimiento($guardar);

        if($tr_pro_aut != '')
        {
            $tr_pro_aut = '<tr class="">
                                <td colspan="3">&nbsp;</td>
                            </tr>
                            <tr class="encabezadoTabla">
                                <td>Procedimiento</td>
                                <td>Empresa</td>
                                <td>Estado</td>
                            </tr>'.$tr_pro_aut;
        }

        if($tr_insum_aut != '')
        {
            $tr_insum_aut = '<tr class="">
                                <td colspan="3">&nbsp;</td>
                            </tr>
                            <tr class="encabezadoTabla">
                                <td>Insumo</td>
                                <td>Empresa</td>
                                <td>Estado</td>
                            </tr>'.$tr_insum_aut;
        }

        $html_autorizar_cargos = '  <div class="fila2">Lista de cargos de procedimientos o insumos que se cambiaron a otro responsable pero requieren autorización de la entidad.</div>
                                    <table width="100%">
                                        '.$tr_pro_aut.'
                                        '.$tr_insum_aut.'
                                    </table>';
    }
    return $html_autorizar_cargos;
}

/**
 * [validarCargoGrabadoRequiereAutorizacion: Luego de haber grabado el cargo se verifíca si ese cargo debe requerir autorización para el responsable luego que haber superado el
 *                                             tope del primer responsable]
 * @param  [type] $conex                     [description]
 * @param  [type] $wemp_pmla                 [description]
 * @param  [type] $wbasedato                 [description]
 * @param  [type] $user_session              [description]
 * @param  [type] $wturno_cirugia            [description]
 * @param  [type] $arr_CARGO                 [description]
 * @param  [type] $arr_cargos_req_autorizar  [description]
 * @param  [type] &$arr_data_autorizacion [description]
 * @return [type]                            [description]
 */
function validarCargoGrabadoRequiereAutorizacion($conex, $wemp_pmla, $wbasedato, $user_session, $wturno_cirugia, $arr_CARGO, &$arr_cargos_req_autorizar, &$arr_data_autorizacion)
{
    if(count($arr_cargos_req_autorizar) > 0)
    {
        $wcodempresa = $arr_CARGO["wcodemp"];
        $wcod_cargo  = $arr_CARGO["wprocod"];
        $tipo_cargo  = ($arr_CARGO["es_insumo"] == 'on') ? 'insumo': 'procedimiento';
        // $guardar = "arr_cargos_req_autorizar: ".print_r($arr_cargos_req_autorizar,true).PHP_EOL;
        // seguimiento($guardar);
        if(array_key_exists($wturno_cirugia, $arr_cargos_req_autorizar))
        {
            if(array_key_exists($tipo_cargo, $arr_cargos_req_autorizar[$wturno_cirugia]))
            {
                if(array_key_exists($wcodempresa, $arr_cargos_req_autorizar[$wturno_cirugia][$tipo_cargo]))
                {
                    if(array_key_exists($wcod_cargo, $arr_cargos_req_autorizar[$wturno_cirugia][$tipo_cargo][$wcodempresa]))
                    {
                        $arr_cargo_aut = $arr_cargos_req_autorizar[$wturno_cirugia][$tipo_cargo][$wcodempresa][$wcod_cargo];
                        if(!array_key_exists("cargo_marcado", $arr_cargo_aut))
                        {
                            if($tipo_cargo == 'procedimiento')
                            {
                                // Procedimientos
                                $sqlAutorizar = "UPDATE {$wbasedato}_000253 SET Audsra = 'on' WHERE Audtur = '{$wturno_cirugia}' AND Audpro='{$wcod_cargo}'";
                                $data["sqlAutorizar"] = $sqlAutorizar;
                            }
                            else
                            {
                                // Insumos
                                $sqlAutorizar = "UPDATE {$wbasedato}_000207 SET Mpasra = 'on' WHERE Mpatur = '{$wturno_cirugia}' AND Mpacom = '{$wcod_cargo}'";
                                $data["sqlAutorizar"] = $sqlAutorizar;
                            }

                            $css_tr_aut = ($arr_data_autorizacion["cont_trs"] % 2 == 0) ? 'fila1': 'fila2';
                            $arr_data_autorizacion["cont_trs"] = $arr_data_autorizacion["cont_trs"]+1;
                            if($resultsqlAutorizar = mysql_query($sqlAutorizar, $conex))
                            {
								registrarResponsableRequiereAutorizacion($conex, $wemp_pmla, $wbasedato, $wturno_cirugia, $wcodempresa, $user_session, $arr_data_autorizacion);
								 
                                $tr_aut = '<tr class="'.$css_tr_aut.'" style="font-size:8pt;">
                                                <td>'.$arr_cargo_aut["wpronom"].'</td>
                                                <td>'.$arr_cargo_aut["wcodemp"].'-'.$arr_cargo_aut["wnomemp"].'</td>
                                                <td style="color:green;font-weight:bold;">Pendiente autorización</td>
                                            </tr>';
                                $arr_data_autorizacion[$tipo_cargo][] = $tr_aut;
                            }
                            else
                            {
                                $tr_aut = '<tr class="'.$css_tr_aut.'" style="font-size:8pt;">
                                                <td>'.$arr_cargo_aut["wpronom"].'</td>
                                                <td>'.$arr_cargo_aut["wcodemp"].'-'.$arr_cargo_aut["wnomemp"].'</td>
                                                <td style="color:red;font-weight:bold;">Error al enviar para autorizar</td>
                                            </tr>';
                                $arr_data_autorizacion[$tipo_cargo][] = $tr_aut;

                                $arr_data_autorizacion["error"] = 1;
                                $arr_data_autorizacion["mensaje"] = "* No se pudo solicitar autorización para algunos cargos";
                                // $data["mensaje"] = "* No se pudo solicitar autorización para algunos procedimientos";
                                $arr_data_autorizacion["sqlAutorizar"] .= " > {$tipo_cargo}: ".mysql_error();
                            }
                        }

                        // Este control es para agregar el cargo solo una vez en el caso de los procedimientos porque no importa la cantidad de conceptos
                        // queden al segundo responsable, la autorización cubre todo.
                        $arr_cargos_req_autorizar[$wturno_cirugia][$tipo_cargo][$wcodempresa][$wcod_cargo]["cargo_marcado"] = 'on';
                    }
                }
            }
        }
    }
}

function datosDescripcionOperatoria($conex, $wemp_pmla, $wbasedato, $wbasedato_HCE, $wbasedato_movhos, $user_session, $wcodigo_turno, $whistoria, $wing, &$arr_medicos_descripcionOp)
{
    // Campos HCE descripción operatoria
    $arr_camposHCE77 = array(   "3"   => "Cirujano (a)",
                                "4"   => "Ayudante 1",
                                "5"   => "Ayudante 2",
                                "6"   => "Anestesiólogo (a)",
                                "7"   => "Instrumentador (a)",
                                "23"  => "Cirujano (a)",
                                "31"  => "Vías  del acto quirúrgico",
                                "47"  => "Tiempo operatorio",
                                "57"  => "Tiempo quirúrgico",
                                "69"  => "Cirugía número",
                                "83"  => "General",
                                "84"  => "Epidural",
                                "85"  => "Raquidea",
                                "86"  => "Regional",
                                "87"  => "Local",
                                "88"  => "Bloqueo");
    $arr_tiposAnestesia = array("83","84","85","86","87","88");
    // Consultar información de la descripción operatoria.
    // Encabezado descripción operatoria
    $sqlEnDO = "SELECT  Fecha_data, Hora_data, Firpro, Firhis, Firing
                FROM    hce_000036
                WHERE   Firhis = '{$whistoria}'
                        AND Firing = '{$wing}'
                        AND Firpro = '000077'";
    $arr_detallesDescOp = array();// Array de detalles de descripciones operatorias. idx => Fecha_data_Hora_data
    // $fecha_hora_turno_liquidar = ""; // Indice para la fecha y hora del turno que se está queriendo liquidar.
    if($resultEDO = mysql_query($sqlEnDO))
    {
        if(mysql_num_rows($resultEDO) > 0)
        {
            while($rowEDO = mysql_fetch_assoc($resultEDO))
            {
                $fecha_data = str_replace("-", "_", $rowEDO["Fecha_data"]);
                $hora_data  = str_replace(":", "_", $rowEDO["Hora_data"]);
                $idx_DOP    = $fecha_data.'_'.$hora_data;
                if(!array_key_exists($idx_DOP, $arr_detallesDescOp))
                {
                    // Consultar el detalle por fecha y hora de descripción operatoria y que el campo de número cirugía sea igual al código del turno de la liquidación
                    $sqlDDOTur = "  SELECT  hce77.Fecha_data , hce77.Hora_data, hce77.movpro, hce77.movcon, hce77.movdat, hce2.Dettip, hce2.Detdes, hce77.movusu AS codigo_medico
                                            ,mv48.Medno1,mv48.Medno2,mv48.Medap1,mv48.Medap2,mv48.Meddoc,mv44.Espcod,mv44.Espnom
                                    FROM    {$wbasedato_HCE}_000077 AS hce77
                                            LEFT JOIN
                                            {$wbasedato_HCE}_000002 AS hce2 ON (hce2.Detpro = hce77.movpro AND hce2.Detcon = hce77.movcon)
                                            LEFT JOIN
                                            {$wbasedato_movhos}_000048 AS mv48 ON (mv48.Meduma = hce77.movusu)
                                            LEFT JOIN
                                            {$wbasedato_movhos}_000044 AS mv44 ON ( mv44.Espcod = mv48.Medesp)
                                    WHERE hce77.Fecha_data = '{$rowEDO["Fecha_data"]}'
                                            AND hce77.Hora_data = '{$rowEDO["Hora_data"]}'
                                            AND hce77.movpro = '000077'
                                            AND hce77.movhis = '{$whistoria}'
                                            AND hce77.moving = '{$wing}'
                                            AND hce77.movcon = '69'
                                            AND hce77.movdat = '{$wcodigo_turno}'
                                    ORDER BY hce77.Fecha_data DESC, hce77.Hora_data DESC, hce77.movcon ASC";

                    if($resultDDOTur = mysql_query($sqlDDOTur))
                    {
                        if(mysql_num_rows($resultDDOTur) > 0)
                        {
                            // Puede que la consulta haya generado más de un registro con el mismo código del turno pero como se ordenó la consulta
                            // de mayor a menor fecha y hora entonces se usará el primer registro encontrado
                            while($rowDDOTur = mysql_fetch_assoc($resultDDOTur))
                            {
                                if(!array_key_exists(trim($rowDDOTur['Meddoc']), $arr_medicos_descripcionOp))
                                {
                                    $arr_medicos_descripcionOp[trim($rowDDOTur['Meddoc'])] = array();
                                    $nombre_formateado = trim(limpiarString(utf8_decode($rowDDOTur['Medno1']." ".$rowDDOTur['Medno2']." ".$rowDDOTur['Medap1']." ".$rowDDOTur['Medap2'])));
                                    $nombre_formateado = str_replace("?", "N", $nombre_formateado);
                                    $arr_medicos_descripcionOp[trim($rowDDOTur['Meddoc'])]['nombre'] = $nombre_formateado;
                                    $arr_medicos_descripcionOp[trim($rowDDOTur['Meddoc'])]['especialidad'] = utf8_decode(trim($rowDDOTur['Espcod']."-".$rowDDOTur['Espnom']));
                                }
                            }

                            $arr_detallesDescOp[$idx_DOP] = array();
                            // $fecha_hora_turno_liquidar =
                            // CONSULTAR EL RESTO DE CAMPOS PARA LA MISMA FECHA Y HORA DEL CAMPO NÚMERO CIRUGÍA
                            $implodeCamposHce = implode("','", array_keys($arr_camposHCE77));
                            $sqlDDO = " SELECT hce77.Fecha_data , hce77.Hora_data, hce77.movpro, hce77.movcon, hce77.movdat, hce2.Dettip, hce2.Detdes
                                        FROM    {$wbasedato_HCE}_000077 AS hce77
                                                LEFT JOIN
                                                {$wbasedato_HCE}_000002 AS hce2 ON (hce2.Detpro = hce77.movpro AND hce2.Detcon = hce77.movcon)
                                        WHERE hce77.Fecha_data = '{$rowEDO["Fecha_data"]}'
                                                AND hce77.Hora_data = '{$rowEDO["Hora_data"]}'
                                                AND hce77.movpro = '000077'
                                                AND hce77.movhis = '{$whistoria}'
                                                AND hce77.moving = '{$wing}'
                                                AND hce77.movcon IN ('{$implodeCamposHce}')
                                        ORDER BY hce77.Fecha_data DESC, hce77.Hora_data DESC, hce77.movcon ASC";

                            if($resultDDO = mysql_query($sqlDDO))
                            {
                                while($rowDDO = mysql_fetch_assoc($resultDDO))
                                {
                                    $campoHce = $rowDDO['movcon'];
                                    if(!array_key_exists($campoHce, $arr_detallesDescOp[$idx_DOP]))
                                    {
                                        $datoDOP = $rowDDO['movdat'];
                                        $descCampo = $rowDDO['Detdes'];

                                        if(array_key_exists($campoHce, $arr_camposHCE77))
                                        {
                                            $arr_camposHCE77[$campoHce] = $descCampo;
                                        }

                                        if($rowDDO['Dettip'] == 'Seleccion')
                                        {
                                            $expl = explode("-", $datoDOP);
                                            if(count($expl) > 1)
                                            {
                                                unset($expl[0]);
                                                $datoDOP = implode("-", $expl);
                                            }
                                        }

                                        if($rowDDO['Dettip'] == 'Booleano')
                                        {
                                            if($datoDOP == 'CHECKED')
                                            {
                                                $datoDOP = "Si";
                                            }
                                        }

                                        $arr_detallesDescOp[$idx_DOP][$campoHce] = $datoDOP;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    $info_desc_operatoria = "";
    if(count($arr_detallesDescOp) > 0)
    {
        $info_desc_operatoria = '<div style="background-color:#e2e2e2;font-size:9pt;font-weight:bold;">Información del turno de cirugía desde descripción operatoria <span style="cursor:pointer;color:red;" onmouseover="trOver(this);" onmouseout="trOut(this);" onclick="verOcultarLista(\'div_desc_op\');">Ver</span></div>
                                    <div style="display:none;background-color:#e2e2e2;font-size:9pt;" id="div_desc_op"><p>';
        foreach ($arr_detallesDescOp as $fecha_hora_DATA => $arr_detallesCampos)
        {
            foreach ($arr_detallesCampos as $campoHce => $valueHce)
            {
                $msjAnestesia = (in_array($campoHce, $arr_tiposAnestesia)) ? "Anestesia ": "";
                $nombreCampo = (array_key_exists($campoHce, $arr_camposHCE77)) ? utf8_encode($arr_camposHCE77[$campoHce]): "--";
                $info_desc_operatoria .= '<b>'.$msjAnestesia.$nombreCampo.'</b>: '.utf8_encode(ucwords($valueHce)).'<br>';
            }
        }
        $info_desc_operatoria .= "</p></div>";
    }
    return $info_desc_operatoria;
}


function datosNotaOperatoria($conex, $wemp_pmla, $wbasedato, $wbasedato_HCE, $wbasedato_movhos, $user_session, $wcodigo_turno, $whistoria, $wing, &$arr_medicos_descripcionOp)
{
    // Consultar información de la nota operatoria.
    // Encabezado nota operatoria
    $sqlEnNotaO = "SELECT  Fecha_data, Hora_data, Firpro, Firhis, Firing
                FROM    {$wbasedato_HCE}_000036
                WHERE   Firhis = '{$whistoria}'
                        AND Firing = '{$wing}'
                        AND Firpro = '000316'";
    $arr_detallesNotaOp = array();// Array de detalles de descripciones operatorias. idx => Fecha_data_Hora_data
    // $fecha_hora_turno_liquidar = ""; // Indice para la fecha y hora del turno que se está queriendo liquidar.
    if($resultENotaO = mysql_query($sqlEnNotaO))
    {
        if(mysql_num_rows($resultENotaO) > 0)
        {
            while($rowENotaO = mysql_fetch_assoc($resultENotaO))
            {
                $fecha_data = str_replace("-", "_", $rowENotaO["Fecha_data"]);
                $hora_data  = str_replace(":", "_", $rowENotaO["Hora_data"]);
                $idx_DOP    = $fecha_data.'_'.$hora_data;
                if(!array_key_exists($idx_DOP, $arr_detallesNotaOp))
                {
                    // Consultar el detalle por fecha y hora de nota operatoria y que el campo de número cirugía sea igual al código del turno de la liquidación
                    $sqlDNotaOTur = "  SELECT  hce316.Fecha_data , hce316.Hora_data, hce316.movpro, hce316.movcon, hce316.movdat, hce316.movusu AS codigo_medico
                                            ,mv48.Medno1,mv48.Medno2,mv48.Medap1,mv48.Medap2,mv48.Meddoc,mv44.Espcod,mv44.Espnom
                                    FROM    {$wbasedato_HCE}_000316 AS hce316
                                    WHERE   hce316.Fecha_data = '{$rowENotaO["Fecha_data"]}'
                                            AND hce316.Hora_data = '{$rowENotaO["Hora_data"]}'
                                            AND hce316.movpro = '000316'
                                            AND hce316.movcon = '1000'
                                            AND hce316.movhis = '{$whistoria}'
                                            AND hce316.moving = '{$wing}'
                                    ORDER BY hce316.Fecha_data DESC, hce316.Hora_data DESC, hce316.movcon ASC";

                    if($resultDNotaOTur = mysql_query($sqlDNotaOTur))
                    {
                        if(mysql_num_rows($resultDNotaOTur) > 0)
                        {
                            // Puede que la consulta haya generado más de un registro con el mismo código del turno pero como se ordenó la consulta
                            // de mayor a menor fecha y hora entonces se usará el primer registro encontrado
                            while($rowDNotaOTur = mysql_fetch_assoc($resultDNotaOTur))
                            {
                                if(!array_key_exists(trim($rowDNotaOTur['Meddoc']), $arr_medicos_descripcionOp))
                                {
                                    $arr_medicos_descripcionOp[trim($rowDNotaOTur['Meddoc'])] = array();
                                    $nombre_formateado = trim(limpiarString(utf8_decode($rowDNotaOTur['Medno1']." ".$rowDNotaOTur['Medno2']." ".$rowDNotaOTur['Medap1']." ".$rowDNotaOTur['Medap2'])));
                                    $nombre_formateado = str_replace("?", "N", $nombre_formateado);
                                    $arr_medicos_descripcionOp[trim($rowDNotaOTur['Meddoc'])]['nombre'] = $nombre_formateado;
                                    $arr_medicos_descripcionOp[trim($rowDNotaOTur['Meddoc'])]['especialidad'] = utf8_decode(trim($rowDNotaOTur['Espcod']."-".$rowDNotaOTur['Espnom']));
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    $info_nota_operatoria = "";
    return $info_nota_operatoria;
}

function validarPqteEstancia($conex, $wbasedato, $wbasedato_movhos, $concepto_estancia, $whistoria, $wing, $arr_CARGOS_PARA_GRABAR, $arr_datosGENERALES)
{
    $arr_validacion_pqte_estancia = array("es_paquete"=>true, "pqte_con_estancia"=>false,"cantidad_paquete"=>0,"cantidad_ant_grabado_estancia"=>0,"cantidad_diferencia_estancia"=>0, "arr_id_106anular_198off"=>array(), "nuevo_cargo_estancia_grabar"=>array());
    foreach ($arr_CARGOS_PARA_GRABAR as $key_procedimiento => $arr_cargos_dll)
    {
        $arr_like_concepto = preg_grep("/^\A($concepto_estancia(\w(\d+)?)?)$/",array_keys($arr_cargos_dll));

        // Si el paquete tiene el concepto de estancia
        if(count($arr_like_concepto) > 0)
        {
            $arr_validacion_pqte_estancia["pqte_con_estancia"] = true;
            // print_r($arr_like_concepto);
            foreach ($arr_like_concepto as $index => $key_wconcepto_concec)
            {
                // print_r($arr_cargos_dll[$key_wconcepto_concec]);
                foreach ($arr_cargos_dll[$key_wconcepto_concec] as $key_ => $arr_value_cargo_concepto)
                {
                    // print_r($arr_value_cargo_concepto["wcantidad_concepto_pqte"]);
                    $arr_validacion_pqte_estancia["cantidad_paquete"] = $arr_validacion_pqte_estancia["cantidad_paquete"] + ($arr_value_cargo_concepto["wcantidad_concepto_pqte"]*1);
                }
            }
        }
    }

    if($arr_validacion_pqte_estancia["pqte_con_estancia"]){
        $arr_validacion_pqte_estancia = consultarEstanciaPreviaGrabada($conex, $wbasedato, $concepto_estancia, $whistoria, $wing, $arr_validacion_pqte_estancia);

        if(count($arr_validacion_pqte_estancia["arr_id_106anular_198off"]) > 0)
        {
            $diferencia_estancia = $arr_validacion_pqte_estancia["cantidad_ant_grabado_estancia"] - $arr_validacion_pqte_estancia["cantidad_paquete"];
            if($diferencia_estancia > 0)
            {
                $arr_validacion_pqte_estancia["cantidad_diferencia_estancia"] = $diferencia_estancia;
            }
        }
    }

    if($arr_validacion_pqte_estancia["pqte_con_estancia"] && $arr_validacion_pqte_estancia["cantidad_diferencia_estancia"] > 0){
        $arr_validacion_pqte_estancia["nuevo_cargo_estancia_grabar"] = generarCargoDiferenciaEstancia($conex, $wbasedato, $wbasedato_movhos, $concepto_estancia, $whistoria, $wing, $arr_CARGOS_PARA_GRABAR, $arr_validacion_pqte_estancia, $arr_datosGENERALES);
    }

    return $arr_validacion_pqte_estancia;
}

/**
 * [generarCargoDiferenciaEstancia: Se genera un nuevo cargo con la cantidad de días sobrante después de restar los días de estancia del paquete]
 * @param  [type] $conex                  [description]
 * @param  [type] $wbasedato              [description]
 * @param  [type] $concepto_estancia      [description]
 * @param  [type] $whistoria              [description]
 * @param  [type] $wing                   [description]
 * @param  [type] $arr_CARGOS_PARA_GRABAR [description]
 * @return [type]                         [description]
 */
function generarCargoDiferenciaEstancia($conex, $wbasedato, $wbasedato_movhos, $concepto_estancia, $whistoria, $wing, $arr_CARGOS_PARA_GRABAR, $arr_validacion_pqte_estancia, $arr_datosGENERALES)
{
    global $conex;
    global $wemp_pmla;
    global $wbasedato;
    global $wuse;

    $keys_anular = array_keys($arr_validacion_pqte_estancia["arr_id_106anular_198off"]);
    $datosGrabarCargos = array();

    if(count($keys_anular) > 0)
    {
        $id_primer_cargo = $keys_anular[0];
        $sql = "SELECT  c106.*, c024.Emptem AS c24Emptem
                FROM    {$wbasedato}_000106 AS c106
                        LEFT JOIN
                        {$wbasedato}_000024 AS c024 ON (c024.Empcod = c106.Tcarres)
                WHERE   c106.id = '{$id_primer_cargo}'";
        $row_106 = array();
        if($result = mysql_query($sql, $conex))
        {
            $row_106 = mysql_fetch_assoc($result);
        }

        if(count($row_106) > 0)
        {
            $wtipo_ingreso = $arr_datosGENERALES["wtipo_ingreso"];
            $wvaltar_fn = datos_desde_procedimiento($row_106["Tcarprocod"], $row_106["Tcarconcod"], $row_106["Tcarser"], $row_106["Tcarser"],
                                                    $row_106["Tcarres"], $row_106["Tcarfec"],$wtipo_ingreso, '*', 'on', false,
                                                    '', $row_106['Tcarfec'], date("H:i:s"));

            if(!$wvaltar_fn["error"])
            {
                $row_106["Tcarvun"] = $wvaltar_fn["wvaltar"]*1;
            }

            $row_106["Fecha_data"] = date("Y-m-d");
            $row_106["Hora_data"]  = date("H:i:s");
            $row_106["Tcarusu"]    = $arr_datosGENERALES["user_session"];
            $row_106["Tcarcan"]    = $arr_validacion_pqte_estancia["cantidad_diferencia_estancia"];
            $row_106["Tcarvto"]    = $row_106["Tcarvun"] * $row_106["Tcarcan"];
            $row_106["Tcarvre"]    = $row_106["Tcarvto"];

            // CONSUTAR LA HABITACIÓN
            $sql_hab = "SELECT  m17.Eyrhde, m17.Fecha_data, m17.Hora_data, m17.Eyrthr
                        FROM    {$wbasedato_movhos}_000017 AS m17
                        WHERE   m17.Eyrhis = '{$whistoria}'
                                AND m17.Eyring = '{$wing}'
                                AND m17.Eyrtip = 'Recibo'
                                AND m17.Eyrest = 'on'
                                AND m17.Eyrsde = '{$row_106['Tcarser']}'
                        ORDER BY m17.Fecha_data DESC, m17.Hora_data DESC
                        LIMIT 0, 1";
            $habitacion = "";
            if($result_hab = mysql_query($sql_hab, $conex))
            {
                if(mysql_num_rows($result_hab) > 0){
                    $row_hab = mysql_fetch_assoc($result_hab);
                    $habitacion = $row_hab["Eyrhde"];
                }
            }

            // CALCULAR LA FECHA DE EGRESO (Cantidad del cargo) A PARTIR DE LA FECHA DEL CARGO (Tcarfec)
            $fecha = $row_106["Tcarfec"];
            $nuevafecha = strtotime ( '+'.($row_106["Tcarcan"]*1).' day' , strtotime ( $fecha ) ) ;
            $nuevafecha = date ( 'Y-m-d' , $nuevafecha );

            $datosGrabarCargos['whistoria']              = $row_106["Tcarhis"];
            $datosGrabarCargos['wing']                   = $row_106["Tcaring"];
            $datosGrabarCargos['wno1']                   = $row_106["Tcarno1"];
            $datosGrabarCargos['wno2']                   = $row_106["Tcarno2"];
            $datosGrabarCargos['wap1']                   = $row_106["Tcarap1"];
            $datosGrabarCargos['wap2']                   = $row_106["Tcarap2"];
            $datosGrabarCargos['wdoc']                   = $row_106["Tcardoc"];
            $datosGrabarCargos['wcodemp']                = $row_106['Tcarres'];
            $datosGrabarCargos['wnomemp']                = '';
            $datosGrabarCargos['wser']                   = $arr_datosGENERALES["wser"];
            $datosGrabarCargos['wfecing']                = $arr_datosGENERALES["wfecing"];
            $datosGrabarCargos['wtar']                   = $row_106['Tcartar'];

            $datosGrabarCargos['wcodcon']                = $row_106['Tcarconcod']; // !
            $datosGrabarCargos['wnomcon']                = $row_106['Tcarconnom']; // !

            $datosGrabarCargos['wprocod']                = $row_106['Tcarprocod']; // !
            $datosGrabarCargos['wpronom']                = $row_106['Tcarpronom']; // !

            $datosGrabarCargos['wcodter']                = $row_106['Tcartercod']; // !
            $datosGrabarCargos['wnomter']                = $row_106['Tcarternom']; // !

            $datosGrabarCargos['wporter']                = $row_106["Tcarterpor"]; //
            $datosGrabarCargos['wcantidad']              = $arr_validacion_pqte_estancia["cantidad_diferencia_estancia"];
            $datosGrabarCargos['wvaltar']                = $row_106['Tcarvun']; // !
            $datosGrabarCargos['wrecexc']                = $row_106['Tcarrec']; // ??????????????  Antes tenía 'R'
            $datosGrabarCargos['wfacturable']            = $row_106['Tcarfac']; // !
            $datosGrabarCargos['wcco']                   = $row_106["Tcarser"];
            $datosGrabarCargos['wccogra']                = $row_106["Tcarser"];
            $datosGrabarCargos['wfeccar']                = $row_106["Tcarfec"];
            $datosGrabarCargos['whora_cargo']            = $row_106["Hora_data"];
            $datosGrabarCargos['wconinv']                = 'off'; //

            $datosGrabarCargos['wcodpaq']                = '';
            $datosGrabarCargos['wpaquete']               = '';
            $datosGrabarCargos['wconabo']                = '';
            $datosGrabarCargos['wdevol']                 = '';
            $datosGrabarCargos['waprovecha']             = 'off';
            $datosGrabarCargos['wconmvto']               = '';
            $datosGrabarCargos['wexiste']                = '';
            $datosGrabarCargos['wbod']                   = '';
            $datosGrabarCargos['wconser']                = 'H'; //
            $datosGrabarCargos['wtipfac']                = 'CODIGO';
            $datosGrabarCargos['wexidev']                = 0;
            $datosGrabarCargos['wfecha']                 = $row_106["Tcarfec"];
            $datosGrabarCargos['whora']                  = $row_106["Hora_data"];
            $datosGrabarCargos['wespecialidad']          = $row_106['Tcaresp']; // !
            $datosGrabarCargos['cobraHonorarios']        = '';
            $datosGrabarCargos['wgraba_varios_terceros'] = false;
            $datosGrabarCargos['wcodcedula']             = '';

            $datosGrabarCargos['tipoEmpresa']            = $row_106['c24Emptem'];
            $datosGrabarCargos['nitEmpresa']             = '';
            $datosGrabarCargos['tipoIngreso']            = $arr_datosGENERALES["wtipo_ingreso"]; // Para evitar warnings en funciones
            $datosGrabarCargos['tipoPaciente']           = $arr_datosGENERALES["wtipo_paciente"]; // Para evitar warnings en funciones
            $datosGrabarCargos['warctar']                = ''; // SE DEBE ENVIAR LA TABLA DE VALIDAR PRECIOS COMO SE HACE EN LA SIMULACIÓN -- Para evitar warnings en funciones
            $datosGrabarCargos['wvaltarReco']            = $row_106["Tcarvre"];
            $datosGrabarCargos['topeGeneral']            = ''; // Para evitar warnings en funciones
            $datosGrabarCargos['saldoTope']              = ''; // Para evitar warnings en funciones
            $datosGrabarCargos['wvaltarExce']            = '';
            $datosGrabarCargos['nomCajero']              = ''; // Para evitar warnings en funciones
            $datosGrabarCargos['idParalelo']             = ''; // Si hay paralelo entonces en este campo se debe guardar el id del cargo nuevo creado como paralelo al cargo original.
            $datosGrabarCargos['enParalelo']             = 'off';
            $datosGrabarCargos['wauto']                  = ''; // Para evitar warnings en funciones

            $datosGrabarCargos['tipoCuadroTurno']        = ''; // Para evitar warnings en funciones
            $datosGrabarCargos['habitacion']             = $habitacion; //
            $datosGrabarCargos['fecIngHab']              = $row_106['Tcarfec']; //
            $datosGrabarCargos['horIngHab']              = ''; // Para evitar warnings en funciones
            $datosGrabarCargos['diasFacturados']         = $row_106["Tcarcan"]; // Para evitar warnings en funciones
            $datosGrabarCargos['fecEgrHab']              = $nuevafecha; // Es la cantidad $row_106["Tcarcan"] a partir de la fecha $row_106["Tcarfec"]
            $datosGrabarCargos['horEgrHab']              = ''; // Para evitar warnings en funciones
            $datosGrabarCargos['diasEstancia']           = $row_106["Tcarcan"]; // Para evitar warnings en funciones
            $datosGrabarCargos['logRegistroCargo']       = ''; // Para evitar warnings en funciones
            $datosGrabarCargos['logUnix']                = ''; // Para evitar warnings en funciones
            $datosGrabarCargos['estadoMonitor']          = ''; // Para evitar warnings en funciones
            $datosGrabarCargos['wnromvto']               = ''; // Para evitar warnings en funciones
            $datosGrabarCargos['pendRevicion']           = ''; // Para evitar warnings en funciones
            $datosGrabarCargos['ccoActualPac']           = $arr_datosGENERALES["ccoActualPac"];
            $datosGrabarCargos['wterunix']               = '';
            $datosGrabarCargos['grupoMedico']            = '';
            $datosGrabarCargos['idTope']                 = '';
            $datosGrabarCargos['respuesta_array']        = 'on'; // Variable para que la función GrabarCargo responda mensaje en un array
            $datosGrabarCargos['codHomologar']           = ''; // Variable para que la función GrabarCargo responda mensaje en un array
            $datosGrabarCargos['estaEnTurno']            = '';
            $datosGrabarCargos['desde_CargosPDA']        = false;// Para evitar warnings en funciones
            $datosGrabarCargos['idCargosAnexos']         = "";   // Para evitar warnings en funciones

            $datosGrabarCargos['wliquidacion_no_pos']        = '';
            $datosGrabarCargos['wtar_cargo_POS']             = '';
            $datosGrabarCargos['wres_cargo_POS']             = '';
            $datosGrabarCargos['winsumos_cambiar_ingreso']   = '';
            $datosGrabarCargos['wingreso_reemplazable_unix'] = '';
            $datosGrabarCargos['fecha_reemplazable_unix']    = '';
            $datosGrabarCargos['wingreso_activo_unx']        = '';
            $datosGrabarCargos['cargo_examen_o_equipo']      = 'off';
            $datosGrabarCargos['porcentaje_cxMult_CARGO']    = 100;
            $datosGrabarCargos['procedimiento_liquidar_cod'] = $row_106['Tcarconcod'];
            $datosGrabarCargos['TIP_POS']                    = '1_ORD_PROPOS';
            $datosGrabarCargos['es_insumo']                  = 'off';
        }
    }
    return $datosGrabarCargos;
}

function consultarEstanciaPreviaGrabada($conex, $wbasedato, $concepto_estancia, $whistoria, $wing, $arr_validacion_pqte_estancia)
{
    $sql = "SELECT  c106.id AS id106, c106.Tcarcan, c198.id AS id198
            FROM    {$wbasedato}_000106 AS c106
                    LEFT JOIN
                    {$wbasedato}_000198 AS c198 ON (c106.id = c198.Liqidc AND c198.Liqest = 'on')
            WHERE   c106.Tcarhis = '{$whistoria}'
                    AND c106.Tcaring = '{$wing}'
                    AND c106.Tcarconcod = '{$concepto_estancia}'
                    AND c106.Tcarest = 'on'
            ORDER BY c106.id, c198.Liqidc";
    if($result = mysql_query($sql, $conex))
    {
        while ($row = mysql_fetch_assoc($result)) {
            // siempre se guarda en el index el id del cargo en la 106 que se va a anular,
            // si se anula exitosamente entonces se toma el valor de ese indice y si es diferente a vacío
            // entonces corresponde a un id de la 198 que se debe inactivar.
            $arr_validacion_pqte_estancia["arr_id_106anular_198off"][$row["id106"]] = $row["id198"];
            // if($row["id198"] != ''){
            //     $arr_validacion_pqte_estancia["arr_id_inac_198"][] = $row["id198"];
            // }
            $arr_validacion_pqte_estancia["cantidad_ant_grabado_estancia"] += $row["Tcarcan"];
        }
    }
    return $arr_validacion_pqte_estancia;
}

function anularEstanciasPrevias($conex, $conexUnix, $wemp_pmla, $wbasedato, $wbasedato_movhos, $arr_validacion_pqte_estancia, $arr_datosGENERALES)
{
    global $conex;
    global $wbasedato;
    global $wemp_pmla;
    global $wuse;
    global $wfecha;
    global $whora;

    $arr_errores_anulacion = array("arr_errores_anulacion"=>array(), "arr_errores_sql"=>array());

    $wuse   = $arr_datosGENERALES['user_session'];
    $wfecha = $arr_datosGENERALES["fecha_actual"];
    $whora  = $arr_datosGENERALES["hora_actual"];

    foreach ($arr_validacion_pqte_estancia["arr_id_106anular_198off"] as $id_106 => $id_198) {
        $array_respuestas = anular($id_106, 'Anulo', '', '', $conexUnix);

        if($array_respuestas['Error'])
        {
            $arr_errores_anulacion['arr_errores_anulacion'][] = array("id_106"=>$id_106, "mensaje"=>$array_respuestas['Mensaje']);
        }
        else
        {
            // CAMBIAR ESTADO EN DETALLE DE LIQUIDACIÓN DE CIRUGÍA
            if($id_198 != '')
            {
                $sql_upd198 = " UPDATE  {$wbasedato}_000198
                                        SET Liqest = 'off'
                                WHERE   Liqidc = '{$id_198}'";
                if(mysql_query($sql_upd198,$conex))
                { }
                else
                {
                    $arr_errores_anulacion['arr_errores_sql'][] = $sql_upd198." #> ".mysql_error();
                }
            }

            // CAMBIAR DE ESTADO EN TABLA DE ESTANCIA-PENSION
            $sql_upd221 = " UPDATE  {$wbasedato}_000221
                                    SET Detest = 'off'
                            WHERE   Dethis = '{$arr_datosGENERALES['whistoria']}'
                                    AND Deting = '{$arr_datosGENERALES['wing']}'
                                    AND Detide = '{$id_106}'";
            if(mysql_query($sql_upd221,$conex))
            { }
            else
            {
                $arr_errores_anulacion['arr_errores_sql'][] = $sql_upd221." #> ".mysql_error();
            }
        }
    }
    return $arr_errores_anulacion;
}

function grabarNuevoCargoEstancia($conex, $conexUnix, $bloqueo_global_fuentes, $wemp_pmla, $wbasedato, $wbasedato_movhos, $arr_validacion_pqte_estancia, $arr_datosGENERALES, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, &$usa_fuente_cargo, &$error_bloqueoUnix)
{
    $datosGrabarCargos = fnArrayCargoLiquidar($conex,$wemp_pmla, $wbasedato, $arr_validacion_pqte_estancia['nuevo_cargo_estancia_grabar'], $arr_datosGENERALES, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv);

    $datosGrabarCargos["bloqueo_global_fuentes"] = $bloqueo_global_fuentes; // Indica que la tabla de fuentes en unix ya fue bloqueada para que en la función
                                                                            // GrabarCargo no intente bloquear de nuevo la tabla
    $datosGrabarCargos["conexUnix_FacturacionPpal"] = $conexUnix; // Conexión a unix que puede ser usado dentro de las funciones de facturación para no tener que abrir una nueva conexión.
    $datosGrabarCargos["usa_fuente_cargo"] = $usa_fuente_cargo; // Esta variable se encarga de identificar si por ejemplo se usó la tabla de fuentes sifue y es necesario realizar un commit en unix.
                                                                // Despues de terminar el proceso de liquidación, si por ejemplo se liquidaron solo insumos entonces no es necesario ejecutar el commit.
    // Los cargos que no tienen tarifa pero el manual dice que se cobra 0% no se guardan en cliame_106 ni unix. Pero se graban en el log de cirugía.
    $idGuardadoBD = 0;
    $data_respuesta = GrabarCargo($datosGrabarCargos,$idGuardadoBD, false);
    if(isset($data_respuesta["usa_fuente_cargo"]) && $data_respuesta["usa_fuente_cargo"])
    {
        $usa_fuente_cargo = $data_respuesta["usa_fuente_cargo"];
    }

    if(!$error_bloqueoUnix) // [updt-78]
    {
        // Se evalúa Error y no Error_liqCx, para que la liquidación no continúe ante cualquier problema con un cargo reportado desde unix,
        // se alcanzarían a grabar los primeros cargos antes de generarse un posible error, en el mejor de los casos si se reporta un problema
        // en el primer cargo, la liquidación quedará sin grabar ni un solo cargo.
        if((array_key_exists("Error", $data_respuesta) && $data_respuesta["Error"]) || (array_key_exists("error", $data_respuesta) && $data_respuesta["error"] == 1))
        {
            $error_bloqueoUnix = true;
        }
    }
}

/********************** FIN DE FUNCIONES *************************/

/**
 * ********************************************************************************************************************************************************
 * Lógica, procesos de los llamados AJAX de todo el programa - INICIO DEL PROGRAMA
 * ********************************************************************************************************************************************************
 */
if(isset($accion) && isset($form))
{
    include_once("ips/ValidacionGrabacionCargosERP.php");

    $data = array('error'=>0,'mensaje'=>'','html'=>'');
    $no_exec_sub = 'No se ejecutó ningún proceso interno del programa';

    switch($accion)
    {
        case 'insert':
            switch($form)
            {
                case 'guardar_datos_liquidados':
                    // NOTA: EN ESTE PROCESO PUEDEN CAMBIAR ALGUNOS VALORES DE CAMPOS QUE LLEGAN EN EL ARRAY arr_CARGOS_PARA_GRABAR COMO POR EJEMPLO "wprocod"
                    include_once("root/comun.php");
                    $concepto_medicamentos_mueven_inv = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_medicamentos_mueven_inv');
                    $concepto_materiales_mueven_inv   = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_materiales_mueven_inv');
                    $concepto_estancia   = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_estancia');
                    $almenosUnoGrabado = false; // Para validar que si por lo menos se grabó un cargo, se inserte entonces el encabezado

                    $data["mensaje_local"]        = "";
                    $data["error_cargo"]          = 0;
                    $data["error_tipo"]           = "liquidacion_insert";
                    $data["evidenciaError"]       = "";
                    $data['sqlerr']               = "";
                    $data['arr_errores_anulacion']= "";
                    $arr_data_autorizacion        = array("error"=>0, "mensaje"=>"","html"=>"","sqlAutorizar"=>"","insumo"=>array(),"procedimiento"=>array(),"cont_trs"=>0);
                    $wliq_soloInsumos             = ($wliq_soloInsumos=='on') ? true: false;
                    $arr_datos_liquidados         = unserialize(base64_decode($arr_datos_liquidados));
                    $arr_CARGOS_PARA_GRABAR       = unserialize(base64_decode($arr_CARGOS_PARA_GRABAR));
                    $arr_cargos_req_autorizar     = unserialize(base64_decode($arr_cargos_req_autorizar));
                    $proceso_auditoria_activo_sfi = consultarAliasPorAplicacion($conex, $wemp_pmla, 'proceso_auditoria_activo_sfi');
                    // $arr_procedimientos_orden_liquidar = unserialize(base64_decode($arr_procedimientos_orden_liquidar));
					
					// echo "<pre>";
					// print_r($arr_CARGOS_PARA_GRABAR);
					// echo "</pre>";
					// return;
								
                    // CAMBIA EL CENTRO DE COSTO DEL GRABADOR POR EL CENTRO DE COSTOS DEL QUIRÓFANO, POR EJEMPLO PARA LAS CIRUGÍAS GRABADAS EN EL TERCER PISO.
                    $validarFechaCambioTarifaUnxMxERP = consultarAliasPorAplicacion($conex, $wemp_pmla, 'validarFechaCambioTarifaUnxMxERP');
                    liquidar_con_cco_quirofano($conex,$wemp_pmla, $wbasedato, $wcco, $ccoquirofano);
                    $arr_datosGENERALES                                     = array();
                    $arr_datosGENERALES["whistoria"]                        = $whistoria;
                    $arr_datosGENERALES["wing"]                             = $wing;
                    $arr_datosGENERALES["wno1"]                             = $wno1;
                    $arr_datosGENERALES["wno2"]                             = $wno2;
                    $arr_datosGENERALES["wap1"]                             = $wap1;
                    $arr_datosGENERALES["wap2"]                             = $wap2;
                    $arr_datosGENERALES["wdoc"]                             = $wdoc;
                    $arr_datosGENERALES["wser"]                             = $wser;
                    $arr_datosGENERALES["wfecing"]                          = $wfecing;
                    $arr_datosGENERALES["wcco"]                             = $wcco;
                    $arr_datosGENERALES["wfecha_cargo"]                     = $wfecha_cargo;
                    $arr_datosGENERALES["whora_cargo"]                      = $whora_cargo;
                    $arr_datosGENERALES["wbod"]                             = $wbod;
                    $arr_datosGENERALES["wtipo_ingreso"]                    = $wtipo_ingreso;
                    $arr_datosGENERALES["ccoActualPac"]                     = $ccoActualPac;
                    $arr_datosGENERALES["fecha_actual"]                     = $fecha_actual;
                    $arr_datosGENERALES["hora_actual"]                      = $hora_actual;
                    $arr_datosGENERALES["validarFechaCambioTarifaUnxMxERP"] = $validarFechaCambioTarifaUnxMxERP;

                    $arr_datosGENERALES["winsumos_cambiar_ingreso"]         = $winsumos_cambiar_ingreso;
                    $arr_datosGENERALES["wingreso_reemplazable_unix"]       = $wingreso_reemplazable_unix;
                    $arr_datosGENERALES["wingreso_activo_unx"]              = $wingreso_activo_unx;
                    $arr_datosGENERALES["fecha_reemplazable_unix"]          = $fecha_reemplazable_unix;
                    $arr_datosGENERALES["wtipo_paciente"]                   = $wtipo_paciente;
                    $arr_datosGENERALES["user_session"]                     = $user_session;
                    $arr_datosGENERALES["concepto_estancia"]                = $concepto_estancia;

                    // $data["error_cargo"] = 1;
                    // if (file_exists("seguimiento.txt")) {
                    //     unlink("seguimiento.txt");
                    // }

                    // $guardar = print_r($arr_CARGOS_PARA_GRABAR,true).PHP_EOL;
                    // seguimiento($guardar);
                    // exit();

                    // $guardar = print_r($arr_datos_liquidados,true).PHP_EOL;
                    // seguimiento($guardar);
                    // exit();

                    $diferenciaActoQx   = date("YmdHis");

                    /*
                    anular_pension ($whistoria,$wing)
                    global $wbasedato;
                    global $conex;
                    global $wemp_pmla;
                    */

                    $arr_validacion_pqte_estancia = array("es_paquete"=>true, "pqte_con_estancia"=>false,"cantidad_paquete"=>0,"cantidad_ant_grabado_estancia"=>0,"cantidad_diferencia_estancia"=>0, "arr_id_106anular_198off"=>array());
                    if($es_paquete == 'on')
                    {
                        $arr_validacion_pqte_estancia = validarPqteEstancia($conex, $wbasedato, $wbasedato_movhos, $concepto_estancia, $whistoria, $wing, $arr_CARGOS_PARA_GRABAR, $arr_datosGENERALES);
                    }
                    // print_r($arr_validacion_pqte_estancia);
                    // exit("FIN");

                    $arr_encabezado               = array();
                    $arr_encabezado_conDlle       = array();
                    $data_respuesta_mensajes_err  = array();
                    $evidencias_errores           = array();
                    $simul_respuesta_mensajes_err = array();

                    $arr_validaciones = array("error_facturable_insumo"=>false, "unix_activo"=>true, "insumos_saldo"=>true, "insumos_tarifa"=>true, "insumos_valores_unx_mtx"=>true, "query_sin_saldo"=>"","query_sin_saldo_err"=>"","arr_sin_tarifas"=>array(),"arr_diferente_valor"=>array());
                    $arr_insumosFactError = array();
                    $arr_insumos_cargos = arrayCargosInsumos($conex,$wemp_pmla, $wbasedato, $wcco, $wfecha_cargo, $whora_cargo, $arr_CARGOS_PARA_GRABAR, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $wbasedato_movhos, $arr_validaciones, $arr_insumosFactError, $arr_datosGENERALES);
                    $conexUnxAnular = "";
                    if($hay_unix)
                    {
                        $arr_validaciones = validarSaldosYUnixLiquidacionCx($conex, $conexUnxAnular, $wemp_pmla, $wbasedato, $wcco, $wfecha_cargo, $whora_cargo, $arr_CARGOS_PARA_GRABAR, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $wbasedato_movhos, $arr_validaciones, $arr_datosGENERALES, $arr_insumos_cargos, "G");
                    }

                    if(count($arr_insumosFactError) > 0)
                    {
                        $arr_validaciones["error_facturable_insumo"] = true;
                    }

                    if($arr_validaciones["unix_activo"])
                    {
                        // insumos_saldo => Valída que todos los insumos tienen registro de saldo en unix
                        // insumos_tarifa => Valída que todos los insumos tienen tarifa en unix
                        // insumos_valores_unx_mtx => Valída que el valor del insumo en unix sea igual al cobrado en matrix
                        if($arr_validaciones["insumos_saldo"] && $arr_validaciones["insumos_tarifa"] && $arr_validaciones["insumos_valores_unx_mtx"] && !$arr_validaciones["error_facturable_insumo"])
                        {
                            // VALIDAR ANTES DE GUARDAR CUALQUIER CARGO SI ALGUNO DE ELLOS TIENE PROBLEMA PARA PASAR A UNIX POR EJEMPLO SI HAY ERROR DE TARIFA
                            // EN ESE CASO NO SE DEBE GRABAR NINGÚN CARGO
                            $validacionUnixCorrecto      = true;
                            $arr_cargosValidaciones      = array("error"=>0, "errores"=>array());
                            $respuestaSimulacion         = array("validacionUnixCorrecto"=>true, "data_respuesta_mensajes_err"=>array());
                            if($hay_unix)
                            {
                                $respuestaSimulacion = validacionCargosUnixSimulacion($conex,$wemp_pmla, $wbasedato, $wcco, $wfecha_cargo, $whora_cargo, $arr_CARGOS_PARA_GRABAR, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $wbasedato_movhos, $arr_cargosValidaciones, $arr_datosGENERALES);
                            }
                            $validacionUnixCorrecto      = $respuestaSimulacion["validacionUnixCorrecto"];
                            $simul_respuesta_mensajes_err = $respuestaSimulacion["data_respuesta_mensajes_err"];

                            //BLOQUEAR LA TABLA SIFUE DURANTE TODO EL PROCESO DE GRABACIÓN DE LA CIRUGÍA, para que se garantice guardar todos los cargos o no grabar ninguno si
                            //la tabla desde el principio se encuentra bloqueada por otro proceso o programa diferente al de liquidación. Se hace así porque se están presentando muchos
                            //casos en que a la mitad de la grabación se encuentra la tabla bloqueada y queda la cuenta partida, una parte se grabó y otra no se grabó porque salía error
                            //de tabla sifue bloqueada.
                            $bloqueo_global_fuentes = false;
                            $conexUnix = "";
                            $usa_fuente_cargo = false;
                            if($hay_unix)
                            {
                                if($conexUnix = @odbc_connect('facturacion','informix','sco'))
                                {
                                    if(!$wliq_soloInsumos)
                                    {
                                        // --> Bloquear la tabla contra escritura
                                        $qBegin     = " BEGIN WORK";
                                        if(odbc_exec($conexUnix, $qBegin))
                                        {
                                            $tablaFuenteUnix = 'sifue';
                                            $qBloq = "LOCK TABLE ".$tablaFuenteUnix." IN SHARE MODE";
                                            if($resBloq = @odbc_exec($conexUnix, $qBloq))
                                            {
                                                $bloqueo_global_fuentes = true;
                                            }
                                            else
                                            {
                                                $qBloq = "ERROR EN QUERY UNIX: ".odbc_errormsg()." - ".$qBloq;
                                                $validacionUnixCorrecto = false;

                                                // if($_SERVER['SERVER_ADDR'] != "127.0.0.1")
                                                // {
                                                //     $qCommit    = " COMMIT WORK ";
                                                //     if(@odbc_exec($conexUnix, $qCommit))
                                                //     {
                                                //     }
                                                //     else
                                                //     {
                                                //         $qBloq .= "ERROR EN QUERY UNIX COMMIT_1 Intenta desbloquear sifue si esta bloqueada: ".odbc_errormsg()." - ".$qCommit;
                                                //     }
                                                // }

                                                $simul_respuesta_mensajes_err["error_bloqueo_tabla_sifue"] = array( "mensaje_err"   =>"No se pudo bloquear archivo de fuentes",
                                                                                                                    "arr_errores"   =>array("La tabla {$tablaFuenteUnix} en Unix esta bloqueada (otro proceso esta grabando cargos al paciente), intente en un minuto, si despues de varios intentos continua el problema POR FAVOR LLAMAR A SOPORTE SISTEMAS PARA DESBLOQUEARLA."),
                                                                                                                    "evidenciaError"=>$qBloq);
                                            }
                                        }
                                        else
                                        {
                                            $qBegin = "ERROR EN QUERY UNIX: ".odbc_errormsg()." - ".$qBegin;
                                            $validacionUnixCorrecto = false;
                                            $simul_respuesta_mensajes_err["error_INIbloqueo_tabla_sifue"] = array( "mensaje_err"   =>"No se pudo bloquear archivo de fuentes",
                                                                                                                "arr_errores"   =>array("No se pudo iniciar el bloqueo en la tabla de fuentes de unix para grabar la liquidación, Intente más tarde."),
                                                                                                                "evidenciaError"=>$qBegin);
                                        }
                                    }
                                }
                                else
                                {
                                    $validacionUnixCorrecto = false;
                                    $simul_respuesta_mensajes_err["error_conexion_unix"] = array(   "mensaje_err"   =>"No fue posible realizar conexion con Unix en este momento",
                                                                                                    "arr_errores"   =>array("Puede intentar más tarde."),
                                                                                                    "evidenciaError"=>"");
                                }
                            }

                            // if(false)
                            if($validacionUnixCorrecto)
                            {
                                $error_bloqueoUnix = false; // [updt-78] Por ejemplo cuando la tabla sifue en unix esta bloqueada y no deja grabar más cargos.
                                // foreach ($arr_procedimientos_orden_liquidar as $wprocedimiento => $value)
                                // $guardar = "bloqueo_global_fuentes: ".print_r($bloqueo_global_fuentes,true).PHP_EOL;
                                // seguimiento($guardar);

                                // Validar si se debe grabar o no un nuevo cargo de estancia para paquetes.

                                if($arr_validacion_pqte_estancia["pqte_con_estancia"] == true && count($arr_validacion_pqte_estancia["arr_id_106anular_198off"]) > 0)
                                {
                                    // Cuando se liquida un paquete que tiene 0035 pero ya se había liquidado estancia.
                                    $data["arr_errores_anulacion"] = anularEstanciasPrevias($conex, $conexUnix, $wemp_pmla, $wbasedato, $wbasedato_movhos,$arr_validacion_pqte_estancia, $arr_datosGENERALES);

                                    // Cuando se anulan días de estancia es posible que el paquete no tenga todos los días de estancia que ya se habían
                                    // grabado previamente, entonces esa diferencia se graba como una nuevo cargo.
                                    if(count($arr_validacion_pqte_estancia["nuevo_cargo_estancia_grabar"]) > 0)
                                    {
                                        grabarNuevoCargoEstancia($conex, $conexUnix, $bloqueo_global_fuentes, $wemp_pmla, $wbasedato, $wbasedato_movhos,
                                                                 $arr_validacion_pqte_estancia, $arr_datosGENERALES, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv,
                                                                 $usa_fuente_cargo, $error_bloqueoUnix);
                                    }
                                }
								
                                foreach ($arr_CARGOS_PARA_GRABAR as $key_procedimiento => $arr_cargos_dll)
                                {
                                    // usleep(9000000);
                                    // break;
                                    $wprocedimiento = $key_procedimiento;
                                    // if(array_key_exists($wprocedimiento, $arr_datos_liquidados))
                                    {
                                        // $arr_conceptos = $arr_datos_liquidados[$wprocedimiento];
                                        if(!array_key_exists($wprocedimiento, $arr_encabezado))
                                        {
                                            $arr_encabezado[$wprocedimiento] = array();
                                        }
                                        $arr_encabezado[$wprocedimiento] = array(   "whistoria"                  => "",
                                                                                    "wing"                       => "",
                                                                                    "wnum_documento_ID"          => "",
                                                                                    "diferenciaActoQx"           => "",
                                                                                    "wprocedimiento"             => arreglar_procedimientos_bilaterales($wprocedimiento),
                                                                                    "wturno_cirugia"             => "",
                                                                                    "wtipo_anestesia_cx"         => "",
                                                                                    "wtiempo_sala_recuperarcion" => "",
                                                                                    "wtiempo_uso_minutos"        => "",
                                                                                    "wtiempo_minutos_cx"         => "",
                                                                                    "wespecialista"              => "",
                                                                                    "wespecialidad"              => "",
                                                                                    "worgano"                    => "",
                                                                                    "wbilateral"                 => "",
                                                                                    "wvia"                       => "");

                                        foreach ($arr_cargos_dll as $key_wconcepto_equipo_o_insumo => $arr_cargos_del_concepto)
                                        {
                                            $id_CargoAnterior = 0; // Este ID será útil cuando se requiera asociar dos cargos en paralelo.
                                            foreach ($arr_cargos_del_concepto as $key_secuencia => $arr_CARGO)
                                            {
                                                // Verifica si debe cambiar el campo wprocod por codRangoTiempo, para no grabar con el código de la cirugía sino con el código del rango
                                                verificarCodigoPorRango($conex,$wemp_pmla, $wbasedato, $arr_CARGO);

                                                $procedimiento_log_cx = $arr_CARGO['procedimiento_liquidar_cod'];
                                                if(array_key_exists($wprocedimiento, $arr_encabezado) && $arr_encabezado[$wprocedimiento]["whistoria"] == '')
                                                {
                                                    $arr_encabezado[$wprocedimiento]["whistoria"]                  = $whistoria;
                                                    $arr_encabezado[$wprocedimiento]["wing"]                       = $wing;
                                                    $arr_encabezado[$wprocedimiento]["wdoc"]                       = $wdoc;
                                                    $arr_encabezado[$wprocedimiento]["diferenciaActoQx"]           = $diferenciaActoQx;
                                                    $arr_encabezado[$wprocedimiento]["wturno_cirugia"]             = $arr_CARGO['wturno_cirugia'];
                                                    $arr_encabezado[$wprocedimiento]["wtipo_anestesia_cx"]         = $arr_CARGO['wtipo_anestesia_cx'];
                                                    $arr_encabezado[$wprocedimiento]["wtiempo_sala_recuperarcion"] = $arr_CARGO['wtiempo_sala_recuperarcion'];
                                                    $arr_encabezado[$wprocedimiento]["wtiempo_uso_minutos"]        = $arr_CARGO['wtiempo_uso_minutos'];
                                                    $arr_encabezado[$wprocedimiento]["wtiempo_minutos_cx"]         = $arr_CARGO['wtiempo_minutos_cx'];
                                                    $arr_encabezado[$wprocedimiento]["wespecialista"]              = $arr_CARGO['arr_encabezado']['wespecialistas'];
                                                    $arr_encabezado[$wprocedimiento]["wespecialidad"]              = $arr_CARGO['arr_encabezado']['wespecialidad'];
                                                    $arr_encabezado[$wprocedimiento]["worgano"]                    = $arr_CARGO['arr_encabezado']['worgano'];
                                                    $arr_encabezado[$wprocedimiento]["wbilateral"]                 = $arr_CARGO['arr_encabezado']['wbilateral'];
                                                    $arr_encabezado[$wprocedimiento]["wvia"]                       = $arr_CARGO['arr_encabezado']['wvia'];
                                                    $arr_encabezado[$wprocedimiento]["log_errores"]                = ""; // En el caso por ejemplo de insumos, cuando uno de ellos no se pueda grabar, se guarda en un campo de log el error generado, se concatenan en ese campo todos los errores generados.
                                                    $arr_encabezado[$wprocedimiento]["pro_no_pos"]                 = (tipoPOS_procedimiento($arr_CARGO["TIP_POS"])) ? 'on': 'off';
                                                    $arr_encabezado[$wprocedimiento]["pos_organo"]                 = $arr_CARGO["arr_encabezado"]["wposicion_organo"];
                                                    $arr_encabezado[$wprocedimiento]["wtiempo_procedimiento"]      = $arr_CARGO["arr_encabezado"]["wtiempo_procedimiento"];
                                                }

                                                if($arr_CARGO['wgrabar'] == 'on' && !$error_bloqueoUnix) // [updt-78] !$error_bloqueoUnix si en los primeros cargos se presentó un error por tabla bloqueda entonces no continuar con la liquidación de los siguientes cargos.
                                                {
                                                    $data_respuesta = array("mensaje"=>"", "cod_cargo"=>"", "error"=>0);

                                                    // Verificar si el cargo esta relacionado a un Equipo o Exámen
                                                    // En este caso se debe tener en cuenta el campo de detalle de la tabla de log de liquidación
                                                    // En la tabla 106 en el campo procedimiento guarda es el código del equipo o exámen.
                                                    $codigo_equipo_examen         = arreglar_procedimientos_bilaterales($arr_CARGO['wprocod']);
                                                    $codigo_procedimiento_dequipo = $arr_CARGO['wprocod'];
                                                    if($arr_CARGO["cargo_examen_o_equipo"] == 'on')
                                                    {
                                                        // ESTE ES UN EXAMEN O EQUIPO!
                                                        $codigo_equipo_examen         = $arr_CARGO["examen_equipo_codigo"];
                                                        $codigo_procedimiento_dequipo = $arr_CARGO["examen_equipo_codigo"];

                                                        $procedimiento_log_cx = $arr_CARGO["procedimiento_liquidar_cod"];
                                                    }

                                                    // Si es materiales o medicamentos se debe enviar en cantidad el valor del porcentaje (1.00 equivale al 100%)
                                                    if($arr_CARGO['wcodcon'] != $concepto_medicamentos_mueven_inv && $arr_CARGO['wcodcon'] != $concepto_materiales_mueven_inv)
                                                    {
                                                        // Para mostrar el porcentaje de los cargos diferentes a insumos en matrix se debe enviar en la cantidad,
                                                        // y el valor de porcentaje representado en decimal entre 0 y 1 siendo 1 el 100%, 0.50 el 50%
                                                        $wcantidad = $arr_CARGO['porcentaje_cxMult_CARGO']/100;
                                                    }

                                                    $datosGrabarCargos = fnArrayCargoLiquidar($conex,$wemp_pmla, $wbasedato, $arr_CARGO, $arr_datosGENERALES, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv);
													// if($datosGrabarCargos['wcodcon'] == '0076'){
														// echo "<pre>";
														// print_r($arr_CARGO);
														// echo "</pre>";
														// echo "<pre>";
														// print_r($datosGrabarCargos);
														// echo "</pre>";
													//}
													//return;
                                                    // Asociar ID anterior como paralelo
                                                    // El cargo actual que estaría marcado con "[enParalelo] => on" es en realidad el cargo original y el cargo grabado anterior debió ser el cargo nuevo generado para el paralero
                                                    // Al cargo actual entonces se le asocial el ID del cargo anterior para que queden unidos y ante una eventual anulación entonces se anulen ambos cargos.
                                                    if($id_CargoAnterior > 0 && $arr_CARGO['enParalelo'] == 'on')
                                                    {
                                                        $datosGrabarCargos['idParalelo'] = $id_CargoAnterior;
                                                    }

                                                    $userCargo = explode('-',$_SESSION['user']);
                                                    $wuse      = $userCargo[1];
                                                    global $wuse, $wemp_pmla, $conex;
                                                    // $guardar = "{$arr_guardar['wprocedimiento']} - {$arr_guardar['wconcepto']} - {$arr_guardar['wvalor_final']} - {$datosGrabarCargos['wvaltarReco']}".PHP_EOL;
                                                    // fwrite($fp, $guardar);
                                                    $idGuardadoBD = 0;  // Este ID es con el que se guarda el nuevo registro en la tabla de cargos 000106, se guarda en la tabla de liquidación de cirugía
                                                                        // y con ese ID luego se puede anular un cargo tanto en las tablas de cirugía como en las de cargos.

                                                    // Por política a veces se debe poner como no facturable un cargo que ya estaba grabado, al momento de aplicar la politica esta función
                                                    // retorna el ID del cargo a modificar, aquí en este condicional se verifica si esa variable de ID está seteada y utiliza la función
                                                    // ActualizarCargoComoNoFacturable()  para modificar el cargo.
                                                    if(array_key_exists("IdNoFacturables", $datosGrabarCargos) && !empty($datosGrabarCargos['IdNoFacturables']))
                                                    {
                                                        ActualizarCargoComoNoFacturable($datosGrabarCargos['IdNoFacturables']);
                                                    }

                                                    if($arr_CARGO["sin_tarifa_no_grabar"] != 'on')
                                                    {
                                                        // Se empezó a enviar al integrador la fecha de la cirugía para los cargos de insumos, pero cuando hay cambio de fecha de un mes a otro
                                                        // el integrador genera el error diciendo que el mes anterior ya se encuentra cerrado, para evitar esto entonces se valida si
                                                        // el cargo de insumo que se está grabando corresponde a un mes anterior al mes actual, en ese caso entonces cambiar la fecha del cargo
                                                        // de insumo para la fecha actual en que se liquida la cirugía, así quedará el cargo con fecha actual y diferente a la de la cirugía
                                                        // para evitar que el integrador genere el error, esto solo debe suceder cuando hay cambio de mes y todavía no se han liquidado algunas
                                                        // cirugías del mes anterior (por ejemplo cuando se liquidan las cirugías el 01 del siguiente mes y las cirugías se realizaron el 30 del mes anterior)
                                                        if($datosGrabarCargos['wcodcon'] == $concepto_medicamentos_mueven_inv || $datosGrabarCargos['wcodcon'] == $concepto_materiales_mueven_inv)
                                                        {
                                                            $anioMesAct = date("Ym")*1;
                                                            $xpl_a_m_cargo = explode("-", $datosGrabarCargos['wfeccar']);
                                                            $anioMesCargo = ($xpl_a_m_cargo[0].$xpl_a_m_cargo[1])*1;
                                                            if($anioMesCargo < $anioMesAct)
                                                            {
                                                                $datosGrabarCargos['wfeccar'] = $fecha_actual;
                                                            }
                                                        }
                                                        $datosGrabarCargos["bloqueo_global_fuentes"] = $bloqueo_global_fuentes; // Indica que la tabla de fuentes en unix ya fue bloqueada para que en la función
                                                                                                                                // GrabarCargo no intente bloquear de nuevo la tabla
                                                        $datosGrabarCargos["conexUnix_FacturacionPpal"] = $conexUnix; // Conexión a unix que puede ser usado dentro de las funciones de facturación para no tener que abrir una nueva conexión.
                                                        $datosGrabarCargos["usa_fuente_cargo"] = $usa_fuente_cargo; // Esta variable se encarga de identificar si por ejemplo se usó la tabla de fuentes sifue y es necesario realizar un commit en unix.
                                                                                                                    // Despues de terminar el proceso de liquidación, si por ejemplo se liquidaron solo insumos entonces no es necesario ejecutar el commit.
                                                        // Los cargos que no tienen tarifa pero el manual dice que se cobra 0% no se guardan en cliame_106 ni unix. Pero se graban en el log de cirugía.
                                                        $data_respuesta = GrabarCargo($datosGrabarCargos,$idGuardadoBD, false);
                                                        if(isset($data_respuesta["usa_fuente_cargo"]) && $data_respuesta["usa_fuente_cargo"])
                                                        {
                                                            $usa_fuente_cargo = $data_respuesta["usa_fuente_cargo"];
                                                        }

                                                        if(!$error_bloqueoUnix) // [updt-78]
                                                        {
                                                            // Se evalúa Error y no Error_liqCx, para que la liquidación no continúe ante cualquier problema con un cargo reportado desde unix,
                                                            // se alcanzarían a grabar los primeros cargos antes de generarse un posible error, en el mejor de los casos si se reporta un problema
                                                            // en el primer cargo, la liquidación quedará sin grabar ni un solo cargo.
                                                            if((array_key_exists("Error", $data_respuesta) && $data_respuesta["Error"]) || (array_key_exists("error", $data_respuesta) && $data_respuesta["error"] == 1))
                                                            {
                                                                $error_bloqueoUnix = true;
                                                            }
                                                        }
                                                    }
                                                    // << Sección para guardar el cargo en la tabla de cargos 000106

                                                    //************************ CAMBIAR DE RESPONSABLE ************************
                                                    if(count($arr_CARGO['arr_cambio_responsable']) > 0 && !$error_bloqueoUnix) // [updt-78]
                                                    {
                                                        // [arr_cambio_responsable] => Array
                                                        // (
                                                        //     [historia] => 184454
                                                        //     [ingreso] => 1
                                                        //     [newResposable] => 800088702
                                                        //     [antResponsable] => 860002400
                                                        //     [tipoRespAnterior] => 12
                                                        //     [nomPaciente] => Alveiro Carlos Marquez
                                                        //     [antNomResponsable] => LA PREVISORA S.A. SOAT
                                                        //     [nomCajero] =>
                                                        // )
                                                        cambiarResponsablePaciente($arr_CARGO["arr_cambio_responsable"]["historia"], $arr_CARGO["arr_cambio_responsable"]["ingreso"], $arr_CARGO["arr_cambio_responsable"]["newResposable"], $arr_CARGO["arr_cambio_responsable"]["antResponsable"], $arr_CARGO["arr_cambio_responsable"]["tipoRespAnterior"], $arr_CARGO["arr_cambio_responsable"]["nomPaciente"], $arr_CARGO["arr_cambio_responsable"]["antNomResponsable"], $arr_CARGO["arr_cambio_responsable"]["nomCajero"]);
                                                    }

                                                    // Si es un cargo que no tiene tarifa pero que igualmente no se debe validar la existencia de tarifa porque el manual de cirugía dice que se cobre 0%
                                                    // de todas formas se graba el cargo en el log de cirugía para que quede registro.
                                                    if(($data_respuesta["error"] == 0 && $idGuardadoBD > 0) || ($data_respuesta["error"] == 0 && $arr_CARGO["sin_tarifa_no_grabar"] == 'on') && !$error_bloqueoUnix) // [updt-78]
                                                    {
                                                        // Verificar si el cargo esta dentro de los cargos que requieren autorización para el segundo responsable por superación de tope del SOAT.
                                                        validarCargoGrabadoRequiereAutorizacion($conex, $wemp_pmla, $wbasedato, $user_session, $wturno_cirugia, $arr_CARGO, $arr_cargos_req_autorizar, $arr_data_autorizacion);
                                                        $id_CargoAnterior = $idGuardadoBD;
                                                        //-----------------------------------------------------
                                                        //  --> ACA SE ACTUALIZA EL SALDO DEL TOPE, SI EXISTE
                                                        //-----------------------------------------------------
                                                        // Se comentó esta sección y se envió el idTope a la función de grabación para que actualice el saldo (tope) si es necesario.
                                                        // PARA PODER QUE AL GRABAR EL CARGO TAMBIEN QUEDE GUARDADO EL ID DEL TOPE Y SI HAY UNA ANULACIÓN, EL PROGRAMA PUEDA SUMAR DE NUEVO
                                                        // EL VALOR AL SALDO DEL RESPONSABLE QUE LE CORRESPONDE EL TOPE
                                                        // if($arr_CARGO["idTope"] != '' && $arr_CARGO["wfacturable"] == 'S')
                                                        // {
                                                        //     $qActTope = "UPDATE  {$wbasedato}_000204 SET Topsal = (Topsal-(".$arr_CARGO["wvaltarReco"]."))  WHERE id = '".($arr_CARGO["idTope"]*1)."'";

                                                        //     $res_update = mysql_query($qActTope, $conex) or die ("Error: ".mysql_errno()." - en el query: ".$qActTope." - ".mysql_error());
                                                        // }

                                                        $valor_multiplicado = ($arr_CARGO["wvaltarExce"]*1 > 0) ? ($arr_CARGO["wvaltarExce"] + $arr_CARGO["wvaltarReco"]) : $arr_CARGO["wvaltarReco"];//      $arr_guardar['wvaltarReco']*$wcantidad;
                                                        // Guardado en la tabla de liquidaciones de cirugía
                                                        $Liqgrm = $arr_CARGO["grupoMedico"];
                                                        $Liqetr = $arr_CARGO["estaEnTurno"];
                                                        $Liqpol = (isset($arr_CARGO["politicaAplico"])) ? utf8_decode($arr_CARGO["politicaAplico"]): '';
                                                        $Liqpol = (isset($arr_CARGO["wcondicion_restriccion"]) && count($arr_CARGO["wcondicion_restriccion"]) > 0) ? $Liqpol.'|'.utf8_decode(implode("|", $arr_CARGO["wcondicion_restriccion"])): $Liqpol;
                                                        $Liqdis = (isset($arr_CARGO["wdisponibilidad"])) ? $arr_CARGO["wdisponibilidad"]: '';
                                                        $Liqctr = (isset($arr_CARGO["wcuadroturno"])) ? $arr_CARGO["wcuadroturno"]: '';
                                                        $procedimiento_log_cx_arreglado = arreglar_procedimientos_bilaterales($procedimiento_log_cx);
                                                        $sql = "INSERT INTO {$wbasedato}_000198
                                                                    (Medico, Fecha_data, Hora_data, Liqhis, Liqing,
                                                                    Liqdoc, Liqcaq, Liqpro, Liqcon, Liqdll,
                                                                    Liqter, Liqesp, Liqpor, Liqvlr,
                                                                    Liqvlf, Liqfac, Liqgra, Liqblq,
                                                                    Liqfca, Liqhca, Liqtta, Liqidc, Liqtur,
                                                                    Liqgrm, Liqetr, Liqpol, Liqdis, Liqctr,
                                                                    Liqest, Seguridad)
                                                                VALUES
                                                                    ('{$wbasedato}', '{$fecha_actual}', '{$hora_actual}', '{$whistoria}', '{$wing}',
                                                                    '{$wdoc}', '{$diferenciaActoQx}', '{$procedimiento_log_cx_arreglado}', '{$arr_CARGO['wcodcon']}', '{$codigo_equipo_examen}',
                                                                    '{$arr_CARGO['wcodter']}', '{$arr_CARGO['wespecialidad']}', '{$arr_CARGO['porcentaje_cxMult_CARGO']}', '{$arr_CARGO['wvaltarReco']}',
                                                                    '{$valor_multiplicado}', '{$arr_CARGO['wfacturable']}', '{$arr_CARGO['wgrabar']}', '{$arr_CARGO['wbaseliquidacion']}',
                                                                    '{$wfecha_cargo}', '{$whora_cargo}', '{$arr_CARGO['wtipfac']}', '{$idGuardadoBD}', '{$arr_CARGO['wturno_cirugia']}',
                                                                    '{$Liqgrm}', '{$Liqetr}', '{$Liqpol}', '{$Liqdis}', '{$Liqctr}',
                                                                    'on', 'C-{$wuse}')";

                                                        if($result = mysql_query($sql,$conex))
                                                        {
                                                            $almenosUnoGrabado = true;
                                                            // Marcar insumos como liquidados
                                                            $id_insumo_207 = $arr_CARGO["id_insumo"];
                                                            if(!empty($id_insumo_207))
                                                            {
                                                                $sql_liq = "UPDATE {$wbasedato}_000207 SET Mpaliq = 'on', Mpalux = 'on' WHERE id = '{$id_insumo_207}'";
                                                                if($result_liq = mysql_query($sql_liq,$conex))
                                                                {
                                                                    // Se marca insumo como liquidado para no ternelo en cuenta en una nueva liquidación.
                                                                }
                                                            }
                                                            // Guardado en la tabla de liquidaciones de cirugía
                                                            $data['mensaje_local'] = 'Datos guardados';
                                                            if(!array_key_exists($procedimiento_log_cx, $arr_encabezado_conDlle))
                                                            {
                                                                $arr_encabezado_conDlle[$procedimiento_log_cx] = array();
                                                            }
                                                            $arr_encabezado_conDlle[$procedimiento_log_cx][] = $idGuardadoBD;
                                                        }
                                                        else
                                                        {
                                                            if(!$almenosUnoGrabado) // Si no ha guardado por lo menos un cargo
                                                            {
                                                                unset($arr_encabezado[$wprocedimiento]); // Evíta que se guarde encabezado si no se pudo guardar el cargo.
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        $msje_respuesta_err = $data_respuesta["mensaje"];
                                                        if($arr_CARGO['wcodcon'] == $concepto_medicamentos_mueven_inv || $arr_CARGO['wcodcon'] == $concepto_materiales_mueven_inv)
                                                        {
                                                            $msje_respuesta_err = "INSUMOS: ".$msje_respuesta_err;
                                                        }
                                                        if(!array_key_exists($msje_respuesta_err, $data_respuesta_mensajes_err))
                                                        {
                                                            $data_respuesta_mensajes_err[$msje_respuesta_err] = array();
                                                        }

                                                        if($data_respuesta["cod_cargo"] != '')
                                                        {
                                                            $data_respuesta_mensajes_err[$msje_respuesta_err][] = $data_respuesta["cod_cargo"];
                                                        }
                                                        else
                                                        {
                                                            $msj_err = "<span style='font-weight:bold;'>Procedimiento:</span> ".$datosGrabarCargos['wprocod']."; <span style='font-weight:bold;'>Concepto:</span> ".$datosGrabarCargos['wcodcon']."; <span style='font-weight:bold;'>Empresa:</span> {$arr_CARGO['wcodemp']}; <span style='font-weight:bold;'>Tarifa:</span> {$arr_CARGO['wtar']}";
                                                            $data_respuesta_mensajes_err[$msje_respuesta_err][] = $msj_err;
                                                        }
                                                        $evidencias_errores[] = $data_respuesta["EvidenciaError"];

                                                        $procedimiento_log_cx_arreglado = arreglar_procedimientos_bilaterales($procedimiento_log_cx);
                                                        $encabezado_error = date("Y-m-d")." ".date("H:i:s").PHP_EOL.PHP_EOL."Procedimiento: $procedimiento_log_cx_arreglado, Concepto: {$arr_CARGO['wcodcon']}, Cargo: $codigo_equipo_examen, Turnocx.: {$arr_CARGO['wturno_cirugia']}, Usuario graba: {$wuse}, Emp: {$arr_CARGO['wcodemp']}, Tar: {$arr_CARGO['wtar']}".PHP_EOL.PHP_EOL.$data_respuesta["mensaje"];
                                                        $arr_encabezado[$wprocedimiento]["log_errores"] .= PHP_EOL.$encabezado_error.PHP_EOL."------------------------";
                                                        // unset($arr_encabezado[$wprocedimiento]); // Evíta que se guarde encabezado si no se pudo guardar el cargo.
                                                        //$descripcion = "(".mysql_errno().') '.mysql_error()."|obs:'Error al cambiar el estado de aprobación de la solicitud de id. ".$wid_solpend;
                                                        // insertLog($conex, $wbasedato, $user_session, $accion, $form, 'error_sql', $descripcion, $wcedula, $sql);
                                                        // $data_respuesta_mensajes_err[] = $data_respuesta["mensaje"];
                                                        // $data['mensaje'] .= $data_respuesta["mensaje"]."<br>
                                                        //                     ".utf8_encode("No se pudo guardar cargo (". $datosGrabarCargos['wprocod'].") ".$datosGrabarCargos['wpronom']." => (".$datosGrabarCargos['wcodcon'].") ".$datosGrabarCargos['wnomcon']);
                                                        $data['error'] = 1;
                                                        // $data['mensaje_local'] = "No se guardaron cargos";
                                                        $data["error_cargo"] = 1;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if($data['error_cargo'] == 1)
                                {
                                    $msjErr = '';
                                    foreach ($data_respuesta_mensajes_err as $msj => $value_arr)
                                    {
                                        $resaltar_msj = $msj;
                                        if($error_bloqueoUnix) // [updt-78]
                                        {
                                            $resaltar_msj = '<span style="color:red;">'.$msj.'</span>';
                                        }
                                        $msjErr .= ''.$resaltar_msj.'<br>Para los siguientes cargos: <br>
                                                            <ul style="list-style-type: disc;padding-left: 20px;display: block;font-size:9pt;">
                                                                <li>'.implode("</li><li>", $value_arr).'</li>
                                                            </ul><br>';
                                    }
                                    $data['mensaje'] = $msjErr;
                                    $msj_validacionErrorParcial = "Liquidacion grabada, Pero no se guardaron algunos cargos";
                                    if($almenosUnoGrabado && $error_bloqueoUnix) // [updt-78]
                                    {
                                    }
                                    elseif(!$almenosUnoGrabado && $error_bloqueoUnix)
                                    {
                                        $msj_validacionErrorParcial = "No se grabaron los cargos porque hay una tabla bloqueada en unix.";
                                    }

                                    $data['mensaje_local'] = $msj_validacionErrorParcial;
                                }

                                foreach ($arr_encabezado as $wprocedimiento => $arr_enc)
                                {
                                    // Si se llegó a insertar por lo menos un cargo para ese procedimiento entonces se inserta el encabezado
                                    if(array_key_exists($wprocedimiento, $arr_encabezado_conDlle) && count($arr_encabezado_conDlle[$wprocedimiento]) > 0)
                                    {
                                        //AQUÍ CONSULTAR SI NO EXISTE PROCEDIMIENTO-DIFERENCIAQX-TURNO
                                        //

                                        $wprocedimiento = arreglar_procedimientos_bilaterales($wprocedimiento);
                                        $txt_err_log = ($arr_enc['log_errores'] != '') ? addslashes($arr_enc['log_errores']) : '';
                                        $sql = "INSERT INTO {$wbasedato}_000199
                                                    (Medico, Fecha_data, Hora_data, Enlhis, Enling, Enldoc,
                                                    Enlcaq, Enlpro, Enltan,
                                                    Enltsr, Enltus, Enltcx,
                                                    Enlter, Enlesp, Enlorg, Enlbil, Enlvia, Enltpr,
                                                    Enlpqt, Enltur, Enlelg, Enlnps, Enlpor, Enlest, Seguridad)
                                                VALUES
                                                    ('{$wbasedato}', '{$fecha_actual}', '{$hora_actual}', '{$whistoria}', '{$wing}', '{$wdoc}',
                                                    '{$diferenciaActoQx}', '{$wprocedimiento}', '{$arr_enc['wtipo_anestesia_cx']}',
                                                    '{$arr_enc['wtiempo_sala_recuperarcion']}', '{$arr_enc['wtiempo_uso_minutos']}', '{$arr_enc['wtiempo_minutos_cx']}',
                                                    '{$arr_enc['wespecialista']}', '{$arr_enc['wespecialidad']}', '{$arr_enc['worgano']}', '{$arr_enc['wbilateral']}', '{$arr_enc['wvia']}', '{$arr_enc['wtiempo_procedimiento']}',
                                                    '{$es_paquete}', '{$arr_enc['wturno_cirugia']}', '{$txt_err_log}', '{$arr_enc['pro_no_pos']}', '{$arr_enc['pos_organo']}', 'on', 'C-{$wuse}')";

                                        if($result = mysql_query($sql,$conex))
                                        {
                                            // $descripcion = "tabla:'".$wbasedato."_".SOLICITUDES."'|id:'$wid_solpend'|columnUpd:'Solapr'|columnFiltro:'Solfue-id'|valueFiltro:'".$wfuente."-".$wid_solpend."'|obs:' La solicitud con id. $wid_solpend combió su estado de aprobación a -$westadoapr-'";
                                            // insertLog($conex, $wbasedato, $user_session, $accion, $form, '', $descripcion, $wcedula);
                                            if(count($data_respuesta_mensajes_err) == 0) { $data['mensaje'] = 'Datos guardados'; }
                                            if($proceso_auditoria_activo_sfi == 'on' && existeTabla($conex, $wemp_pmla, $wbasedato, ENC_AUDITORIA_252))
                                            {
                                                $ENC_AUDITORIA_252 = ENC_AUDITORIA_252;
                                                $sqlTur = " UPDATE  {$wbasedato}_{$ENC_AUDITORIA_252} SET Aueliq = 'on'
                                                            WHERE   Auetur = '{$arr_enc['wturno_cirugia']}'
                                                                    AND Aueest = 'on'";
                                                if($result = mysql_query($sqlTur,$conex))
                                                {}
                                                else
                                                {}
                                            }
                                        }
                                        else
                                        {
                                            //$descripcion = "(".mysql_errno().') '.mysql_error()."|obs:'Error al cambiar el estado de aprobación de la solicitud de id. ".$wid_solpend;
                                            // insertLog($conex, $wbasedato, $user_session, $accion, $form, 'error_sql', $descripcion, $wcedula, $sql);
                                            $data['mensaje'] .= utf8_encode("No se pudo guardar encabezado de procedimientos para [".$wprocedimiento."]\n.");
                                            $data['error'] = 1;
                                            $data['sqlerr'] .= $sql." ".PHP_EOL;
                                        }
                                    }
                                    else
                                    {
                                        $sql = "SELECT  id
                                                FROM    {$wbasedato}_000199
                                                WHERE   Enlpro = '{$wprocedimiento}'
                                                        AND Enltur = '{$arr_enc['wturno_cirugia']}'
                                                        AND Enlest = 'on'";
                                        if($result = mysql_query($sql,$conex))
                                        {
                                            if(mysql_num_rows($result) > 0)
                                            {
                                                $log_err = $arr_enc['log_errores'];
                                                $sql = "UPDATE  {$wbasedato}_000199 SET Enlelg = '{$log_err}'
                                                        WHERE   Enlpro = '{$wprocedimiento}'
                                                                AND Enltur = '{$arr_enc['wturno_cirugia']}'
                                                                AND Enlest = 'on'";
                                                if($result = mysql_query($sql,$conex))
                                                {}
                                                else
                                                {}
                                            }
                                        }
                                        else
                                        {}
                                    }
                                }
                            }
                            else
                            {
                                $data["error"]          = 1;
                                $data["mensaje"]        = "No se pudo liquidar la cirugía porque hay problemas con algunos cargos";
                                $data["html"]           = "";
                                $data["error_tipo"]     = "liquidacion_simulado";
                                $html_err               = "";
                                $data["evidenciaError"] = "";
                                foreach ($simul_respuesta_mensajes_err as $error_tipo => $arr_info)
                                {
                                    // arr_info => array("mensaje_err"=>"","arr_errores"=>array(), "error_tipo"=>$error_tipo, "evidenciaError"=>""); // ["arr_errores"][] = $msje_respuesta_err;
                                    $implode_errs = implode("</li><li>", $arr_info["arr_errores"]);
                                    $html_err .= '  <fieldset>
                                                        <legend align="left"><span style="font-weight:bold;font-size:9pt;" >'.utf8_encode($arr_info['mensaje_err']).'</span></legend>
                                                        <div style="font-size:8pt;text-align:justify;" >
                                                            <ul style="list-style-type: disc;padding-left: 20px;display: block;">
                                                                <li>'.$implode_errs.'</li>
                                                            </ul>
                                                        </div>
                                                    </fieldset>
                                                    <div style="display:none;">'.$arr_info["evidenciaError"].'</div>';
                                    $data["evidenciaError"] .= $arr_info["evidenciaError"];
                                }
                                $data["html"] = '<div style="color:red;font-weight:bold;">'.$data["mensaje"].'</div>'.$html_err;
                            }

                            if($hay_unix && $conexUnix!='')
                            {
                                // $guardar = "numDoc: $numDoc, conexUnix: $conexUnix, SERVER_ADDR: {$_SERVER['SERVER_ADDR']}, usa_fuente_cargo: $usa_fuente_cargo, bloqueo_global_fuentes: ".print_r($bloqueo_global_fuentes,true).PHP_EOL;
                                // $guardar .= "usa_fuente_cargo: ".print_r($usa_fuente_cargo,true).PHP_EOL;
                                // seguimiento($guardar);
                                if($bloqueo_global_fuentes && $usa_fuente_cargo && ($_SERVER['SERVER_ADDR'] != "127.0.0.1"))
                                {
                                    $qCommit    = " COMMIT WORK ";
                                    odbc_exec($conexUnix, $qCommit)or die("ERROR EN QUERY UNIX: ".odbc_errormsg()." - ".$qCommit);
                                }

                                odbc_close($conexUnix);
                                odbc_close_all();
                            }
                        }
                        else
                        {
                            $data["error_tipo"]     = "liquidacion_simulado";
                            $html_err               = "";
                            $data["evidenciaError"] = "";

                            // ERRORES DE CAMPO FACTURABLE VACÍO EN EL CARGO ANTES DE GRABAR
                            if($arr_validaciones["error_facturable_insumo"])
                            {
                                $html_err .= '<br><div class="fila2" style="width:100%">No pudo liquidar la cirugía porque hay algunos cargos de insumos que el valor de facturable o no facturable esta vacío. Por favor revisar los cargos de insumos.</div>';
                            }

                            // ERRORES DE SALDO DE INSUMO EN UNIX
                            if(!$arr_validaciones["insumos_saldo"])
                            {
                                $html_err .= '<br><div class="fila2" style="width:100%">No pudo liquidar la cirugía porque no hay registro de saldo para algunos insumos. No se pudo crear saldo automáticamente en Unix</div>';
                            }

                            // ERRORES DE TARIFA DE INSUMO EN UNIX
                            if(!$arr_validaciones["insumos_tarifa"])
                            {
                                $err_html = "";
                                $cont_err = 0;
                                $sql_sintarifa = "";
                                foreach ($arr_validaciones['arr_sin_tarifas'] as $cod_insu => $arr_infoInsu) {
                                    $err_html .= '<li><span style="font-weight:bold;">'.$cod_insu.'</span>-'.utf8_encode($arr_infoInsu['nombre_insumo']).' | <span style="font-weight:bold;">Tarifa Emp.:</span> '.$arr_infoInsu['wtar'].'</li>';
                                    $sql_sintarifa .= $arr_infoInsu['sql_sintarifa'];
                                    $cont_err++;
                                }

                                $openDiv = '<div align="center" style="background-color: #fff9cf;font-size:8pt;text-align:justify;">';
                                if($cont_err > 10)
                                { $openDiv = '<div align="center" style="background-color: #fff9cf;font-size:8pt;text-align:justify; height: 125px; overflow:auto;">'; }

                                $html_err .= '  <br><fieldset>
                                                    <legend align="left"><span style="font-weight:bold;font-size:9pt;" >Insumos sin tarífa en Unix</span></legend>
                                                    '.$openDiv.'
                                                        <ul style="list-style-type: disc;padding-left: 20px;display: block;">
                                                            '.$err_html.'
                                                        </ul>
                                                    </div>
                                                </fieldset>
                                                <div style="display:none;">'.$sql_sintarifa.'</div>';
                                $data["evidenciaError"] .= PHP_EOL."SIN_TARIFA".PHP_EOL.$sql_sintarifa;
                            }

                            // ERRORES DE VALOR DIFERENTE DEL CARGO DE INSUMOS EN UNIX-MATRIX POR LA FECHA DE CAMBIO DE TARIFA.
                            // En unix siempre al liquidar escoge el valor actual para el cargo de insumos (por fecha actual), pero en matrix si se tiene en cuenta el valor anterior y actual con la fecha de cirugía
                            // Este problema pasa cuando la fecha en unix en mayor a la fecha de la cirugía.
                            if(!$arr_validaciones["insumos_valores_unx_mtx"])
                            {
                                $err_html = "";
                                $cont_err = 0;
                                $sql_dif_valor = "";
                                foreach ($arr_validaciones['arr_diferente_valor'] as $cod_insu => $arr_infoInsu) {
                                    $err_html .= '<li><span style="font-weight:bold;">'.$cod_insu.'</span>-'.utf8_encode($arr_infoInsu['nombre_insumo']).' | <span style="font-weight:bold;">Tarifa Emp.:</span> '.$arr_infoInsu['wtar'].' [Unix: $'.$arr_infoInsu['valor_unix'].' | Matrix: $'.$arr_infoInsu['valor_matrix'].'] '.utf8_encode($arr_infoInsu['tipo_error_msj']).'</li>';
                                    $sql_dif_valor .= $arr_infoInsu['sql_dif_valor'];
                                    $cont_err++;
                                }

                                $openDiv = '<div align="center" style="background-color: #fff9cf;font-size:8pt;text-align:justify;">';
                                if($cont_err > 10)
                                { $openDiv = '<div align="center" style="background-color: #fff9cf;font-size:8pt;text-align:justify; height: 125px; overflow:auto;">'; }

                                $html_err .= '  <br><fieldset>
                                                    <legend align="left"><span style="font-weight:bold;font-size:9pt;" >Fecha de tarífa de insumo en Unix es mayor a la fecha de la cirugía, valores diferentes o insumo inactivo.</span></legend>
                                                    <div align="center" style="font-size:8pt;text-align:justify;font-weight:bold;">El valor del cargo en Unix sería diferente al valor liquidado en Matrix, la fecha de actualización de la tarifa en Unix debe ser anterior o igual a la fecha de cirugía, verificar que los valores en Matrix y Unix son iguales o que el código esta activo en los dos sistemas.</div>
                                                    '.$openDiv.'
                                                        <ul style="list-style-type: disc;padding-left: 20px;display: block;">
                                                            '.$err_html.'
                                                        </ul>
                                                    </div>
                                                </fieldset>
                                                <div style="display:none;">'.$sql_dif_valor.'</div>';
                                $data["evidenciaError"] .= PHP_EOL."SIN_FECHA_CX_MENOR_A_UNIX".PHP_EOL.$sql_dif_valor;
                            }

                            $html_err = '<div class="" style="width:100%;text-align:center;color:red;background-color:#fff9af;">NO SE LIQUIDÓ LA CIRUGÍA</div>'.$html_err;


                            $data["html"]    = $html_err;
                            $data["error"]   = 1;
                            // $data["mensaje"] = utf8_encode("No pudo liquidar la cirugía porque no hay registro de saldo para algunos insumos.\nNo se pudo crear saldo automáticamente");
                        }
                    }
                    else
                    {
                        $data["error"]   = 1;
                        $data["mensaje"] = utf8_encode("No pudo liquidar la cirugía porque no hay conexión con UNIX en este momento");
                    }

                    $html_autorizar_cargos = "";
                    if(count($arr_data_autorizacion["insumo"]) > 0 || count($arr_data_autorizacion["procedimiento"]) > 0)
                    {
                        $tr_pro_aut = "";
                        $tr_insum_aut = "";
                        if(count($arr_data_autorizacion["procedimiento"]) > 0)
                        {
                            $tr_pro_aut = '<tr class="">
                                                <td colspan="3">&nbsp;</td>
                                            </tr>
                                            <tr class="encabezadoTabla">
                                                <td>Procedimiento</td>
                                                <td>Empresa</td>
                                                <td>Estado</td>
                                            </tr>'.implode("", $arr_data_autorizacion["procedimiento"]);
                        }

                        if(count($arr_data_autorizacion["insumo"]) > 0)
                        {
                            $tr_insum_aut = '<tr class="">
                                                <td colspan="3">&nbsp;</td>
                                            </tr>
                                            <tr class="encabezadoTabla">
                                                <td>Insumo</td>
                                                <td>Empresa</td>
                                                <td>Estado</td>
                                            </tr>'.implode("", $arr_data_autorizacion["insumo"]);
                        }

                        $html_autorizar_cargos = '  <br><div class="fila2">Lista de cargos de procedimientos o insumos que requieren autorización de la entidad por cambio de responsable.</div>
                                                    <table width="" align="center">
                                                        '.$tr_pro_aut.'
                                                        '.$tr_insum_aut.'
                                                    </table>';
                    }

                    $data["arr_data_autorizacion"] = $arr_data_autorizacion;
                    $data["html_autorizar_cargos"] = $html_autorizar_cargos;
                    $data["evidencias_errores"]    = $evidencias_errores;
                    $data["validaciones_log"]      = $arr_validaciones;
                    // exit();
                break;

                case 'guardar_error_ajax_log':
                    $msg_fail = utf8_decode($msg_fail.PHP_EOL.$_SERVER['SCRIPT_FILENAME'].PHP_EOL.PHP_EOL.$data_parcial);
                    $detalle_error = utf8_decode($detalle_error);

                    $nombre_script_error = $_SERVER['SCRIPT_NAME'];

                    registroLogError($conex, $wbasedato, $msg_fail, "matrix_ajax", $detalle_error, $url_err, $nombre_script_error);
                break;

                default :
                        $data['mensaje'] = $no_exec_sub;
                        $data['error'] = 1;
                break;
            }
            echo json_encode($data);
            break;

        case 'update' :
            switch($form)
            {
                case 'modificar_datos_liquidados':
                    /*Array
                    (
                        [07730] => Array
                            (
                                [0_0022] => Array
                                    (
                                        [wprocedimiento] => 07730
                                        [wprocedimiento_nombre] => 07730-APENDICECTOMIA
                                        [wconcepto] => 0022
                                        [wconcepto_nombre] => DERECHOS SALA CIRUGIA
                                        [wtercero] =>
                                        [wtercero_nombre] =>
                                        [wespecialidad] =>
                                        [wespecialidad_nombre] =>
                                        [wporcentaje] => 100
                                        [wvalor] => 7060
                                        [wvalor_final] => 0
                                        [wfacturable] => S   (o 'N')
                                        [wgrabar] => on
                                    )*/
                    $arr_datos_liquidados = unserialize(base64_decode($arr_datos_liquidados));

                    //valor_nuevo
                    if($etiqueta == 'wtercero')
                    {
                        if($wequip_examen != '')
                        {
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto][$wequip_examen]['wtercero']             = $wtercero;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto][$wequip_examen]['wtercero_nombre']      = $wtercero_nombre;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto][$wequip_examen]['wespecialidad']        = $wespecialidad;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto][$wequip_examen]['wespecialidad_nombre'] = $wespecialidad_nombre;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto][$wequip_examen]['wdisponibilidad']      = $wdisponibilidad;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto][$wequip_examen]['wcuadroturno']         = $wcuadroturno;
                        }
                        else
                        {
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto]['wtercero']             = $wtercero;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto]['wtercero_nombre']      = $wtercero_nombre;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto]['wespecialidad']        = $wespecialidad;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto]['wespecialidad_nombre'] = $wespecialidad_nombre;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto]['wdisponibilidad']      = $wdisponibilidad;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto]['wcuadroturno']         = $wcuadroturno;
                        }
                    }
                    elseif($etiqueta == 'wvalor_digitado')
                    {
                        $arr_datos_liquidados[$wprocedimiento][$wconcepto]['wvalor']          = $valor_nuevo;
                        $arr_datos_liquidados[$wprocedimiento][$wconcepto]['wvalor_final']    = $valor_nuevo;
                        $arr_datos_liquidados[$wprocedimiento][$wconcepto]['wvalor_digitado'] = $valor_nuevo;
                    }
                    elseif($etiqueta == 'wlista_eq_ex_insumo')
                    {
                        if(!empty($wlista))
                        {
                            // Cambiar a facturable o no facturable pero masivamente a materiales y medicamentos
                            $expl_insumos_fact = explode("|", $wlista);
                            foreach ($expl_insumos_fact as $key_idx => $wequip_examen_insumo) {
                                $expl_conc_eq_ex_in   = explode(":", $wequip_examen_insumo);
                                $wconcepto            = $expl_conc_eq_ex_in[0];
                                $wequip_examen_insumo = $expl_conc_eq_ex_in[1];
                                $arr_datos_liquidados[$wprocedimiento][$wconcepto][$wequip_examen_insumo]['wfacturable'] = $valor_nuevo;
                            }
                        }
                        // $guardar = "arr_datos_liquidados: ".print_r($arr_datos_liquidados,true).PHP_EOL;
                        // seguimiento($guardar);
                    }
                    elseif($etiqueta == 'wdisponibilidad')
                    {
                        if($wequip_examen != '')
                        {
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto][$wequip_examen]["wdisponibilidad"]      = $valor_nuevo;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto][$wequip_examen]["wcuadroturno"] = $wcuadroturno;
                        }
                        else
                        {
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto][$etiqueta]      = $valor_nuevo;
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto]["wcuadroturno"] = $wcuadroturno;
                        }
                    }
                    elseif($etiqueta == 'grupoMedico')
                    {
                        if($wequip_examen != '')
                        {
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto][$wequip_examen]["grupoMedico"]      = $valor_nuevo;
                        }
                        else
                        {
                            $arr_datos_liquidados[$wprocedimiento][$wconcepto][$etiqueta]      = $valor_nuevo;
                        }
                    }
                    elseif(!empty($wequip_examen))
                    {
                        // La estructura de datos liquidados para equipos y medicamentos es la misma, con los mismos niveles en el array
                        // [procdimiento-paquete][concepto][equipo-examen-medicamento][wfacturable]; es por eso que esta misma sección de código
                        // funciona para equipos, exámenes e insumos.
                        $arr_datos_liquidados[$wprocedimiento][$wconcepto][$wequip_examen][$etiqueta] = $valor_nuevo;
                    }
                    else
                    {
                        $arr_datos_liquidados[$wprocedimiento][$wconcepto][$etiqueta] = $valor_nuevo;
                    }
                    $data['arr_datos_liquidados'] = base64_encode(serialize($arr_datos_liquidados));
                break;

                case 'recargar_detalle':
                        include_once("root/comun.php");
                        global $conex, $wemp_pmla;
                        $arr_terceros_especialidad = obtener_array_terceros_especialidad();
                        $arr_parametros = array();
                        $arr_detalle_liquidaciones = listarDetalleLiquidaciones($conex, $wemp_pmla, $wbasedato, $whistoria, $wing, $arr_parametros);
                        $arr_parametros['arr_terceros'] = $arr_terceros_especialidad;

                        $data['html'] = pintarDetalleLiquidaciones($conex, $wemp_pmla, $wbasedato, $arr_detalle_liquidaciones, $arr_parametros);
                    break;

                case 'anular_cargos_cirugia':
                        include_once("root/comun.php");
                        $data["mensaje"]              = '';
                        $data["sql"]                  = "";
                        $data["sql_err"]              = "";
                        $data["contCargosSinAnular"]  = 0;
                        $data["contCargosFacturados"] = 0;
                        $data["cont_Vacios"]          = 0;
                        $data["vlrs_facts" ]          = array();
                        $data["data_respuesta" ]      = array();
                        $data["error_tipo"]           = "";
                        $proceso_auditoria_activo_sfi       = consultarAliasPorAplicacion($conex, $wemp_pmla, 'proceso_auditoria_activo_sfi');
                        $concepto_medicamentos_mueven_inv   = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_medicamentos_mueven_inv');
                        $concepto_materiales_mueven_inv     = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_materiales_mueven_inv');
                        $permitir_historia_ingreso_inactivo = consultarAliasPorAplicacion($conex, $wemp_pmla, "erp_permitir_historia_ingreso_inactivo");

                        // if(file_exists("seguimiento.txt"))
                        // {
                        //     unlink("seguimiento.txt");
                        // }

                        //BLOQUEAR LA TABLA SIFUE DURANTE TODO EL PROCESO DE GRABACIÓN DE DEVOLUIÓN DE LA CIRUGÍA, para que se garantice guardar todos los cargos o no grabar ninguno si
                        //la tabla desde el principio se encuentra bloqueada por otro proceso o programa diferente al de liquidación.
                        $bloqueo_global_fuentes = false;
                        $usa_fuente_cargo       = false;
                        $validacionUnixCorrecto = true;

                        $error_bloqueoUnix = false; // Por ejemplo cuando la tabla sifue en unix esta bloqueada y no deja grabar más cargos.
                        $arr_parametosGenerales                               = array();
                        $arr_parametosGenerales["wtipo_ingreso"]              = $wtipo_ingreso;
                        $arr_parametosGenerales["ccoActualPac"]               = $ccoActualPac;
                        $arr_parametosGenerales["user_session"]               = $user_session;
                        $arr_parametosGenerales["fecha_actual"]               = $fecha_actual;
                        $arr_parametosGenerales["hora_actual"]                = $hora_actual;
                        $arr_parametosGenerales["error_bloqueoUnix"]          = $error_bloqueoUnix;
                        $arr_parametosGenerales["usa_fuente_cargo"]           = $usa_fuente_cargo;
                        $arr_parametosGenerales["bloqueo_global_fuentes"]     = $bloqueo_global_fuentes;
                        $arr_parametosGenerales["winsumos_cambiar_ingreso"]   = "off";
                        $arr_parametosGenerales["wingreso_reemplazable_unix"] = "";
                        $arr_parametosGenerales['wingreso_activo_unx']        = "";
                        $arr_parametosGenerales['fecha_reemplazable_unix']    = "";
                        $arr_parametosGenerales['concepto_medicamentos_mueven_inv'] = $concepto_medicamentos_mueven_inv;
                        $arr_parametosGenerales['concepto_materiales_mueven_inv']   = $concepto_materiales_mueven_inv;

                        // Validar si el ingreso está inactivo. Sobre cliame_100 y no sobre movhos_18 para poder anular una liquidación [updt-74]
                        $sql = "SELECT  'on' AS Pacact, m18.Ubifad, m18.Ubihad, c100.Pactdo
                                FROM    {$wbasedato}_000100 AS c100
                                        INNER JOIN
                                        movhos_000018 AS m18 ON (m18.Ubihis = c100.Pachis AND m18.Ubiing = {$wingreso})
                                WHERE   c100.Pachis = '{$whistoria}'
                                        AND c100.Pacdoc = '{$wdocumento}'";

                        /*$sql = "SELECT  c100.Pacact, m18.Ubifad, m18.Ubihad, r37.Oritid
                                FROM    root_000037 AS r37
                                        INNER JOIN
                                        {$wbasedato}_000100 AS c100 ON (c100.Pachis = r37.Orihis)
                                        INNER JOIN
                                        movhos_000018 AS m18 ON (m18.Ubihis = r37.Orihis AND m18.Ubiing = r37.Oriing)
                                WHERE   r37.Orihis = '{$whistoria}'
                                        AND r37.Oriori = '{$wemp_pmla}'
                                        AND r37.Oriing = '{$wingreso}'
                                        AND r37.Oriced = '{$wdocumento}'";*/

                        /*$sql = "SELECT  m18.Ubiald, m18.Ubifad, m18.Ubihad
                                FROM    root_000037 AS r37
                                        INNER JOIN
                                        movhos_000018 AS m18 ON (m18.Ubihis = r37.Orihis AND m18.Ubiing = r37.Oriing)
                                WHERE   r37.Orihis = '{$whistoria}'
                                        AND r37.Oriori = '{$wemp_pmla}'
                                        AND r37.Oriing = '{$wingreso}'
                                        AND r37.Oriced = '{$wdocumento}'";*/
                        $data["sql"] .= $sql.PHP_EOL;
                        if($result = mysql_query($sql,$conex))
                        {
                            if(mysql_num_rows($result) > 0)
                            {
                                $row_37 = mysql_fetch_array($result);
                                if($row_37['Pacact'] == 'on')
                                {
                                    $wtip_doc = $row_37['Pactdo'];
                                    $data["paciente_activo_unx"] = 'on';
                                    $data["registros_unix"]      = array();
                                    $data["sql_unx"]             = "";

                                    $arr_params = array();
                                    $arr_params['whistoria'] = $whistoria;
                                    $arr_params['wing']      = $wingreso;
                                    $arr_params['wdoc']      = $wdocumento;
                                    $arr_params['wtip_doc']  = $wtip_doc;
                                    $arr_params['sql_unx']   = '';
                                    $arr_params['registros_unix'] = array();
                                    $conexUnix = '';

                                    if(isset($hay_unix) && $hay_unix)
                                    {
                                        $paciente_activo_unx = false;
                                        if($permitir_historia_ingreso_inactivo != 'on')
                                        {
                                            // Si no está activo el parámetro que permita liquidar cargos a ingresos inactivos entonces se deba validar que el ingreso del cargo matrix
                                            // esté activo en unix para permitir grabar
                                            $paciente_activo_unx = validarPacienteActivoUnix($conex, $wemp_pmla, $wbasedato, $arr_params);

                                            if($arr_params["error"] == 1)
                                            {
                                                $data["error"]       = 1;
                                                $data["mensaje"]     = utf8_encode("No se pudo verificar si el paciente esta activo en unix.\nNo se ha podido liquidar la cirugía");
                                                $data["mensaje_unx"] = $arr_params["mensaje"];
                                            }
                                        }
                                        else
                                        {
                                            // Si el parámetro que permite liquidar cargos a ingresos inactivos en unix, se debe garantizar que en unix existe por lo menos un
                                            // ingreso activo así sea diferente al ingreso que se esta liquidando en matrix, existe un cron encargado de actualizar los cargos de insumos
                                            // en unix con el ingreso matrix, porque es posible que los insumos hayan quedado grabados al ingreso activo en unix y no corresponda al ingreso matrix.
                                            $wdocumento = strtoupper($wdocumento);

                                            $filtros = '';
                                            // En unix pacced solo tiene 11 caracteres, pero en matrix puede estar el número de documento con mayor cantidad de caracteres
                                            // en ese caso entonces compararlo con el campo NUIP de unix que tiene el documento completo.
                                            if(strlen($wdocumento) > 11 )
                                            {
                                                $filtros .= " AND pacnui = '{$wdocumento}'";
                                            }
                                            else
                                            {
                                                $filtros .= " AND pacced = '{$wdocumento}'";
                                            }

                                            $wtip_doc = strtoupper($wtip_doc);
                                            $filtros .= " AND pactid = '{$wtip_doc}'";

                                            // Para la verificación de ingreso activo en unix usar la conexión $conexUnixInactiv y no la que se encarga de la devolución de los cargos
                                            // porque esta última realiza un commit work a todas las operaciones de devolución y se genera un error al intentar usar esa misma conexión
                                            // para consultar inpac.
                                            $conexUnixInactiv = odbc_connect('facturacion','informix','sco');
                                            $sqlunx = " SELECT  pachis, pacnum, pacced, pactid, pacfec
                                                        FROM    inpac
                                                        WHERE   pachis = '{$whistoria}'
                                                                {$filtros}";

                                            if($result_unx = odbc_exec($conexUnixInactiv, $sqlunx))
                                            {
                                                // 1 >> Debe existir un ingreso activo en unix para que el integrador no genere error ni detenga su correcta ejecusión.
                                                // 2 >> Si el ingreso activo en unix es diferente al ingreso que se está grabando en el cargo entonces se deben marcar esos
                                                //      cargos (Solo de insumos) para que despues de grabados se les cambie el número de ingreso en unix, porque cuando el integrador
                                                //      pase a unix los insumos, estos pasarán con el número de ingreso que esté activo en unix.
                                                $documento_unx = "";
                                                $tipodoc_unx   = "";
                                                $wingreso_activo_unx = "";
                                                while(odbc_fetch_row($result_unx))
                                                {
                                                    $wingreso_activo_unx = trim(odbc_result($result_unx,'pacnum'));
                                                    $documento_unx       = trim(odbc_result($result_unx,'pacced'));
                                                    $tipodoc_unx         = trim(odbc_result($result_unx,'pactid'));
                                                    $fec_ingreso_unx     = trim(odbc_result($result_unx,'pacfec'));
                                                    $arr_parametosGenerales['wingreso_activo_unx'] = $wingreso_activo_unx;
                                                    if($wingreso_activo_unx != $wingreso)
                                                    {
                                                        $arr_parametosGenerales["winsumos_cambiar_ingreso"]   = 'on';
                                                        $arr_parametosGenerales["wingreso_reemplazable_unix"] = $wingreso_activo_unx;
                                                        $arr_parametosGenerales["fecha_reemplazable_unix"]    = $fec_ingreso_unx;
                                                    }
                                                }

                                                if($wingreso_activo_unx != '')
                                                {
                                                    $paciente_activo_unx = true;
                                                }
                                            }
                                            else
                                            {
                                                    $data["sql_unix"]    = $sqlunx." > ".mysql_error();
                                                    $data["error"]       = 1;
                                                    $data["mensaje"]     = utf8_encode("No se pudo verificar si el paciente esta activo en unix.\nNo se ha podido anular la cirugía");
                                                    // $data["mensaje_unx"] = $arr_params["mensaje"];
                                            }

                                            odbc_close($conexUnixInactiv);
                                            // odbc_close_all();
                                        }

                                        if($conexUnix = @odbc_connect('facturacion','informix','sco'))
                                        {
                                            //
                                        }
                                        else
                                        {
                                            $validacionUnixCorrecto = false;
                                            $simul_respuesta_mensajes_err["error_conexion_unix"] = array(   "mensaje_err"   =>"No fue posible realizar conexion con Unix en este momento",
                                                                                                            "arr_errores"   =>array("Puede intentar más tarde."),
                                                                                                            "evidenciaError"=>"");
                                        }

                                        $data["paciente_activo_unx"] = ($paciente_activo_unx) ? 'on': 'off';//Debe existir por lo menos un ingreso activo en unix para que el integrador pase los insumos a unix.
                                        $data["registros_unix"]      = $arr_params['registros_unix'];
                                        $data["sql_unx"]             = $arr_params['sql_unx'];

                                    }

                                    // $arr_parametosGenerales["bloqueo_global_fuentes"] = $bloqueo_global_fuentes;

                                    if($validacionUnixCorrecto)
                                    {
                                        if($data["paciente_activo_unx"]=='on')
                                        {
                                            $wbasedato_mov                    = consultarAliasPorAplicacion($conex, $wemp_pmla, "movhos");
                                            $validarFechaCambioTarifaUnxMxERP = consultarAliasPorAplicacion($conex, $wemp_pmla, 'validarFechaCambioTarifaUnxMxERP');
                                            $wbasetcx                         = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tcx');
                                            $arr_datosGENERALES               = array("validarFechaCambioTarifaUnxMxERP"=>$validarFechaCambioTarifaUnxMxERP);

                                            // dif_acto
                                            // ids_cargos_106
                                            $expl_cargos = (!empty($ids_cargos_106)) ? explode("|", $ids_cargos_106) : array();

                                            $stringIds = str_replace("|", "", $ids_cargos_106);
                                            $stringIds = str_replace(":", "", trim($stringIds));
                                            $stringIds = str_replace(" ", "", trim($stringIds));

                                            $data["arr_ids_106"] = $expl_cargos;

                                            $arr_anuladoVerificado = array();
                                            $wuse = $user_session;
                                            $wfecha = date("Y-m-d");
                                            $whora = date("H:i:s");

                                            // inactivar y anular los cargos en la tabla cliame_106
                                            if($stringIds != '' && count($expl_cargos) > 0)
                                            {
                                                global $conex, $wbasedato, $wemp_pmla, $wuse, $wfecha, $whora;
                                                $error                    = "";
                                                $error_msj                = "";
                                                $arr_idCargo_error_anular = array();
                                                $arr_idCargo_anulados     = array();
                                                $arr_idDevoluciones       = array();
                                                $arr_idErroresAnular      = array();

                                                // Se debe validar que si por lo menos hay uno de los cargos facturados entonces no se permita anular ningún cargo de esta liquidación
                                                $arr_facturado = array("error"=>0,"mensaje"=>"", "cargoFacturadoUnx"=>false);
                                                foreach ($expl_cargos as $key => $id_cargo_106_198)
                                                {
                                                    $xplIds = explode(":", $id_cargo_106_198);
                                                    $id_198 = $xplIds[0];
                                                    $id_cargo = $xplIds[1];
                                                    if($id_cargo != '' && ($id_cargo*1) > 0)// Hay cargos que se grabaron en el log de cirugía que tienen ID=0 porque no se grabaron en cliame_106 debído a que realmente no tienen tarifa (nunca se cobrar:es algo normal en este caso)
                                                    {
                                                        if(isset($hay_unix) && $hay_unix)
                                                        {
                                                            $arr_facturado       = validarCargoFacturadoUnix($conex, $wbasedato, $wemp_pmla, $id_cargo, $conexUnix, $wbasedato_mov);
                                                            $data["sql_err"]     .= PHP_EOL.$arr_facturado["sql_err"];
                                                            $data["vlrs_facts" ][] = $arr_facturado["vlr_fact"];
                                                            if($arr_facturado["cargoFacturadoUnx"]) {
                                                                $data["contCargosFacturados"]++;
                                                                // break;
                                                            };
                                                            // echo ((($arr_facturado["cargoFacturadoUnx"]) ? '[facturado]': '[No facturado]'));
                                                        }
                                                    }
                                                }

                                                if($data["contCargosFacturados"] == 0)
                                                {
                                                    $expl_cargos106 = array();
                                                    $wfecha_cargo   = date("Y-m-d"); // Se inicializa con tiempo actual pero al consultar cargos de insumos puede cambiar por hora y fecha del cargo.
                                                    $whora_cargo    = date("H:i:s"); // Se inicializa con tiempo actual pero al consultar cargos de insumos puede cambiar por hora y fecha del cargo.

                                                    foreach ($expl_cargos as $key => $id_cargo_106_198)
                                                    {
                                                        $xplIds = explode(":", $id_cargo_106_198);
                                                        //$id_198 = $xplIds[0];
                                                        $expl_cargos106[] = $xplIds[1];
                                                    }

                                                    // Consulta el centro de costos del quirófano en el turno liquidado.
                                                    $sqlCco = " SELECT  tcx12.Quicco
                                                                FROM    {$wbasetcx}_000011 AS tcx11
                                                                        INNER JOIN
                                                                        {$wbasetcx}_000012 AS tcx12 ON (tcx12.Quicod = tcx11.Turqui)
                                                                WHERE   tcx11.Turtur = '{$codigo_turno_cx}'";
                                                    $resultCco = mysql_query($sqlCco, $conex);
                                                    $wcco = "";
                                                    if(mysql_num_rows($resultCco))
                                                    {
                                                        $rowCco = mysql_fetch_assoc($resultCco);
                                                        $wcco = $rowCco['Quicco'];
                                                    }

                                                    $arr_CARGOS_PARA_DEVOLVER = array(0=>array(0=>array()));
                                                    // Lectura de cargos grabados y que se van a anular o devolver.
                                                    $ids_cargos_actoQx = implode("','", $expl_cargos106);
                                                    $sqlOff = " SELECT  t106.*, t200.Gruinv AS mueve_inventario, t200.Gruser, t200.Gruarc
                                                                FROM    {$wbasedato}_000106 AS t106
                                                                        INNER JOIN
                                                                        {$wbasedato}_000200 AS t200 ON (t106.Tcarconcod = t200.Grucod)
                                                                WHERE   t106.id IN ('{$ids_cargos_actoQx}')";

                                                    $arr_InfoCargo106 = array();
                                                    if($result106 = mysql_query($sqlOff, $conex))
                                                    {
                                                        while($row106 = mysql_fetch_assoc($result106))
                                                        {
                                                            $id106 = $row106["id"];
                                                            if(!array_key_exists($id106, $arr_InfoCargo106))
                                                            {
                                                                $arr_InfoCargo106[$id106] = array();
                                                            }
                                                            $arr_InfoCargo106[$id106] = $row106;

                                                            if($row106['mueve_inventario'] == 'on')
                                                            {
                                                                $arr_cargoDevolucion = crearCargoDevolucion($conex, $conexUnix, $wemp_pmla, $wbasedato, $id106, $row106, $arr_parametosGenerales, $wfecha_cargo, $whora_cargo);
                                                                if(!array_key_exists($id106, $arr_CARGOS_PARA_DEVOLVER[0][0]))
                                                                {
                                                                    // Son los mismo niveles que se usan en el array de grabación de la liquidación de cirugía
                                                                    // Esto se hace para usar las mismas funciones de validación de insumos que se hacen al liquidar la cirugía y evitar reescribir código,
                                                                    // por eso se crearon las dos posiciones con indice '0' para que la esctructura del array quedara igual.
                                                                    $arr_CARGOS_PARA_DEVOLVER[0][0][$id106] = array();
                                                                }
                                                                $arr_CARGOS_PARA_DEVOLVER[0][0][$id106] = $arr_cargoDevolucion;
                                                            }
                                                        }
                                                    }

                                                    $arr_validaciones     = array("error_facturable_insumo"=>false, "unix_activo"=>true, "insumos_saldo"=>true, "insumos_tarifa"=>true, "insumos_valores_unx_mtx"=>true, "query_sin_saldo"=>"","query_sin_saldo_err"=>"","arr_sin_tarifas"=>array(),"arr_diferente_valor"=>array());
                                                    $arr_insumosFactError = array();
                                                    $arr_insumos_cargos   = arrayCargosInsumos($conex,$wemp_pmla, $wbasedato, $wcco, $wfecha_cargo, $whora_cargo, $arr_CARGOS_PARA_DEVOLVER, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $wbasedato_mov, $arr_validaciones, $arr_insumosFactError, $arr_datosGENERALES);
                                                    if($hay_unix)
                                                    {
                                                        $arr_validaciones   = validarSaldosYUnixLiquidacionCx($conex, $conexUnix, $wemp_pmla, $wbasedato, $wcco, $wfecha_cargo, $whora_cargo, $arr_CARGOS_PARA_DEVOLVER, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $wbasedato_mov, $arr_validaciones, $arr_datosGENERALES, $arr_insumos_cargos, "D");
                                                    }

                                                    if(count($arr_insumosFactError) > 0)
                                                    {
                                                        $arr_validaciones["error_facturable_insumo"] = true;
                                                    }

                                                    if($arr_validaciones["insumos_saldo"] && $arr_validaciones["insumos_tarifa"] && $arr_validaciones["insumos_valores_unx_mtx"] && !$arr_validaciones["error_facturable_insumo"])
                                                    {
                                                        // $guardar = "arr_InfoCargo106: ".print_r($arr_InfoCargo106,true).PHP_EOL;
                                                        // seguimiento($guardar);
                                                        // $expl_cargos = array();

                                                        foreach ($expl_cargos as $key => $id_cargo_106_198)
                                                        {
                                                            $xplIds = explode(":", $id_cargo_106_198);
                                                            $id_198 = $xplIds[0];
                                                            $id_cargo = $xplIds[1];
                                                            if($id_cargo != '' && ($id_cargo*1) > 0)// Hay cargos que se grabaron en el log de cirugía que tienen ID=0 porque no se grabaron en cliame_106 debído a que realmente no tienen tarifa (nunca se cobran, es algo normal en este caso)
                                                            {
                                                                $idGuardadoBD    = 0;
                                                                $mueveInventario = 'off';
                                                                $mueveInventario = (array_key_exists($id_cargo, $arr_InfoCargo106)) ? $arr_InfoCargo106[$id_cargo]['mueve_inventario'] : 'off';

                                                                if($mueveInventario == 'on')
                                                                {
                                                                    if(array_key_exists($id_cargo, $arr_CARGOS_PARA_DEVOLVER[0][0]))
                                                                    {
                                                                        $arr_InfoCargoDevolucion = $arr_CARGOS_PARA_DEVOLVER[0][0][$id_cargo];
                                                                        $data_anular = devolverCargoInventario($conex, $conexUnix, $wemp_pmla, $wbasedato, $id_cargo, $arr_InfoCargoDevolucion, $arr_parametosGenerales, $idGuardadoBD);
                                                                        $data["data_respuesta" ][] = $data_anular;
                                                                        foreach ($arr_parametosGenerales as $key => $value)
                                                                        {
                                                                            $$key = $value;
                                                                        }

                                                                        // Si se generó un idGuardadoBD es porque realmente se generó una devolución sin errores.
                                                                        if($idGuardadoBD != '' && ($idGuardadoBD*1) > 0)
                                                                        {
                                                                            // Fue anulado correctamente
                                                                            if(!array_key_exists($id_198, $arr_idCargo_anulados))
                                                                            {
                                                                                $arr_idCargo_anulados[$id_198] = $id_cargo;

                                                                                // Este array es para permitir actualizar en cliame_198 el campo de nuevo ID de la devolución
                                                                                // que aplica para insumos.
                                                                                $arr_idDevoluciones[$id_198] = $idGuardadoBD;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            $data["contCargosSinAnular"] = $data["contCargosSinAnular"]+1;
                                                                            if(!array_key_exists($id_198, $arr_idCargo_error_anular))
                                                                            {
                                                                                $arr_idCargo_error_anular[$id_198] = $id_cargo;
                                                                                $arr_idErroresAnular[$id_198] = $data_anular;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        $data["data_respuesta" ][] = array("mensaje"=>"ID no está en array de cargos a devolver", "cod_cargo"=>$id_cargo, "error"=>1);;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    $data_anular = anular($id_cargo);
                                                                    $data["data_respuesta" ][] = $data_anular;
                                                                    if(array_key_exists("Error", $data_anular) && $data_anular["Error"] == true)
                                                                    {
                                                                        $error     = ($data_anular["Error"]) ? 1: 0;
                                                                        // $error_msj = $data_anular["Mensaje"];
                                                                        if(!array_key_exists($id_198, $arr_idCargo_error_anular))
                                                                        {
                                                                            $arr_idCargo_error_anular[$id_198] = $id_cargo;
                                                                            $arr_idErroresAnular[$id_198] = $data_anular;
                                                                        }
                                                                    }

                                                                    // Validar que efectivamente anuló, se hace de nuevo la validación porque la función de anular
                                                                    // no devuelve error en todos los casos aún cuando realmente si se haya generado algún problema al anular
                                                                    // debído a que muchos errores se interfieren con "OR DIE"
                                                                    $sqlOff = " SELECT  t106.id
                                                                                FROM    {$wbasedato}_000106 AS t106
                                                                                WHERE   t106.id = '{$id_cargo}'
                                                                                        AND t106.Tcarest = 'off'";

                                                                    if($resultOff = mysql_query($sqlOff,$conex))
                                                                    {
                                                                        if(mysql_num_rows($resultOff) > 0)
                                                                        {
                                                                            // Fue anulado correctamente
                                                                            if(!array_key_exists($id_198, $arr_idCargo_anulados))
                                                                            {
                                                                                $arr_idCargo_anulados[$id_198] = $id_cargo;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            $data["contCargosSinAnular"] = $data["contCargosSinAnular"]+1;
                                                                            if(!array_key_exists($id_198, $arr_idCargo_error_anular))
                                                                            {
                                                                                $arr_idCargo_error_anular[$id_198] = $id_cargo;
                                                                                if(!isset($arr_idErroresAnular[$id_198])) { $arr_idErroresAnular[$id_198] = "NO ANULADO EN CARGOS - 000106"; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            elseif($id_cargo == '')
                                                            {
                                                                $data["cont_Vacios"] = $data["cont_Vacios"]+1;
                                                                if(!array_key_exists($id_198, $arr_idCargo_error_anular))
                                                                {
                                                                    $arr_idCargo_error_anular[$id_198] = $id_cargo;
                                                                    $arr_idErroresAnular[$id_198] = "El ID del cargo que corresponde a 000106 esta vacío, ID198:[{$id_198}] ";
                                                                }
                                                            }
                                                            elseif($id_cargo == 0)
                                                            {
                                                                if(!array_key_exists($id_198, $arr_idCargo_anulados))
                                                                {
                                                                    $arr_idCargo_anulados[$id_198] = $id_cargo;
                                                                }
                                                            }
                                                        }

                                                        $data['error']   = $error;
                                                        $data['mensaje'] = $error_msj;

                                                        // Consultar los insumos y cambiarles el estado en la tabla de mercado
                                                        $sql = "SELECT  t198.Liqdll AS codigo_insumo, t198.Liqhis AS historia, t198.Liqing AS ingreso, t199.Enlpro AS procedimiento, t199.Enltur AS codigo_turno,
                                                                        t198.Liqidc AS id_cargo_mx
                                                                FROM    {$wbasedato}_000199 AS t199
                                                                        INNER JOIN
                                                                        {$wbasedato}_000198 AS t198 ON (t198.Liqhis = t199.Enlhis AND t198.Liqing = t199.Enling AND t198.Liqdoc = t199.Enldoc AND t198.liqcaq = t199.Enlcaq)
                                                                WHERE   t199.Enlcaq = '{$dif_acto}'
                                                                        AND (t198.Liqcon = '{$concepto_medicamentos_mueven_inv}' OR t198.Liqcon = '{$concepto_materiales_mueven_inv}')
                                                                        AND t198.Liqest = 'on'";
                                                        $data["sql"] .= $sql.PHP_EOL;
                                                        $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                                                        $arr_insumos = array();
                                                        while ($row = mysql_fetch_array($result))
                                                        {
                                                            // Solo los insumos que no generaron un error en la devolución pueden ser agregados a este array de insumos
                                                            // para que puedan ser modificados en el mercado de la cirugía.
                                                            if(!in_array($row['id_cargo_mx'], $arr_idCargo_error_anular))
                                                            {
                                                                if(!array_key_exists($row['codigo_turno'], $arr_insumos))
                                                                {
                                                                    $arr_insumos[$row['codigo_turno']] = array();
                                                                }

                                                                $index = $row['historia'].'_'.$row['ingreso'];
                                                                if(!array_key_exists($index, $arr_insumos[$row['codigo_turno']]))
                                                                {
                                                                    $arr_insumos[$row['codigo_turno']][$index] = array();
                                                                }
                                                                $arr_insumos[$row['codigo_turno']][$index][] = $row['codigo_insumo'];
                                                            }
                                                        }

                                                        if(count($arr_insumos) > 0)
                                                        {
                                                            foreach ($arr_insumos as $codigo_turno => $lista_historia_ingreso)
                                                            {
                                                                foreach ($lista_historia_ingreso as $his_ing => $lista_insumos)
                                                                {
                                                                    $codigos_insumo = implode("','", $lista_insumos);
                                                                    $expl_HI        = explode("_", $his_ing);
                                                                    $historia_in    = $expl_HI[0];
                                                                    $ingreso_in     = $expl_HI[1];
                                                                    $sql = "UPDATE {$wbasedato}_000207
                                                                            SET     Mpaliq = 'off',
                                                                                    Mpalux = 'off'
                                                                            WHERE   Mpatur = '{$codigo_turno}'
                                                                                    AND Mpaest = 'on'
                                                                                    AND Mpacom IN ('{$codigos_insumo}')";
                                                                    $data["sql"] .= $sql.PHP_EOL;
                                                                    $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                                                                }
                                                            }
                                                        }

                                                        // Si hay cargo sin anular pero se alcanzaron a anular algunos entonces cambiar estado a los que se alcanzaron a anular
                                                        if(count($arr_idCargo_anulados) > 0)
                                                        {
                                                            $ids_SI_anulados198 = array_keys($arr_idCargo_anulados);
                                                            $ids_SI_anulados    = implode("','", $ids_SI_anulados198);

                                                            $sql = "UPDATE {$wbasedato}_000198 SET Liqest = 'off', Liqfan = '{$fecha_actual}', Liqhan = '{$hora_actual}', Liquan = '{$user_session}'
                                                                    WHERE   Liqcaq = '{$dif_acto}' AND id IN ('{$ids_SI_anulados}')";
                                                            $data["sql"] .= $sql.PHP_EOL;
                                                            $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);

                                                            // Actualiza los cargos en el detalle de la cirugía con el ID que corresponde a la devolución del insumo en 000106
                                                            foreach ($arr_idDevoluciones as $id_ct198 => $nuevoIdDevol)
                                                            {
                                                                $sql = "UPDATE {$wbasedato}_000198 SET Liqidd = '{$nuevoIdDevol}'
                                                                        WHERE   id = '{$id_ct198}'";
                                                                $data["sql"] .= $sql.PHP_EOL;
                                                                $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                                                            }
                                                        }

                                                        // Si hay errores, guardar un log del error en el detalle de cargos de cirugía
                                                        if(count($arr_idErroresAnular))
                                                        {
                                                            foreach ($arr_idErroresAnular as $id_ct198 => $mensaje)
                                                            {
                                                                $mensaje .= PHP_EOL;
                                                                $sql = "UPDATE {$wbasedato}_000198 SET Liqerd = CONCAT(Liqerd,'{$mensaje}')
                                                                        WHERE   id = '{$id_ct198}'";
                                                                $data["sql"] .= $sql.PHP_EOL;
                                                                $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                                                            }
                                                        }

                                                        if(count($arr_idCargo_error_anular) == 0 && $data["contCargosSinAnular"] == 0 && $data["cont_Vacios"] == 0 && $data["contCargosFacturados"] == 0)
                                                        {
                                                            $sql = "UPDATE {$wbasedato}_000199 SET Enlest = 'off', Enlfan = '{$fecha_actual}', Enlhan = '{$hora_actual}', Enluan = '{$user_session}'
                                                                    WHERE   Enlcaq = '{$dif_acto}'";
                                                            $data["sql"] .= $sql.PHP_EOL;
                                                            $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);

                                                            // En el encabezado de auditoria cambiar el estado de liquidado a no liquidado.
                                                            if($proceso_auditoria_activo_sfi == 'on' && existeTabla($conex, $wemp_pmla, $wbasedato, ENC_AUDITORIA_252))
                                                            {
                                                                $ENC_AUDITORIA_252 = ENC_AUDITORIA_252;
                                                                $sql = "UPDATE {$wbasedato}_{$ENC_AUDITORIA_252} SET Aueliq = 'off'
                                                                        WHERE  Auetur = '{$codigo_turno_cx}'";
                                                                $data["sql"] .= $sql.PHP_EOL;
                                                                $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                                                            }

                                                            $data["mensaje"] = "Cargos anulados correctamente!";
                                                        }
                                                        else
                                                        {
                                                            $data["error"] = 1;
                                                            $data["mensaje"] .= " << Algunos cargos no se pudieron anular en UNIX >>";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        $data["error_tipo"]     = "anulacion_simulado";
                                                        $html_err               = "";
                                                        $data["evidenciaError"] = "";

                                                        // ERRORES DE CAMPO FACTURABLE VACÍO EN EL CARGO ANTES DE GRABAR
                                                        if($arr_validaciones["error_facturable_insumo"])
                                                        {
                                                            $html_err .= '<br><div class="fila2" style="width:100%">No pudo anular la cirugía porque hay algunos cargos de insumos que el valor de facturable o no facturable esta vacío. Por favor revisar los cargos de insumos.</div>';
                                                        }

                                                        // ERRORES DE SALDO DE INSUMO EN UNIX
                                                        if(!$arr_validaciones["insumos_saldo"])
                                                        {
                                                            $html_err .= '<br><div class="fila2" style="width:100%">No pudo anular la cirugía porque no hay registro de saldo para algunos insumos. No se pudo crear saldo automáticamente en Unix</div>';
                                                        }

                                                        // ERRORES DE TARIFA DE INSUMO EN UNIX
                                                        if(!$arr_validaciones["insumos_tarifa"])
                                                        {
                                                            $err_html = "";
                                                            $cont_err = 0;
                                                            $sql_sintarifa = "";
                                                            foreach ($arr_validaciones['arr_sin_tarifas'] as $cod_insu => $arr_infoInsu) {
                                                                $err_html .= '<li><span style="font-weight:bold;">'.$cod_insu.'</span>-'.utf8_encode($arr_infoInsu['nombre_insumo']).' | <span style="font-weight:bold;">Tarifa Emp.:</span> '.$arr_infoInsu['wtar'].'</li>';
                                                                $sql_sintarifa .= $arr_infoInsu['sql_sintarifa'];
                                                                $cont_err++;
                                                            }

                                                            $openDiv = '<div align="center" style="background-color: #fff9cf;font-size:8pt;text-align:justify;">';
                                                            if($cont_err > 10)
                                                            { $openDiv = '<div align="center" style="background-color: #fff9cf;font-size:8pt;text-align:justify; height: 125px; overflow:auto;">'; }

                                                            $html_err .= '  <br><fieldset>
                                                                                <legend align="left"><span style="font-weight:bold;font-size:9pt;" >Insumos sin tarífa en Unix</span></legend>
                                                                                '.$openDiv.'
                                                                                    <ul style="list-style-type: disc;padding-left: 20px;display: block;">
                                                                                        '.$err_html.'
                                                                                    </ul>
                                                                                </div>
                                                                            </fieldset>
                                                                            <div style="display:none;">'.$sql_sintarifa.'</div>';
                                                            $data["evidenciaError"] .= PHP_EOL."SIN_TARIFA".PHP_EOL.$sql_sintarifa;
                                                        }

                                                        // ERRORES DE VALOR DIFERENTE DEL CARGO DE INSUMOS EN UNIX-MATRIX POR LA FECHA DE CAMBIO DE TARIFA.
                                                        // En unix siempre al liquidar escoge el valor actual para el cargo de insumos (por fecha actual), pero en matrix si se tiene en cuenta el valor anterior y actual con la fecha de cirugía
                                                        // Este problema pasa cuando la fecha en unix en mayor a la fecha de la cirugía.
                                                        if(!$arr_validaciones["insumos_valores_unx_mtx"])
                                                        {
                                                            $err_html = "";
                                                            $cont_err = 0;
                                                            $sql_dif_valor = "";
                                                            foreach ($arr_validaciones['arr_diferente_valor'] as $cod_insu => $arr_infoInsu) {
                                                                $err_html .= '<li><span style="font-weight:bold;">'.$cod_insu.'</span>-'.utf8_encode($arr_infoInsu['nombre_insumo']).' | <span style="font-weight:bold;">Tarifa Emp.:</span> '.$arr_infoInsu['wtar'].' [Unix: $'.$arr_infoInsu['valor_unix'].' | Matrix: $'.$arr_infoInsu['valor_matrix'].'] '.utf8_encode($arr_infoInsu['tipo_error_msj']).'</li>';
                                                                $sql_dif_valor .= $arr_infoInsu['sql_dif_valor'];
                                                                $cont_err++;
                                                            }

                                                            $openDiv = '<div align="center" style="background-color: #fff9cf;font-size:8pt;text-align:justify;">';
                                                            if($cont_err > 10)
                                                            { $openDiv = '<div align="center" style="background-color: #fff9cf;font-size:8pt;text-align:justify; height: 125px; overflow:auto;">'; }

                                                            $html_err .= '  <br><fieldset>
                                                                                <legend align="left"><span style="font-weight:bold;font-size:9pt;" >Fecha de tarífa de insumo en Unix es mayor a la fecha de la cirugía, valores diferentes o insumo inactivo.</span></legend>
                                                                                <div align="center" style="font-size:8pt;text-align:justify;font-weight:bold;">El valor del cargo en Unix sería diferente al valor liquidado en Matrix, la fecha de actualización de la tarifa en Unix debe ser anterior o igual a la fecha de cirugía, verificar que los valores en Matrix y Unix son iguales o que el código esta activo en los dos sistemas.</div>
                                                                                '.$openDiv.'
                                                                                    <ul style="list-style-type: disc;padding-left: 20px;display: block;">
                                                                                        '.$err_html.'
                                                                                    </ul>
                                                                                </div>
                                                                            </fieldset>
                                                                            <div style="display:none;">'.$sql_dif_valor.'</div>';
                                                            $data["evidenciaError"] .= PHP_EOL."SIN_FECHA_CX_MENOR_A_UNIX".PHP_EOL.$sql_dif_valor;
                                                        }

                                                        $html_err = '<div class="" style="width:100%;text-align:center;color:red;background-color:#fff9af;">NO SE ANULÓ LA CIRUGÍA</div>'.$html_err;

                                                        $data["html"]    = $html_err;
                                                        $data["error"]   = 1;
                                                        // $data["mensaje"] = utf8_encode("No pudo liquidar la cirugía porque no hay registro de saldo para algunos insumos.\nNo se pudo crear saldo automáticamente");
                                                    }
                                                }
                                                else
                                                {
                                                    $msjFacturados = ($data["contCargosFacturados"] > 0) ? "\n\n<b>Ya hay cargos con FACTURA GENERADA y no se pueden anular.</b>": "";
                                                    $data["error"] = 1;
                                                    $data["mensaje"] .= "<<   NO SE ANULÓ EL ACTO QUIRÚRGICO   >>".$msjFacturados;
                                                    $data["mensaje"] = '<div style="text-align:center;">'.$data["mensaje"].'</div>';
                                                }
                                            }
                                            else
                                            {
                                                $data["error"]   = 1;
                                                $data["mensaje"] = "Algunos cargos no fueron leídos en matrix y no se anularon, verifique nuevamente la lista.";
                                            }
                                        }
                                        else
                                        {
                                            $data["error"]   = 1;
                                            $data["mensaje"] = "El paciente con historia e ingreso [{$whistoria}-{$wingreso}] y documento [{$wtip_doc}-{$wdocumento}], no esta activo en unix.";
                                        }

                                        if($hay_unix && $conexUnix!='')
                                        {
                                            // $guardar = "numDoc: $numDoc, conexUnix: $conexUnix, SERVER_ADDR: {$_SERVER['SERVER_ADDR']}, usa_fuente_cargo: $usa_fuente_cargo, bloqueo_global_fuentes: ".print_r($bloqueo_global_fuentes,true).PHP_EOL;
                                            // $guardar .= "usa_fuente_cargo: ".print_r($usa_fuente_cargo,true).PHP_EOL;
                                            // seguimiento($guardar);
                                            if($bloqueo_global_fuentes && $usa_fuente_cargo && ($_SERVER['SERVER_ADDR'] != "127.0.0.1"))
                                            {
                                                $qCommit    = " COMMIT WORK ";
                                                odbc_exec($conexUnix, $qCommit)or die("ERROR EN QUERY UNIX: ".odbc_errormsg()." - ".$qCommit);
                                            }

                                            // odbc_close($conexUnix);
                                            // odbc_close_all();
                                        }
                                    }
                                    else
                                    {
                                        $data["error"]   = 1;
                                        $data["mensaje"] = "No se pudo realizar la anulación porque no hay conexión con unix en este momento";
                                    }
                                }
                                else
                                {
                                    $data["error"]   = 1;
                                    $fecha_alta = str_replace("-", "", $row_37['Ubifad'])*1;
                                    $msj_fecha_alta = "";
                                    if($fecha_alta > 0)
                                    {
                                        $msj_fecha_alta = ", paciente en alta desde [{$row_37['Ubifad']} {$row_37['Ubihad']}]";
                                    }

                                    $data["mensaje"] = "El ingreso [{$wingreso}] para la historia [{$whistoria}-{$wingreso}] está inactivo".$msj_fecha_alta;
                                }
                            }
                            else
                            {
                                $data["error"]   = 1;
                                $data["mensaje"] = "No se encontró registro para la historia e ingreso [{$whistoria}-{$wingreso}] o ya se encuentra inactivo en Matrix";
                            }
                        }
                        else
                        {
                            $data["error"]   = 1;
                            $data["mensaje"] = "No se pudo consultar el estado del ingreso";
                        }
                    break;

                case 'estadoCuentaCongelada':
                        $wuse = $user_session;
                        global $conex, $wbasedato, $wuse;
                        $data = estadoCongelacionCuentaPaciente($historia, $ingreso);

                        // Para evitar que muestre mensaje de cuenta bloqueada cuando en la tabla temporal encuentra la historia vacía "", esa historia vacía
                        // se inserta en el programa de liquidación de estancia.
                        if(empty($historia) && $data['hayEncabezado'])
                        {
                            $data['hayEncabezado'] = false;
                        }

                        // --> Si hay un encabezado
                        if($data['hayEncabezado'])
                        {
                            $data = $data['valores'];
                        }
                        else
                        {
                            $data['Ecoest'] = 'off';
                        }
                        $data['wuse'] = $wuse;
                break;

                case 'congelarCuentaPaciente':
                        $wuse = $user_session; //$_SESSION['user'];
                        global $conex, $wbasedato, $wuse;
                        if(!empty($historia))
                        {
                            congelarCuentaPaciente($historia, $ingreso, 'QX', $congelar);
                        }
                break;

                case 'guardar_temporal':
                        $datos_temporales = array(  "tabla_lista_cxs"            => trim($tabla_lista_cxs),
                                                    "arr_datos_liquidar"         => $arr_datos_liquidar,
                                                    "arr_datos_liquidados"       => $arr_datos_liquidados,
                                                    "arr_extras"                 => $arr_extras,
                                                    "wnumvias"                   => $wnumvias,
                                                    "wfecha_cargo"               => $wfecha_cargo,
                                                    "whora_cargo"                => $whora_cargo,
                                                    "wpolitraumatizado"          => $wpolitraumatizado,
                                                    "wturno_cirugia"             => $wturno_cirugia,
                                                    "wtipo_anestesia_cx"         => $wtipo_anestesia_cx,
                                                    "wtiempo_sala_recuperarcion" => $wtiempo_sala_recuperarcion,
                                                    "wtiempo_uso_minutos"        => $wtiempo_uso_minutos,
                                                    "wtiempo_minutos_cx"         => $wtiempo_minutos_cx,
                                                    "wliq_paquete"               => $wliq_paquete,
                                                    "wliq_soloInsumos"           => $wliq_soloInsumos,
                                                    "id_encabezado_sin_tarifa"   => $id_encabezado_sin_tarifa,
                                                    "arr_CARGOS_PARA_GRABAR"     => $arr_CARGOS_PARA_GRABAR);
                        guardar_datos_temporales($conex, $wbasedato, $datos_temporales, $fecha_actual, $hora_actual, $whistoria, $wing, $user_session, $temporal);
                    break;

                case 'cargar_cuadros_turno':
                        $data["activar_select_cuadroTurno"] = "";
                        $data["optionsCuadroTurno"]         = "";
                        $data["grupoMedico"]                = "";
                        $arr_datos_liquidados               = unserialize(base64_decode($arr_datos_liquidados));
                        $arr_parametros                     = unserialize(base64_decode($arr_parametros));

                        $arr_paramTer = array();
                        $optionsCuadroTurno = '<option value="">seleccione</option>';
                        $activar_select_cuadroTurno = false;
                        if($wtercero != ''
                            && array_key_exists($procedimiento_liquidar_cod, $arr_parametros)
                            && array_key_exists($dif_concepto, $arr_parametros[$procedimiento_liquidar_cod]))
                        {
                            $arr_paramTer['codigo_wtercero']         = $wtercero;
                            $arr_paramTer['wespecialidad_']          = $wespecialidad;
                            $arr_paramTer['wcodcon']                 = $arr_parametros[$procedimiento_liquidar_cod][$dif_concepto]['wcodcon'];
                            $arr_paramTer['wtip_paciente']           = $arr_parametros[$procedimiento_liquidar_cod][$dif_concepto]['wtip_paciente'];
                            $arr_paramTer['whora_cargo']             = $arr_parametros[$procedimiento_liquidar_cod][$dif_concepto]['whora_cargo'];
                            $arr_paramTer['wfecha_cargo']            = $arr_parametros[$procedimiento_liquidar_cod][$dif_concepto]['wfecha_cargo'];
                            $arr_paramTer['wtipoempresaToTer']       = $arr_parametros[$procedimiento_liquidar_cod][$dif_concepto]['wtipoempresaToTer'];
                            $arr_paramTer['wtarifaToTer']            = $arr_parametros[$procedimiento_liquidar_cod][$dif_concepto]['wtarifaToTer'];
                            $arr_paramTer['wempresaToTer']           = $arr_parametros[$procedimiento_liquidar_cod][$dif_concepto]['wempresaToTer'];
                            $arr_paramTer['wccoToTer']               = $arr_parametros[$procedimiento_liquidar_cod][$dif_concepto]['wccoToTer'];
                            $arr_paramTer['wcod_procedimientoToTer'] = $arr_parametros[$procedimiento_liquidar_cod][$dif_concepto]['wcod_procedimientoToTer'];
                            $arr_paramTer['wdisponibilidad']         = $wdisponibilidad;
                            $arr_paramTer['wcuadroturno']            = "";  // Aquí esta variable debe ir vacío porque no es necesario tenerlo en cuenta solo para mostrar el array de cuadros de turno del médico,
                                                                            // Cuando se va a actualizar la liquidación, este porcentaje ya será tenído encuenta para calcular el porcentaje exacto para el cargo del médico
                            $arr_paramTer['grupoMedico']             = "";

                            $arr_porTer = consultarPorcentajesTercero($arr_paramTer);

                            $arr_cuadrosTurnoTercero = array();
                            if($arr_porTer["dobleCuadroDeTurno"]*1 > 0)
                            {
                                $activar_select_cuadroTurno = true;
                                $arr_cuadrosTurnoTercero = $arr_porTer["cuadrosDeTurno"];
                                $arr_porTer["grupoMedico"] = "";
                            }

                            if($activar_select_cuadroTurno)
                            {
                                if(count($arr_cuadrosTurnoTercero) > 0)
                                {
                                    $tmp_arr_cuadrosTurnoTercero = $arr_cuadrosTurnoTercero;
                                    foreach ($arr_cuadrosTurnoTercero as $cod_cuadro => $value_cuadro)
                                    {
                                        $selTd = (count($tmp_arr_cuadrosTurnoTercero) == 1) ? 'selected="selected"': "";
                                        $optionsCuadroTurno .= '<option value="'.$cod_cuadro.'" '.$selTd.'>'.$cod_cuadro.'-'.$value_cuadro.'</option>';
                                    }
                                }
                            }
                            $data["grupoMedico"] = ($arr_porTer["grupoMedico"] == 'no')? "": $arr_porTer["grupoMedico"];
                            if(array_key_exists($procedimiento_liquidar_cod, $arr_parametros)
                                && array_key_exists($dif_concepto, $arr_parametros[$procedimiento_liquidar_cod]))
                            {
                                if($codEquipoExamen != '')
                                {
                                    $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto][$codEquipoExamen]["grupoMedico"] = $data["grupoMedico"];
                                }
                                else
                                {
                                    $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]["grupoMedico"] = $data["grupoMedico"];
                                }
                            }
                        }
                        $data["optionsCuadroTurno"]         = $optionsCuadroTurno;
                        $data["activar_select_cuadroTurno"] = $activar_select_cuadroTurno;
                        $data["arr_datos_liquidados"]       = base64_encode(serialize($arr_datos_liquidados));
                    break;

                case "actualizacion_cron_cargos":
                        // YA NO ES NECESARIO PORQUE EL CRON AUTOMÁTICO SE VA A AJECUTAR CADA 4 MINUTOS
                        include_once("root/comun.php");
                        if(isset($hay_unix) && $hay_unix)
                        {
                            include_once("root/kron_maestro_unix.php");
                            $ejCron = new datosDeUnix();
                            $ejCron->actualizarMedicamentos();
                        }
                        else
                        {
                            // $data["error"] = 1;
                            $data["mensaje"] = "En este momento no hay UNIX, no se pudo ejecutar el cron que actualiza los cargos de insumos en unix tal como aparecen en Matrix";
                        }
                    break;

                case 'generar_solicitudes_autorizacion':
                        $arr_cargos_req_autorizar = unserialize(base64_decode($arr_cargos_req_autorizar));
                        // wturno_cirugia
                        registroCargosAutorizar($conex, $wemp_pmla, $wbasedato, $arr_cargos_req_autorizar, $user_session, $data);
                        // $guardar = "arr_cargos_req_autorizar: ".print_r($arr_cargos_req_autorizar,true).PHP_EOL;
                        // seguimiento($guardar);
                    break;

                default :
                        $data['mensaje'] = $no_exec_sub;
                        $data['error'] = 1;
                    break;
            }
            echo json_encode($data);
            break;

        case 'load' :
            switch($form)
            {
                case 'validar_paciente_activo_unix':
                        $data["paciente_activo_unx"]        = 'off';
                        $data["registros_unix"]             = array();
                        $data["sql_unx"]                    = "";
                        $data["winsumos_cambiar_ingreso"]   = "off";
                        $data["wingreso_reemplazable_unix"] = "";
                        $data["fecha_reemplazable_unix"]    = "";
                        $data['wingreso_activo_unx']        = "";
                        $data['hay_unix']                   = (isset($hay_unix) && $hay_unix) ? 'on': 'off';
                        $permitir_historia_ingreso_inactivo = consultarAliasPorAplicacion($conex, $wemp_pmla, "erp_permitir_historia_ingreso_inactivo");

                        include_once("root/comun.php");
                        $arr_params = array();
                        $arr_params['whistoria'] = $whistoria;
                        $arr_params['wing']      = $wing;
                        $arr_params['wdoc']      = $wdoc;
                        $arr_params['wtip_doc']  = $wtip_doc;
                        $arr_params['sql_unx']   = '';
                        $arr_params['registros_unix']  = array();
                        $paciente_activo_unx     = false;

                        if(isset($hay_unix) && $hay_unix)
                        {
                            if($permitir_historia_ingreso_inactivo != 'on')
                            {
                                // Si no está activo el parámetro que permita liquidar cargos a ingresos inactivos entonces se deba validar que el ingreso del cargo matrix
                                // esté activo en unix para permitir grabar
                                $paciente_activo_unx = validarPacienteActivoUnix($conex, $wemp_pmla, $wbasedato, $arr_params);

                                if($arr_params["error"] == 1)
                                {
                                    $data["error"]       = 1;
                                    $data["mensaje"]     = utf8_encode("No se pudo verificar si el paciente esta activo en unix.\nNo se ha podido liquidar la cirugía");
                                    $data["mensaje_unx"] = $arr_params["mensaje"];
                                }
                            }
                            else
                            {
                                // Si el parámetro que permite liquidar cargos a ingresos inactivos en unix, se debe garantizar que en unix existe por lo menos un
                                // ingreso activo así sea diferente al ingreso que se esta liquidando en matrix, existe un cron encargado de actualizar los cargos de insumos
                                // en unix con el ingreso matrix, porque es posible que los insumos hayan quedado grabados al ingreso activo en unix y no corresponda al ingreso matrix.
                                $wdoc = strtoupper($wdoc);

                                $filtros = '';
                                // En unix pacced solo tiene 11 caracteres, pero en matrix puede estar el número de documento con mayor cantidad de caracteres
                                // en ese caso entonces compararlo con el campo NUIP de unix que tiene el documento completo.
                                if(strlen($wdoc) > 11 )
                                {
                                    $filtros .= " AND pacnui = '{$wdoc}'";
                                }
                                else
                                {
                                    $filtros .= " AND pacced = '{$wdoc}'";
                                }

                                $wtip_doc = strtoupper($wtip_doc);
                                $filtros .= " AND pactid = '{$wtip_doc}'";

                                $conexUnix = odbc_connect('facturacion','informix','sco');
                                $sqlunx = " SELECT  pachis, pacnum, pacced, pactid, pacfec
                                            FROM    inpac
                                            WHERE   pachis = '{$whistoria}'
                                                    {$filtros}";

                                if($result_unx = odbc_exec($conexUnix, $sqlunx))
                                {
                                    // 1 >> Debe existir un ingreso activo en unix para que el integrador no genere error ni detenga su correcta ejecusión.
                                    // 2 >> Si el ingreso activo en unix es diferente al ingreso que se está grabando en el cargo entonces se deben marcar esos
                                    //      cargos (Solo de insumos) para que despues de grabados se les cambie el número de ingreso en unix, porque cuando el integrador
                                    //      pase a unix los insumos, estos pasarán con el número de ingreso que esté activo en unix.
                                    $documento_unx = "";
                                    $tipodoc_unx   = "";
                                    $wingreso_activo_unx = "";
                                    while(odbc_fetch_row($result_unx))
                                    {
                                        $wingreso_activo_unx = trim(odbc_result($result_unx,'pacnum'));
                                        $documento_unx       = trim(odbc_result($result_unx,'pacced'));
                                        $tipodoc_unx         = trim(odbc_result($result_unx,'pactid'));
                                        $fec_ingreso_unx     = trim(odbc_result($result_unx,'pacfec'));
                                        $data['wingreso_activo_unx'] = $wingreso_activo_unx;
                                        if($wingreso_activo_unx != $wing)
                                        {
                                            $data["winsumos_cambiar_ingreso"]   = 'on';
                                            $data["wingreso_reemplazable_unix"] = $wingreso_activo_unx;
                                            $data["fecha_reemplazable_unix"]    = $fec_ingreso_unx;
                                        }
                                    }

                                    if($wingreso_activo_unx != '')
                                    {
                                        $paciente_activo_unx = true;
                                    }
                                }
                                else
                                {
                                        $data["sql_unix"]    = $sqlunx." > ".mysql_error();
                                        $data["error"]       = 1;
                                        $data["mensaje"]     = utf8_encode("No se pudo verificar si el paciente esta activo en unix.\nNo se ha podido liquidar la cirugía");
                                        $data["mensaje_unx"] = $arr_params["mensaje"];
                                }

                                odbc_close($conexUnix);
                                odbc_close_all();
                            }

                            $data["paciente_activo_unx"] = ($paciente_activo_unx) ? 'on': 'off';//Debe existir por lo menos un ingreso activo en unix para que el integrador pase los insumos a unix.
                            $data["registros_unix"]      = $arr_params['registros_unix'];
                            $data["sql_unx"]             = $arr_params['sql_unx'];
                        }
                        else
                        {
                            $data["paciente_activo_unx"] = 'on';
                        }
                    break;

                case 'cargar_datos_paciente':
                    include_once("root/comun.php");
                    global $conex, $wemp_pmla;
                    $wuse = $user_session;
                    global $conex, $wemp_pmla, $wbasedato, $wuse;
                    $data = cargar_datos($whistoria, $wing, $wcargos_sin_facturar, $welemento);

                    if(!empty($data['complementario_wcodemp']))
                    {
                        $data["wcodemp"]     = $data['complementario_wcodemp'];
                        $data["wtar"]        = $data['complementario_wtar'];
                        $data["tipoEmpresa"] = $data['complementario_tipoEmpresa'];
                        $data["nitEmpresa"]  = $data['complementario_nitEmpresa'];
                    }

                    if(!array_key_exists("wwing", $data))
                    {
                        $data["wwing"] = "";
                    }

                    $arr_datos_liquidar = array();
                    if(!empty($data["wdoc"]))
                    {
                        $arr_datos_liquidar = array("arr_datos_paciente" =>
                                                            array(
                                                                    "whistoria"               => $whistoria,
                                                                    "wing"                    => $wing,
                                                                    "wno1"                    => $data["wno1"],
                                                                    "wno2"                    => $data["wno2"],
                                                                    "wap1"                    => $data["wap1"],
                                                                    "wap2"                    => $data["wap2"],
                                                                    "wdoc"                    => $data["wdoc"],
                                                                    "wtip_doc"                => $data["wtip_doc"],
                                                                    "wnomemp_eps"             => $data["wnomemp"],
                                                                    "tarifa_original"         => $data["wtar"],
                                                                    "wtip_paciente"           => $data["wtip_paciente"],
                                                                    "wtipo_ingreso"           => $data["tipo_ingreso"],
                                                                    "wtipo_ingreso_nom"       => $data["nombre_tipo_ingreso"],
                                                                    "wresponsable_eps_codigo" => $data["wcodemp"],
                                                                    "wresponsable_eps"        => $data["wcodemp"].'-'.$data["wnomemp"],
                                                                    "tipoEmpresa"             => $data["tipoEmpresa"]
                                                            ),
                                                    "wnumero_vias"               => "",
                                                    "wtipo_anestesia"            => "",
                                                    "wtiempo_sala_recuperarcion" => "",
                                                    "wtiempo_uso_minutos"        => "",
                                                    "wtiempo_minutos_cx"         => "",
                                                    "arr_para_liquidar"          => array());
                    }

                    // CREAR ARRAY DE PROCEDIMIENTOS Y DE PAQUETES QUE TENGAN AUTORIZACIÓN MÁS LOS QUE TENGAN MERCADO
                    // PROCEDIMIENTOS CON MERCADO
                    $arr_procedimientos = array();
                    // [updt-79] LOS MERCADOS YA NO SE ASOCIAN POR CÓDIGO DE PROCEDIMIENTO O PAQUETE.
                    /*$sql = "SELECT  t103.Procod AS codigo, t103.Pronom AS nombre
                            FROM    {$wbasedato}_000207 AS t207
                                    INNER JOIN
                                    {$wbasedato}_000103 AS t103 ON (t207.Mpapro = t103.Procod AND t103.Proest = 'on')
                            WHERE   t207.Mpahis = '{$whistoria}'
                                    AND t207.Mpaing = '{$data['wwing']}'
                                    AND LEFT(t207.Mpapro, 2) <> 'CP'
                            GROUP BY t103.Procod
                            ORDER BY  t103.Pronom";
                    $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                    while($row = mysql_fetch_array($result))
                    {
                        if(!array_key_exists($row['codigo'], $arr_procedimientos))
                        {
                            $arr_procedimientos[$row['codigo']] = array();
                        }
                        $arr_procedimientos[$row['codigo']] = utf8_encode($row['nombre']);
                    }*/

                    // PROCEDIMIENTOS AUTORIZADOS
                    $sql = "SELECT  r12.Codigo, r12.Nombre
                            FROM    {$wbasedato}_000205 AS c205, {$wbasedato}_000209 AS c209, root_000012 AS r12
                            WHERE   Reshis = '{$whistoria}'
                                    AND Resing = '{$data['wwing']}'
                                    AND c205.Resest = 'on'
                                    AND c205.Resdes <> 'on'
                                    AND c205.Reshis = c209.Cprhis
                                    AND c205.Resing = c209.Cpring
                                    AND c205.Resnit = c209.Cprnit
                                    AND c205.Resaut = c209.Cpraut
                                    AND c209.Cprest = 'on'
                                    AND c209.Cprcup = r12.Codigo";
                    $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                    // $guardar = "sql Autorizados: ".print_r($sql,true).PHP_EOL;
                    // seguimiento($guardar);
                    while($row = mysql_fetch_array($result))
                    {
                        if(!array_key_exists($row['Codigo'], $arr_procedimientos))
                        {
                            $arr_procedimientos[$row['Codigo']] = array();
                        }
                        $nombre_autorizado = str_replace('"', '', $row['Nombre']);
                        $nombre_autorizado = str_replace("'", "", $nombre_autorizado);
                        $arr_procedimientos[$row['Codigo']] = utf8_encode($nombre_autorizado);
                    }

                    // Ordenar procedimientos autorizados y con mercado
                    natcasesort($arr_procedimientos);

                    $arr_procedimientos_orig = unserialize(base64_decode($arr_procedimientos_orig));
                    $arr_procedimientos_temp = obtener_array_procedimientosEmpresa($conex, $wemp_pmla, $wbasedato, $data['wcodemp'], $arr_procedimientos_orig);

                    // Consultar los turnos de cirugía para la historia e ingreso que tienen mercado y no se han liquidado.
                    $wbasedato_tcx = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tcx');
                    $sql = "SELECT  tcx11.Turfec, tcx11.Turhin, tcx11.Turtur, tcx11.Turqui, tcx11.Turcir, tcx12.Quicco,
                                    tcx07.Mcafec, tcx07.Mcanin, tcx07.Mcatur, tcx07.Mcaqui, tcx07.Mcacir
                            FROM    {$wbasedato_tcx}_000011 AS tcx11
                                    INNER JOIN
                                    {$wbasedato}_000207 AS c207 ON (tcx11.Turtur = c207.Mpatur)
                                    LEFT JOIN
                                    {$wbasedato_tcx}_000007 AS tcx07 ON (tcx07.Mcatur = c207.Mpatur)
                                    LEFT JOIN
                                    {$wbasedato_tcx}_000012 AS tcx12 ON (tcx12.Quicod = tcx11.Turqui)
                            WHERE   tcx11.Turhis = '{$whistoria}'
                                    AND tcx11.Turnin = '{$data['wwing']}'
                                    AND c207.Mpaest = 'on'
                                    AND c207.Mpaliq <> 'on'
                                    AND c207.Mpalux <> 'on'
                                    AND (c207.Mpacan - c207.Mpadev) > 0
                            GROUP BY c207.Mpatur
                            ORDER BY tcx11.Turfec, tcx11.Turhin";
                    $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                    $data["turnos_sin_liquidar"] = '';
                    $data["turnos_anulados_con_mercado"] = array();
                    $data["html_turnos_anulados_con_mercado"] = '';
                    $data["html_cx_turno"] = '';
                    while($row = mysql_fetch_array($result))
                    {
                        $fecha_temp_act = (date("20140514"))*1;// Las cirugías enteriores a esta fecha generaron mucho problemas luego de actualización de tarifas (2014-05-14)
                        $fecha_temp_cargo = str_replace("-", "", $row['Turfec'])*1;
                        if($fecha_temp_cargo <= $fecha_temp_act)
                        {
                            $row['Turfec'] = date("Y-m-d");
                        }
                        if($row['Turtur'] != '')
                        {
                            $data["turnos_sin_liquidar"] .= '<option value="'.$row['Turtur'].'" ccoquirofano="'.trim($row['Quicco']).'" fecha="'.$row['Turfec'].'" hora="'.$row['Turhin'].'" >Turno: '.$row['Turtur'].', Fecha: '.$row['Turfec'].', Hora: '.$row['Turhin'].', Quirofano: '.$row['Turqui'].', Centro costo: '.$row['Quicco'].'</option>';
                        }
                        else
                        {
                            $data["turnos_anulados_con_mercado"][] = '* Turno: '.$row['Mcatur'].', Fecha: '.$row['Mcafec'].', Hora: '.$row['Mcanin'].', Quirofano: '.$row['Mcaqui'];
                        }

                        $expl_cirugias_tm = explode("-", $row['Turcir']);
                        $expl_cirugias = $expl_cirugias_tm;
                        foreach ($expl_cirugias_tm as $key_idx => $cxs_noms) {
                            $cxs_noms = limpiarString($cxs_noms);
                            if($cxs_noms == '') { unset($expl_cirugias[$key_idx]); }
                            else
                            {
                                // $background_colors = array('#0000FF', '#0B6121', '#610B21', '#61380B', '#4C0B5F');
                                // $rand_background = $background_colors[array_rand($background_colors,1)];
                                $expl_cirugias[$key_idx] = '<li>'.ucwords(strtolower(utf8_encode($cxs_noms))).'</li>';
                            }
                        }
                        $data["html_cx_turno"] .= '<div id="div_turn_cx_'.$row['Turtur'].'" class="lista_desc_tun_cx" style="display:none;" >
                                                    <ol style="padding: 0px; margin: 0px;margin-left: 16px;">'.implode($expl_cirugias).'</ol>
                                                    </div>';
                    }

                    if(count($data["turnos_anulados_con_mercado"]) > 0)
                    {
                        $data["html_turnos_anulados_con_mercado"] = "Turnos con mercado que están anulados desde agenda de cirugía:<br>".implode(PHP_EOL, $data["turnos_anulados_con_mercado"]);
                    }

                    if($data["turnos_sin_liquidar"] == '')
                    {
                        $data["turnos_sin_liquidar"] = '<option value="">NO HAY CIRUGÍAS CON MERCADO PARA LIQUIDAR</option>';
                    }
                    else
                    {
                        $data["turnos_sin_liquidar"] = '<option value="">Seleccione</option>'.$data["turnos_sin_liquidar"];
                    }

                    $data["arr_procedimientos"]      = "".json_encode($arr_procedimientos)."";
                    $data["arr_procedimientos_temp"] = "".json_encode($arr_procedimientos_temp)."";

                    $data["arr_datos_liquidar"] = base64_encode(serialize($arr_datos_liquidar));
                    $data["arr_datos_liquidar_temp"] = base64_encode(serialize($arr_datos_liquidar));
                    // $guardar = "data: ".print_r($data,true).PHP_EOL;
                    // seguimiento($guardar);
                break;

                case 'validar_tarifa_adicionales':
                    // CAMBIA EL CENTRO DE COSTO DEL GRABADOR POR EL CENTRO DE COSTOS DEL QUIRÓFANO, POR EJEMPLO PARA LAS CIRUGÍAS GRABADAS EN EL TERCER PISO.
                    liquidar_con_cco_quirofano($conex,$wemp_pmla, $wbasedato, $wcentro_costo, $ccoquirofano);

                    $TB_BASE_LIQUIDACION = TB_BASE_LIQUIDACION;
                    $TB_BASE_LIQ_ACTOSQX = TB_BASE_LIQ_ACTOSQX;
                    $TB_BASE_LIQPORCENTA = TB_BASE_LIQPORCENTA;

                    $arr_datos_liquidar    = unserialize(base64_decode($arr_datos_liquidar));
                    $arr_datos_liquidados  = unserialize(base64_decode($arr_datos_liquidados));
                    $arr_extras            = unserialize(base64_decode($arr_extras));
                    $arr_conceptos_nombres = unserialize(base64_decode($arr_conceptos_nombres));
                    $arr_maestro_000200    = unserialize(base64_decode($arr_maestro_000200));
                    $data['procedimientos_materiales'] = array();

                    $es_paquete       = ($es_paquete == 'on') ? true: false;
                    $wliq_soloInsumos = ($wliq_soloInsumos == 'on') ? true: false;

                    $validar_tarifa = true;
                    if(array_key_exists($wconcepto_add, $arr_maestro_000200) && $arr_maestro_000200[$wconcepto_add]["Grutip"] == "C" && $arr_maestro_000200[$wconcepto_add]["Grumva"] == "S")
                    {
                        // Si es concepto que requiere tercero y permite modificar valor entonces no validar si tiene tarifa porque en ese caso se agregará al procedimiento y pedirá el valor
                        // en caso de no tener tarifa, en las prepagadas por ejemplo, el valor digitado aparecerá en el monitor de tarifas pendientes por crear.
                        $validar_tarifa = false;
                    }

                    // Si no es concepto que permita modificar valor ni requiera tercero
                    if($validar_tarifa)
                    {
                        $RESPONSABLE_VIRTUAL_PACIENTE      = array("Ingcem"=>$wcod_empresa, "Ingent"=>$wnomemp_tal, "Ingtar"=>$wtarifa_empresa, "tipoEmpre"=>$tipoEmpresa);
                        $codEmpParticular                  = consultarAliasPorAplicacion($conex, $wemp_pmla, 'codigoempresaparticular');
                        $concepto_medicamentos_mueven_inv  = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_medicamentos_mueven_inv');
                        $concepto_materiales_mueven_inv    = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_materiales_mueven_inv');
                        $wbasedato_movhos                  = consultarAliasPorAplicacion($conex, $wemp_pmla, 'movhos');
                        $concepto_honorario_ayudantia      = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_honorario_ayudantia');
                        $tarifas_modifican_valor_erp       = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tarifas_modifican_valor_erp');
                        $conceptoRepetirPorcentajeMultiple = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_honorario_erp'); // aplica solo para diferente vía diferente especialidad cuando hay mas de una cirugía
                        $orden_conceptos_por_procedimiento = array();

                        $xpl_tar = (!empty($tarifas_modifican_valor_erp)) ? explode(",", $tarifas_modifican_valor_erp) : array();

                        // Array que indica cuales tarifas deben permitir escribir o modificar valor siempre, en los conceptos que permitan digitar valor
                        // no está limitado a que tenga que existir tarifa sino simplemente dejar escribir valor siempre.
                        $arr_tarifas_modifican_valor_erp = array();
                        foreach ($xpl_tar as $key => $value)
                        {
                            if(!array_key_exists($value, $arr_tarifas_modifican_valor_erp))
                            {
                                $arr_tarifas_modifican_valor_erp[$value] = $value;
                            }
                        }

                        $porcentajes_CX_bilaterales       = "off"; // Para controlar si se deben escoger los porcentajes de cirugías bilaterales o de un acto quirúrgico normal
                        $cont_CX_bilaterales              = 0; // Cuenta las cirugías bilaterales, es útil porque cuando el contado sea mayor a 1 entonces se debe cambiar la variable $porcentajes_CX_bilaterales a on y tomar los porcentajes de bilaterales
                        global $RESPONSABLE_VIRTUAL_PACIENTE, $orden_conceptos_por_procedimiento, $id_concepto_uso_equipos, $concepto_recuperacion_erp, $id_concepto_examenes, $add_equipo, $add_examen, $add_equipo_nombre, $add_examen_nombre,
                                $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $porcentajes_CX_bilaterales, $cont_CX_bilaterales, $wfecha_cargo, $arr_tarifas_modifican_valor_erp;

                        // $guardar = "arr_datos_liquidar: ".print_r($arr_datos_liquidar,true).PHP_EOL;
                        // seguimiento($guardar);

                        $arr_conceptos_manuales_cx = consultarConceptosManuales($conex, $wemp_pmla, $wbasedato);
                        $codTipoSoat               = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tipoempresasoat');
                        $codEmpPartic              = consultarAliasPorAplicacion($conex, $wemp_pmla, 'codigoempresaparticular');
                        $tipoempresaparticular     = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tipoempresaparticular');
                        $tarifaparticular          = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tarifaparticular');
                        $codTipoMpa                = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tipoempresampa');

                        global $orden_conceptos_por_procedimiento, $id_concepto_uso_equipos, $concepto_recuperacion_erp, $id_concepto_examenes, $add_equipo, $add_examen, $add_equipo_nombre, $add_examen_nombre,
                                    $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $wfecha_cargo, $RESPONSABLE_VIRTUAL_PACIENTE, $arr_tarifas_modifican_valor_erp;

                        if($wprocedimiento_add == '')
                        {
                            $wprocedimiento_add = "";
                            foreach ($arr_datos_liquidar["arr_para_liquidar"] as $proMedEsp => $arr_info_pro) {
                                if($wprocedimiento_add=='')
                                {
                                    $wprocedimiento_add = $arr_info_pro["wprocedimiento_dif"];
                                }
                            }
                        }

                        $procedimiento_ord = arreglar_procedimientos_bilaterales($wprocedimiento_add);

                        $data_temp                        = array("mensaje"=>"");
                        $arr_conceptos_liquidar_ModCODIGO = array();
                        $arr_lista_conceptos_temp         = array();
                        $wespecialidad = '';//$arr_datos_liquidar['arr_para_liquidar'][$wprocedimiento_add]["wespecialidad"];
                        $worgano       = (array_key_exists($wprocedimiento_add, $arr_datos_liquidar['arr_para_liquidar'])) ? $arr_datos_liquidar['arr_para_liquidar'][$wprocedimiento_add]["worgano"]: '*';
                        $validar_concepto_tarifa = $wconcepto_add;

                        $wtipo_emp_valida_nopos = array();
                        $arr_infoNoPos = consultarProcedimientoNoPos($conex, $wbasedato, $procedimiento_ord, $wcod_empresa, $tipoEmpresa, $wcentro_costo, $wtipo_emp_valida_nopos);
                        $arr_procedimiento["pro_NOPOS"] = $arr_infoNoPos["pro_NOPOS"];
                        if($arr_procedimiento["pro_NOPOS"] == 'on')
                        {
                            //$liquida_no_pos = true;
                            $wcod_empresa         = $codEmpPartic;
                            //$nopos_maneja_paralelo = "";
                            //$nopos_tipo_tarifa     = $tarifaparticular;
                            $tipoEmpresa        = $tipoempresaparticular;
                            //$nopos_nombre_resp     = "Particular";
                            //$nopos_nit_empresarial = "";
                        }

                        $sumatoriaConceptosProcedimiento = sumatoriaConceptosProcedimientoCODIGO($conex, $wemp_pmla, $wbasedato, $procedimiento_ord, $wprocedimiento_add, $data_temp, $arr_datos_liquidar, $arr_conceptos_liquidar_ModCODIGO, $wprocedimiento_add, $wconcepto_add, $arr_extras, $arr_lista_conceptos_temp, $arr_conceptos_nombres, $arr_datos_liquidados, $wespecialidad, $es_paquete, $wcentro_costo, $wcod_empresa, $wtipo_ingreso, $whora_cargo, $wtiempo_minutos_cx, $wtiempo_sala_recuperarcion, $wtiempo_uso_minutos, $wtipo_anestesia_cx, $validar_concepto_tarifa, $worgano);

                        $html_err = "";
                        $cont     =0;
                        foreach ($sumatoriaConceptosProcedimiento["werrores_tarifas"] as $proced => $arr_err)
                        {
                            foreach ($arr_err as $cod_con => $arr_info)
                            {
                                $css = ($cont % 2 == 0) ? 'fila1': 'fila2';
                                $html_err .= '<tr class="'.$css.'"><td>'.$arr_info["cobro_procedimiento"].'</td><td>'.$arr_info["cobro_concepto"].'</td><td>'.$wcod_empresa.'</td></tr>';
                                $cont++;
                            }
                        }

                        if($html_err != '')
                        {
                            $html_err = '<table align="center">
                                            <tr><td colspan="3" style="background-color:#fff9af;color:red;text-align:center;">NO SE ENCONTRÓ TARIFA PARA</td></tr>
                                            <tr class="encabezadoTabla"><td>Código a cobrar</td><td>Concepto a cobrar</td><td>Empresa</td></tr>
                                            '.$html_err.'
                                        </table>';
                            $data["html"]    = $html_err;
                            $data["error"]   = 1;
                            $data["mensaje"] = "Error tarifa conceptos adicionales";
                        }
                    }
                break;

                case 'generar_datos_liquidar':
                        include_once("root/comun.php");
                        /*  PARÁMETROS PRINCIPALES DEL PROGRAMA
                            $arr_datos_liquidar
                            $arr_datos_liquidados
                            $arr_extras
                            $orden_conceptos_por_procedimiento
                            $arr_procedimientos_orden
                            // id_concepto_uso_equipos
                            // id_concepto_examenes
                        */
                        // if(file_exists("seguimiento.txt"))
                        // {
                        //     unlink("seguimiento.txt");
                        // }
						
						// --> 21-08-2019: Jerson Trujillo. Controlar que si se estan actualizando tarifas de medicamentos no dejar liquidar
						$resActTar 	= (array) actualizandoTarifaMedicamentos();
						if($resActTar['actualizando']){
							$data['actualizacionDeTarifasMedicamentos'] = true;
							echo json_encode($data);
							return;
						}
						else
							$data['actualizacionDeTarifasMedicamentos'] = false;
						

                       $es_paquete = ($es_paquete == 'on') ? true: false;
                       $arr_cargos_sinTarifaModifValor = array(); // Cargos sin tarifa de conceptos que permiten modificar valor
                       $cargosSinTarifasConceptos      = array(); // Cargos sin tarifa de conceptos que no permiten modificar valor
                       $cargosSinTarifasInsumos        = array(); // Cargos sin tarifa de insumos
                       $wliq_soloInsumos               = ($wliq_soloInsumos == 'on') ? true: false; // Esta variable se usa para indicar si solo se va a liquidar el mercado que se encuentre para la historia e ingreso (y turno)
                       $data["excepcionTarifaria"]     = array();
                       $generar_temporal               = true; // Permite generar la tabla virtual para la simulación de los cargos de cirugía
                       $generar_temporal_1vez          = false; // permite saber si ya se creó la tabla temporal para no intentarla crear de nuevo, ni borrarla en medio del proceso, solo al terminar la simulación de cargos.
                       $TABLA_TEMP_106                 = $wbasedato."_LiqTempTurnoCx_".$wturno_cirugia;

                        $arr_CARGOS_PARA_GRABAR   = array(); // este array se encargará de guardar los cargos que no tienen tarifa para que puedan ser mostrados en el monitor de tarifas por crear.
                        $arr_cargos_req_autorizar = array(); // cargos que requieren autorización del segundo responsable, si el primer responsable ya no tiene saldo y está marcado en cliame_24 como requiere autorización para segundo reponsable, aplica principal/ para 1er Reponsable SOAT.
                        global $arr_CARGOS_PARA_GRABAR, $arr_cargos_sinTarifaModifValor;

                        $SALDO_VIRTUAL_PACIENTE       = 0;
                        $orden_conceptos_por_procedimiento = array(); // se debe tener el mimsmo orden tanto para liquidar como para grabar los cargos y poder que las cifras tengan un mayor margen de coincidencia.

                        //resp_inactivos: Por ejemplo cuando a una responsable se le termina el tope, ya no se debe tener en cuenta para cobrarle algún cargo, E.j. Soat + Prepa, Soat inactivo para no cobrarle cargos por tener saldo cero.
                        $RESPONSABLE_VIRTUAL_PACIENTE      = array("Ingcem"=>$wcod_empresa, "Ingent"=>$wnomemp_tal, "Ingtar"=>$wtarifa_empresa, "tipoEmpre"=>$tipoEmpresa, "plan_emp_cod"=>$plan_emp_cod,"resp_inactivos"=>array());
                        $codEmpParticular                  = consultarAliasPorAplicacion($conex, $wemp_pmla, 'codigoempresaparticular');
                        $concepto_medicamentos_mueven_inv  = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_medicamentos_mueven_inv');
                        $concepto_materiales_mueven_inv    = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_materiales_mueven_inv');
                        $wbasedato_movhos                  = consultarAliasPorAplicacion($conex, $wemp_pmla, 'movhos');
                        $concepto_honorario_ayudantia      = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_honorario_ayudantia');
                        $tarifas_modifican_valor_erp       = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tarifas_modifican_valor_erp');
                        $conceptoRepetirPorcentajeMultiple = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_honorario_erp'); // aplica solo para diferente vía diferente especialidad cuando hay mas de una cirugía
                        $erp_liq_cx_inactivar_cuadro_turno = consultarAliasPorAplicacion($conex, $wemp_pmla, 'erp_liq_cx_inactivar_cuadro_turno'); // Para no mostrar el campo de disponibilidad ni cuadro de turno a los conceptos que hay en esta variable
                        $erp_liq_cx_inactivar_cuadro_turno = explode(",", $erp_liq_cx_inactivar_cuadro_turno);
                        $wtipo_emp_valida_nopos            = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tipo_empresa_validar_manualcx_nopos'); // Códigos de tipo de empresa que en liquidación de cirugía deben validar procedimientos no pos y elegir configuración secundaria en manuales de cx.
                        $autorizarTodosLosCargosSdoResp    = consultarAliasPorAplicacion($conex, $wemp_pmla, 'liqCxAutorizarTodosLosCargosSdoResponsable'); // En caso de quedar cargos para el segundo responsable despues de superación del tope del SOAT, se verifica si se pide autorización para todo o para lo que tenga configurado el 2do responsable.
                        $wtipo_emp_valida_nopos            = explode(",", $wtipo_emp_valida_nopos);
                        $arr_requerir_autorizacion         = array("empresa_autorizar"=>array(), "requerir_autorizacion"=>false);

                        // CAMBIA EL CENTRO DE COSTO DEL GRABADOR POR EL CENTRO DE COSTOS DEL QUIRÓFANO, POR EJEMPLO PARA LAS CIRUGÍAS GRABADAS EN EL TERCER PISO.
                        liquidar_con_cco_quirofano($conex,$wemp_pmla, $wbasedato, $wcentro_costo, $ccoquirofano);

                        $xpl_tar = (!empty($tarifas_modifican_valor_erp)) ? explode(",", $tarifas_modifican_valor_erp) : array();

                        // Array que indica cuales tarifas deben permitir escribir o modificar valor siempre, en los conceptos que permitan digitar valor
                        // no está limitado a que tenga que existir tarifa sino simplemente dejar escribir valor siempre.
                        $arr_tarifas_modifican_valor_erp = array();
                        foreach ($xpl_tar as $key => $value)
                        {
                            if(!array_key_exists($value, $arr_tarifas_modifican_valor_erp))
                            {
                                $arr_tarifas_modifican_valor_erp[$value] = $value;
                            }
                        }

                        $porcentajes_CX_bilaterales       = "off"; // Para controlar si se deben escoger los porcentajes de cirugías bilaterales o de un acto quirúrgico normal
                        $cont_CX_bilaterales              = 0; // Cuenta las cirugías bilaterales, es útil porque cuando el contado sea mayor a 1 entonces se debe cambiar la variable $porcentajes_CX_bilaterales a on y tomar los porcentajes de bilaterales
                        global $RESPONSABLE_VIRTUAL_PACIENTE, $orden_conceptos_por_procedimiento, $id_concepto_uso_equipos, $concepto_recuperacion_erp, $id_concepto_examenes, $add_equipo, $add_examen, $add_equipo_nombre, $add_examen_nombre,
                                $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv, $porcentajes_CX_bilaterales, $cont_CX_bilaterales, $wfecha_cargo, $arr_tarifas_modifican_valor_erp;

                        $TB_BASE_LIQUIDACION = TB_BASE_LIQUIDACION;
                        $TB_BASE_LIQ_ACTOSQX = TB_BASE_LIQ_ACTOSQX;
                        $TB_BASE_LIQPORCENTA = TB_BASE_LIQPORCENTA;

                        $arr_datos_liquidar    = unserialize(base64_decode($arr_datos_liquidar));
                        $arr_datos_liquidados  = unserialize(base64_decode($arr_datos_liquidados));
                        $arr_extras            = unserialize(base64_decode($arr_extras));
                        $arr_conceptos_nombres = unserialize(base64_decode($arr_conceptos_nombres));
                        $arr_disponibilidades  = unserialize(base64_decode($arr_disponibilidades));
                        $arr_ccos_cirugia      = unserialize(base64_decode($arr_ccos_cirugia));
                        $data['procedimientos_materiales'] = array();

                        $arr_conceptos_manuales_cx = consultarConceptosManuales($conex, $wemp_pmla, $wbasedato);
                        $codTipoSoat               = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tipoempresasoat');
                        $codEmpPartic              = $codEmpParticular; //consultarAliasPorAplicacion($conex, $wemp_pmla, 'codigoempresaparticular');
                        $tipoempresaparticular     = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tipoempresaparticular');
                        $tarifaparticular          = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tarifaparticular');
                        $codTipoMpa                = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tipoempresampa'); // este parámetro solo tiene el un tipo de empresa prepagadas pero gueden ser varios los códigos de tipos de empresas prepagadas.
                        $arr_codTipoMpa            = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tipoempresapaps'); // tipos de empresas prepagadas, pólizas aseguradoras. (Todos los códigos de tipos de empresas prepagadas).
                        $arr_codTipoMpa            = explode(",", $arr_codTipoMpa);
                        $arr_procedimientos_relacionados = array();

                        // Este array se pasa a varian funciones para crear cada posición como variables locales en la función y evitar saturar los encabezados de funciones con muchas variables
                        $arr_PARAMETROS_GENERALES = array();
                        $arr_PARAMETROS_GENERALES["wcentro_costo"]                     = $wcentro_costo;
                        $arr_PARAMETROS_GENERALES["codEmpParticular"]                  = $codEmpParticular;
                        $arr_PARAMETROS_GENERALES["concepto_medicamentos_mueven_inv"]  = $concepto_medicamentos_mueven_inv;
                        $arr_PARAMETROS_GENERALES["concepto_materiales_mueven_inv"]    = $concepto_materiales_mueven_inv;
                        $arr_PARAMETROS_GENERALES["concepto_honorario_ayudantia"]      = $concepto_honorario_ayudantia;
                        $arr_PARAMETROS_GENERALES["tarifas_modifican_valor_erp"]       = $tarifas_modifican_valor_erp;
                        $arr_PARAMETROS_GENERALES["conceptoRepetirPorcentajeMultiple"] = $conceptoRepetirPorcentajeMultiple;
                        $arr_PARAMETROS_GENERALES["concepto_recuperacion_erp"]         = $concepto_recuperacion_erp;
                        $arr_PARAMETROS_GENERALES["id_concepto_uso_equipos"]           = $id_concepto_uso_equipos;
                        $arr_PARAMETROS_GENERALES["id_concepto_examenes"]              = $id_concepto_examenes;
                        $arr_PARAMETROS_GENERALES["wfecha_cargo"]                      = $wfecha_cargo;
                        $arr_PARAMETROS_GENERALES["whora_cargo"]                       = $whora_cargo;
                        $arr_PARAMETROS_GENERALES["arr_tarifas_modifican_valor_erp"]   = $arr_tarifas_modifican_valor_erp;
                        $arr_PARAMETROS_GENERALES["wtiempo_minutos_cx"]                = $wtiempo_minutos_cx;
                        $arr_PARAMETROS_GENERALES["wtipo_anestesia_cx"]                = $wtipo_anestesia_cx;
                        $arr_PARAMETROS_GENERALES["wtiempo_sala_recuperarcion"]        = $wtiempo_sala_recuperarcion;
                        $arr_PARAMETROS_GENERALES["wtiempo_uso_minutos"]               = $wtiempo_uso_minutos;
                        $arr_PARAMETROS_GENERALES["es_paquete"]                        = $es_paquete;
                        $arr_PARAMETROS_GENERALES["generar_temporal"]                  = $generar_temporal; // [updt-70] Parámetros generales para usarlos en topes y paralelos.
                        $arr_PARAMETROS_GENERALES["generar_temporal_1vez"]             = $generar_temporal_1vez; //
                        $arr_PARAMETROS_GENERALES["TABLA_TEMP_106"]                    = $TABLA_TEMP_106;
                        $arr_PARAMETROS_GENERALES["fecha_actual"]                      = $fecha_actual;
                        $arr_PARAMETROS_GENERALES["hora_actual"]                       = $hora_actual;
                        $arr_PARAMETROS_GENERALES["arr_ccos_cirugia"]                  = $arr_ccos_cirugia;
                        $arr_PARAMETROS_GENERALES["wtipo_emp_valida_nopos"]            = $wtipo_emp_valida_nopos;
                        $arr_PARAMETROS_GENERALES["wbasedato_movhos"]                  = $wbasedato_movhos;
                        $arr_PARAMETROS_GENERALES["codTipoMpa"]                        = $codTipoMpa;
                        $arr_PARAMETROS_GENERALES["arr_codTipoMpa"]                    = $arr_codTipoMpa;
                        $arr_PARAMETROS_GENERALES["codTipoSoat"]                       = $codTipoSoat;
                        $arr_PARAMETROS_GENERALES["autorizarTodosLosCargosSdoResp"]    = $autorizarTodosLosCargosSdoResp;

                        // $guardar = "arr_datos_liquidados: ".print_r($arr_datos_liquidados,true).PHP_EOL;
                        // $guardar = "arr_datos_liquidar: ".print_r($arr_datos_liquidar,true).PHP_EOL;
                        // seguimiento($guardar);

                        $result = consultarResponsables($conex, $wbasedato, $wemp_pmla, $whistoria, $wing, $arr_ccos_cirugia);

                        $resultQuery = array();
                        $codigo_complementario = "";
                        while ($row = mysql_fetch_array($result))
                        {
                            // Se llena el array con la información de los responsables generados en la consulta hasta que se encuentre un responsable complementario
                            // si no se encuentra, en el array quedarán todos los responsables del paciente.
                            $codigo_empresa = $row["Resnit"];
                            if(!array_key_exists($codigo_empresa, $resultQuery))
                            {
                                $resultQuery[$codigo_empresa] = $row;
                                if($row["complementario"] == 'on')
                                {
                                    $codigo_complementario = $codigo_empresa;
                                    break;
                                }
                            }
                        }

                        if($codigo_complementario != "")
                        {
                            // Si se encontró un responsable complementario entonces solo se deja como responsable en el array como único responsable el complementario
                            // y se ignoran los demás.
                            $arr_resul_tmp                         = array();
                            $arr_resul_tmp[$codigo_complementario] = $resultQuery[$codigo_complementario];
                            $resultQuery                           = $arr_resul_tmp;
                        }

                        // Entidades responsables del paciente
                        $arr_entidades_responsables      = array();
                        $arr_entidades_ORDEN_SIMULADO    = array();
                        $arr_primero_segundo_responsable = array("primer_responsable"=>array("codigo"=>"", "tipoEmpresa"=>"", "tipoTarifa"=>"", "paralelo"=>""),"segundo_responsable"=>array("codigo"=>"", "tipoEmpresa"=>"", "tipoTarifa"=>"", "paralelo"=>""));
                        $fecha_actual_tmp                = $wfecha_cargo; // Los responsables se valídan de acuerdo a la fecha inicio y fin como responsable para le fecha de la cirugía
                        foreach($resultQuery as $codigo_responsable => $row)
                        {
                            $plan_emp_cod    = $row['plan_emp_cod'];
                            $plan_emp_nom    = $row['plan_emp_nom'];
                            $nit_rep         = $row['Resnit'];
                            $orden_emp       = $row['orden_resp']*1;
                            $Resord          = $row['Resord']*1;
                            $saldo_res       = $row['saldo_res'];
                            $tipo_emp        = $row['Emptem'];
                            $tipo_tarifa     = $row['Emptar'];
                            $maneja_paralelo = $row['Emppar'];
                            $nombre_resp     = $row["Empnom"];
                            $nit_empresarial = $row["Empnit"];
                            $fec_ini_resp    = $row["fec_ini_resp"]; // formato 0000-00-00 o aaaa-mm-dd
                            $fec_fin_resp    = $row["fec_fin_resp"]; // formato 0000-00-00 o aaaa-mm-dd
                            $fec_ini_resp    = str_replace("-", "", $fec_ini_resp);
							$fec_ini_resp	 = (int) $fec_ini_resp;
                            $fec_fin_resp    = str_replace("-", "", $fec_fin_resp);
							$fec_fin_resp 	 = (int) $fec_fin_resp;
                            $fecha_actual_tmp= str_replace("-", "", $fecha_actual_tmp);
							$fecha_actual_tmp = (int) $fecha_actual_tmp;

                            if($row['orden_resp'] < $Resord)
                            {
                                $row['orden_resp'] = $Resord;
                            }

                            if($row['id_204'] != "")
                            {
                                if($saldo_res == '')
                                {
                                    // ALERTAR DE UN POSIBLE ERROR EN LA LIQUIDACIÓN PORQUE PUEDE CAMBIAR DE RESPONSABLE SIN SER CORRECTO
                                    // PORQUE EL CAMPO DE SALDO ESTA VACÍO.
                                }
                            }

                            $agregar_reponsable = true;
                            if($fec_ini_resp != 0 && $fecha_actual_tmp < $fec_ini_resp)
                            {
                                // Si la fecha actual es menor a fecha inicio responsable entonces aún no se debe tener en cuenta como responsable
                                // Si fecha actual = a fecha inicio responsable entonces inicia como responsable
                                $agregar_reponsable = false;
                            }

                            if($fec_fin_resp != 0 && $fecha_actual_tmp >= $fec_fin_resp)
                            {
                                // Si la fecha actual es mayor o igual a la fecha fin responsable entonces ya no se debe considerar como responsable.
                                // cuando un responable tiene fecha inicio y fecha fin iguales entonces cuando ingrese a fecha fin vs fecha actual se asume que ya deja de ser responsable
                                $agregar_reponsable = false;
                            }

                            if($fec_ini_resp != 0 && $fec_fin_resp != 0 && $fec_ini_resp == $fec_fin_resp)
                            {
                                // Si por error asignaron un responsable pero inmediatamente lo cambiaron entonces la fecha de inicio queda igual a la fecha de terminación
                                // Se debe considerar como responsable inactivo
                                $agregar_reponsable = false;
                            }

                            $saldo_disponible = "*";
                            if($row["id_204"] != "" && ($row["saldo_res"]*1) <= 0 && $row["saldo_res"] != '' && $row["saldo_tipo_concepto"] == '*')
                            {
                                $saldo_disponible = "0";
                                // Si el saldo es cero o en algunos casos menor a cero porque directamente por unix ya le han grabado cargos al responsable soprepasando el saldo,
                                // entonces no tener en cuenta ese responsable en matrix y continúe con el siguiente responsable.
                                // if($whistoria == '642286')
                                { $agregar_reponsable = false; }
                            }

                            if($agregar_reponsable) // || $orden_emp == -1
                            {
                                // Genera inconsistencia porque más adelante, en libreria de topes y paralelos intenta nuevamente consultar todos los responsables.
                                /*if($row["id_204"] != "" && ($row["saldo_res"]*1) <= 0)
                                {
                                    // Los responsables que tienen registro de tope y ya no tienen saldo entonces no deben hacer ya parte de los responsables de la liquidación
                                    // porque ya no se le pueden cobrar más cargos
                                }
                                else*/
                                {
                                    if($row['tipo_paciente'] == 'P')
                                    {
                                        $nit_rep         = $codEmpPartic;
                                        $tipo_emp        = $tipoempresaparticular;
                                        $tipo_tarifa     = $tarifaparticular;
                                        $maneja_paralelo = "";
                                        $nombre_resp     = "Particular";
                                        $nit_empresarial = $nitEmpresa;
                                    }

                                    // Lo no pos se liquida como particular
                                    if(!array_key_exists($nit_rep, $arr_entidades_responsables))
                                    {
                                        $arr_entidades_responsables[$nit_rep] = array("simulacion_campos"=>array(),"liquidacion_simulada"=>array());
                                    }

                                    // Asignar segundo responsable, se asigna solo si ya se asignó el primer responsable.
                                    $arr_entidades_responsables[$nit_rep]["simulacion_campos"] = array("Resord"=>$row["orden_resp"], "Resnit"=>$nit_rep, "Emppar"=>$maneja_paralelo, "Emptar"=>$tipo_tarifa, "Emptem"=>$tipo_emp, "Empnom"=>$nombre_resp, "Empnit"=>$nit_empresarial,
                                                                                                        "saldo_disponible" => $saldo_disponible, "plan_emp_cod" => $plan_emp_cod, "plan_emp_nom" => $plan_emp_nom,
                                                                                                        "saldo_tipo_concepto" => $row["saldo_tipo_concepto"],
                                                                                                        "saldo_clasificacion" => $row["saldo_clasificacion"],
                                                                                                        "saldo_centro_costo"  => $row["saldo_centro_costo"]);
                                    if(!empty($arr_primero_segundo_responsable["primer_responsable"]["codigo"]) && empty($arr_primero_segundo_responsable["segundo_responsable"]["codigo"]))
                                    {
                                        $arr_primero_segundo_responsable["segundo_responsable"]["codigo"]       = $nit_rep;
                                        $arr_primero_segundo_responsable["segundo_responsable"]["tipoEmpresa"]  = $tipo_emp;
                                        $arr_primero_segundo_responsable["segundo_responsable"]["tipoTarifa"]   = $tipo_tarifa;
                                        $arr_primero_segundo_responsable["segundo_responsable"]["paralelo"]     = $maneja_paralelo;
                                        $arr_primero_segundo_responsable["segundo_responsable"]["plan_emp_cod"] = $plan_emp_cod;
                                        $arr_primero_segundo_responsable["segundo_responsable"]["plan_emp_nom"] = $plan_emp_nom;
                                    }

                                    // Asignar primer responsable
                                    if(empty($arr_primero_segundo_responsable["primer_responsable"]["codigo"]))
                                    {
                                        $arr_primero_segundo_responsable["primer_responsable"]["codigo"]       = $nit_rep;
                                        $arr_primero_segundo_responsable["primer_responsable"]["tipoEmpresa"]  = $tipo_emp;
                                        $arr_primero_segundo_responsable["primer_responsable"]["tipoTarifa"]   = $tipo_tarifa;
                                        $arr_primero_segundo_responsable["primer_responsable"]["paralelo"]     = $maneja_paralelo;
                                        $arr_primero_segundo_responsable["primer_responsable"]["plan_emp_cod"] = $plan_emp_cod;
                                        $arr_primero_segundo_responsable["primer_responsable"]["plan_emp_nom"] = $plan_emp_nom;
                                    }

                                    if(!array_key_exists($row["orden_resp"], $arr_entidades_ORDEN_SIMULADO))
                                    {
                                        $arr_entidades_ORDEN_SIMULADO[$nit_rep] = $row["orden_resp"];
                                    }
                                }

                                // NUNCA SE PUSO EN FUNCIONAMIENTO Por ejemplo cuando es el responsable principal pero que por tiempo ya se le terminó la cobertura entonces marca la empresa como
                                // inactiva en la liquidación
                                // if(!$agregar_reponsable && $orden_emp == -1)
                                // {
                                //     if(!array_key_exists($nit_rep, $RESPONSABLE_VIRTUAL_PACIENTE["resp_inactivos"]))
                                //     {
                                //         $RESPONSABLE_VIRTUAL_PACIENTE["resp_inactivos"][$nit_rep] = $nit_rep;
                                //     }
                                // }
                            }
                        }

                        $cambioResponsablePorFechaFin = array();

                        actualizarResponsablePrincipalPrimerResponsable($conex, $wbasedato, $wemp_pmla, $arr_entidades_responsables, $arr_primero_segundo_responsable, $whistoria, $wing, $wnomemp_tal, false, $RESPONSABLE_VIRTUAL_PACIENTE, $arr_datos_liquidar, $wcod_empresa, $cambioResponsablePorFechaFin);

                        // <<<<<<<<<<<<<<<< ---------------------------------------------------------------- >>>>>>>>>>>>>>>>>>>
                        // <<<<<<<<<<<<<<<< Ordenar primero todos los procedimientos por el número de puntos >>>>>>>>>>>>>>>>>>>

                        // Para no tener en cuenta en que especialidades quedaron los procedimientos, se crea este array temporal para recorrerlo más adelante y agregarlos al array
                        // arr_procedimientos_liquidar con toda la información
                        $temporal_procedimientos_ordenadosPPNP = array();
                        $arr_datos_liquidar_PPNP               = array();
                        $arr_temporal_procedimientos_ordenados_POS_NOPOS = array();
                       // ingresa especialidades
                        $tarifa_original = $arr_datos_liquidar["arr_datos_paciente"]["tarifa_original"];
                        $arr_return = consultarModalidadYPuntosProcedimientos($conex, $wbasedato, $wemp_pmla, $wcentro_costo, $wfecha_cargo, $arr_datos_liquidar, $wtipo_emp_valida_nopos, $wprocedimiento_add, $wconcepto_add, $arr_extras, $arr_conceptos_nombres, $arr_datos_liquidados,
                                                                $es_paquete, $wcod_empresa, $tarifa_original, $wtipo_ingreso, $whora_cargo, $wtiempo_minutos_cx, $wtiempo_sala_recuperarcion, $wtiempo_uso_minutos, $wtipo_anestesia_cx,
                                                                $arr_primero_segundo_responsable, $temporal_procedimientos_ordenadosPPNP);
                        $temporal_procedimientos_ordenadosPPNP = $arr_return["temporal_procedimientos_ordenadosPPNP"];
                        $arr_procedimientos_relacionados       = $arr_return["arr_procedimientos_relacionados"];

                        // Si el tipo de empresa implica realizar una separación de los procedimientos pos y noPos, sino se hace normalmente la liquidación.
                        if(in_array($RESPONSABLE_VIRTUAL_PACIENTE["tipoEmpre"], $wtipo_emp_valida_nopos))
                        {
                            $arr_temporal_procedimientos_ordenados_POS_NOPOS = separar_procedimientos_pos_nopos($conex, $wbasedato, $wemp_pmla, $temporal_procedimientos_ordenadosPPNP, $arr_PARAMETROS_GENERALES, $RESPONSABLE_VIRTUAL_PACIENTE);
                            // Ubicar primero los procedimientos NO_POS para cobrar el mercado solo a los NO POS
                            ksort($arr_temporal_procedimientos_ordenados_POS_NOPOS);
                        }
                        else
                        {
                            $arr_temporal_procedimientos_ordenados_POS_NOPOS = array("0_ORD_LIQ_NORMAL"=>$temporal_procedimientos_ordenadosPPNP);
                        }

                        if(count($temporal_procedimientos_ordenadosPPNP) > 0)
                        {
                            foreach ($arr_temporal_procedimientos_ordenados_POS_NOPOS as $TIP_POS => $arr_especialidades)
                            {
                                    foreach ($arr_especialidades as $key_especialidad => $arr_proceds_especialidades)
                                    {
                                        foreach ($arr_proceds_especialidades as $key_procedimientos => $arr_info_procedimientos)
                                        {
                                            $key_arr_liquidar = $arr_info_procedimientos["dif_key"];
                                            if(!array_key_exists($TIP_POS, $arr_datos_liquidar_PPNP))
                                            {
                                                $arr_datos_liquidar_PPNP[$TIP_POS] = $arr_datos_liquidar;
                                                $arr_datos_liquidar_PPNP[$TIP_POS]['arr_para_liquidar'] = array();
                                            }

                                            if(!array_key_exists($key_arr_liquidar, $arr_datos_liquidar_PPNP[$TIP_POS]['arr_para_liquidar']))
                                            {
                                                $arr_datos_liquidar_PPNP[$TIP_POS]['arr_para_liquidar'][$key_arr_liquidar] = $arr_datos_liquidar['arr_para_liquidar'][$key_arr_liquidar];
                                            }
                                        }
                                    }
                            }
                        }
                        else
                        {
                            $arr_temporal_procedimientos_ordenados_POS_NOPOS = array();
                        }

                        // $guardar = "arr_datos_liquidar_PPNP: ".print_r($arr_datos_liquidar_PPNP,true).PHP_EOL;
                        // seguimiento($guardar);

                        // $guardar = "arr_datos_liquidar: ".print_r($arr_datos_liquidar,true).PHP_EOL;
                        // seguimiento($guardar);

                        // $guardar = "arr_temporal_procedimientos_ordenados_POS_NOPOS: ".print_r($arr_temporal_procedimientos_ordenados_POS_NOPOS,true).PHP_EOL;
                        // seguimiento($guardar);

                        // $guardar = "arr_entidades_responsables: ".print_r($arr_entidades_responsables,true).PHP_EOL;
                        // seguimiento($guardar);

                        $htmlppal                              = "";
                        $html_botones_guardar_actualizar       = '';
                        $arr_procedimientos_orden_liquidarPPNP = array();

                        $cont_rowspan                          = 1;
                        $valor_total_insumos                   = 0;
                        $suma_total_simulada                   = 0;
                        $arr_html_insumos_por_procedimiento    = array();
                        $conteoProcedimientosPorCODIGO         = array();
                        $cont_filas_concep                     = 0;

                        $html_tds_valores                      = "";
                        $html_tds_TOTALES                      = array();
                        $TOTAL_CIRUGIAS                        = 0;
                        $arr_encabezados_proced                = array("colspan_nombre"=>array(),"columnas_valores"=>array(),"columnas_insumos"=>array(),"columnas_materiales"=>array());
                        $arr_concepto_proced                   = array();
                        $fila_html_TIP_POS                     = array();
                        $arr_procedimientos_liquidar_PPNP      = array();
                        $arr_procedimientos_orden              = array();
                        $mercado_agregado                      = false;
                        $arr_cod_material_medicamento          = array("material"=>'', "medicamento"=>'');
                        $arr_insumos_procedimiento_tmp         = array();
                        $arr_mercado_completo                  = array();
                        $arr_lista_conceptos                   = array(); // En este array se guardan todos los conceptos en general que harán parte de la liquidación para poder organizar mejor la visualización

                        $RESPONSABLE_VIRTUAL_PACIENTE_POS    = $RESPONSABLE_VIRTUAL_PACIENTE;
                        $arr_primero_segundo_responsable_POS = $arr_primero_segundo_responsable;
                        $arr_entidades_responsables_POS      = array();
                        $cambioResponsablePorFechaFin_POS    = $cambioResponsablePorFechaFin;
                        $codigoResp_POS                      = "";
                        $liquida_no_pos                      = false;
                        $csscnpt                             = "";
                        $msjNoResponsables                   = "El (los) responsable(s) no tiene(n) saldo disponible, llegó a la fecha fin como responsable o la cirugía es menor a la fecha de inicio del responsable, es posible que se deba agregar un nuevo responsable para continuar con la liquidación";

                        crearTemporalCargos($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106, $whistoria, $generar_temporal_1vez);

                        foreach ($arr_temporal_procedimientos_ordenados_POS_NOPOS as $TIP_POS => $temporal_procedimientos_ordenados)
                        {
                            $procedimiento_NOPOS = tipoPOS_procedimiento($TIP_POS);

                            $arr_datos_liquidar                = $arr_datos_liquidar_PPNP[$TIP_POS];
                            $arr_procedimientos_orden_liquidar = array();

                            if($procedimiento_NOPOS)
                            {
                                $liquida_no_pos = true;
                                $nopos_nit_rep         = $codEmpPartic;
                                $nopos_maneja_paralelo = "";
                                $nopos_tipo_tarifa     = $tarifaparticular;
                                $nopos_tipo_emp        = $tipoempresaparticular;
                                $nopos_nombre_resp     = "Particular";
                                $nopos_nit_empresarial = "";

                                $resp_pos                       = $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"];
                                $nopos_orden                    = $arr_entidades_responsables[$resp_pos]["simulacion_campos"]["Resord"];
                                $arr_entidades_responsables_POS = $arr_entidades_responsables;
                                $arr_entidades_responsables     = array();

                                if(!array_key_exists($nopos_nit_rep, $arr_entidades_responsables))
                                {
                                    $arr_entidades_responsables[$nopos_nit_rep] = array("simulacion_campos"=>array(),"liquidacion_simulada"=>array());
                                }

                                // Asignar segundo responsable, se asigna solo si ya se asignó el primer responsable.
                                $arr_entidades_responsables[$nopos_nit_rep]["simulacion_campos"] = array("Resord"=>$nopos_orden, "Resnit"=>$nopos_nit_rep, "Emppar"=>$nopos_maneja_paralelo, "Emptar"=>$nopos_tipo_tarifa, "Emptem"=>$nopos_tipo_emp, "Empnom"=>$nopos_nombre_resp, "Empnit"=>$nopos_nit_empresarial,
                                                                                                        "saldo_disponible" => "*", "plan_emp_cod" => "", "plan_emp_nom" => "",
                                                                                                        "saldo_tipo_concepto" => "*",
                                                                                                        "saldo_clasificacion" => "",
                                                                                                        "saldo_centro_costo"  => "");
                                // $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"]    = $nopos_nit_rep;
                                // $RESPONSABLE_VIRTUAL_PACIENTE["Ingent"]    = $nopos_nombre_resp;
                                // $RESPONSABLE_VIRTUAL_PACIENTE["Ingtar"]    = $nopos_tipo_tarifa;
                                // $RESPONSABLE_VIRTUAL_PACIENTE["tipoEmpre"] = $nopos_tipo_emp;
                                $codigoResp_POS                            = $resp_pos;


                                $arr_primero_segundo_responsable = array("primer_responsable"=>array("codigo"=>"", "tipoEmpresa"=>"", "tipoTarifa"=>"", "paralelo"=>""),"segundo_responsable"=>array("codigo"=>"", "tipoEmpresa"=>"", "tipoTarifa"=>"", "paralelo"=>""));
                                // Asignar primer responsable
                                if(empty($arr_primero_segundo_responsable["primer_responsable"]["codigo"]))
                                {
                                    $arr_primero_segundo_responsable["primer_responsable"]["codigo"]       = $nopos_nit_rep;
                                    $arr_primero_segundo_responsable["primer_responsable"]["tipoEmpresa"]  = $tipoempresaparticular;
                                    $arr_primero_segundo_responsable["primer_responsable"]["tipoTarifa"]   = $nopos_tipo_tarifa;
                                    $arr_primero_segundo_responsable["primer_responsable"]["paralelo"]     = $nopos_maneja_paralelo;
                                    $arr_primero_segundo_responsable["primer_responsable"]["plan_emp_cod"] = "";
                                    $arr_primero_segundo_responsable["primer_responsable"]["plan_emp_nom"] = "";
                                }

                                $cambioResponsablePorFechaFin = array();
                                actualizarResponsablePrincipalPrimerResponsable($conex, $wbasedato, $wemp_pmla, $arr_entidades_responsables, $arr_primero_segundo_responsable, $whistoria, $wing, $nopos_nombre_resp, $procedimiento_NOPOS, $RESPONSABLE_VIRTUAL_PACIENTE, $arr_datos_liquidar, $nopos_nit_rep, $cambioResponsablePorFechaFin);

                                // $guardar = "TIP_POS: $TIP_POS, RESPONSABLE_VIRTUAL_PACIENTE: ".print_r($RESPONSABLE_VIRTUAL_PACIENTE,true).PHP_EOL;
                                // seguimiento($guardar);
                                $temporal_procedimientos_ordenados = array();
                                $arr_return = consultarModalidadYPuntosProcedimientos($conex, $wbasedato, $wemp_pmla, $wcentro_costo, $wfecha_cargo, $arr_datos_liquidar, $wtipo_emp_valida_nopos, $wprocedimiento_add, $wconcepto_add, $arr_extras, $arr_conceptos_nombres, $arr_datos_liquidados,
                                                                                        $es_paquete, $nopos_nit_rep, $nopos_tipo_tarifa, $wtipo_ingreso, $whora_cargo, $wtiempo_minutos_cx, $wtiempo_sala_recuperarcion, $wtiempo_uso_minutos, $wtipo_anestesia_cx,
                                                                                        $arr_primero_segundo_responsable, $temporal_procedimientos_ordenados);
                                $temporal_procedimientos_ordenados = $arr_return["temporal_procedimientos_ordenadosPPNP"];
                                // unset($arr_entidades_responsables[$resp_pos]);
                            }
                            elseif($liquida_no_pos)
                            {
                                // if(!array_key_exists($codigoResp_POS, $arr_entidades_responsables))
                                // {
                                //     $arr_entidades_responsables[$codigoResp_POS] = array();
                                // }
                                $arr_entidades_responsables      = $arr_entidades_responsables_POS;
                                $arr_primero_segundo_responsable = $arr_primero_segundo_responsable_POS;
                                $RESPONSABLE_VIRTUAL_PACIENTE    = $RESPONSABLE_VIRTUAL_PACIENTE_POS;
                                $cambioResponsablePorFechaFin    = $cambioResponsablePorFechaFin_POS;
                            }

                            // <<<<<<<<<<<<<<<< Ordenar primero todos los procedimientos por el número de puntos >>>>>>>>>>>>>>>>>>>
                            ordenarEspecialidadProcedimiento($temporal_procedimientos_ordenados);
                            // <<<<<<<<<<<<<<<< ---------------------------------------------------------------- >>>>>>>>>>>>>>>>>>>
                            // $guardar = "temporal_procedimientos_ordenados: ".print_r($temporal_procedimientos_ordenados,true).PHP_EOL;
                            // seguimiento($guardar);
                            // $guardar = "TIP_POS: $TIP_POS, arr_entidades_responsables: ".print_r($arr_entidades_responsables,true).PHP_EOL;
                            // seguimiento($guardar);

                            // $guardar = "TIP_POS: $TIP_POS, arr_datos_liquidar: ".print_r($arr_datos_liquidar,true).PHP_EOL;
                            // seguimiento($guardar);

                            // $guardar = "TIP_POS: $TIP_POS, RESPONSABLE_VIRTUAL_PACIENTE: ".print_r($RESPONSABLE_VIRTUAL_PACIENTE,true).PHP_EOL;
                            // seguimiento($guardar);

                            $temp_array = array();
                            foreach ($arr_procedimientos_relacionados as $cod_procedimiento => $value)
                            {
                                if(!array_key_exists($cod_procedimiento, $temp_array))
                                {
                                    $temp_array[$cod_procedimiento] = $arr_procedimientos_relacionados;
                                    unset($temp_array[$cod_procedimiento][$cod_procedimiento]);
                                }
                            }

                            // Este array crea una relación entre un procedimiento con todos los demás procedimientos del acto quirúrgico
                            $arr_procedimientos_relacionados = $temp_array;

                            // $guardar = "temporal_procedimientos_ordenados: ".print_r($temporal_procedimientos_ordenados,true).PHP_EOL;
                            // $guardar = "arr_procedimientos_relacionados: ".print_r($arr_procedimientos_relacionados,true).PHP_EOL;
                            // seguimiento($guardar);

                            $arr_contador_vias_diferentes = array(); // Para saber si hay mas de una vía y poder aplicar porcentajes de diferente vía
                            $arr_procedimientos_liquidar  = array();
                            $arr_especialidades_liq       = array();
                            $arr_contador_vias_diferentes_bilateral = array();  // este array se encarga de contar cuantas vías diferentes hay antes de encontrarse con un procedimiento bilateral
                                                                                // tendrá validez solo si y solo si hay un especialista.

                            // $guardar = "arr_datos_liquidar: ".print_r($arr_datos_liquidar,true).PHP_EOL;
                            // seguimiento($guardar);

                            $aplica_cirugias_multiples  = (count($arr_datos_liquidar['arr_para_liquidar']) > 1) ? true: false;
                            // $aplica_cirugias_multiples  = true; // siempre ver cuanto hay que pagar por la primer y única cirugía, por ejemplo para el procedimiento conización, varía el porcentaje en derechos de sala para la primer cirugía.
                            $arr_insumos_procedimiento  = array(); // Listado de medicamentos y materiales que se deben liquidar junto con el concepto-procedimiento
                            $primer_procedimiento       = "";
                            $ctrl_via_primera_bilateral = "";
                            $ctrl_primer_via_procedimiento = ""; //Para guardar el número de vía del primer pricedimiento en la liquidación
                            $ctrl_primer_especialidad_procedimiento = ""; // Para guardar el código de la especialidad del primer procedimiento de la liquidación
                            $arr_ordenProcedimientosTodos_NoEspecialidad = array();
                            $codigo_primer_procedimiento = "";

                            foreach ($temporal_procedimientos_ordenados as $cod_espe => $arr_proceds)
                            {
                                foreach ($arr_proceds as $cod_proced => $rowProced)
                                {
                                    $dif_key = $rowProced["dif_key"];
                                    $arr_proc_liq = $arr_datos_liquidar['arr_para_liquidar'][$dif_key];
                                    $arr_conceptos_liquidar     = array();
                                    $procedimiento_liquidar_cod = $arr_proc_liq['wprocedimiento'];
                                    $wprocedimiento_nombre      = $arr_proc_liq['wprocedimiento_nombre'];
                                    $wespecialista              = $arr_proc_liq['wespecialistas'];
                                    $wespecialidad              = $arr_proc_liq["wespecialidad"];
                                    $numero_de_via              = $arr_proc_liq["wvia"];
                                    $procedimiento_bilat_dif    = $arr_proc_liq["wprocedimiento_dif"];
                                    $ctrl_wbilateral            = $arr_proc_liq["wbilateral"];

                                    if(empty($codigo_primer_procedimiento))
                                    {
                                        $codigo_primer_procedimiento = $procedimiento_liquidar_cod;
                                    }

                                    if(empty($ctrl_primer_via_procedimiento))
                                    {
                                        $ctrl_primer_via_procedimiento = $numero_de_via;
                                    }

                                    if(empty($ctrl_primer_especialidad_procedimiento))
                                    {
                                        $ctrl_primer_especialidad_procedimiento = $wespecialidad;
                                    }

                                    if($ctrl_wbilateral == 'on' && empty($ctrl_via_primera_bilateral))
                                    {
                                        $ctrl_via_primera_bilateral = $numero_de_via;
                                    }

                                    $wnumero_puntos        = $rowProced["wnumero_puntos"];
                                    $valor_grupo           = $rowProced["valor_grupo"];
                                    $modalidad_facturacion = $rowProced["modalidad_facturacion"];

                                    // $wesbilateral               = $arr_proc_liq['wbilateral'];
                                    if($primer_procedimiento == "")
                                    {
                                        $primer_procedimiento = $procedimiento_bilat_dif;
                                    }

                                    // Todo concepto adicional que no tenga asociado un procedimiento entonces ese concepto se le adicionará al primer procedimiento
                                    // OJO, TENER EN CUENTA QUE SI SE SELECCIONÓ UN PROCEDIMIENTO DESDE EL FORMULARIO PERO RESULTA QUE EL CONCEPTO NO ESTÁ CONFIGURADO NI ACTIVO EN
                                    // LOS CONCEPTOS DE MANUALES DE CIRUGÍAS MULTIPLES, POR REGLA SIEMPRE SE LE VA A LIQUIDAR ESE CONCEPTO AL PRIMER! PROCEDIMIENTO ASI SE HAYA SELECCIONADO OTRO.
                                    if((!array_key_exists($wconcepto_add, $arr_conceptos_manuales_cx) || ( empty($wprocedimiento_add) && !empty($wconcepto_add) ) ) && $procedimiento_bilat_dif == $primer_procedimiento)
                                    {
                                        $wprocedimiento_add = $primer_procedimiento;
                                    }

                                    if(!array_key_exists($TIP_POS, $arr_procedimientos_orden))
                                    {
                                        $arr_procedimientos_orden[$TIP_POS] = array();
                                    }

                                    if(!array_key_exists($wespecialidad, $arr_procedimientos_orden[$TIP_POS]))
                                    {
                                        $arr_procedimientos_orden[$TIP_POS][$wespecialidad] = array();
                                    }

                                    // Consulta los uvrs y se crea un array para ordenarlo
                                    if(!array_key_exists($procedimiento_bilat_dif, $arr_procedimientos_orden[$TIP_POS][$wespecialidad]))
                                    {
                                        $arr_procedimientos_orden[$TIP_POS][$wespecialidad][$procedimiento_bilat_dif] = $wnumero_puntos;
                                    }

                                    if(!array_key_exists($wespecialidad, $arr_especialidades_liq))
                                    {
                                        $arr_especialidades_liq[$wespecialidad] = $wespecialidad;
                                    }

                                    // En un array se ingresan todos los procedimientos con su número de puntos respectivos, esto con el fin de ordenar
                                    // Todos los procedimientos de mayor a menor sin importar la especialidad, este dato será útil cuando se liquide
                                    // diferente especialista y diferente vía, y poder cobrar por ejemplo el concepto de Ayudantía solo hasta el segundo
                                    // procedimiento mayor en UVR o GRUPO y para las demás cirugías 0%
                                    if(!array_key_exists($procedimiento_bilat_dif, $arr_ordenProcedimientosTodos_NoEspecialidad))
                                    {
                                        $arr_ordenProcedimientosTodos_NoEspecialidad[$procedimiento_bilat_dif] = $wnumero_puntos;
                                    }

                                    // $ctrl_primer_via_procedimiento != $ctrl_via_primera_bilateral si estas dos variables son diferentes, entonces se debe tomar un acto quirúrgico
                                    // donde los porcentajes correspondan a acto por diferente vía, las dos variables están indicando que desde la primer cirugía hasta que se encuentre una
                                    // bilateral se conserva la misma vía, entonces se tiene en cuenta un acto quirúrgico por igual via (si despues de la bilateral hay por diferente vía
                                    // esto ya se tendrá en cuenta con las vías de bilateralidad), si entre la primer cirugía y la primer bilateral hay cambio de vía entonces se tiene
                                    // en cuenta un acto quirúrgico por diferente vía.
                                    if(!array_key_exists($numero_de_via, $arr_contador_vias_diferentes_bilateral) && $ctrl_primer_via_procedimiento != $ctrl_via_primera_bilateral )
                                    {
                                        $arr_contador_vias_diferentes_bilateral[$numero_de_via] = $numero_de_via;   // ESTE ARRAY ES PARA SABER LAS VÍAS DE LOS PROCEDIMIENTOS
                                                                                                                    // QUE ESTAN RELACIONADOS A UNA ESPECIALIDAD Y HAY INVOLUCRADO UN PROCEDIMIENTO BILATERAL
                                    }

                                    if(!array_key_exists($numero_de_via, $arr_contador_vias_diferentes))
                                    {
                                        $arr_contador_vias_diferentes[$numero_de_via] = $numero_de_via; // ESTE ARRAY ES GENERAL PARA TODOS LOS PROCEDIMIENTOS
                                    }


                                    $arr_datos_liquidar["wnumero_vias"] = count($arr_contador_vias_diferentes); // Asigna el número de vías encontradas pasa saber si aplica cirugías múltiples por diferente vía.

                                    if(!array_key_exists($procedimiento_bilat_dif, $arr_procedimientos_liquidar))
                                    {
                                        $via_ = (isset($arr_proc_liq['wvia'])) ? $arr_proc_liq['wvia']: '--';
                                        $arr_procedimientos_liquidar[$procedimiento_bilat_dif] = array( "procedimiento_dif"          => $procedimiento_bilat_dif,
                                                                                                        "codigo"                     => $procedimiento_liquidar_cod,
                                                                                                        "nombre"                     => $wprocedimiento_nombre,
                                                                                                        "wesbilateral"               => $arr_proc_liq['wbilateral'],
                                                                                                        "wposicion_organo_nom"       => $arr_proc_liq['wposicion_organo_nom'],
                                                                                                        "wvia"                       => $via_,
                                                                                                        "worgano"                    => $arr_proc_liq['worgano'],
                                                                                                        "wturno_cirugia"             => $wturno_cirugia,
                                                                                                        "wtipo_anestesia_cx"         => $wtipo_anestesia_cx, //$arr_proc_liq['wtipo_anestesia_cx'],
                                                                                                        "wtiempo_sala_recuperarcion" => $wtiempo_sala_recuperarcion, //$arr_proc_liq['wtiempo_sala_recuperarcion'],
                                                                                                        "wtiempo_uso_minutos"        => $wtiempo_uso_minutos, //$arr_proc_liq['wtiempo_uso_minutos'],
                                                                                                        "wtiempo_minutos_cx"         => $wtiempo_minutos_cx, //$arr_proc_liq['wtiempo_minutos_cx'],
                                                                                                        "wespecialistas_nombre"      => $arr_proc_liq["wespecialistas_nombre"], // Estos datos son para crear un check en liquidar para cargar automaticamente el medico.
                                                                                                        "wespecialista"              => $wespecialista,                         // Estos datos son para crear un check en liquidar para cargar automaticamente el medico.
                                                                                                        "wespecialidad"              => $wespecialidad,                         // Estos datos son para crear un check en liquidar para cargar automaticamente el medico.
                                                                                                        "wespecialidad_nombre"       => $arr_proc_liq["wespecialidad_nombre"],  // Estos datos son para crear un check en liquidar para cargar automaticamente el medico.
                                                                                                        "wnumero_puntos"             => $wnumero_puntos,
                                                                                                        "wgrupo_gqx"                 => $valor_grupo,
                                                                                                        "modalidad_facturacion"      => $modalidad_facturacion,
                                                                                                        "configuracion_liquidar"     => array(),
                                                                                                        "especialistas"              => array(),
                                                                                                        "arr_encabezado"             => $arr_proc_liq );
                                    }

                                    if(!array_key_exists($wespecialista, $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["especialistas"]))
                                    {
                                        $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["especialistas"][$wespecialista] = array( "wespecialistas_nombre"=> $arr_proc_liq["wespecialistas_nombre"],
                                                                                                                                            "wespecialista"        => $wespecialista,
                                                                                                                                            "wespecialidad"        => $wespecialidad,
                                                                                                                                            "wespecialidad_nombre" => $arr_proc_liq["wespecialidad_nombre"]);
                                    }

                                    $arr_conceptos_liquidar = $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar"];

                                    if(!array_key_exists($procedimiento_bilat_dif, $orden_conceptos_por_procedimiento)) { $orden_conceptos_por_procedimiento[$procedimiento_bilat_dif] = array(); }
                                    if(!empty($wprocedimiento_add) && !array_key_exists($wprocedimiento_add, $orden_conceptos_por_procedimiento)) { $orden_conceptos_por_procedimiento[$wprocedimiento_add] = array(); }

                                    if(!$wliq_soloInsumos)
                                    {
                                        $plantilla_wresponsable_eps_codigo = $arr_datos_liquidar["arr_datos_paciente"]["wresponsable_eps_codigo"];
                                        $plantilla_tarifa_original         = $arr_datos_liquidar["arr_datos_paciente"]["tarifa_original"];
                                        $plantilla_tipoEmpresa             = $arr_datos_liquidar["arr_datos_paciente"]["tipoEmpresa"];
                                        // if($procedimiento_NOPOS)
                                        // {
                                        //     $plantilla_tarifa_original         = $arr_entidades_responsables[$plantilla_wresponsable_eps_codigo]["simulacion_campos"]["Emptar_NOPOS"];
                                        //     $plantilla_tipoEmpresa             = $arr_entidades_responsables[$plantilla_wresponsable_eps_codigo]["simulacion_campos"]["Emptem_NOPOS"];
                                        //     $plantilla_wresponsable_eps_codigo = $arr_entidades_responsables[$plantilla_wresponsable_eps_codigo]["simulacion_campos"]["Resnit_NOPOS"];
                                        //     // $guardar = "plantilla_wresponsable_eps_codigo: $plantilla_wresponsable_eps_codigo, arr_entidades_responsables: ".print_r($arr_entidades_responsables,true).PHP_EOL;
                                        //     // seguimiento($guardar);
                                        // }

                                        // llamar función para consultar configuración de plantilla para liquidación, esta función modifica el array '$arr_conceptos_liquidar'
                                        $plantilla_codigo = "";
										consultarConfiguracionPlantilla($conex, $wemp_pmla, $wbasedato, $procedimiento_liquidar_cod, $procedimiento_bilat_dif, $data, $arr_datos_liquidar, $arr_conceptos_liquidar, $wprocedimiento_add, $wconcepto_add, $arr_extras, $arr_lista_conceptos, $arr_conceptos_nombres, $arr_datos_liquidados, $plantilla_wresponsable_eps_codigo, $plantilla_tarifa_original, $plantilla_tipoEmpresa, $wespecialidad, $es_paquete, $wtiempo_minutos_cx);

                                        // [[++]] SI INDETIFICAR PLANTILLA POR RESPONSABLES SIN IMPORTAR SI ES SOAT+PREPA .. Adicionar al IF
                                        // SERÍA NECESARIO COMENTAR EL IF PARA QUE BUSQUE PARA EL SEGUNDO RESPONABLE, IDEAR COMO HACERLO PARA TODOS LOS RESPONSABLES POSIBLES.
                                        // SI LLEGA A SER NECESARIO, POR EL MOMENTO SOLO SE DEBE HACER PARA PRIMER Y SEGUNDO RESPONSABLE EN EL CASO SOAT-PREPAGADA

                                        // Si el primer responsable es SOAT y el segundo es PREPAGADA, Adicionalmente si el segundo es paralelo entonces adicione los conceptos del paralelo al primer responsable
                                        // && $arr_primero_segundo_responsable["segundo_responsable"]["tipoEmpresa"] == $codTipoMpa SE QUITA LA VALIDACIÓN POR TIPO DE EMPRESA
                                        // PORQUE HAY EMPRESAS QUE HACEN PARALELO SIN SER TIPO EMPRESA 03, POR EJEMPLO LA EMPRESA 890903790-SEGUROS DE VIDA SURAMERICANA S
                                        // HACE PARALELO CON UN SOAT, ESTA EMPRESA ES TIPO EMPRESA 11 PERO DEBE HACER PARALELO, ASI MISMO PUEDE OCURRIR CON ALGUNAS EMPRESAS QUE SON
                                        // TIPO EMPRESA 01
                                        if($arr_primero_segundo_responsable['primer_responsable']['tipoEmpresa'] == $codTipoSoat
                                            && !empty($arr_primero_segundo_responsable["segundo_responsable"]["codigo"])
                                            && $arr_primero_segundo_responsable["segundo_responsable"]["paralelo"] == 'on')
                                        {
                                            $wresponsable_eps_codigo = $arr_primero_segundo_responsable["segundo_responsable"]["codigo"];
                                            $tipoEmpresaSegunda      = $arr_primero_segundo_responsable["segundo_responsable"]["tipoEmpresa"];
                                            $tarifa_original         = $arr_primero_segundo_responsable["segundo_responsable"]["tipoTarifa"];

                                            consultarConfiguracionPlantilla($conex, $wemp_pmla, $wbasedato, $procedimiento_liquidar_cod, $procedimiento_bilat_dif, $data, $arr_datos_liquidar, $arr_conceptos_liquidar, '', '', $arr_extras, $arr_lista_conceptos, $arr_conceptos_nombres, $arr_datos_liquidados, $wresponsable_eps_codigo, $tarifa_original, $tipoEmpresaSegunda, $wespecialidad, $es_paquete, $wtiempo_minutos_cx);
                                        }
                                        $arr_procedimientos_liquidar[$procedimiento_bilat_dif]["configuracion_liquidar"] = $arr_conceptos_liquidar;
                                    }
                                }
                            }

                            // si solo hay un especialista y hay una cirugía bilateral, entonces tiene en cuenta la cantidad de vías diferentes que hay entre la primer
                            // cirugía de la liquidación y la primer cirugía bilateral.
                            if(count($arr_especialidades_liq) == 1)
                            {
                                $arr_contador_vias_diferentes = $arr_contador_vias_diferentes_bilateral;
                                $arr_datos_liquidar["wnumero_vias"] = count($arr_contador_vias_diferentes);
                            }

                            // Se ordenan de mayor a menor cantidad de puntos todos los procedimientos sin importar las especialidades.
                            arsort($arr_ordenProcedimientosTodos_NoEspecialidad);
                            $arr_tempCx = $arr_ordenProcedimientosTodos_NoEspecialidad;
                            // Reescribe el array $arr_ordenProcedimientosTodos_NoEspecialidad para agregarle la posición de número de cirugía como índice;
                            $cont_orden = 1;
                            foreach ($arr_tempCx as $codpro_orden => $numeroPuntosOrden)
                            {
                                $arr_ordenProcedimientosTodos_NoEspecialidad[$codpro_orden] = $cont_orden;
                                $cont_orden++;
                            }

                            if(array_key_exists(0, $arr_ordenProcedimientosTodos_NoEspecialidad)) { unset($arr_ordenProcedimientosTodos_NoEspecialidad[0]); }

                            // <<<<<<<<<<<<<<<<<<<<<<<      DEBUG      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                            // $guardar = "arr_especialidades_liq :".print_r($arr_especialidades_liq,true).PHP_EOL;
                            // $guardar = "arr_procedimientos_liquidar :".print_r($arr_procedimientos_liquidar,true).PHP_EOL;
                            // $guardar = "orden_conceptos_por_procedimiento :".print_r($orden_conceptos_por_procedimiento,true).PHP_EOL;
                            // $guardar = "arr_lista_conceptos: ".print_r($arr_lista_conceptos,true).PHP_EOL;
                            // $guardar = "arr_extras: ".print_r($arr_extras,true).PHP_EOL;
                            // $guardar = "arr_datos_liquidar: ".print_r($arr_datos_liquidar,true).PHP_EOL;
                            // $guardar = "temporal_procedimientos_ordenados: ".print_r($temporal_procedimientos_ordenados,true).PHP_EOL;
                            // $guardar = "arr_ordenProcedimientosTodos_NoEspecialidad: ".print_r($arr_ordenProcedimientosTodos_NoEspecialidad,true).PHP_EOL;
                            // seguimiento($guardar);

                            // **************************************** CONSULTAR INSUMOS ************************************************************************************************
                            $procedimiento_manual = '';
                            $carga_mercado = false;// Si esta variable no llega a ser true es porque ningúna empresa tiene saldo y no se asoció el mercado a la liquidación, en ese caso
                            if(!$mercado_agregado)
                            {
                                // APROVECHAR ESTE CICLO PARA CONSULTAR SI EL PROCEDIMIENTO ACTUAL TIENE MEDICAMENTOS O MATERIALES QUE NECESITEN SER LIQUIDADOS
                                $sql = "SELECT  Mpapro, Mpacom AS codigo_insumo, Mpacan, Mpadev, (Mpacan-Mpadev) AS saldo_insumo, Artcom AS nombre_insumo, Artgru, Artesm, {$wbasedato}_000207.id AS id_insumo, Mpatur, Artest
                                        FROM    {$wbasedato}_000207, {$wbasedato_movhos}_000026
                                        WHERE   Mpatur = '{$wturno_cirugia}'
                                                AND Mpaest = 'on'
                                                AND Mpacom = Artcod
                                                AND Mpaliq <> 'on'
                                                AND Mpalux <> 'on'
                                                AND (Mpacan - Mpadev) > 0
                                        ORDER BY Artesm";
                                $result_insumos = mysql_query($sql,$conex) OR die ($sql.' <br> '.mysql_error());
                                // $guardar = "arr_entidades_responsables: ".print_r($arr_entidades_responsables,true).PHP_EOL;
                                // seguimiento($guardar);

                                $countInsumoMercado = mysql_num_rows($result_insumos);

                                // Toda la sección de código que define los límites de cobro de insumos, clasificaciones de insumos si o no facturables se encapsulan en una nueva función para poder
                                // consultar las condiciones de insumos por cada entidad responsable, si hay cambio de responsable entonces las condiciones sobre los insumos también cambian según el siguiente responsable.
                                                        // intentar cargarlo con particular
                                foreach ($arr_entidades_responsables as $cod_emp_reps => $arr_info_emp)
                                {
                                    // VALIDACION PARA QUE NO AGREGE EL CONCEPTO DE MATERIALES O MEDICAMENTOS QUE NO MUEVEN INVENTARIOS PARA EMPRESAS QUE YA TIENEN SALDO CERO.
                                    if($arr_info_emp["simulacion_campos"]["saldo_disponible"] != '0')
                                    {
                                        $carga_mercado = true;
                                        $cod_emp = $cod_emp_reps;
                                        $tip_emp = $arr_info_emp["simulacion_campos"]["Emptem"];

                                        $arr_insumos_procedimiento_tmp = limiteInsumosFactNoFactPorEmpresa($conex, $wemp_pmla, $wbasedato, $tip_emp, $cod_emp, $wpolitraumatizado, $TB_BASE_LIQUIDACION, $arr_datos_liquidar, $result_insumos, $arr_insumos_procedimiento_tmp, $temporal_procedimientos_ordenados,
                                                                                                            $codigo_primer_procedimiento, $orden_conceptos_por_procedimiento, $wliq_soloInsumos, $arr_PARAMETROS_GENERALES, $TIP_POS, $arr_cod_material_medicamento, $arr_mercado_completo, $procedimiento_manual, $arr_procedimientos_liquidar, $arr_lista_conceptos);
                                        if($countInsumoMercado > 0)
                                        {
                                            mysql_data_seek($result_insumos, 0);
                                        }
                                    }
                                }
                                // $guardar = "arr_procedimientos_liquidar :".print_r($arr_procedimientos_liquidar,true).PHP_EOL;
                                // $guardar = "arr_lista_conceptos :".print_r($arr_lista_conceptos,true).PHP_EOL;
                                // seguimiento($guardar);
                            }
                            else { $carga_mercado = $mercado_agregado; } // Si ya se había cargado el mercado por ejemplo para los NO POS entonces se indica en carga_mercado que ya se hizo con valor en true.
                            // **************************************** CONSULTAR INSUMOS ************************************************************************************************

                            $html = '';
                            // Si no cargó mercado es porque los responsables ya no tienen saldo, entonces se carga el mercado como particular
                            if(!$carga_mercado)
                            {
                                //Generar alerta porque los resposables de cliame_205 ya no tienen saldo para pagar.
                                $data["mensaje"] = $msjNoResponsables;
                                $data["error"]   = 1;
                            }
                            else
                            {
                                // $wcod_empresa    = $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"];
                                // $wtarifa_empresa = $RESPONSABLE_VIRTUAL_PACIENTE["Ingtar"];
                                // $tipoEmpresa     = $RESPONSABLE_VIRTUAL_PACIENTE["tipoEmpre"];

                                $arr_insumos_procedimiento = $arr_insumos_procedimiento_tmp;
                                // Si el mercado se adiciona a la liquidación El valor es true, es útil cuando se debe liquidar procedimientos POS y NO POS,
                                // en esos casos el mercado se debe liquidar solo con los procedimientos NO POS
                                $mercado_agregado = true;
                                // $guardar = "arr_insumos_procedimiento_tmp: ".print_r($arr_insumos_procedimiento_tmp,true).PHP_EOL;
                                // seguimiento($guardar);

                                $arr_mercado_completo_temp = $arr_mercado_completo;

                                // $guardar = "arr_control_bilateral_concepto_extra :".print_r($arr_control_bilateral_concepto_extra,true).PHP_EOL;
                                // $guardar = "arr_procedimientos_liquidar :".print_r($arr_procedimientos_liquidar,true).PHP_EOL;
                                // $guardar = "arr_lista_conceptos :".print_r($arr_lista_conceptos,true).PHP_EOL;
                                // $guardar = "arr_insumos_procedimiento :".print_r($arr_insumos_procedimiento,true).PHP_EOL;
                                // $guardar = "arr_mercado_completo :".print_r($arr_mercado_completo,true).PHP_EOL;
                                // $guardar = print_r($orden_conceptos_por_procedimiento,true).PHP_EOL;
                                // seguimiento($guardar);

                                // Ordena los conceptos de cada procedimiento
                                foreach ($orden_conceptos_por_procedimiento as $cod_procedimiento => $arr_conceps)
                                {
                                    // Debe ser odenado según el mismo criterio que el array "$arr_lista_conceptos" para que te tenga el mismo orden que la simulación de la liquidación
                                    natcasesort($orden_conceptos_por_procedimiento[$cod_procedimiento]);
                                }

                                // natcasesort($arr_lista_conceptos);  // Ordena alfabéticamente los nombres de los conceptos

                                // Consultar el tipo de Cirugía Multiples
                                // si son varias cirugías entonces busca una configuración de cirugías multiples para determinar qué porcentajes se pagan.

                                $wbaseliquidacion = '';
                                $wbaseliquidacion_nombre = '';
                                $wbaseliquidacion_acto_quirurgico = '';
                                $cx_multiples_requiere_tiempos = "off"; // Para saber si se deben tener en cuenta los tiempos de uso equipos, cirugía, recuperación
                                                                        // solo le cobrará tiempos a la primer cirugía y a las demás no.
                                $wredondear_centena = 'false'; // Para saber si se debe redondear a la centena.

                                $limite_ayudantia_uvr = '';
                                $limite_ayudantia_grupo = '';
                                $arr_control_primera_cx_tiempos = array();  // es un array que se encarga de guardar el primer procedimiento liquidado, si aplican cirugías multiples entonces

                                // >>>> ES POSIBLE QUE SUS VALORES CAMBIEN CUANDO SE ESTÉ HACIENDO LA SIMULACIÓN, CUANDO HAY CAMBIO DE RESPONSABLE ENTONCES SE CONSULTAN LOS PORCENTAJES PARA ESE TIPO DE EMPRESA Y/O CODIGO DE EMPRESA
                                $arr_porcentajes_multiples = array();
                                $arr_baseLiquidacion = array("wbaseliquidacion" => "", "wbaseliquidacion_nombre" => "", "wbaseliquidacion_acto_quirurgico" => "", "cx_multiples_requiere_tiempos" => "", "wredondear_centena" => "", "limite_ayudantia_uvr" => "", "limite_ayudantia_grupo" => "");
                                // <<<<<

                                $id_cx_multiples = '';
                                global $arr_porcentajes_multiples, $arr_baseLiquidacion, $wpolitraumatizado, $CX_numero_vias, $CX_numero_especialidades, $codEmpParticular, $id_cx_multiples;

                                $arr_parametros_extra      = array();

                                // [updt-81] Cuando se consultaba el manual no se estaba enviando correctamente el código de la empresa $wcod_empresa en el manual para NO_POS
                                $wcod_empresa_Manual = $RESPONSABLE_VIRTUAL_PACIENTE["Ingcem"];
                                $tipoEmpresa_Manual  = $RESPONSABLE_VIRTUAL_PACIENTE["tipoEmpre"];

                                if($aplica_cirugias_multiples)
                                {
                                    $CX_numero_vias = '1';
                                    if($arr_datos_liquidar["wnumero_vias"] > 1)
                                    {
                                        $CX_numero_vias = '*';
                                    }

                                    $CX_numero_especialidades = '1';
                                    if(count($arr_especialidades_liq) > 1)
                                    {
                                        $CX_numero_especialidades = '*';
                                    }

                                    $tipo_porcentaje = ($es_paquete) ? 'pqte': 'actividad';
                                    $arr_porcentajes_multiples = crearArrayPorcentajesMultiples($conex, $wbasedato, $tipo_porcentaje, $tipoEmpresa_Manual, $wcod_empresa_Manual, $wpolitraumatizado, $CX_numero_vias, $CX_numero_especialidades, $TIP_POS, $arr_parametros_extra, $procedimiento_manual);
                                    $arr_baseLiquidacion = $arr_parametros_extra;

                                    $wbaseliquidacion                 = $arr_parametros_extra['wbaseliquidacion'];                // Estos parámetros aplican para el primer responsable
                                    $wbaseliquidacion_nombre          = $arr_parametros_extra['wbaseliquidacion_nombre'];         // Estos parámetros aplican para el primer responsable
                                    $wbaseliquidacion_acto_quirurgico = $arr_parametros_extra['wbaseliquidacion_acto_quirurgico'];// Estos parámetros aplican para el primer responsable
                                    $cx_multiples_requiere_tiempos    = $arr_parametros_extra['cx_multiples_requiere_tiempos'];   // Estos parámetros aplican para el primer responsable
                                    // $limite_ayudantia_uvr             = $arr_parametros_extra['limite_ayudantia_uvr'];
                                    // $limite_ayudantia_grupo           = $arr_parametros_extra['limite_ayudantia_grupo'];

                                    /*arr_porcentajes_multiples
                                        Array
                                        (
                                            [on] => Array
                                                (
                                                    [1] => Array
                                                        (
                                                            [0076] => 100
                                                            [0075] => 100
                                                            [0072] => 100
                                                            [0024] => 100


                                                    [2] => Array
                                                        (
                                                            [0024] => 75
                                                            [0626] => 75
                                                            [0076] => 75
                                                            [0075] => 75
                                                            [0072] => 75
                                                        )
                                                )
                                            [off] => Array
                                                (
                                                    [1] => Array
                                                        (
                                                            [0076] => 100
                                                            [0075] => 100
                                                            [0072] => 100
                                                            [0024] => 100
                                                            [0626] => 100
                                                        )
                                                    [*] => Array
                                                        (
                                                            [0072] => 100
                                                        )
                                                )

                                        )
                                    */
                                }
                                else
                                {
                                    // De aquí es importante los parámetros resultantes del array $arr_parametros_extra por ejemplo para saber el límite de cobro de ayudantía
                                    // para saber si es facturable o no
                                    $tipo_porcentaje = ($es_paquete) ? 'pqte': 'actividad';
                                    $arr_porcentajes_multiples = crearArrayPorcentajesMultiples($conex, $wbasedato, $tipo_porcentaje, $tipoEmpresa_Manual, $wcod_empresa_Manual, $wpolitraumatizado, "*", "*", $TIP_POS, $arr_parametros_extra, $procedimiento_manual);
                                    $arr_parametros_extra['wbaseliquidacion']                 = "";
                                    $arr_parametros_extra['wbaseliquidacion_nombre']          = "";
                                    $arr_parametros_extra['wbaseliquidacion_acto_quirurgico'] = "";
                                    $arr_parametros_extra['cx_multiples_requiere_tiempos']    = "";
                                    $arr_baseLiquidacion = $arr_parametros_extra;
                                }

                                $arr_proced_Manual_NoFact = array();
                                // Si se encontró algun manual entonces crear un array de posibles "Procedimientos relacionados no facturables"
                                if(!empty($id_cx_multiples))
                                {
                                    $arr_proced_Manual_NoFact = generarArrayRelacionesNoFacturables($conex, $wbasedato, $arr_baseLiquidacion['wbaseliquidacion']);
                                }

                                // $guardar = "arr_parametros_extra: ".print_r($arr_parametros_extra,true).PHP_EOL;
                                // $guardar = "arr_result: ".print_r($arr_result,true).PHP_EOL;
                                // $guardar = "arr_porcentajes_multiples: ".print_r($arr_porcentajes_multiples,true).PHP_EOL;
                                // seguimiento($guardar);
                                // $guardar = "arr_baseLiquidacion: ".print_r($arr_baseLiquidacion,true).PHP_EOL;
                                // seguimiento($guardar);

                                // $html = "";
                                // ántes se recorría "$arr_procedimientos_liquidar" normalmente, pero como se debe mostrar un orden de valores (p.e. de UVR)
                                // Entonces se corre el array ordenado y se lee el procedimiento correspondiente en "$arr_procedimientos_liquidar" para
                                // Recuperar el resto de información
                                // foreach ($arr_procedimientos_liquidar as $procedimiento_liquidar_cod => $arr_datos_procedimiento)

                                $arr_TOPES_ENTIDADES = consultarTopesResponsables($conex, $wemp_pmla, $wbasedato, $whistoria, $wing, $arr_ccos_cirugia);

                                $arr_CargosGrabadosResponsables = array();
                                $arr_CargosGrabadosResponsables_insumos = array();
                                global $arr_entidades_responsables, $arr_entidades_ORDEN_SIMULADO, $arr_TOPES_ENTIDADES,
                                       $arr_CargosGrabadosResponsables, $arr_CargosGrabadosResponsables_insumos;

                                // CONSULTAR LOS INSUMOS DE INVENTARIO QUE SE HAYA CONSUMIDO PARA CADA UNO DE LOS PROCEDIMIENTOS.
                                $arr_info_conceptos_inventario = consultaInfoConceptosInventarios($conex, $wbasedato, $wemp_pmla, $concepto_medicamentos_mueven_inv, $concepto_materiales_mueven_inv);

                                $concepto_no_facturar              = '';
                                $no_facturable_porcambio_manual    = '';
                                $especialid_primera_bilateral      = "";
                                $porcentajes_CX_bilaterales        = 'off';
                                $control_cx_mayor_esBilateral      = false;
                                $primera_cirugia_enLista           = '';
                                $arr_conceptos_maximo_aCobrar      = array();
                                $primer_cantidad_puntos_cambio_responsable = 0;
                                $cod_cambio_responsable            = "";
                                global $ctrl_primer_via_procedimiento, $ctrl_primer_especialidad_procedimiento;

                                $cx_queNoSeCobran = array(); // En este array se guarda la relación procedimiento concepto que no se cobra por ejemplo si hay un límite máximo de cobro de un concepto
                                                            // hasta un nivel máximo de cirugías, por ejemplo, solo se cobra hasta la primer cirugía mayor de de X concepto, todas las demas cirugias
                                                            // mayores en ese concepto se guardan en este array para tener el control que no se tienen que cobrar.
                                $cx_queSISeCobran = array();

                                $numero_cirugia                 = 0;
                                $esMultipleEspecialidadDifVia   = ((count($arr_procedimientos_orden[$TIP_POS]) > 1) && ($arr_datos_liquidar["wnumero_vias"] > 1)) ? true: false;

                                // $porcentajeRepetible            = "";
                                // $arrRepetiblePorEspecialidad    = array();
                                $arr_control_excepcionTarifaria = array(); // SI UN MEDICO TIENE EXCEPCIPON TARIFARIA ENTONCES SOLO SE PERMITE COBRAR Y MODIFICAR EL PRIMER CARGO DE CADA MÉDICO, LOS DEMÁS DE CADA MÉDICO SERÁN VALOR CERO Y NO MODIFICABLE
                                $arr_ContadorCxPorEspecialidad  = array(); // Cuenta las cirugías de cada especialidad, este array ayuda a repetir los porcentajes para el concepto de honorarios para cada especialidad.
                                $arr_cx_por_via                 = array(); // array de cirugías por vía, aplica para igual especialidad.

                                $arr_DATOS_PROGRAMA                                          = array();
                                $arr_DATOS_PROGRAMA["arr_procedimientos_orden"]              = $arr_procedimientos_orden;
                                $arr_DATOS_PROGRAMA["arr_ContadorCxPorEspecialidad"]         = $arr_ContadorCxPorEspecialidad;
                                $arr_DATOS_PROGRAMA["arr_cx_por_via"]                        = $arr_cx_por_via;
                                $arr_DATOS_PROGRAMA["arr_procedimientos_orden_liquidar"]     = $arr_procedimientos_orden_liquidar;
                                $arr_DATOS_PROGRAMA["arr_procedimientos_liquidar"]           = $arr_procedimientos_liquidar;
                                $arr_DATOS_PROGRAMA["primera_cirugia_enLista"]               = $primera_cirugia_enLista;
                                $arr_DATOS_PROGRAMA["control_cx_mayor_esBilateral"]          = $control_cx_mayor_esBilateral;
                                $arr_DATOS_PROGRAMA["arr_porcentajes_multiples"]             = $arr_porcentajes_multiples;
                                $arr_DATOS_PROGRAMA["esMultipleEspecialidadDifVia"]          = $esMultipleEspecialidadDifVia;
                                $arr_DATOS_PROGRAMA["numero_cirugia"]                        = $numero_cirugia;
                                $arr_DATOS_PROGRAMA["control_cx_mayor_esBilateral"]          = $control_cx_mayor_esBilateral;
                                $arr_DATOS_PROGRAMA["especialid_primera_bilateral"]          = $especialid_primera_bilateral;
                                $arr_DATOS_PROGRAMA["porcentajes_CX_bilaterales"]            = $porcentajes_CX_bilaterales;
                                $arr_DATOS_PROGRAMA["arr_especialidades_liq"]                = $arr_especialidades_liq;
                                $arr_DATOS_PROGRAMA["arr_conceptos_maximo_aCobrar"]          = $arr_conceptos_maximo_aCobrar;
                                $arr_DATOS_PROGRAMA["cx_queNoSeCobran"]                      = $cx_queNoSeCobran;
                                $arr_DATOS_PROGRAMA["cx_queSISeCobran"]                      = $cx_queSISeCobran;
                                $arr_DATOS_PROGRAMA["arr_procedimientos_relacionados"]       = $arr_procedimientos_relacionados;
                                $arr_DATOS_PROGRAMA["arr_proced_Manual_NoFact"]              = $arr_proced_Manual_NoFact;
                                $arr_DATOS_PROGRAMA["RESPONSABLE_VIRTUAL_PACIENTE"]          = $RESPONSABLE_VIRTUAL_PACIENTE;
                                $arr_DATOS_PROGRAMA["RESPONSABLE_VIRTUAL_PACIENTE_POS"]      = $RESPONSABLE_VIRTUAL_PACIENTE_POS;
                                $arr_DATOS_PROGRAMA["arr_lista_conceptos"]                   = $arr_lista_conceptos;
                                $arr_DATOS_PROGRAMA["concepto_no_facturar"]                  = $concepto_no_facturar;
                                $arr_DATOS_PROGRAMA["no_facturable_porcambio_manual"]        = $no_facturable_porcambio_manual;
                                $arr_DATOS_PROGRAMA["arr_baseLiquidacion"]                   = $arr_baseLiquidacion;
                                $arr_DATOS_PROGRAMA["es_paquete"]                            = $es_paquete;
                                $arr_DATOS_PROGRAMA["concepto_honorario_ayudantia"]          = $concepto_honorario_ayudantia;
                                $arr_DATOS_PROGRAMA["wcentro_costo"]                         = $wcentro_costo;
                                $arr_DATOS_PROGRAMA["wtipo_emp_valida_nopos"]                = $wtipo_emp_valida_nopos;
                                $arr_DATOS_PROGRAMA["arr_cod_material_medicamento"]          = $arr_cod_material_medicamento;
                                $arr_DATOS_PROGRAMA["id_concepto_uso_equipos"]               = $id_concepto_uso_equipos;
                                $arr_DATOS_PROGRAMA["arr_CargosGrabadosResponsables"]        = $arr_CargosGrabadosResponsables;
                                $arr_DATOS_PROGRAMA["wtiempo_minutos_cx"]                    = $wtiempo_minutos_cx;
                                $arr_DATOS_PROGRAMA["wtipo_anestesia_cx"]                    = $wtipo_anestesia_cx;
                                $arr_DATOS_PROGRAMA["concepto_recuperacion_erp"]             = $concepto_recuperacion_erp;
                                $arr_DATOS_PROGRAMA["wtiempo_uso_minutos"]                   = $wtiempo_uso_minutos;
                                $arr_DATOS_PROGRAMA["wtiempo_sala_recuperarcion"]            = $wtiempo_sala_recuperarcion;
                                $arr_DATOS_PROGRAMA["cx_multiples_requiere_tiempos"]         = $cx_multiples_requiere_tiempos;
                                $arr_DATOS_PROGRAMA["arr_control_primera_cx_tiempos"]        = $arr_control_primera_cx_tiempos;
                                $arr_DATOS_PROGRAMA["erp_liq_cx_inactivar_cuadro_turno"]     = $erp_liq_cx_inactivar_cuadro_turno;
                                $arr_DATOS_PROGRAMA["codParticipacionMedicoDisponible"]      = $codParticipacionMedicoDisponible;
                                $arr_DATOS_PROGRAMA["arr_entidades_responsables"]            = $arr_entidades_responsables;
                                $arr_DATOS_PROGRAMA["id_concepto_examenes"]                  = $id_concepto_examenes;
                                $arr_DATOS_PROGRAMA["wfecha_cargo"]                          = $wfecha_cargo;
                                $arr_DATOS_PROGRAMA["wtipo_ingreso"]                         = $wtipo_ingreso;
                                $arr_DATOS_PROGRAMA["wtipo_ingreso_nom"]                     = $wtipo_ingreso_nom;
                                $arr_DATOS_PROGRAMA["whora_cargo"]                           = $whora_cargo;
                                $arr_DATOS_PROGRAMA["arr_datos_liquidados"]                  = $arr_datos_liquidados;
                                $arr_DATOS_PROGRAMA["arr_tarifas_modifican_valor_erp"]       = $arr_tarifas_modifican_valor_erp;
                                $arr_DATOS_PROGRAMA["arr_control_excepcionTarifaria"]        = $arr_control_excepcionTarifaria;
                                $arr_DATOS_PROGRAMA["arr_conceptos_nombres"]                 = $arr_conceptos_nombres;
                                $arr_DATOS_PROGRAMA["wser"]                                  = $wser;
                                $arr_DATOS_PROGRAMA["whistoria"]                             = $whistoria;
                                $arr_DATOS_PROGRAMA["wing"]                                  = $wing;
                                $arr_DATOS_PROGRAMA["fecha_actual"]                          = $fecha_actual;
                                $arr_DATOS_PROGRAMA["hora_actual"]                           = $hora_actual;
                                $arr_DATOS_PROGRAMA["wredondear_centena"]                    = $wredondear_centena;
                                $arr_DATOS_PROGRAMA["nitEmpresa"]                            = $nitEmpresa;
                                $arr_DATOS_PROGRAMA["wno1"]                                  = $wno1;
                                $arr_DATOS_PROGRAMA["wno2"]                                  = $wno2;
                                $arr_DATOS_PROGRAMA["wap1"]                                  = $wap1;
                                $arr_DATOS_PROGRAMA["wap2"]                                  = $wap2;
                                $arr_DATOS_PROGRAMA["wdoc"]                                  = $wdoc;
                                $arr_DATOS_PROGRAMA["wfecing"]                               = $wfecing;
                                $arr_DATOS_PROGRAMA["wbod"]                                  = $wbod;
                                $arr_DATOS_PROGRAMA["cambioResponsablePorFechaFin"]          = $cambioResponsablePorFechaFin;
                                $arr_DATOS_PROGRAMA["TABLA_TEMP_106"]                        = $TABLA_TEMP_106;
                                $arr_DATOS_PROGRAMA["user_session"]                          = $user_session;
                                $arr_DATOS_PROGRAMA["conceptoRepetirPorcentajeMultiple"]     = $conceptoRepetirPorcentajeMultiple;
                                $arr_DATOS_PROGRAMA["arr_insumos_procedimiento"]             = $arr_insumos_procedimiento;
                                $arr_DATOS_PROGRAMA["codEmpParticular"]                      = $codEmpParticular;
                                $arr_DATOS_PROGRAMA["arr_PARAMETROS_GENERALES"]              = $arr_PARAMETROS_GENERALES;
                                $arr_DATOS_PROGRAMA["TIP_POS"]                               = $TIP_POS;
                                $arr_DATOS_PROGRAMA["arr_procedimientos_orden_liquidarPPNP"] = $arr_procedimientos_orden_liquidarPPNP;
                                $arr_DATOS_PROGRAMA["wnomemp_tal"]                           = $wnomemp_tal;
                                $arr_DATOS_PROGRAMA["tipoEmpresa"]                           = $tipoEmpresa;
                                $arr_DATOS_PROGRAMA["wbaseliquidacion"]                      = $wbaseliquidacion;
                                $arr_DATOS_PROGRAMA["arr_mercado_completo_temp"]             = $arr_mercado_completo_temp;
                                $arr_DATOS_PROGRAMA["concepto_materiales_mueven_inv"]        = $concepto_materiales_mueven_inv;
                                $arr_DATOS_PROGRAMA["arr_info_conceptos_inventario"]         = $arr_info_conceptos_inventario;
                                $arr_DATOS_PROGRAMA["concepto_medicamentos_mueven_inv"]      = $concepto_medicamentos_mueven_inv;
                                $arr_DATOS_PROGRAMA["wbasedato_movhos"]                      = $wbasedato_movhos;
                                $arr_DATOS_PROGRAMA["arr_cargos_sinTarifaModifValor"]        = $arr_cargos_sinTarifaModifValor;
                                $arr_DATOS_PROGRAMA["cargosSinTarifasConceptos"]             = $cargosSinTarifasConceptos;
                                $arr_DATOS_PROGRAMA["cargosSinTarifasInsumos"]               = $cargosSinTarifasInsumos;
                                $arr_DATOS_PROGRAMA["arr_cargos_req_autorizar"]              = $arr_cargos_req_autorizar;
                                $arr_DATOS_PROGRAMA["arr_requerir_autorizacion"]             = $arr_requerir_autorizacion;
                                $arr_DATOS_PROGRAMA["data"]                                  = $data;

                                // crearTemporalCargos($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106, $whistoria, $generar_temporal_1vez);

                                generarCargosLiquidacion($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106, $arr_DATOS_PROGRAMA);

                                // Variables pudieron haber cambiado de valor al interior de la función, entonces se actualizan en este ambiente externo a la función
                                foreach ($arr_DATOS_PROGRAMA as $key_gral => $value_gral)
                                {
                                    $$key_gral = $value_gral;
                                }

                                // Luego de generar todos los cargos en la tabla temporal, se procede a recorrer todos los array de cargos generados (tanto los que se va a ir a grabar en el proceso de
                                // grabación a unix, como los arrays que se usan para la parte visual de los cargos).
                                actualizarCargos($conex, $wemp_pmla, $wbasedato, $arr_PARAMETROS_GENERALES, $whistoria, $arr_CargosGrabadosResponsables_insumos, $arr_CargosGrabadosResponsables, $arr_CARGOS_PARA_GRABAR);

                                //            print_r($arr_procedimientos_orden);
                                // $guardar = "arr_procedimientos_orden_liquidar :".print_r($arr_procedimientos_orden_liquidar,true).PHP_EOL;
                                // $guardar = print_r($arr_TOPES_ENTIDADES,true).PHP_EOL;
                                // $guardar = "arr_CargosGrabadosResponsables_insumos :".print_r($arr_CargosGrabadosResponsables_insumos,true).PHP_EOL;
                                // $guardar = "arr_CargosGrabadosResponsables: ".print_r($arr_CargosGrabadosResponsables,true).PHP_EOL;
                                // $guardar = "arr_CARGOS_PARA_GRABAR: ".print_r($arr_CARGOS_PARA_GRABAR,true).PHP_EOL;
                                // $guardar = "cargosSinTarifasConceptos: ".print_r($cargosSinTarifasConceptos,true).PHP_EOL;
                                // seguimiento($guardar);

                                // eliminarTemporalCargos($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106);

                                // CONSULTAR LOS INSUMOS DE INVENTARIO QUE SE HAYA CONSUMIDO PARA CADA UNO DE LOS PROCEDIMIENTOS.
                                // print_r($arr_info_conceptos_inventario);
                                // print_r($arr_CargosGrabadosResponsables_insumos);

                                // print_r($arr_procedimientos_orden_liquidar);

                                $cont_politicas_medicamentos = 0;
                                $cont_politicas_materiales   = 0;
                                foreach ($arr_procedimientos_orden_liquidar as $codigo_procedimiento => $arr_info_procedimiento)
                                {
                                    if(!array_key_exists($codigo_procedimiento, $arr_html_insumos_por_procedimiento))
                                    {
                                        $arr_html_insumos_por_procedimiento[$codigo_procedimiento] = array("html_medicamento"=>"","html_material"=>"", "sumatoria_material"=>0, "sumatoria_medicamento"=>0);
                                    }

                                    $html_print_medicamentos = "";
                                    $html_print_materiales   = "";
                                    if(array_key_exists($codigo_procedimiento, $arr_CargosGrabadosResponsables_insumos))
                                    {
                                        if(!array_key_exists($codigo_procedimiento, $arr_html_insumos_por_procedimiento))
                                        {
                                            $arr_html_insumos_por_procedimiento[$codigo_procedimiento] = array("html_medicamento"=>"","html_material"=>"", "sumatoria_material"=>0, "sumatoria_medicamento"=>0);
                                        }

                                        $arr_insumos_mostrar = $arr_CargosGrabadosResponsables_insumos[$codigo_procedimiento];

                                        if(!array_key_exists($codigo_procedimiento, $arr_datos_liquidados))
                                        {
                                            $arr_datos_liquidados[$codigo_procedimiento] = array();
                                        }
                                        /*
                                        [datos_reales] => Array
                                        (
                                            [wcantidad] => 1
                                            [wprocedimiento] => 130777
                                            [wprocedimiento_nombre] => GASA TELA TEJIDA 5.0*5.0 MS
                                            [wconcepto] => 0626
                                            [wconcepto_nombre] => MATERIAL MEDICO
                                            [wtercero] =>
                                            [wtercero_nombre] =>
                                            [wespecialidad] =>
                                            [wespecialidad_nombre] =>
                                            [wporcentaje] => 0
                                            [wtipo_facturacion] =>
                                            [wvalor_final] => 0
                                            [wfacturable] =>
                                            [wgrabar] => on
                                            [wbaseliquidacion] => SOAT
                                            [wvalor] =>
                                            [wtipo_anestesia_cx] => 001
                                            [wtiempo_sala_recuperarcion] => 0
                                            [wtiempo_uso_minutos] => 0
                                            [wtiempo_minutos_cx] => 0
                                            [wexiste] =>
                                            [wserv] => H
                                            [mueve_inventario] => on
                                            [wes_medicamento] => off,
                                            [WTIENE_TARIFA] => off
                                        )
                                         */
                                        $css_cont = 0;
                                        $cantidad_insumos = 1;
                                        $html_insumos_medicamentos = "";
                                        $html_insumos_materiales = "";

                                        // Se eliminan las posiciones de conceptos relacionados a insumos para obligar a que sean adicionados de nuevo y queden al final del arreglo de conceptos del procedimiento actual
                                        if(array_key_exists($concepto_medicamentos_mueven_inv, $arr_datos_liquidados[$codigo_procedimiento])) { unset($arr_datos_liquidados[$codigo_procedimiento][$concepto_medicamentos_mueven_inv]); }
                                        if(array_key_exists($concepto_materiales_mueven_inv, $arr_datos_liquidados[$codigo_procedimiento])) { unset($arr_datos_liquidados[$codigo_procedimiento][$concepto_materiales_mueven_inv]); }
                                        // $guardar = print_r($arr_insumos_mostrar,true).PHP_EOL;
                                        // seguimiento($guardar);
                                        $cont_pint_insmo = 0;
                                        foreach ($arr_insumos_mostrar as $codigo_insumo => $arr_datos_insumo)
                                        {
                                            $datos_reales     = $arr_datos_insumo["datos_reales"];
                                            $arr_datos_simulados  = $arr_datos_insumo["simulacion"]; //[updt-69] un insumo puede tener más de un cargo asociado, ya no se debe esperar un solo array sino varios de un mismo insumo.
                                            $concepto_insumos = $datos_reales["wconcepto"];
                                            $suma_simulada_total_responsables  = 0;
                                            $suma_simulada_total_TenerEnCuenta = 0;

                                            $campos_localizacion_js_insumo = ' wconsec="'.$cont_pint_insmo.'" wprocedimiento="'.$codigo_procedimiento.'" wconcepto ="'.$concepto_insumos.'" wequip_examen ="'.$codigo_insumo.'" ';

                                            if($datos_reales["WTIENE_TARIFA"] == 'on')
                                            {
                                                if(!array_key_exists($concepto_insumos, $arr_datos_liquidados[$codigo_procedimiento]))
                                                {
                                                    $arr_datos_liquidados[$codigo_procedimiento][$concepto_insumos] = array();
                                                }

                                                if(!array_key_exists($codigo_insumo, $arr_datos_liquidados[$codigo_procedimiento][$concepto_insumos]))
                                                {
                                                    $arr_datos_liquidados[$codigo_procedimiento][$concepto_insumos][$codigo_insumo] = array();
                                                }

                                                $arr_datos_liquidados[$codigo_procedimiento][$concepto_insumos][$codigo_insumo] =
                                                        array(  "wconcepto_nombre"           => $datos_reales["wconcepto_nombre"],
                                                                "id_insumo"                  => $datos_reales["id_insumo"],
                                                                "wcantidad"                  => $datos_reales["wcantidad"],
                                                                "wprocedimiento"             => $datos_reales["wprocedimiento"],
                                                                "wprocedimiento_nombre"      => $datos_reales["wprocedimiento_nombre"],
                                                                "wconcepto"                  => $concepto_insumos,
                                                                "wtercero"                   => "",
                                                                "wdisponibilidad"            => "",
                                                                "wcuadroturno"               => "",
                                                                "grupoMedico"                => "",
                                                                "wtercero_nombre"            => "",
                                                                "wespecialidad"              => "",
                                                                "cobraHonorarios"            => "on",
                                                                "wespecialidad_nombre"       => "",
                                                                "wporcentaje"                => $datos_reales["wporcentaje"],
                                                                "wvalor"                     => $datos_reales["wvalor"],
                                                                "wvalor_final"               => $datos_reales["wvalor_final"],
                                                                "wfacturable"                => $datos_reales["wfacturable"],
                                                                "wgrabar"                    => $datos_reales["wgrabar"],
                                                                "wbaseliquidacion"           => $datos_reales["wbaseliquidacion"],
                                                                "wtipo_facturacion"          => $datos_reales["wtipo_facturacion"],
                                                                "wturno_cirugia"             => $datos_reales["wturno_cirugia"],
                                                                "wtipo_anestesia_cx"         => $datos_reales["wtipo_anestesia_cx"],
                                                                "wtiempo_sala_recuperarcion" => $datos_reales["wtiempo_sala_recuperarcion"],
                                                                "wtiempo_uso_minutos"        => $datos_reales["wtiempo_uso_minutos"],
                                                                "wtiempo_minutos_cx"         => $datos_reales["wtiempo_minutos_cx"],
                                                                "wexiste"                    => $datos_reales["wexiste"],
                                                                "wserv"                      => $datos_reales['wserv'],
                                                                "mueve_inventario"           => $datos_reales['mueve_inventario']);
                                                // $arr_CARGOS_PARA_GRABAR[] = $arr_datos_liquidados[$codigo_procedimiento][$concepto_insumos][$codigo_insumo];
                                            }

                                            $html_responsables_insumos = "";
                                            $suma_excedentes           = 0;
                                            $valor_excedente_total     = 0;
                                            $suma_no_fact              = 0;
                                            $suma_cant_nofact          = 0;
                                            $cantidad_insumo           = 0; // [updt-73] Suma la cantidad de un mismo insumo que fue agregado como anexo desde políticas.
                                            $html_politicas_aplicadas  = array();
                                            foreach ($arr_entidades_responsables as $codigo_responsable => $info_responsable)
                                            {
                                                // if(array_key_exists($codigo_responsable, $datos_simulados) && array_key_exists("valor_final_original", $datos_simulados[$codigo_responsable]))
                                                // {
                                                //     $valor_final = $datos_simulados[$codigo_responsable]["valor_final_original"]*1; // Todos los reponsables simulados generados tienen el mismo valor_final_origial por eso no hay problema en tomar el valor de cualquiera de ellos
                                                // }

                                                // if(array_key_exists($codigo_responsable, $datos_simulados) && array_key_exists("wvalorTarifaBase", $datos_simulados[$codigo_responsable]))
                                                // {
                                                //     $valor_tarifa = $datos_simulados[$codigo_responsable]["wvalorTarifaBase"]*1; // Todos los reponsables simulados generados tienen el mismo valor_final_origial por eso no hay problema en tomar el valor de cualquiera de ellos
                                                // }

                                                // if($codigo_responsable != $codEmpPartic)
                                                {
                                                    $valor_cobrar       = 0;
                                                    $valor_cobrar_total = 0;
                                                    $total_val_insumo_x_responsabe = 0;
                                                    if(array_key_exists($codigo_responsable, $arr_datos_simulados))
                                                    {
                                                        foreach ($arr_datos_simulados[$codigo_responsable] as $key => $datos_simulados)
                                                        {
                                                            // if($datos_simulados[$codigo_responsable]["wfacturable"] == 'S')
                                                            {
                                                                // $porcentaje_cxMult = $datos_simulados[$codigo_responsable]["porcentaje_cxMult_CARGO"]*1; // Todos los reponsables simulados generados tienen el mismo porcentaje_cxMult por eso no hay problema en tomar el valor de cualquiera de ellos
                                                                $valor_cobrar        = $datos_simulados["wvaltarReco"]*1;
                                                                $suma_excedentes     += $datos_simulados["wvaltarExce"]*1;
                                                                $valor_excedente     = ($datos_simulados["wvaltarExce"]*1);
                                                                $suma_total_simulada += $valor_cobrar+$valor_excedente;
                                                                $cantidad_insumo     += $datos_simulados["wcantidad"]*1; // [updt-73]
                                                                if(isset($datos_simulados["politicaAplico"]) && $datos_simulados["politicaAplico"] != '')
                                                                {
                                                                    $html_politicas_aplicadas[] = "Política: ".str_replace("<br>","",$datos_simulados["politicaAplico"]);
                                                                }

                                                                $valor_cobrar_total = $valor_cobrar;
                                                                $valor_excedente_total = $valor_excedente;
                                                                if($datos_simulados["wfacturable"] == 'N')
                                                                {
                                                                    $valor_cobrar_total = 0;
                                                                    $valor_excedente_total = 0;
                                                                    if(count($arr_datos_simulados[$codigo_responsable]) > 1)
                                                                    {
                                                                        // Para que solo muestre el mensaje de saldo no facturable cuando el mismo insumo
                                                                        // esta compuesto por dos cargos, porque puede haber uno facturable y otro no facturabla
                                                                        // en pantalla de va a ver facturable pero realmente debe indicar que parte de esos insumos son no facturables.
                                                                        $suma_no_fact += $valor_cobrar;
                                                                        $suma_cant_nofact += $datos_simulados["wcantidad"]*1;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    $total_val_insumo_x_responsabe += $valor_cobrar;
                                                                }

                                                                $suma_simulada_total_TenerEnCuenta += $valor_cobrar_total+$valor_excedente_total;
                                                                $suma_simulada_total_responsables  += $valor_cobrar+$valor_excedente;
                                                            }
                                                        }
                                                    }

                                                    $html_responsables_insumos .= number_format($total_val_insumo_x_responsabe,CANTIDAD_DECIMALES).": (".$info_responsable["simulacion_campos"]['Resnit'].')-'.utf8_encode($info_responsable["simulacion_campos"]['Empnom'])."<br>";
                                                    // $html_responsables .= '<td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >'.utf8_encode($info_responsable["simulacion_campos"]['Empnom']).'</td>';
                                                    // $html_valores_resp .= '<td class="" style="text-align:center;font-size:9pt;font-weight:bold;" >'.number_format($valor_cobrar,2).'</td>';
                                                }
                                            }
                                            // $html_responsables .= '<td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Excedente</td>';
                                            // $html_valores_resp .= '<td class="" style="text-align:center;font-size:9pt;font-weight:bold;" >'.number_format($suma_excedentes,2).'</td>';
                                            $html_responsables_insumos .= number_format($valor_excedente_total,CANTIDAD_DECIMALES).": Excedente";

                                            $info_tarifa = "";
                                            $no_tiene_tarifa = "";
                                            if($datos_reales['WTIENE_TARIFA'] == "off")
                                            {
                                                $no_tiene_tarifa = "** NO TIENE TARIFA ** <br>--<br>";
                                                $info_tarifa = '<img style="cursor:pointer" id="" width="14" height="14" src="../../images/medical/sgc/Warning-32.png" />';
                                            }
                                            else
                                            {
                                                // print_r($datos_simulados);
                                                // $info_tarifa = number_format(($datos_reales["wvalor_final"]*1), 2);
                                                // $info_tarifa = $info_tarifa*($datos_reales["wcantidad"]*1);
                                                // $valor_total_insumos += $info_tarifa;
                                                $saldo_nofact = ($suma_no_fact > 0) ? "(No fact: ($suma_cant_nofact) ".number_format($suma_no_fact,CANTIDAD_DECIMALES).") " : ""; //[updt-69]
                                                $info_tarifa = $saldo_nofact.number_format($suma_simulada_total_responsables,CANTIDAD_DECIMALES);
                                                if(array_key_exists($codigo_procedimiento, $arr_html_insumos_por_procedimiento))
                                                {
                                                    if($datos_reales["wes_medicamento"]=='on')
                                                    {
                                                        $arr_html_insumos_por_procedimiento[$codigo_procedimiento]["sumatoria_medicamento"] += $suma_simulada_total_TenerEnCuenta*1;
                                                    }
                                                    else
                                                    {
                                                        $arr_html_insumos_por_procedimiento[$codigo_procedimiento]["sumatoria_material"] += $suma_simulada_total_TenerEnCuenta*1;
                                                    }
                                                }
                                            }

                                            if(($datos_reales["wcantidad"]*1) > 0 )
                                            {
                                                $farturable_insumo = ($datos_reales['wfacturable'] == 'S' && empty($no_tiene_tarifa)) ? 'Si':'No';

                                                if($es_paquete)
                                                {
                                                    $select_fac_insumo = (empty($no_tiene_tarifa)) ? '': 'disabled="disabled"';
                                                    $dif_fila_insumo = $codigo_procedimiento.'_'.$codigo_procedimiento.'_'.$codigo_insumo;

                                                    // Esto indica que no todos los insumos de ese mismo código son NO facturables y por lo menos uno de ellos debe ser Si facturable
                                                    // solo por ese caso entonces se muestrael select como SI facturable.
                                                    $options_select_pqt_insumo = '  <option value="S" '.(($datos_reales['wfacturable'] == 'S') ? 'selected="selected"': "").'>Si</option>
                                                                                    <option value="N" '.(($datos_reales['wfacturable'] == 'N') ? 'selected="selected"': "").'>No</option>';
                                                    /*if($suma_cant_nofact < $cantidad_insumo)
                                                    {
                                                        $options_select_pqt_insumo = '  <option value="S" selected="selected">Si</option>
                                                                                        <option value="N" >No</option>';
                                                    }*/
                                                    $farturable_insumo = '  <select id="wfacturable_'.$dif_fila_insumo.'" name="wfacturable_'.$dif_fila_insumo.'" etiqueta="wfacturable" class="modificaLiquidadoSELECT bloquear_todo CLASS_CHECK_ALL" '.$select_fac_insumo.' '.$campos_localizacion_js_insumo.' style="border:0; padding:0;">
                                                                                '.$options_select_pqt_insumo.'
                                                                            </select>';
                                                }

                                                $html_politicas_aplicadas_img = (count($html_politicas_aplicadas) > 0) ? ' <img src="../../images/medical/sgc/Mensaje_alerta.png" alt="Restricciones" width="12" height="12" class="tooltip" title="'.implode("<br>",$html_politicas_aplicadas).'" />': '';
                                                if($datos_reales["wes_medicamento"]=='on')
                                                {
                                                    $cont_politicas_medicamentos = $cont_politicas_medicamentos + count($html_politicas_aplicadas);
                                                    $css = ($css_cont % 2 == 0) ? "fila1": "fila2";
                                                    $farturable_insumo = str_replace("CLASS_CHECK_ALL", "check_all_insumos_medicamentos_".$codigo_procedimiento, $farturable_insumo);
                                                    $html_insumos_medicamentos .= '  <tr class="'.$css.'" onmouseover="trOver(this);" onmouseout="trOut(this);" >
                                                                            <td style="font-size:7pt; text-align:left;" >'.$codigo_insumo."-".utf8_encode($datos_reales["wprocedimiento_nombre"]).'</td>
                                                                            <td style="font-size:7pt; text-align:right;" >'.$cantidad_insumo.'</td>
                                                                            <td style="font-size:7pt;" >'.$farturable_insumo.$html_politicas_aplicadas_img.'</td>
                                                                            <td style="font-weight:bold; text-align:right; font-size:7pt; " class="tooltip" title="'.$no_tiene_tarifa.$html_responsables_insumos.'" >'.$info_tarifa.'</td>
                                                                        </tr>';
                                                    $css_cont++;
                                                    $cantidad_insumos++;
                                                }
                                                else
                                                {
                                                    $cont_politicas_materiales = $cont_politicas_materiales + count($html_politicas_aplicadas);
                                                    $css = ($css_cont % 2 == 0) ? "fila1": "fila2";
                                                    $farturable_insumo = str_replace("CLASS_CHECK_ALL", "check_all_insumos_materiales_".$codigo_procedimiento, $farturable_insumo);
                                                    $html_insumos_materiales .= '  <tr class="'.$css.'" onmouseover="trOver(this);" onmouseout="trOut(this);" >
                                                                            <td style="font-size:7pt; text-align:left;" >'.$codigo_insumo."-".utf8_encode($datos_reales["wprocedimiento_nombre"]).'</td>
                                                                            <td style="font-size:7pt; text-align:right;" >'.$cantidad_insumo.'</td>
                                                                            <td style="font-size:7pt;" >'.$farturable_insumo.$html_politicas_aplicadas_img.'</td>
                                                                            <td style="font-weight:bold; text-align:right; font-size:7pt; " class="tooltip" title="'.$no_tiene_tarifa.$html_responsables_insumos.'" >'.$info_tarifa.'</td>
                                                                        </tr>';
                                                    $css_cont++;
                                                    $cantidad_insumos++;
                                                }
                                            }
                                            $cont_pint_insmo++;
                                        }
                                        $img_tlp = '<img border=\'0\' width=\'10\' height=\'10\' style=\'display:;\' src=\'../../images/medical/root/info.png\' > '.utf8_encode($arr_info_procedimiento['nombre']);
                                        // $css_rowspan = ($cont_rowspan % 2 == 0) ? "fila1": "fila2";
                                        $html_print_medicamentos .= $html_insumos_medicamentos;
                                        $html_print_materiales .= $html_insumos_materiales;
                                        // $cont_rowspan++;
                                    }

                                    $arr_html_insumos_por_procedimiento[$codigo_procedimiento]["html_medicamento"] = "";
                                    $arr_html_insumos_por_procedimiento[$codigo_procedimiento]["html_material"] = "";
                                    $campos_localizacion_js_insumo_chk = ' wconsec="" wprocedimiento="'.$codigo_procedimiento.'" wconcepto ="" wequip_examen ="" '; // El concepto esta en cada uno de los selectes de facturable y no facturable de cada insumo para indicar si es medicamento o material

                                    if(!empty($html_print_medicamentos))
                                    {
                                        $check_facturables_todos = '';
                                        if($es_paquete)
                                        {
                                            $check_facturables_todos = '<input type="checkbox" id="check_all_insumos_medicamentos_'.$codigo_procedimiento.'" name="check_all_insumos_medicamentos_'.$codigo_procedimiento.'" wseleccion="check_all_insumos_medicamentos_'.$codigo_procedimiento.'" class="check_all_insumos modificaLiquidadoCHECKBOX bloquear_todo" etiqueta="wlista_eq_ex_insumo" '.$campos_localizacion_js_insumo_chk.' >';
                                        }
                                        $arr_html_insumos_por_procedimiento[$codigo_procedimiento]["html_medicamento"] = '<table style="width:100%;">
                                                                                                        <tr class="encabezadoTabla" >
                                                                                                            <td>Nombre</td>
                                                                                                            <td>Cantidad</td>
                                                                                                            <td>
                                                                                                                Facturable
                                                                                                                '.$check_facturables_todos.'
                                                                                                            </td>
                                                                                                            <td>Valor</td>
                                                                                                        </tr>
                                                                                                        '.$html_print_medicamentos.'
                                                                                                        <!-- <tr>
                                                                                                            <td>&nbsp;</td>
                                                                                                            <td>&nbsp;</td>
                                                                                                            <td>&nbsp;</td>
                                                                                                            <td style="text-align:right;" >Subtotal</td>
                                                                                                            <td class="encabezadoTabla" style="text-align:right;" >'.number_format($arr_html_insumos_por_procedimiento[$codigo_procedimiento]["sumatoria_medicamento"],CANTIDAD_DECIMALES).'</td>
                                                                                                        </tr> -->
                                                                                                    </table>';
                                    }

                                    if(!empty($html_print_materiales))
                                    {
                                        $check_facturables_todos = '';
                                        if($es_paquete)
                                        {
                                            $check_facturables_todos = '<input type="checkbox" id="check_all_insumos_materiales_'.$codigo_procedimiento.'" name="check_all_insumos_materiales_'.$codigo_procedimiento.'" wseleccion="check_all_insumos_materiales_'.$codigo_procedimiento.'" class="check_all_insumos modificaLiquidadoCHECKBOX bloquear_todo" etiqueta="wlista_eq_ex_insumo" '.$campos_localizacion_js_insumo_chk.' >';
                                        }
                                        $arr_html_insumos_por_procedimiento[$codigo_procedimiento]["html_material"] = '<table style="width:100%;">
                                                                                                        <tr class="encabezadoTabla" >
                                                                                                            <td>Nombre</td>
                                                                                                            <td>Cantidad</td>
                                                                                                            <td>
                                                                                                                Facturable
                                                                                                                '.$check_facturables_todos.'
                                                                                                            </td>
                                                                                                            <td>Valor</td>
                                                                                                        </tr>
                                                                                                        '.$html_print_materiales.'
                                                                                                        <!-- <tr>
                                                                                                            <td>&nbsp;</td>
                                                                                                            <td>&nbsp;</td>
                                                                                                            <td>&nbsp;</td>
                                                                                                            <td style="text-align:right;" >Subtotal</td>
                                                                                                            <td class="encabezadoTabla" style="text-align:right;" >'.number_format($arr_html_insumos_por_procedimiento[$codigo_procedimiento]["sumatoria_material"],CANTIDAD_DECIMALES).'</td>
                                                                                                        </tr> -->
                                                                                                    </table>';
                                    }
                                }

                                $div_caja_flotante_insumos = "";

                                $tds_encabezado = '
                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >'.TERCERO_LABEL.'</td>
                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Especialidad</td>
                                        <!-- <td class="encabezadoTabla" >Modalidad</td> -->
                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >%Liq.</td>
                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Valor</td>
                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Total</td>
                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Facturable</td>
                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Grabar</td>';
                                $arr_lista_conceptos_auxiliar = array();
                                $arr_lista_conceptos_auxiliar = $arr_lista_conceptos;
                                if(count($arr_lista_conceptos) == 0) // Cuando no se va liquidar ni un concepto ni siquiera el concepto de materiales y medicamentos cuando no supera limites, y cuando se van a cobrar solo insumos
                                {
                                    $arr_lista_conceptos['INSUMOS'] = "Liquidación solo insumos";
                                }


                                // Genera el html para pintar los datos de cada td en la tabla de la liquidación, se guardar en un array por cada concepto
                                // a ese array despues se le hace un implode para unir todos los tds
                                foreach ($arr_lista_conceptos as $codigo_concepto => $nombre_concepto)
                                {
                                    $contador_spn_td = 0;
                                    foreach ($arr_procedimientos_orden[$TIP_POS] as $wcodigo_especialidad_orden => $arr_procedimientos_orden_por_especialidad)
                                    {
                                        $arr_procedimientos_bilaterales = array();
                                        $arr_procedimientos_NObilaterales = array();
                                        foreach ($arr_procedimientos_orden_por_especialidad as $procedimiento_liquidar_cod => $num_puntos)
                                        {
                                            if(!array_key_exists($procedimiento_liquidar_cod, $fila_html_TIP_POS))
                                            {
                                                $fila_html_TIP_POS[$procedimiento_liquidar_cod] = array();
                                            }

                                            if(!array_key_exists($codigo_concepto, $fila_html_TIP_POS[$procedimiento_liquidar_cod]))
                                            {
                                                $fila_html_TIP_POS[$procedimiento_liquidar_cod][$codigo_concepto] = array();
                                            }

                                            if(!array_key_exists($procedimiento_liquidar_cod, $html_tds_TOTALES))
                                            {
                                                $html_tds_TOTALES[$procedimiento_liquidar_cod] = 0;
                                            }

                                            $colspan = 7;
                                            $css_span_td = ($contador_spn_td % 2 == 0) ? 'fila1': 'fila2';

                                            $arr_datos_procedimiento = $arr_procedimientos_liquidar[$procedimiento_liquidar_cod];

                                            // incluye en array de liquidados un procedimiento a liquidar
                                            if(!array_key_exists($procedimiento_liquidar_cod, $arr_datos_liquidados))
                                            {
                                                $arr_datos_liquidados[$procedimiento_liquidar_cod] = array();
                                            }

                                            $codigo_procedimiento = $arr_datos_procedimiento['procedimiento_dif'];
                                            $worgano = $arr_datos_procedimiento['worgano'];
                                            $codigo_procedimiento_consult = arreglar_procedimientos_bilaterales($codigo_procedimiento);

                                            // Si no es paquete entonces se pueden buscar los datos específicos para un procedimiento
                                            // Si es paquete vasta con especificar que la tarifa es PAQUETE.
                                            if(!$es_paquete)
                                            {
                                                // $sql = "SELECT  proc.Procod AS procedimiento_cod,  proc.Pronom AS procedimiento_nom, proc.Protfa AS procedimiento_tarifa, proc.Progqx, proc.Propun as procedimiento_puntos
                                                //         FROM    {$wbasedato}_000103 AS proc
                                                //         WHERE   proc.Procod = '{$codigo_procedimiento_consult}'
                                                //                 AND proc.Proest = 'on'";
                                                // $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                                                // $rowPro = mysql_fetch_array($result);
                                                $arr_mod_procedimiento = modalidadPuntosProcedimiento($conex, $wbasedato, $codigo_procedimiento_consult, $arr_primero_segundo_responsable["primer_responsable"]["codigo"], $arr_primero_segundo_responsable["primer_responsable"]["tipoEmpresa"], $wcentro_costo, $wtipo_emp_valida_nopos, $worgano);

                                                $modalidad_facturacion = $arr_mod_procedimiento['tipo_facturacion'];
                                                if($modalidad_facturacion == 'UVR')
                                                {
                                                    $wnumero_puntos = $arr_mod_procedimiento['wnumero_uvrs']*1;
                                                }
                                                elseif($modalidad_facturacion == 'GQX')
                                                {
                                                    // Consulta el valor del grupo
                                                    $valor_grupo = $arr_mod_procedimiento['valor_grupo'];
                                                    // $wnumero_puntos = $valor_grupo*1;
                                                }

                                                $rowPro = array("procedimiento_tarifa"=>$modalidad_facturacion);
                                            }
                                            else
                                            {
                                                $rowPro = array("procedimiento_tarifa"=>"PAQUETE");
                                            }

                                            // // Esta sección de código es para intentar mantener el valor digitado original de los conceptos que permiten escribir valor
                                            $valorOriginalDigitado = '';
											// echo "<pre>";
											// print_r($arr_datos_liquidados);
                                            // echo "</pre>";
											
											if(array_key_exists($codigo_procedimiento, $arr_datos_liquidados)
                                                && array_key_exists($codigo_concepto, $arr_datos_liquidados[$codigo_procedimiento]))
                                            {
                                                if(array_key_exists("wvalor_digitado", $arr_datos_liquidados[$codigo_procedimiento][$codigo_concepto]))
                                                {
                                                    $valorOriginalDigitado = $arr_datos_liquidados[$codigo_procedimiento][$codigo_concepto]['wvalor_digitado'];
                                                }
                                            }

                                            $arr_especialistas_proced = $arr_datos_procedimiento["especialistas"];
                                            // Columna donde va el nombre del procedimiento

                                            $mostrar_puntos = 0;
                                            if(!array_key_exists($procedimiento_liquidar_cod, $arr_encabezados_proced['colspan_nombre']))
                                            {
                                                $mostrar_puntos = $arr_datos_procedimiento['wnumero_puntos'];
                                                if($arr_datos_procedimiento["modalidad_facturacion"] == "GQX")
                                                {
                                                    $mostrar_puntos = $arr_datos_procedimiento["wgrupo_gqx"]; //.'('.$mostrar_puntos.')'
                                                }

                                                // if($arr_datos_procedimiento["modalidad_facturacion"] == "CODIGO")
                                                // {
                                                //     if(!array_key_exists($codigo_procedimiento, $conteoProcedimientosPorCODIGO))
                                                //     {
                                                //         $conteoProcedimientosPorCODIGO[$codigo_procedimiento] = $codigo_procedimiento;
                                                //         $mostrar_puntos = count($conteoProcedimientosPorCODIGO);
                                                //     }
                                                // }

                                                $toolTip_bilat = "";
                                                if(!empty($arr_datos_procedimiento['wposicion_organo_nom']))
                                                {
                                                    $toolTip_bilat = "[posición organo: ".$arr_datos_procedimiento['wposicion_organo_nom']."]";
                                                }

                                                $html_insumos              = "NO HAY MEDICAMENTOS PARA ESTE PROCEDIMIENTO";
                                                $html_materiales           = "NO HAY MATERIALES PARA ESTE PROCEDIMIENTO";
                                                $suma_subtotal_medicamento = number_format(0,CANTIDAD_DECIMALES);
                                                $suma_subtotal_material    = number_format(0,CANTIDAD_DECIMALES);
                                                if(array_key_exists($codigo_procedimiento, $arr_html_insumos_por_procedimiento) && !empty($arr_html_insumos_por_procedimiento[$codigo_procedimiento]["html_medicamento"]))
                                                {
                                                    $html_insumos              = $arr_html_insumos_por_procedimiento[$codigo_procedimiento]["html_medicamento"];
                                                    $suma_subtotal_medicamento = number_format($arr_html_insumos_por_procedimiento[$codigo_procedimiento]["sumatoria_medicamento"],CANTIDAD_DECIMALES);
                                                }

                                                if(array_key_exists($codigo_procedimiento, $arr_html_insumos_por_procedimiento) && !empty($arr_html_insumos_por_procedimiento[$codigo_procedimiento]["html_material"]))
                                                {
                                                    $html_materiales        = $arr_html_insumos_por_procedimiento[$codigo_procedimiento]["html_material"];
                                                    $suma_subtotal_material = number_format($arr_html_insumos_por_procedimiento[$codigo_procedimiento]["sumatoria_material"],CANTIDAD_DECIMALES);
                                                }

                                                // echo $procedimiento_liquidar_cod.'|';
                                                $desc_PPNP = '';
                                                $tipo_PPNP = descripcionProcedimiento($TIP_POS);
                                                if($tipo_PPNP != '')
                                                {
                                                    $color_ppnp = (tipoPOS_procedimiento($TIP_POS)) ? 'green': 'orange';
                                                    $desc_PPNP = '<span style="color:'.$color_ppnp.';">'.$tipo_PPNP.'</span>';
                                                }

                                                $img_politicas_med           = ($cont_politicas_medicamentos > 0) ? '<div onclick="mostrarOcultarInsumos(\'ver_insumos\');" class="tooltip" title="Medicamentos con política" style="background-image:url(../../images/medical/sgc/no_conforme.png); background-size: 15px 15px; background-repeat: no-repeat; background-position:left top;display:inline-block;text-align: center;width: 15px;cursor:pointer;font-size:9pt;">'.$cont_politicas_medicamentos.'</div> | ': '';
                                                $img_politicas_mat           = ($cont_politicas_materiales > 0) ? '<div onclick="mostrarOcultarInsumos(\'ver_materiales\');" class="tooltip" title="Materiales con política" style="background-image:url(../../images/medical/sgc/no_conforme.png); background-size: 15px 15px; background-repeat: no-repeat; background-position:left top;display:inline-block;text-align: center;width: 15px;cursor:pointer;font-size:9pt;">'.$cont_politicas_materiales.'</div> | ': '';
                                                $cont_politicas_medicamentos = 0;
                                                $cont_politicas_materiales   = 0;

                                                $arr_encabezados_proced['colspan_nombre'][$procedimiento_liquidar_cod] = '<td colspan="'.$colspan.'" class="'.$css_span_td.' tooltip" title="'.$toolTip_bilat.'" style="text-align:left;font-size:10pt;font-weight:bold;" >[Manual:'.print_r($wbaseliquidacion_nombre, true).'][Plantilla:'.$plantilla_codigo.']['.$rowPro['procedimiento_tarifa'].':'.$mostrar_puntos.'] [Vía : '.$arr_datos_procedimiento['wvia'].'] Procedimiento '.$desc_PPNP.': '.$arr_datos_procedimiento['nombre'].'</td>';
                                                $arr_encabezados_proced['columnas_insumos'][$procedimiento_liquidar_cod] = '<td colspan="'.$colspan.'" class="'.$css_span_td.'" style="text-align:center;font-size:10pt;font-weight:bold;" valign="top" ><div class="ver_insumos" style="display:none;" >'.$html_insumos.'</div><div align="right" style="float: right; width:100%;text-align:right;font-weight:bold;font-size:10pt;">'.$img_politicas_med.'Medicamentos Subtotal facturable: <div class="encabezadoTabla" style="float: right; width:100px;display:inline;">'.$suma_subtotal_medicamento.'</div></div></td>';
                                                $arr_encabezados_proced['columnas_materiales'][$procedimiento_liquidar_cod] = '<td colspan="'.$colspan.'" class="'.$css_span_td.'" style="text-align:center;font-size:10pt;font-weight:bold;" valign="top" ><div class="ver_materiales" style="display:none;" >'.$html_materiales.'</div><div align="right" style="float: right; width:100%;text-align:right;font-weight:bold;font-size:10pt;">'.$img_politicas_mat.'Materiales Subtotal facturable: <div class="encabezadoTabla" style="float: right; width:100px;display:inline;">'.$suma_subtotal_material.'</div></div></td>';
                                                $tds_encabezado = str_replace("CSS_REPLACE", $css_span_td, $tds_encabezado);
                                                $arr_encabezados_proced['columnas_valores'][$procedimiento_liquidar_cod] = $tds_encabezado;
                                            }


                                            $sbtotal = 0;
                                            $css_count = 0;
                                            // foreach ($arr_datos_procedimiento['configuracion_liquidar'] as $concepto_cod_ppal => $arr_info_conf)
                                            if(array_key_exists($codigo_concepto, $arr_datos_procedimiento['configuracion_liquidar']))
                                            {
                                                $arr_info_conf = $arr_datos_procedimiento['configuracion_liquidar'][$codigo_concepto];
                                                $concepto_cod_ppal = $codigo_concepto;

                                                $requiere_tercero     = $arr_info_conf['requiere_tercero']; // Si es "C" o "P" entonces requiere tercero
                                                $cantidad_pintar      = $arr_info_conf['cantidad_concepto'];
                                                $tabla_valida_precios = $arr_info_conf['tabla_valida_precios'];
                                                $modifica_valor       = $arr_info_conf['modifica_valor'];
                                                $mueve_inventario     = $arr_info_conf['mueve_inventario'];
                                                $tipo_cobro           = $arr_info_conf['tipo_cobro'];
                                                $es_concepto_extra    = (array_key_exists('es_concepto_extra', $arr_info_conf)) ? true: false;
                                                $cobro_concepto       = "";
                                                $cobro_procedimiento  = "";

                                                if($mueve_inventario != 'on')
                                                {
                                                    $cont_pint = 0;
                                                    // print_r($arr_CargosGrabadosResponsables);
                                                    if(array_key_exists($codigo_procedimiento, $arr_CargosGrabadosResponsables) && array_key_exists($concepto_cod_ppal, $arr_CargosGrabadosResponsables[$codigo_procedimiento]))
                                                    {
                                                        // $guardar = "codigo_procedimiento:$codigo_procedimiento concepto_cod_ppal:$concepto_cod_ppal ".print_r($arr_CargosGrabadosResponsables,true).PHP_EOL.PHP_EOL;
                                                        // seguimiento($guardar);
                                                        $arr_CargosGrabadosResponsablesDetallado = array();
                                                        $arr_equipos_y_examenes_temp = array();
                                                        $html_equipos_examenes = "";
                                                        if(codConceptoLegible($concepto_cod_ppal) == $id_concepto_uso_equipos || codConceptoLegible($concepto_cod_ppal)== $id_concepto_examenes)
                                                        {
                                                            // Array
                                                            // (
                                                            //     [wconcepto_nombre] => USO DE EQUIPOS
                                                            //     [wcantidad] => 1
                                                            //     [wprocedimiento] => 990073
                                                            //     [wprocedimiento_nombre] => 990073-NEURONAVEGADOR
                                                            //     [wconcepto] => 0034
                                                            //     [wtercero] =>
                                                            //     [wtercero_nombre] =>
                                                            //     [wespecialidad] =>
                                                            //     [wespecialidad_nombre] =>
                                                            //     [wporcentaje] => 0
                                                            //     [wtipo_facturacion] =>
                                                            //     [wvalor_final] => 0
                                                            //     [wgrabar] => on
                                                            //     [wvalor] =>
                                                            //     [wtipo_anestesia_cx] => 001
                                                            //     [wtiempo_sala_recuperarcion] => 0
                                                            //     [wtiempo_uso_minutos] => 0
                                                            //     [wtiempo_minutos_cx] => 0
                                                            //     [wexiste] =>
                                                            //     [mueve_inventario] => off
                                                            //     [porcentaje_cxMult] => 0
                                                            //     [wvaltarReco] => 0
                                                            //     [wvaltarExce] => 0
                                                            //     [wvalorTarifaBase] => 0
                                                            //     [WTIENE_TARIFA] => off
                                                            // )

                                                            $arr_equipos_y_examenes_temp = $arr_CargosGrabadosResponsables[$codigo_procedimiento][$concepto_cod_ppal];
                                                            $contetemp = 0;
                                                            // $arr_CargosGrabadosResponsablesDetallado = $arr_CargosGrabadosResponsables[$codigo_procedimiento][$concepto_cod_ppal];
                                                            $html_equipos_examenes = '
                                                                                <table style="width:100%">
                                                                                    <tr >
                                                                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Tercero</td>
                                                                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Esp.</td>
                                                                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Nombre</td>
                                                                                        <!-- <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >%Liq.</td> -->
                                                                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Valor</td>
                                                                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Total</td>
                                                                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Facturable</td>
                                                                                        <td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Grabar</td>
                                                                                    </tr>';
                                                            // $guardar = "arr_equipos_y_examenes_temp: ".print_r($arr_equipos_y_examenes_temp,true).PHP_EOL;
                                                            // seguimiento($guardar);
                                                            foreach ($arr_equipos_y_examenes_temp as $codigo_equipo_examen_temp => $lista_examen_equipo)
                                                            {
                                                                foreach ($lista_examen_equipo as $codigo_empresa_responsable => $arr_cargo)
                                                                {
                                                                    // $codigo_equipo_examen_temp = $arr_equipos_examenes['wprocedimiento'];
                                                                    if(!array_key_exists($concepto_cod_ppal, $arr_datos_liquidados[$procedimiento_liquidar_cod]))
                                                                    {
                                                                        $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal] = array();
                                                                    }

                                                                    // $codigo_equipo_examen_temp = $codigo_cargo; //$codigo_cargo debería ser el código de un examen o equipo

                                                                    // if(!array_key_exists($codigo_equipo_examen_temp, $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal]))
                                                                    // {
                                                                    //     $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]= array();
                                                                    // }

                                                                    $temp_codigo_wtercero = "";
                                                                    $temp_nombre_wtercero = "";
                                                                    $temp_wespecialidad_ = "";
                                                                    $temp_wespecialidad_nombre_ = "";

                                                                    if(array_key_exists($procedimiento_liquidar_cod, $arr_datos_liquidados))
                                                                    {
                                                                        // if(array_key_exists($concepto_cod_ppal, $arr_datos_liquidados[$procedimiento_liquidar_cod])
                                                                        //     // && array_key_exists $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal])
                                                                        //     && array_key_exists($codigo_equipo_examen_temp, $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal])
                                                                        //     && array_key_exists('wtercero', $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]))
                                                                        {

                                                                            // $guardar = print_r($arr_datos_liquidados,true).PHP_EOL;
                                                                            // seguimiento($guardar);
                                                                            // $option_especialidad = '<option value="'.$arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal]['wespecialidad'].'" selected="selected">
                                                                            //                             '.$arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal]['wespecialidad_nombre'].'
                                                                            //                         </option>';

                                                                            // AQUI SE DEBE REVISAR COMO RECUPERAR DATOS GENERALES QUE HAYAN SIDO LIQUIDADOS.
                                                                            // $temp_codigo_wtercero       = $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]['wtercero'];
                                                                            // $temp_nombre_wtercero       = $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]['wtercero_nombre'];
                                                                            // $temp_wespecialidad_        = $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]['wespecialidad'];
                                                                            // $temp_wespecialidad_nombre_ = $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]['wespecialidad_nombre'];
                                                                        }
                                                                    }

                                                                    $dif_fila_exam_equip = $codigo_procedimiento.'_'.$concepto_cod_ppal.'_'.$codigo_equipo_examen_temp;//.'_'.$cont_pint;

                                                                    // MOSTRAR LOS RESPONSABLES QUE LES CORRESPONDE PAGAR EL CARGO DE EQUIPO O EXÁMEN
                                                                    $html_responsables_exam_equip = '';
                                                                    $html_valores_resp_exam_equip = '';
                                                                    $suma_excedentes_exam_equip = 0;
                                                                    $total_responsables_mayor_a_cero_exam_equip = 0;
                                                                    $otra_tarifa_exam_equip = 0;
                                                                    $total_responsables_cobro_exam_equip = 0;// Sumatoria de los valores de los responsables;
                                                                    // print_r($arr_entidades_responsables);
                                                                    $porcentaje_cxMult = 0;
                                                                    foreach ($arr_entidades_responsables as $codigo_responsable => $info_responsable)
                                                                    {
                                                                        // if($codigo_responsable != $codEmpPartic)
                                                                        {
                                                                            $valor_cobrar = 0;
                                                                            $porcentaje_cxMult_exam_equip = 0;

                                                                            if( array_key_exists($codigo_responsable, $lista_examen_equipo)
                                                                                // && array_key_exists($codigo_responsable, $lista_examen_equipo[$codigo_equipo_examen_temp])
                                                                                && (codConceptoLegible($concepto_cod_ppal) == $id_concepto_uso_equipos || codConceptoLegible($concepto_cod_ppal) == $id_concepto_examenes)
                                                                            )
                                                                            {
                                                                                $arr_cargo_resp = $lista_examen_equipo[$codigo_responsable];
                                                                                $porcentaje_cxMult_exam_equip        = $arr_cargo_resp["porcentaje_cxMult_CARGO"]*1; // Todos los responsables simulados generados tienen el mismo porcentaje_cxMult por eso no hay problema en tomar el valor de cualquiera de ellos
                                                                                $otra_tarifa_exam_equip = $arr_cargo_resp["wvalorTarifaBase"]*1;
                                                                                if($lista_examen_equipo[$codigo_responsable]["wfacturable"] == 'S')
                                                                                {
                                                                                    $valor_cobrar             = $arr_cargo_resp["wvaltarReco"]*1;
                                                                                    $suma_excedentes_exam_equip          += $arr_cargo_resp["wvaltarExce"]*1;
                                                                                    $total_responsables_cobro_exam_equip += ($arr_cargo_resp["wvaltarExce"]*1)+$valor_cobrar;
                                                                                }
                                                                            }

                                                                            $html_responsables_exam_equip .= '<td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >'.$info_responsable["simulacion_campos"]['Resnit'].'-'.utf8_encode($info_responsable["simulacion_campos"]['Empnom']).'</td>';
                                                                            $html_valores_resp_exam_equip .= '<td class="" style="text-align:center;font-size:9pt;font-weight:bold;" >('.$porcentaje_cxMult_exam_equip.'%) '.number_format($valor_cobrar,CANTIDAD_DECIMALES).'</td>';
                                                                            if($valor_cobrar > 0 && $suma_excedentes_exam_equip > 0) //Si hay valor a cobrar del responsable y adicionalmente hay excedente
                                                                            {
                                                                                $total_responsables_mayor_a_cero_exam_equip += 2;
                                                                            }
                                                                            elseif($valor_cobrar > 0)
                                                                            {
                                                                                $total_responsables_mayor_a_cero_exam_equip += 1;
                                                                            }
                                                                            elseif($suma_excedentes_exam_equip > 0)
                                                                            {
                                                                                $total_responsables_mayor_a_cero_exam_equip += 1;
                                                                            }
                                                                        }
                                                                        // else
                                                                        // {
                                                                        //     // $suma_excedentes_exam_equip += $arr_cargo["wvaltarExce"]*1;
                                                                        // }
                                                                    }

                                                                    $html_responsables_exam_equip .= '<td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Excedente</td>';
                                                                    $html_valores_resp_exam_equip .= '<td class="" style="text-align:center;font-size:9pt;font-weight:bold;" >'.number_format($suma_excedentes_exam_equip,CANTIDAD_DECIMALES).'</td>';
                                                                    // echo $total_responsables_mayor_a_cero_exam_equip."|";
                                                                    // echo "{ $procedimiento_liquidar_cod : $concepto_cod_ppal [$valor_tarifa]}";
                                                                    $html_tds_TOTALES[$procedimiento_liquidar_cod] = ($html_tds_TOTALES[$procedimiento_liquidar_cod]*1)+$total_responsables_cobro_exam_equip;

                                                                    // $inputs_valores = $valor_tarifa;
                                                                    // Si es solo un responsable, se conserva entonces el valor del cargo a tarifa de ese responsable, es posible que el cargo se haya originado
                                                                    // con un responsable pero por no tener tope entonces se le cobre al responsable siguiente a tarifa de ese nuevo responsable.
                                                                    if($total_responsables_mayor_a_cero_exam_equip == 1)
                                                                    {
                                                                    }
                                                                    $valor_final_simulado_exam_equip = $total_responsables_cobro_exam_equip;
                                                                    $inputs_valores = $otra_tarifa_exam_equip;

                                                                                        // flotante '.$dif_fila.'
                                                                    $div_caja_flotante = '
                                                                                    <div id="caja_flotante_'.$dif_fila_exam_equip.'" style="display:none; background-color: #FFFEE2; padding: 5px;" class="caja_flotante" >
                                                                                        <div style="width:100%;text-align:left;" ><span style="font-weight:bold;color:red;" >^</span> <span class="alinear_derecha" style="width: 20px; cursor:pointer;" title="Cerrar" ><img src="../../images/medical/eliminar1.png" alt="Cerrar" onclick="cerrarFlotante();" /></span></div>
                                                                                        <table>
                                                                                            <tr>
                                                                                                '.$html_responsables_exam_equip.'
                                                                                            </tr>
                                                                                            <tr class="fila1" >
                                                                                                '.$html_valores_resp_exam_equip.'
                                                                                            </tr>
                                                                                        </table>
                                                                                    </div>';

                                                                    // $campos_localizacion_js = 'wconsec="'.$cont_pint.'" wprocedimiento="'.$codigo_procedimiento.'" wconcepto ="'.$concepto_cod_ppal.'"';
                                                                    $campos_localizacion_js_exam_equip = ' wconsec="'.$cont_pint.'" wprocedimiento="'.$codigo_procedimiento.'" wconcepto ="'.$concepto_cod_ppal.'" wequip_examen ="'.$codigo_equipo_examen_temp.'" ';

                                                                    $vlr_tarifa_temp = "";
                                                                    $cheched_grabar_equip_exam = 'checked="checked"';
                                                                    $select_fac_equip_exam = '';
                                                                    $selected_factur_eqip_exam_ON = 'selected="selected"';
                                                                    $selected_factur_equip_exam_OFF = '';

                                                                    if($arr_cargo['WTIENE_TARIFA'] == 'off')
                                                                    {
                                                                        $vlr_tarifa_temp = '<img style="cursor:pointer" id="" class="tooltip" title="NO TIENE TARIFA" width="16" height="16" src="../../images/medical/sgc/Warning-32.png" /> ';

                                                                        $selected_factur_eqip_exam_ON  = '';
                                                                        $selected_factur_equip_exam_OFF = 'selected="selected"';

                                                                        $cheched_grabar_equip_exam = 'disabled="disabled"';
                                                                        $select_fac_equip_exam = 'disabled="disabled"';
                                                                        // $inputs_valores = '
                                                                        //         <input '.$campos_localizacion_js_exam_equip.' type="text" id="wvalor_'.$dif_fila.'" name="wvalor_'.$dif_fila.'" etiqueta="wvalor" value="" placeholder="$ valor" size="10" style="text-align:right;" class="numerico requerido" >';
                                                                    }

                                                                    $facturable_temp = "N";
                                                                    if($arr_cargo['WTIENE_TARIFA'] == 'on')
                                                                    {
                                                                        $facturable_temp = $arr_cargo['wfacturable'];
                                                                    }
                                                                    $se_graba_temp = ($arr_cargo['WTIENE_TARIFA'] == 'on') ? 'on': 'off';

                                                                    // $guardar = print_r($codigo_equipo_examen_temp,true).PHP_EOL;
                                                                    // seguimiento($guardar);
                                                                    // si no existe, cree un array e ingrese unos datos básicos
                                                                    // y cree una posición de empresas que se hacen cargo de pagar el cargo
                                                                    if(array_key_exists($codigo_equipo_examen_temp, $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal]))
                                                                    {
                                                                        // $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp] = array();
                                                                        // $datos_equipo_examen = array("nombre_examen_equipo"=>$arr_cargo['examen_equipo_nombre'],"codigo_examen_equipo"=>$arr_cargo['examen_equipo_codigo'], "responsables_cargo" => array());
                                                                        // $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]["nombre_examen_equipo"]= $arr_cargo['examen_equipo_nombre'];
                                                                        // $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]["codigo_examen_equipo"]= $arr_cargo['examen_equipo_codigo'];
                                                                        // $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]["responsables_cargo"]= array();
                                                                    }

                                                                    // if(array_key_exists("responsables_cargo", $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp])
                                                                    //     && !array_key_exists($codigo_empresa_responsable, $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]["responsables_cargo"]))
                                                                    // {
                                                                    //     $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]["responsables_cargo"][$codigo_empresa_responsable] = array();
                                                                    // }
                                                                    // $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]["responsables_cargo"][$codigo_empresa_responsable] =

                                                                    if(!empty($arr_cargo['examen_equipo_codigo']) && !array_key_exists($codigo_equipo_examen_temp, $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal]))
                                                                    {
                                                                        $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp] =
                                                                                                                                    array("wconcepto_nombre"         => $arr_cargo['wnomcon'],
                                                                                                                                        "id_insumo"                  => "", // Si tiene valor es porque es un medicamento o material
                                                                                                                                        "wcantidad"                  => 1,
                                                                                                                                        "nombre_examen_equipo"       => $arr_cargo['examen_equipo_nombre'],
                                                                                                                                        "codigo_examen_equipo"       => $arr_cargo['examen_equipo_codigo'],
                                                                                                                                        "wprocedimiento"             => $arr_cargo['examen_equipo_codigo'],
                                                                                                                                        "wprocedimiento_nombre"      => $arr_cargo['examen_equipo_nombre'],
                                                                                                                                        "wconcepto"                  => $arr_cargo['wcodcon'],
                                                                                                                                        "wdisponibilidad"            => '',
                                                                                                                                        "wcuadroturno"               => '',
                                                                                                                                        "grupoMedico"                => '',
                                                                                                                                        "wtercero"                   => $temp_codigo_wtercero,
                                                                                                                                        "wtercero_nombre"            => $temp_nombre_wtercero,
                                                                                                                                        "wespecialidad"              => $temp_wespecialidad_,
                                                                                                                                        "cobraHonorarios"            => "on",
                                                                                                                                        "wespecialidad_nombre"       => $temp_wespecialidad_nombre_,
                                                                                                                                        "wporcentaje"                => $arr_cargo['porcentaje_cxMult_CARGO'],//$porcentaje_cxMult_exam_equip,
                                                                                                                                        "wvalor"                     => $arr_cargo['valor_final_original'],
                                                                                                                                        "wvalor_final"               => $arr_cargo['valor_final_original'],
                                                                                                                                        "wfacturable"                => $facturable_temp,
                                                                                                                                        "wgrabar"                    => $se_graba_temp,
                                                                                                                                        "wbaseliquidacion"           => "", // PUEDE HACER FALTA!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  REVISAR DE DONDE PUEDE SALIR ESTE VALOR CUANDO SE HAGA LA SIMULACIÓN
                                                                                                                                        "wtipo_facturacion"          => $arr_info_conf['procedimiento_tarifa'],
                                                                                                                                        "wturno_cirugia"             => $arr_datos_procedimiento["wturno_cirugia"],
                                                                                                                                        "wtipo_anestesia_cx"         => $arr_datos_procedimiento["wtipo_anestesia_cx"],
                                                                                                                                        "wtiempo_sala_recuperarcion" => $arr_datos_procedimiento["wtiempo_sala_recuperarcion"],
                                                                                                                                        "wtiempo_uso_minutos"        => $arr_datos_procedimiento["wtiempo_uso_minutos"],
                                                                                                                                        "wtiempo_minutos_cx"         => $arr_datos_procedimiento["wtiempo_minutos_cx"],
                                                                                                                                        "wexiste"                    => "",
                                                                                                                                        "wserv"                      => $arr_info_conf['wserv'],
                                                                                                                                        "mueve_inventario"           => $arr_info_conf['mueve_inventario']);
                                                                    }

                                                                    $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]['wfacturable'] = $facturable_temp;
                                                                    // Si existe en el de liquidados entonces inicializa los datos con esos.
                                                                    // echo "arr_datos_liquidados [ $procedimiento_liquidar_cod ][$concepto_cod_ppal]";
                                                                    $campo_tercero_equipo    = "";
                                                                    $campo_especialidad_EqEx = "";
                                                                    $mensaje_no_tarifaEqEx   = "SIN PORCENTAJE";
                                                                    if(array_key_exists($procedimiento_liquidar_cod, $arr_datos_liquidados))
                                                                    {
                                                                        $arr_datosLiquidadosTercero = array();
                                                                        $arr_datosLiquidadosTercero["option_especialidad"]       = "";
                                                                        $arr_datosLiquidadosTercero["wdisponibilidad"]           = "";
                                                                        $arr_datosLiquidadosTercero["wcuadroturno"]              = "";
                                                                        $arr_datosLiquidadosTercero["codigo_wtercero"]           = "";
                                                                        $arr_datosLiquidadosTercero["nombre_wtercero"]           = "";
                                                                        $arr_datosLiquidadosTercero["wespecialidad_"]            = "";
                                                                        $arr_datosLiquidadosTercero["wespecialidad_nombre_"]     = "";
                                                                        $arr_datosLiquidadosTercero["mensaje_no_tarifa"]         = $mensaje_no_tarifaEqEx;
                                                                        $arr_datosLiquidadosTercero["codigo_equipo_examen_temp"] = $codigo_equipo_examen_temp;

                                                                        $arr_datosLiquidadosTercero = recuperarDatosLiquidadosTercero($conex, $wemp_pmla, $wbasedato, $concepto_cod_ppal, $arr_datos_liquidados, $procedimiento_liquidar_cod, $id_concepto_uso_equipos, $id_concepto_examenes, $arr_datosLiquidadosTercero, true);

                                                                        $option_especialidadEqEx        = $arr_datosLiquidadosTercero["option_especialidad"];
                                                                        $wdisponibilidadEqEx            = $arr_datosLiquidadosTercero["wdisponibilidad"];
                                                                        $wcuadroturnoEqEx               = $arr_datosLiquidadosTercero["wcuadroturno"];
                                                                        $codigo_wterceroEqEx            = $arr_datosLiquidadosTercero["codigo_wtercero"];
                                                                        $nombre_wterceroEqEx            = $arr_datosLiquidadosTercero["nombre_wtercero"];
                                                                        $wespecialidad_EqEx             = $arr_datosLiquidadosTercero["wespecialidad_"];
                                                                        $wespecialidad_nombre_EqEx      = $arr_datosLiquidadosTercero["wespecialidad_nombre_"];
                                                                        $mensaje_no_tarifaEqEx          = $arr_datosLiquidadosTercero["mensaje_no_tarifa"];
                                                                        $codigo_equipo_examen_temp      = $arr_datosLiquidadosTercero["codigo_equipo_examen_temp"];
                                                                        $grupoMedicoEqEx                = "";
                                                                        $arr_datosDelCargo_terceroEqEx  = array();
                                                                        $arr_cuadrosTurnoTerceroEqEx    = array();
                                                                        $activar_select_cuadroTurnoEqEx = false;
                                                                        $porcentaje_terceroVerEqEx      = "%--";

                                                                        if( array_key_exists($concepto_cod_ppal, $arr_datos_liquidados[$procedimiento_liquidar_cod])
                                                                            && array_key_exists($codigo_equipo_examen_temp, $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal])
                                                                            && codConceptoLegible($concepto_cod_ppal) == $id_concepto_uso_equipos || codConceptoLegible($concepto_cod_ppal) == $id_concepto_examenes)
                                                                        {
                                                                            $selected_factur_eqip_exam_ON   = ($arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]['wfacturable'] == 'S') ? 'selected="selected"': '';
                                                                            $selected_factur_equip_exam_OFF = ($arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]['wfacturable'] == 'N') ? 'selected="selected"': '';
                                                                            $cheched_grabar_equip_exam      = '';
                                                                            if(array_key_exists('wgrabar', $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp])
                                                                                && $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]['wgrabar'] == 'on')
                                                                            {
                                                                                $cheched_grabar_equip_exam = 'checked="checked"';
                                                                            }
                                                                            $cheched_grabar_equip_exam      = ($vlr_tarifa_temp != '') ? 'disabled="disabled"': $cheched_grabar_equip_exam;

                                                                            $requiere_terceroEqEx = "";
                                                                            if(array_key_exists($procedimiento_liquidar_cod, $arr_CARGOS_PARA_GRABAR) && array_key_exists($concepto_cod_ppal, $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod]))
                                                                            {
                                                                                $datos_cargoEqEx = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$concepto_cod_ppal];
                                                                                $arr_infoCargoLiquidado = array();
                                                                                foreach ($datos_cargoEqEx as $secuencia => $cargo_EqEx)
                                                                                {
                                                                                    if($cargo_EqEx["examen_equipo_codigo"] == $codigo_equipo_examen_temp)
                                                                                    {
                                                                                        $arr_infoCargoLiquidado = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$concepto_cod_ppal][$secuencia];
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                if(count($arr_infoCargoLiquidado) > 0)
                                                                                {
                                                                                    $requiere_terceroEqEx = politicaManejoTercero(codConceptoLegible($concepto_cod_ppal), $arr_infoCargoLiquidado['examen_equipo_codigo'], $arr_infoCargoLiquidado['tipoEmpresa'], $arr_infoCargoLiquidado['wtar'], $arr_infoCargoLiquidado['nitEmpresa'], $arr_infoCargoLiquidado['wcodemp'], $arr_infoCargoLiquidado['wccogra'], $whistoria, $wing);
                                                                                    // $guardar = "requiere_terceroEqEx: ".print_r($requiere_terceroEqEx,true).PHP_EOL.PHP_EOL;
                                                                                    // seguimiento($guardar);
                                                                                }
                                                                            }

                                                                            if($requiere_terceroEqEx == 'C')
                                                                            {
                                                                                $slt_cTur = '';

                                                                                // Actualiza la información de tercero Equipo-Examen en el array para grabar
                                                                                $arr_ActualizaInfoTerceroEqEx = array();
                                                                                $arr_ActualizaInfoTerceroEqEx["procedimiento_liquidar_cod"] = $procedimiento_liquidar_cod;
                                                                                $arr_ActualizaInfoTerceroEqEx["arr_CARGOS_PARA_GRABAR"]     = $arr_CARGOS_PARA_GRABAR;
                                                                                $arr_ActualizaInfoTerceroEqEx["dif_concepto"]               = $concepto_cod_ppal;
                                                                                $arr_ActualizaInfoTerceroEqEx["codigo_wtercero"]            = $codigo_wterceroEqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["wespecialidad_"]             = $wespecialidad_EqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["wtip_paciente"]              = $wtip_paciente;
                                                                                $arr_ActualizaInfoTerceroEqEx["whora_cargo"]                = $whora_cargo;
                                                                                $arr_ActualizaInfoTerceroEqEx["wfecha_cargo"]               = $wfecha_cargo;
                                                                                $arr_ActualizaInfoTerceroEqEx["wdisponibilidad"]            = $wdisponibilidadEqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["wcuadroturno"]               = $wcuadroturnoEqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["grupoMedico"]                = $grupoMedicoEqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["arr_datosDelCargo_tercero"]  = $arr_datosDelCargo_terceroEqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["activar_select_cuadroTurno"] = $activar_select_cuadroTurnoEqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["arr_cuadrosTurnoTercero"]    = $arr_cuadrosTurnoTerceroEqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["nombre_wtercero"]            = $nombre_wterceroEqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["wespecialidad_nombre_"]      = $wespecialidad_nombre_EqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["porcentaje_terceroVer"]      = $porcentaje_terceroVerEqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["requiere_tercero"]           = $requiere_terceroEqEx;
                                                                                $arr_ActualizaInfoTerceroEqEx["porcentaje_tercero"]         = "";

                                                                                $arr_ActualizaInfoTerceroEqEx = procesarDatosTerceroCargo($conex, $wemp_pmla, $wbasedato, $arr_ActualizaInfoTerceroEqEx);

                                                                                $arr_CARGOS_PARA_GRABAR         = $arr_ActualizaInfoTerceroEqEx["arr_CARGOS_PARA_GRABAR"];
                                                                                $codigo_wterceroEqEx            = $arr_ActualizaInfoTerceroEqEx["codigo_wtercero"];
                                                                                $wespecialidad_EqEx             = $arr_ActualizaInfoTerceroEqEx["wespecialidad_"];
                                                                                $wdisponibilidadEqEx            = $arr_ActualizaInfoTerceroEqEx["wdisponibilidad"];
                                                                                $wcuadroturnoEqEx               = $arr_ActualizaInfoTerceroEqEx["wcuadroturno"];
                                                                                $grupoMedicoEqEx                = $arr_ActualizaInfoTerceroEqEx["grupoMedico"];
                                                                                $arr_datosDelCargo_terceroEqEx  = $arr_ActualizaInfoTerceroEqEx["arr_datosDelCargo_tercero"];
                                                                                $activar_select_cuadroTurnoEqEx = $arr_ActualizaInfoTerceroEqEx["activar_select_cuadroTurno"];
                                                                                $arr_cuadrosTurnoTerceroEqEx    = $arr_ActualizaInfoTerceroEqEx["arr_cuadrosTurnoTercero"];
                                                                                $nombre_wterceroEqEx            = $arr_ActualizaInfoTerceroEqEx["nombre_wtercero"];
                                                                                $wespecialidad_nombre_EqEx      = $arr_ActualizaInfoTerceroEqEx["wespecialidad_nombre_"];
                                                                                $porcentaje_terceroVerEqEx      = $arr_ActualizaInfoTerceroEqEx["porcentaje_terceroVer"];
                                                                                $requiere_terceroEqEx           = $arr_ActualizaInfoTerceroEqEx["requiere_tercero"];
                                                                                $porcentaje_terceroEqEx         = $arr_ActualizaInfoTerceroEqEx["porcentaje_tercero"];

                                                                                if($porcentaje_terceroEqEx != "0" && $porcentaje_terceroEqEx != "")
                                                                                {
                                                                                    $mensaje_no_tarifaEqEx = $nombre_wterceroEqEx;
                                                                                }

                                                                                $hdn_turnoEqEx = 'display:none;';
                                                                                $slt_cTurOptsEqEx = '';
                                                                                if($activar_select_cuadroTurnoEqEx)
                                                                                {
                                                                                    if(count($arr_cuadrosTurnoTerceroEqEx) > 0)
                                                                                    {
                                                                                        $tmp_arr_cuadrosTurnoTerceroEqEx = $arr_cuadrosTurnoTerceroEqEx;
                                                                                        $hdn_turnoEqEx = '';
                                                                                        foreach ($arr_cuadrosTurnoTerceroEqEx as $cod_cuadro => $value_cuadro)
                                                                                        {
                                                                                            $selTd = ($wcuadroturnoEqEx == $cod_cuadro || count($tmp_arr_cuadrosTurnoTerceroEqEx) == 1) ? 'selected="selected"': "";
                                                                                            $slt_cTurOptsEqEx .= '<option value="'.$cod_cuadro.'" '.$selTd.' >'.$cod_cuadro.'-'.$value_cuadro.'</option>';
                                                                                        }
                                                                                    }
                                                                                }

                                                                                $disabled_opciones_terceroEqEx = "";
                                                                                if($inactivar_cuadroTurno)
                                                                                {
                                                                                    $disabled_opciones_terceroEqEx = 'display:none;';
                                                                                }

                                                                                $slt_cTurEqEx = '<select x="'.$wcuadroturnoEqEx.'" style="font-size:9pt;'.$disabled_opciones_terceroEqEx.'" '.$campos_localizacion_js_exam_equip.' etiqueta="wcuadroturnoEqEx" id="wcuadroturnoEqEx_'.$dif_fila_exam_equip.'cuadroturno" name="wcuadroturnoEqEx_'.$dif_fila_exam_equip.'cuadroturno" class="modificaLiquidadoSELECT requerido bloquear_todo">
                                                                                                <option value="">Seleccione..</option>
                                                                                                '.$slt_cTurOptsEqEx.'
                                                                                             </select>
                                                                                             <input type="hidden" id="'.$dif_fila_exam_equip.'grupoMedico" name="'.$dif_fila_exam_equip.'grupoMedico" etiqueta="grupoMedicoEqEx" '.$campos_localizacion_js_exam_equip.' value="'.$grupoMedico.'">';

                                                                                $opt_disponibleEqEx = '';
                                                                                foreach ($arr_disponibilidades as $val_disp => $value_disp)
                                                                                {
                                                                                    $selTd = ($wdisponibilidadEqEx == $val_disp) ? 'selected="selected"': "";
                                                                                    $opt_disponibleEqEx .= '<option value="'.$val_disp.'" '.$selTd.' >'.$val_disp.'-'.$value_disp.'</option>';
                                                                                }
                                                                                $ckd_disponibleEqEx = '<select x="'.$wdisponibilidadEqEx.'" style="font-size:9pt;'.$disabled_opciones_terceroEqEx.'" '.$campos_localizacion_js_exam_equip.' id="wterceroEqEx_'.$dif_fila_exam_equip.'disponible" etiqueta="wdisponibilidadEqEx"  name="wdisponibilidadEqEx_'.$dif_fila_exam_equip.'disponible" class="modificaLiquidadoSELECT requerido bloquear_todo" onchange="consultarCuadrosTurno(\'wterceroEqEx_'.$dif_fila_exam_equip.'\', \'\', \'\');" >
                                                                                                           <option value="">Seleccione..</option>
                                                                                                           '.$opt_disponibleEqEx.'
                                                                                                       </select>';

                                                                                $campo_tercero_equipo    = '<input '.$campos_localizacion_js_exam_equip.' title="'.$mensaje_no_tarifaEqEx.'" placeholder="'.$mensaje_no_tarifaEqEx.'" type="text" etiqueta="wterceroEqEx" id="wterceroEqEx_'.$dif_fila_exam_equip.'" name="wterceroEqEx_'.$dif_fila_exam_equip.'" value="'.$nombre_wterceroEqEx.'" class="tooltip modificaLiquidado liq_autocomplete requerido vacios_terceros bloquear_todo" codigo="'.$codigo_wterceroEqEx.'" nombre="'.$nombre_wterceroEqEx.'" >
                                                                                                 <input '.$campos_localizacion_js_exam_equip.' type="hidden" procedimiento_liquidar_cod="'.$procedimiento_liquidar_cod.'" esEqEx="'.$codigo_equipo_examen_temp.'" dif_concepto="'.$concepto_cod_ppal.'" id="wterceroEqEx_'.$dif_fila_exam_equip.'dishdn" name="wterceroEqEx_'.$dif_fila_exam_equip.'dishdn" value="'.base64_encode(serialize($arr_datosDelCargo_terceroEqEx)).'" class="modificaLiquidadoCHECKBOX bloquear_todo" >
                                                                                                 <div style="width:100%;">
                                                                                                    <table>
                                                                                                        <tr>
                                                                                                            <td id="wterceroEqEx_'.$dif_fila_exam_equip.'disponible_td"><span style="font-size:8pt;color:green;">['.$porcentaje_terceroVerEqEx.']</span> <span style="'.$disabled_opciones_tercero.'">Disponible:</span>'.$ckd_disponibleEqEx.'</td>
                                                                                                            <td id="wterceroEqEx_'.$dif_fila_exam_equip.'cuadroturno_td" style="'.$hdn_turnoEqEx.'">Turno:'.$slt_cTurEqEx.'</td>
                                                                                                        </tr>
                                                                                                    </table>
                                                                                                 </div>'; // wtercero_dishdn => tiene parámetros que se pueden utilizar para saber el cuadro de turno de un tercero.

                                                                                $campo_especialidad_EqEx = '<select '.$campos_localizacion_js_exam_equip.' id="wespecialidadEqEx_'.$dif_fila_exam_equip.'" name="wespecialidadEqEx_'.$dif_fila_exam_equip.'" etiqueta="wespecialidadEqEx" value="" class="modificaLiquidadoSELECT liq_depend_autocomplete requerido bloquear_todo" >'.$option_especialidadEqEx.'</select>';
                                                                            }
                                                                        }
                                                                    }

                                                                    if(array_key_exists($procedimiento_liquidar_cod, $arr_CARGOS_PARA_GRABAR) && array_key_exists($concepto_cod_ppal, $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod]))
                                                                    {
                                                                        $editar_cargos = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$concepto_cod_ppal];
                                                                        foreach ($editar_cargos as $secuencia => $cargo_editar)
                                                                        {
                                                                            if($cargo_editar["examen_equipo_codigo"] == $codigo_equipo_examen_temp)
                                                                            {
                                                                                $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$concepto_cod_ppal][$secuencia]["wfacturable"] = $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]['wfacturable'];
                                                                                $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$concepto_cod_ppal][$secuencia]["wgrabar"]     = $arr_datos_liquidados[$procedimiento_liquidar_cod][$concepto_cod_ppal][$codigo_equipo_examen_temp]['wgrabar'];
                                                                            }
                                                                        }
                                                                    }

                                                                    // Recorres posiblemente el array resultante para extraer los equipos y examenes
                                                                    // $css_temp = ($contetemp % 2 == 0) ? 'fila1': 'fila2';

                                                                    $html_equipos_examenes .= '
                                                                                        <tr>
                                                                                            <td class="" style="text-align:justify;font-size:9pt;font-weight:bold;" >'.$campo_tercero_equipo.'</td>
                                                                                            <td class="" style="text-align:justify;font-size:9pt;font-weight:bold;" >'.$campo_especialidad_EqEx.'</td>
                                                                                            <td class="" style="text-align:justify;font-size:9pt;font-weight:bold;" >'.$arr_cargo['examen_equipo_nombre'].'</td>
                                                                                            <!-- <td class="" style="text-align:right;font-size:9pt;" >&nbsp;</td> -->
                                                                                            <td class="" style="text-align:right;font-size:9pt;" >'.number_format($inputs_valores,CANTIDAD_DECIMALES).'</td>
                                                                                            <td class="" style="text-align:right;font-size:9pt;font-weight:bold;" >
                                                                                                '.$div_caja_flotante.'
                                                                                                <a class="tooltip" title="Click para ver detalle" href="javascript:" onclick="posicionElemento(this);" dif_fila="'.$dif_fila_exam_equip.'" >'.number_format($valor_final_simulado_exam_equip, CANTIDAD_DECIMALES).'</a>
                                                                                            </td>
                                                                                            <td class="" style="text-align:center;font-size:9pt;" >
                                                                                                <select disabled="disabled" id="wfacturable_'.$dif_fila_exam_equip.'" name="wfacturable_'.$dif_fila_exam_equip.'" etiqueta="wfacturable" class="modificaLiquidadoSELECT" '.$select_fac_equip_exam.' '.$campos_localizacion_js_exam_equip.' >
                                                                                                    <option value="S" '.$selected_factur_eqip_exam_ON.'>Si</option>
                                                                                                    <option value="N" '.$selected_factur_equip_exam_OFF.'>No</option>
                                                                                                </select>
                                                                                            </td>
                                                                                            <td class="" style="text-align:center;font-size:9pt;" >
                                                                                                '.$vlr_tarifa_temp.'<input type="checkbox" id="wgrabarEqEx_'.$dif_fila_exam_equip.'" name="wgrabarEqEx_'.$dif_fila_exam_equip.'" etiqueta="wgrabar" class="modificaLiquidadoCHECKBOX bloquear_todo" value="on" '.$cheched_grabar_equip_exam.' '.$campos_localizacion_js_exam_equip.' />
                                                                                            </td>
                                                                                        </tr>';
                                                                }
                                                            }
                                                            $contetemp++;
                                                            $html_equipos_examenes .= '</table>';
                                                        }
                                                        else
                                                        {
                                                            $arr_CargosGrabadosResponsablesDetallado = $arr_CargosGrabadosResponsables[$codigo_procedimiento][$concepto_cod_ppal];
                                                        }
                                                        // $info_tarifa = $arr_CargosGrabadosResponsablesDetallado['info_tarifa'];
                                                        // $guardar = print_r($arr_CargosGrabadosResponsablesDetallado,true).PHP_EOL;
                                                        // seguimiento($guardar);
                                                        $info_tarifa = "";
                                                        $valor_tarifa = 0;
                                                        // $arr_CargosGrabadosResponsablesDetallado_TEMPORAL_CONTROL = array();
                                                        if(count($arr_CargosGrabadosResponsablesDetallado) == 0)
                                                        {
                                                            // $arr_CargosGrabadosResponsablesDetallado = array("temp"=>array("temp"=>array()));
                                                            $info_tarifa = '<img style="cursor:pointer" id="" class="tooltip" title="NO TIENE TARIFA" width="16" height="16" src="../../images/medical/sgc/Warning-32.png" />';
                                                        }

                                                        $cssFila = ($css_count % 2 == 0) ? 'fila1': 'fila2';

                                                        // foreach ($arr_CargosGrabadosResponsablesDetallado_TEMPORAL_CONTROL as $codigo_empresa_responsable => $arr_cargos_reponsable)
                                                        {
                                                            // Esto se hace para que cuando no sean equipos ni examanes, el ciclo siguiente se ejecute por lo menos una vez,
                                                            // para poder que se pinte la información de un concepto normal.

                                                            // foreach ($recorrer_cargos as $codigo_cargo => $arr_cargo)
                                                            {
                                                                $dif_concepto = $concepto_cod_ppal;
                                                                $campos_localizacion_js = ' wconsec="'.$cont_pint.'" wprocedimiento="'.$codigo_procedimiento.'" wconcepto ="'.$concepto_cod_ppal.'" wequip_examen ="" ';

                                                                $dif_fila           = $codigo_procedimiento.'_'.$concepto_cod_ppal.'_';//.'_'.$cont_pint;
                                                                $id_campo_ter       = 'wtercero_'.$dif_fila;
                                                                $id_campo_esp       = 'wespecialidad_'.$dif_fila;

                                                                // Si ya se había almacenado en el array de liquidados entonces toma el valor de liquidados.
                                                                $wdisponibilidad       = "";
                                                                $wcuadroturno          = "";
                                                                $requiereTerceroPol    = "";
                                                                $grupoMedico           = "";
                                                                $inactivar_cuadroTurno = false;
                                                                $codigo_wtercero       = "";
                                                                $nombre_wtercero       = "";
                                                                $wespecialidad_        = "";
                                                                $wespecialidad_nombre_ = "";
                                                                $option_especialidad   = "";
                                                                $datos_medico_oculto   = "";
                                                                $mensaje_no_tarifa     = "¡NO TIENE PORCENTAJE!";
                                                                // Si existe en el de liquidados entonces inicializa los datos con esos.
                                                                // echo "arr_datos_liquidados [ $procedimiento_liquidar_cod ][$dif_concepto]";
                                                                $arr_datosDelCargo_tercero = array(); //este array es para capturar los datos relacionados al tercero para buscar si está en cuadro de turno no disponibilidad
                                                                $arr_cuadrosTurnoTercero   = array();
                                                                $activar_select_cuadroTurno = false;
                                                                $porcentaje_terceroVer = "%--";
                                                                $porcentaje_tercero    = "";
                                                                $campo_tercero = '';
                                                                $campo_especialidad = '';

                                                                if(codConceptoLegible($dif_concepto) != $id_concepto_uso_equipos && codConceptoLegible($dif_concepto) != $id_concepto_examenes)
                                                                {
                                                                    if(array_key_exists($procedimiento_liquidar_cod, $arr_datos_liquidados))
                                                                    {
                                                                        $arr_datosLiquidadosTercero = array();
                                                                        $arr_datosLiquidadosTercero["option_especialidad"]   = $option_especialidad;
                                                                        $arr_datosLiquidadosTercero["wdisponibilidad"]       = $wdisponibilidad;
                                                                        $arr_datosLiquidadosTercero["wcuadroturno"]          = $wcuadroturno;
                                                                        $arr_datosLiquidadosTercero["codigo_wtercero"]       = $codigo_wtercero;
                                                                        $arr_datosLiquidadosTercero["nombre_wtercero"]       = $nombre_wtercero;
                                                                        $arr_datosLiquidadosTercero["wespecialidad_"]        = $wespecialidad_;
                                                                        $arr_datosLiquidadosTercero["wespecialidad_nombre_"] = $wespecialidad_nombre_;
                                                                        $arr_datosLiquidadosTercero["mensaje_no_tarifa"]     = $mensaje_no_tarifa;

                                                                        $arr_datosLiquidadosTercero = recuperarDatosLiquidadosTercero($conex, $wemp_pmla, $wbasedato, $dif_concepto, $arr_datos_liquidados, $procedimiento_liquidar_cod, $id_concepto_uso_equipos, $id_concepto_examenes, $arr_datosLiquidadosTercero, false);

                                                                        foreach ($arr_datosLiquidadosTercero as $var_ => $var_value) {
                                                                            $$var_ = $var_value;
                                                                        }

                                                                        // Asignar un tercero por defecto cuando el campo está vacío
                                                                        if(empty($codigo_wtercero))
                                                                        {
                                                                            $userCargo = explode('-',$_SESSION['user']);
                                                                            $wuse      = $userCargo[1];
                                                                            global $wbasedato, $wemp_pmla, $conex, $wuse;
                                                                            $arr_tercero_xdefecto = array();
                                                                            $arr_tercero_xdefecto = traer_terceros_por_defecto(codConceptoLegible($concepto_cod_ppal));

                                                                            $codigo_wtercero       = $arr_tercero_xdefecto["codigo"];
                                                                            if(!empty($codigo_wtercero))
                                                                            {
                                                                                // $guardar = print_r("codigo_wtercero:$codigo_wtercero",true).PHP_EOL;
                                                                                // seguimiento($guardar);
                                                                                $nombre_wtercero       = $codigo_wtercero.'-'.$arr_tercero_xdefecto["nombre"];
                                                                                $wespecialidad_        = "";
                                                                                $wespecialidad_nombre_ = "";
                                                                                $mensaje_no_tarifa .= " ".$nombre_wtercero;

                                                                                // Si hay un tercero por defecto entonces inicializar la disponibilidad como "disponible"
                                                                                // para que la función de porcentajes de terceros pueda encontrar desde el principio un porcentaje
                                                                                // sino tocaría esperar hasta que se pinte la interface volver a seleccionar el tercero por defecto y seleccionar disponible
                                                                                // para poder encontrar un porcentaje. en parte se perdería que se agregara acutomáticamente los tercero por defecto
                                                                                if(in_array($concepto_cod_ppal, $erp_liq_cx_inactivar_cuadro_turno))
                                                                                {
                                                                                    // Al inicializar como disponible se podría encontrar desde el principio el porcentaje para los terceros por defecto
                                                                                    $wdisponibilidad = $codParticipacionMedicoDisponible;
                                                                                    $inactivar_cuadroTurno = true;
                                                                                }

                                                                                $arr_terceros_especialidadDef = obtener_array_terceros_especialidad();

                                                                                $option_especialidad = '';
                                                                                if($codigo_wtercero != '' && array_key_exists($codigo_wtercero, $arr_terceros_especialidadDef))
                                                                                {
                                                                                    $arr_ter = $arr_terceros_especialidadDef[$codigo_wtercero];
                                                                                    // $guardar = print_r("expl_espec: ",true).print_r($arr_ter['especialidad'],true).PHP_EOL;
                                                                                    // seguimiento($guardar);
                                                                                    $expl_espec = explode(",", $arr_ter['especialidad']);
                                                                                    foreach ($expl_espec as $key => $codigoesp_nomesp)
                                                                                    {
                                                                                        $expl_cod_nom = explode("-", $codigoesp_nomesp);
                                                                                        $option_especialidad .= '<option value="'.$expl_cod_nom[0].'" selected="selected">
                                                                                                                '.$expl_cod_nom[1].'
                                                                                                            </option>';

                                                                                        // Por defecto asigna la primer especialidad.
                                                                                        if(empty($wespecialidad_))
                                                                                        {
                                                                                            $wespecialidad_        = $expl_cod_nom[0];
                                                                                            $wespecialidad_nombre_ = $expl_cod_nom[1];
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }

                                                                            // Esta parte && ($id_concepto_uso_equipos != $dif_concepto && $id_concepto_examenes != $dif_concepto)
                                                                            // se pone para evitar un error cuando se da clic de nuevo en el boton liquidar y tienen que agregar los equipos o examenes
                                                                            // que estan en el array de liquidados en la función agregarEquiposExamenes() porque intenta agregar
                                                                            // wtercero wtercero_nombre wespecialidad wespecialidad_nombre como códigos de equipos o examenes
                                                                            if(array_key_exists($dif_concepto, $arr_datos_liquidados[$procedimiento_liquidar_cod]) && ($id_concepto_uso_equipos != codConceptoLegible($dif_concepto) && $id_concepto_examenes != codConceptoLegible($dif_concepto)))
                                                                            {
                                                                                if($arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wtercero'] == $codigo_wtercero)
                                                                                {
                                                                                    // Si en la liquidación está el mismo médico y solo se está actualizando la liquidación entonces
                                                                                    // tome el mismo valor indicado en la casilla de disponibilidad
                                                                                    $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wdisponibilidad'] = $wdisponibilidad;
                                                                                    $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wcuadroturno']    = $wcuadroturno;
                                                                                    $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['grupoMedico']     = $grupoMedico;
                                                                                }
                                                                                $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wtercero']             = $codigo_wtercero;
                                                                                $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wtercero_nombre']      = $nombre_wtercero;
                                                                                $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wespecialidad']        = $wespecialidad_;
                                                                                $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wespecialidad_nombre'] = $wespecialidad_nombre_;
                                                                            }
                                                                        }
                                                                        elseif(in_array($concepto_cod_ppal, $erp_liq_cx_inactivar_cuadro_turno))
                                                                        {
                                                                            $inactivar_cuadroTurno = true;
                                                                        }

                                                                        // Actualiza la información de tercero en el array para grabar
                                                                        $arr_ActualizaInfoTercero = array();
                                                                        $arr_ActualizaInfoTercero["procedimiento_liquidar_cod"] = $procedimiento_liquidar_cod;
                                                                        $arr_ActualizaInfoTercero["arr_CARGOS_PARA_GRABAR"]     = $arr_CARGOS_PARA_GRABAR;
                                                                        $arr_ActualizaInfoTercero["dif_concepto"]               = $dif_concepto;
                                                                        $arr_ActualizaInfoTercero["codigo_wtercero"]            = $codigo_wtercero;
                                                                        $arr_ActualizaInfoTercero["wespecialidad_"]             = $wespecialidad_;
                                                                        $arr_ActualizaInfoTercero["wtip_paciente"]              = $wtip_paciente;
                                                                        $arr_ActualizaInfoTercero["whora_cargo"]                = $whora_cargo;
                                                                        $arr_ActualizaInfoTercero["wfecha_cargo"]               = $wfecha_cargo;
                                                                        $arr_ActualizaInfoTercero["wdisponibilidad"]            = $wdisponibilidad;
                                                                        $arr_ActualizaInfoTercero["wcuadroturno"]               = $wcuadroturno;
                                                                        $arr_ActualizaInfoTercero["grupoMedico"]                = $grupoMedico;
                                                                        $arr_ActualizaInfoTercero["arr_datosDelCargo_tercero"]  = $arr_datosDelCargo_tercero;
                                                                        $arr_ActualizaInfoTercero["activar_select_cuadroTurno"] = $activar_select_cuadroTurno;
                                                                        $arr_ActualizaInfoTercero["arr_cuadrosTurnoTercero"]    = $arr_cuadrosTurnoTercero;
                                                                        $arr_ActualizaInfoTercero["nombre_wtercero"]            = $nombre_wtercero;
                                                                        $arr_ActualizaInfoTercero["wespecialidad_nombre_"]      = $wespecialidad_nombre_;
                                                                        $arr_ActualizaInfoTercero["porcentaje_terceroVer"]      = $porcentaje_terceroVer;
                                                                        $arr_ActualizaInfoTercero["requiere_tercero"]           = $requiere_tercero;
                                                                        $arr_ActualizaInfoTercero["porcentaje_tercero"]         = "";

                                                                        $arr_ActualizaInfoTercero = procesarDatosTerceroCargo($conex, $wemp_pmla, $wbasedato, $arr_ActualizaInfoTercero);

                                                                        foreach ($arr_ActualizaInfoTercero as $var_ => $var_value) {
                                                                            $$var_ = $var_value;
                                                                        }
                                                                    }

                                                                    if($requiere_tercero == "C")
                                                                    {
                                                                        $fn_check            = 'onclick="cargarMedicoSeleccionado(\'check_'.$id_campo_ter.'\',\''.$id_campo_ter.'\',\''.$id_campo_esp.'\')"';
                                                                        $params_check_med    = 'codigo_medico="'.$arr_datos_procedimiento['wespecialista'].'" nombre_medico="'.$arr_datos_procedimiento['wespecialistas_nombre'].'"';
                                                                        $params_check_esp    = 'codigo_esp="'.$arr_datos_procedimiento['wespecialidad'].'" nombre_esp="'.$arr_datos_procedimiento['wespecialidad_nombre'].'"';
                                                                        $datos_medico_oculto = ' <input id="check_'.$id_campo_ter.'" '.$fn_check.' type="checkbox" '.$params_check_med.' '.$params_check_esp.' class="bloquear_todo" /> ';
                                                                    }

                                                                    $campo_tercero = '';
                                                                    if($requiere_tercero == 'C')
                                                                    {
                                                                        $slt_cTur = '';
                                                                        $hdn_turno = 'display:none;';
                                                                        $slt_cTurOpts = '';
                                                                        if($activar_select_cuadroTurno)
                                                                        {
                                                                            if(count($arr_cuadrosTurnoTercero) > 0)
                                                                            {
                                                                                $tmp_arr_cuadrosTurnoTercero = $arr_cuadrosTurnoTercero;
                                                                                $hdn_turno = '';
                                                                                foreach ($arr_cuadrosTurnoTercero as $cod_cuadro => $value_cuadro)
                                                                                {
                                                                                    $selTd = ($wcuadroturno == $cod_cuadro || count($tmp_arr_cuadrosTurnoTercero) == 1) ? 'selected="selected"': "";
                                                                                    $slt_cTurOpts .= '<option value="'.$cod_cuadro.'" '.$selTd.' >'.$cod_cuadro.'-'.$value_cuadro.'</option>';
                                                                                }
                                                                            }
                                                                        }

                                                                        $disabled_opciones_tercero = "";
                                                                        if($inactivar_cuadroTurno)
                                                                        {
                                                                            $disabled_opciones_tercero = 'display:none;';
                                                                        }

                                                                        $slt_cTur = '<select x="'.$wcuadroturno.'" style="font-size:9pt;'.$disabled_opciones_tercero.'" '.$campos_localizacion_js.' etiqueta="wcuadroturno" id="'.$id_campo_ter.'cuadroturno" name="'.$id_campo_ter.'cuadroturno" class="modificaLiquidadoSELECT requerido bloquear_todo">
                                                                                        <option value="">Seleccione..</option>
                                                                                        '.$slt_cTurOpts.'
                                                                                     </select>
                                                                                     <input type="hidden" id="'.$id_campo_ter.'grupoMedico" name="'.$id_campo_ter.'grupoMedico" etiqueta="grupoMedico" '.$campos_localizacion_js.' value="'.$grupoMedico.'">';

                                                                        $opt_disponible = '';
                                                                        foreach ($arr_disponibilidades as $val_disp => $value_disp)
                                                                        {
                                                                            $selTd = ($wdisponibilidad == $val_disp) ? 'selected="selected"': "";
                                                                            $opt_disponible .= '<option value="'.$val_disp.'" '.$selTd.' >'.$val_disp.'-'.$value_disp.'</option>';
                                                                        }
                                                                        $ckd_disponible = '<select x="'.$wdisponibilidad.'" style="font-size:9pt;'.$disabled_opciones_tercero.'" '.$campos_localizacion_js.' id="'.$id_campo_ter.'disponible" etiqueta="wdisponibilidad"  name="'.$id_campo_ter.'disponible" class="modificaLiquidadoSELECT requerido bloquear_todo" onchange="consultarCuadrosTurno(\'wtercero_'.$dif_fila.'\', \'\', \'\');" >
                                                                                               <option value="">Seleccione..</option>
                                                                                               '.$opt_disponible.'
                                                                                           </select>';


                                                                        $campo_tercero = $datos_medico_oculto.'
                                                                                         <input '.$campos_localizacion_js.' title="'.$mensaje_no_tarifa.'" placeholder="'.$mensaje_no_tarifa.'" type="text" etiqueta="wtercero" id="'.$id_campo_ter.'" name="'.$id_campo_ter.'" value="'.$nombre_wtercero.'" class="tooltip modificaLiquidado liq_autocomplete requerido vacios_terceros bloquear_todo" codigo="'.$codigo_wtercero.'" nombre="'.$nombre_wtercero.'" >
                                                                                         <input '.$campos_localizacion_js.' type="hidden" procedimiento_liquidar_cod="'.$procedimiento_liquidar_cod.'" esEqEx="" dif_concepto="'.$dif_concepto.'" id="'.$id_campo_ter.'dishdn" name="'.$id_campo_ter.'dishdn" value="'.base64_encode(serialize($arr_datosDelCargo_tercero)).'" class="modificaLiquidadoCHECKBOX bloquear_todo" >
                                                                                         <div style="width:100%;">
                                                                                            <table>
                                                                                                <tr>
                                                                                                    <td id="'.$id_campo_ter.'disponible_td"><span style="font-size:8pt;color:green;">['.$porcentaje_terceroVer.']</span> <span style="'.$disabled_opciones_tercero.'">Disponible:</span>'.$ckd_disponible.'</td>
                                                                                                    <td id="'.$id_campo_ter.'cuadroturno_td" style="'.$hdn_turno.'">Turno:'.$slt_cTur.'</td>
                                                                                                </tr>
                                                                                            </table>
                                                                                         </div>';
                                                                                         // wtercero_dishdn => tiene parámetros que se pueden utilizar para saber el cuadro de turno de un tercero.
                                                                    }
                                                                    $campo_especialidad = ($requiere_tercero == 'C') ? '<select '.$campos_localizacion_js.' id="'.$id_campo_esp.'" name="'.$id_campo_esp.'" etiqueta="wespecialidad" value="" class="modificaLiquidadoSELECT liq_depend_autocomplete requerido bloquear_todo" >'.$option_especialidad.'</select>' : '';
                                                                }

                                                                $facturable                = "S";
                                                                $se_graba                  = "on";
                                                                $cheched_grabar            = 'checked="checked"';
                                                                $select_fac                = '';
                                                                $selected_factur_ON        = 'selected="selected"';
                                                                $selected_factur_OFF       = '';
                                                                $parametros_no_facturables = false;

                                                                // if($dif_concepto == $id_concepto_uso_equipos || $dif_concepto == $id_concepto_examenes)
                                                                // {
                                                                //     $facturable = ($arr_cargo['WTIENE_TARIFA'] == 'on') ? 'S': 'N';
                                                                //     $se_graba = ($arr_cargo['WTIENE_TARIFA'] == 'on') ? 'on': 'off';
                                                                //     if($facturable=='N' || $se_graba == 'off')
                                                                //     {
                                                                //         $parametros_no_facturables = true;
                                                                //     }
                                                                // }
                                                                // else
                                                                if($info_tarifa != '')
                                                                {
                                                                    $parametros_no_facturables = true;
                                                                    $facturable   = "N";
                                                                    $se_graba     = "off";
                                                                }

                                                                if($parametros_no_facturables)
                                                                {
                                                                    $selected_factur_ON  = '';
                                                                    $selected_factur_OFF = 'selected="selected"';

                                                                    $cheched_grabar = 'disabled="disabled"';
                                                                    $select_fac = 'disabled="disabled"';
                                                                    $inputs_valores = '
                                                                            <input '.$campos_localizacion_js.' type="text" id="wvalor_'.$dif_fila.'" name="wvalor_'.$dif_fila.'" etiqueta="wvalor" value="" placeholder="$ valor" size="10" style="text-align:right;" class="numerico requerido" >';
                                                                }

                                                                $cargo_facturable = "S";
                                                                if(count($arr_CargosGrabadosResponsablesDetallado) == 1)
                                                                {
                                                                    foreach ($arr_CargosGrabadosResponsablesDetallado as $cod_empresa => $arr_value_cargo)
                                                                    {
                                                                        $cargo_facturable = $arr_value_cargo['wfacturable'];
                                                                    }

                                                                    if(array_key_exists($procedimiento_liquidar_cod, $arr_datos_liquidados)
                                                                        && array_key_exists($dif_concepto, $arr_datos_liquidados[$procedimiento_liquidar_cod]))
                                                                    {
                                                                        $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wfacturable'] = $cargo_facturable;
                                                                    }
                                                                }

                                                                if($cargo_facturable == 'N')
                                                                {
                                                                    $selected_factur_ON  = '';
                                                                    $selected_factur_OFF = 'selected="selected"';
                                                                }

                                                                $css_notarifa = '';
                                                                // Si existe en el de liquidados entonces inicializa los datos con esos.
                                                                // echo "arr_datos_liquidados [ $procedimiento_liquidar_cod ][$dif_concepto]";
                                                                if(array_key_exists($procedimiento_liquidar_cod, $arr_datos_liquidados))
                                                                {
                                                                    if(array_key_exists($dif_concepto, $arr_datos_liquidados[$procedimiento_liquidar_cod]) && codConceptoLegible($dif_concepto) != $id_concepto_uso_equipos && codConceptoLegible($dif_concepto) != $id_concepto_examenes)
                                                                    {
                                                                        $selected_factur_ON  = '';
                                                                        if($cargo_facturable == 'S')
                                                                        {
                                                                            $selected_factur_ON  =  'selected="selected"';
                                                                        }

                                                                        $selected_factur_OFF = '';
                                                                        if($cargo_facturable == 'N')
                                                                        {
                                                                            $selected_factur_OFF = 'selected="selected"';
                                                                            $facturable = "N";
                                                                        }
                                                                        $cheched_grabar      = '';
                                                                        if($arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]['wgrabar'] == 'on')
                                                                        {
                                                                            $cheched_grabar      =  'checked="checked"';
                                                                            $css_notarifa = '';
                                                                        }
                                                                        else
                                                                        {
                                                                            $se_graba = 'off';
                                                                            $css_notarifa = 'td_noTarifa';
                                                                        }
                                                                        $cheched_grabar      = ($info_tarifa != '') ? 'disabled="disabled"': $cheched_grabar;
                                                                    }
                                                                }

                                                                $html_responsables = '';
                                                                $html_valores_resp = '';
                                                                $suma_excedentes = 0;
                                                                $total_responsables_mayor_a_cero = 0;
                                                                $otra_tarifa = $valor_tarifa;
                                                                $redondeoCentenaDll = false;
                                                                $redondeoCentenaEnc = false;
                                                                $total_responsables_cobro = 0;// Sumatoria de los valores de los responsables;
                                                                // print_r($arr_entidades_responsables);
                                                                $porcentaje_cxMult_pintar = 0;
                                                                $error_tarifa = 0;
                                                                $tarifa_pide_valor = false;
                                                                $cobro_por_rango = array();
                                                                $arr_politicas_cargos = array();
                                                                foreach ($arr_entidades_responsables as $codigo_responsable => $info_responsable)
                                                                {
                                                                    // Verifíca si hay algúna política aplicada al cargo
                                                                    if(array_key_exists($codigo_responsable, $arr_CargosGrabadosResponsablesDetallado)
                                                                        && array_key_exists("politicaAplico", $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable])
                                                                        && $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["politicaAplico"] != '')
                                                                    {
                                                                        $arr_politicas_cargos[] = str_replace("<br>","",$arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["politicaAplico"]);
                                                                    }

                                                                    // Verifíca si hay algúna restricción adicional aplicada al cargo
                                                                    if(array_key_exists($codigo_responsable, $arr_CargosGrabadosResponsablesDetallado)
                                                                        && array_key_exists("wcondicion_restriccion", $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable])
                                                                        && is_array($arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wcondicion_restriccion"])
                                                                        && count($arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wcondicion_restriccion"]) > 0)
                                                                    {
                                                                        // $guardar = "arr_datos_liquidar: ".print_r($arr_datos_liquidar,true).PHP_EOL;
                                                                        // seguimiento($guardar);
                                                                        $arr_politicas_cargos = array_merge($arr_politicas_cargos, $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wcondicion_restriccion"]);
                                                                    }

                                                                    $valor_final = 0;
                                                                    if(array_key_exists($codigo_responsable, $arr_CargosGrabadosResponsablesDetallado) && array_key_exists("valor_final_original", $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]))
                                                                    {
                                                                        $valor_final = $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["valor_final_original"]*1; // Todos los reponsables simulados generados tienen el mismo valor_final_origial por eso no hay problema en tomar el valor de cualquiera de ellos
                                                                    }

                                                                    if(array_key_exists($codigo_responsable, $arr_CargosGrabadosResponsablesDetallado) && array_key_exists("codRangoTiempo", $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable])
                                                                        && $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["codRangoTiempo"] != '')
                                                                    {
                                                                        $cobro_por_rango[] = $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["codRangoTiempo"]."|Tiempo:".$arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["valor_rango_busco"];
                                                                    }

                                                                    if(array_key_exists($codigo_responsable, $arr_CargosGrabadosResponsablesDetallado) && array_key_exists("wvalorTarifaBase", $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]))
                                                                    {
                                                                        $valor_tarifa = $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wvalorTarifaBase"]*1; // Todos los reponsables simulados generados tienen el mismo valor_final_origial por eso no hay problema en tomar el valor de cualquiera de ellos
                                                                        // echo "[$valor_tarifa]";
                                                                    }

                                                                    // if($codigo_responsable != $codEmpPartic)
                                                                    {
                                                                        $valor_cobrar = 0;

                                                                        if(array_key_exists($codigo_responsable, $arr_CargosGrabadosResponsablesDetallado) && codConceptoLegible($dif_concepto) != $id_concepto_uso_equipos && codConceptoLegible($dif_concepto) != $id_concepto_examenes)
                                                                        {
                                                                            $porcentaje_cxMult_pintar = $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["porcentaje_cxMult_CARGO"]*1; // Todos los responsables simulados generados tienen el mismo porcentaje_cxMult por eso no hay problema en tomar el valor de cualquiera de ellos
                                                                            $error_tarifa = $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["error_tarifa"]; // Todos los responsables simulados generados tienen el mismo error_tarifa por eso no hay problema en tomar el valor de cualquiera de ellos
                                                                            $tarifaEmpresa_cargo = $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["tarifa_empresa_cargo"];
                                                                            if(array_key_exists($codigo_responsable, $arr_CargosGrabadosResponsablesDetallado) && $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wfacturable"] == 'S')
                                                                            {
																				//JERSON
																				if($arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wvaltarReco"]*1 == 0 && $valorOriginalDigitado != ""){
																					$arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wvaltarReco"] = $valorOriginalDigitado;
																					$arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wvalorTarifaBase"] = $valorOriginalDigitado;
																				}
																				
                                                                                $valor_cobrar             = $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wvaltarReco"]*1;
                                                                                $suma_excedentes          += $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wvaltarExce"]*1;
                                                                                $total_responsables_cobro += ($arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wvaltarExce"]*1)+$valor_cobrar;
                                                                            }

                                                                            if($modifica_valor == 'S' && array_key_exists($tarifaEmpresa_cargo, $arr_tarifas_modifican_valor_erp))
                                                                            {
                                                                                $tarifa_pide_valor = true;
                                                                            }
                                                                            elseif($modifica_valor == 'S')
                                                                            {
                                                                                // AQUÍ SE CONTROLA SI SE DEBE MOSTRAR CAMPO MODIFICABLE DE VALOR O NO PARA LAS EXCEPCIONES TARIFARIAS DE LOS MÉDICOS.
                                                                                $cod_tercero_excep = $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]['wcodter'];
                                                                                // $guardar = print_r($arr_CargosGrabadosResponsablesDetallado[$codigo_responsable],true).PHP_EOL;
                                                                                // $guardar .= print_r($cod_tercero_excep,true).PHP_EOL;
                                                                                // seguimiento($guardar);
                                                                                if(array_key_exists($cod_tercero_excep, $arr_control_excepcionTarifaria) && $arr_control_excepcionTarifaria[$cod_tercero_excep]["numero_cargo"] == 0)
                                                                                {
                                                                                    // $data["excepcionTarifaria"][] = array("excepcionTarifaria"=>$arr_excepcionTarifaria, "tercero"=>$cod_tercero_excep,"concepto"=>$cod_concepto_excep,"responsale"=>$codigo_responsable,"maestro"=>$wbasedato."_000242");
                                                                                    $tarifa_pide_valor = true;
                                                                                    $arr_control_excepcionTarifaria[$cod_tercero_excep]["numero_cargo"] += 1;
                                                                                    $data["excepcionTarifaria"][$cod_tercero_excep] = $arr_control_excepcionTarifaria;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                $tarifa_pide_valor = true;
                                                                            }

                                                                            $otra_tarifa     = $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wvalorTarifaBase"]*1;

                                                                            $redondeoCentenaDll = $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wredondear_centena"];
                                                                            if($arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wredondear_centena"]) // [updt-76] Si por lo menos un cargo se redondeó entonces mostrar en el valor global el simbolo redondeo.
                                                                            {
                                                                                $redondeoCentenaEnc = $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wredondear_centena"];
                                                                            }
                                                                        }

                                                                        if(array_key_exists($codigo_responsable, $arr_CargosGrabadosResponsablesDetallado) && $arr_CargosGrabadosResponsablesDetallado[$codigo_responsable]["wfacturable"] == 'S')
                                                                        {
                                                                            if($valor_cobrar > 0 && $suma_excedentes > 0) //Si hay valor a cobrar del responsable y adicionalmente hay excedente
                                                                            {
                                                                                $total_responsables_mayor_a_cero += 2;
                                                                            }
                                                                            elseif($valor_cobrar > 0)
                                                                            {
                                                                                $total_responsables_mayor_a_cero += 1;
                                                                            }
                                                                            elseif($suma_excedentes > 0)
                                                                            {
                                                                                $total_responsables_mayor_a_cero += 1;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            $valor_cobrar = 0;
                                                                        }
                                                                        $html_responsables .= '<td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >'.$info_responsable["simulacion_campos"]['Resnit'].'-'.utf8_encode($info_responsable["simulacion_campos"]['Empnom']).'</td>';
                                                                        // Td del tooltip de responsables
                                                                        $html_valores_resp .= '<td class="" style="text-align:center;font-size:9pt;font-weight:bold;" >'.(($redondeoCentenaDll && ($valor_cobrar*1 > 0))?'[~] ':'').number_format($valor_cobrar,CANTIDAD_DECIMALES).'</td>';
                                                                    }
                                                                    // else
                                                                    // {
                                                                    //     // $suma_excedentes += $arr_CargosGrabadosResponsables[$codigo_responsable]["wvaltarExce"]*1;
                                                                    // }
                                                                }

                                                                $html_responsables .= '<td class="encabezadoTabla" style="text-align:center;font-size:9pt;font-weight:bold;" >Excedente</td>';
                                                                $html_valores_resp .= '<td class="" style="text-align:center;font-size:9pt;font-weight:bold;" >'.number_format($suma_excedentes,CANTIDAD_DECIMALES).'</td>';

                                                                $html_tds_TOTALES[$procedimiento_liquidar_cod] = ($html_tds_TOTALES[$procedimiento_liquidar_cod]*1)+$total_responsables_cobro;

                                                                // $inputs_valores = $valor_tarifa;
                                                                // Si es solo un responsable, se conserva entonces el valor del cargo a tarifa de ese responsable, es posible que el cargo se haya originado
                                                                // con un responsable pero por no tener tope entonces se le cobre al responsable siguiente a tarifa de ese nuevo responsable.
                                                                if($total_responsables_mayor_a_cero == 1)
                                                                {
                                                                }
                                                                $valor_final_simulado = $total_responsables_cobro;
                                                                $inputs_valores = $otra_tarifa;

                                                                $img_cobro_rango = '';
                                                                if(count($cobro_por_rango) > 0)
                                                                {
                                                                    $img_cobro_rango = '<img border="0" width="10" height="18" style="display:;" src="../../images/medical/hce/History.png" class="tooltip" title="Cobro por rango de tiempo - Código plantilla: - *'./*print_r($arr_CargosGrabadosResponsablesDetallado, true).*/implode(" - *", $cobro_por_rango).'">';
                                                                }

                                                                $html_aplican_politicas = (count($arr_politicas_cargos) > 0) ? '<div style="font-size:8pt;border:solid 1px #f2f2f2;text-align:left;background-color:#ffc3c1;"><b>Políticas:</b><br><ul style="list-style-type: circle;margin-left: 12px;"><li>'.implode("</li><li>", $arr_politicas_cargos).'</li></ul></div>': '' ;
                                                                $div_caja_flotante = '
                                                                                <div id="caja_flotante_'.$dif_fila.'" style="display:none; background-color: #FFFEE2; padding: 5px;" class="caja_flotante" >
                                                                                    <div style="width:100%;text-align:left;" ><span style="font-weight:bold;color:red;" >^</span> <span class="alinear_derecha" style="width: 20px; cursor:pointer;" title="Cerrar" ><img src="../../images/medical/eliminar1.png" alt="Cerrar" onclick="cerrarFlotante();" /></span></div>
                                                                                    <table align="center">
                                                                                        <tr>
                                                                                            '.$html_responsables.'
                                                                                        </tr>
                                                                                        <tr class="fila1" >
                                                                                            '.$html_valores_resp.'
                                                                                        </tr>
                                                                                    </table>
                                                                                    '.$html_aplican_politicas.'
                                                                                </div>';

                                                                // Si hay examenes y equipos por mostrar entonces se muestra solo un td con colspan
                                                                if(!empty($html_equipos_examenes))
                                                                {
                                                                    $fila_html_TIP_POS[$procedimiento_liquidar_cod][$codigo_concepto][] = '
                                                                                <td class="'.$csscnpt.'" colspan="'.$colspan.'" style="font-size:8pt;" valign="top" >'.$html_equipos_examenes.'</td>';
                                                                }
                                                                else
                                                                {
                                                                    $vlr_total_cargo = '<a class="tooltip" title="Click para ver detalle" href="javascript:" onclick="posicionElemento(this);" dif_fila="'.$dif_fila.'" >'.number_format($valor_final_simulado, CANTIDAD_DECIMALES).'</a>';
                                                                    // Si el concepto modifica valor entonces se debe crear el campo para ingresar el valor
                                                                    $campo_modifica_valor = '';
                                                                    // Si es concepto que modifica valor y no tiene tarifa entonces permite escribir un valor.
                                                                    // Ó si es un concepto que modifica valor y la tarífa esta marcada en root_51 inficando que siempre debe permitir escribir un valor, por ejemplo para el caso de tarífas particulares.
																	
																	//JERSON
																	$arr_excepcionTarifariaJ = medicoExcepcionTarifaria($conex, $wemp_pmla, $wbasedato, $codigo_wtercero, codConceptoLegible($codigo_concepto), $codigo_responsable, $arr_datos_procedimiento['codigo']);
																	
																    if(($modifica_valor == 'S' && $error_tarifa == 1) || ($modifica_valor == 'S' && $tarifa_pide_valor) || $arr_excepcionTarifariaJ["excepcionTarifaria"]) // && $info_tarifa != '' //&& $valor_final_simulado == ''
                                                                    {
                                                                        $valor_final_simulado = ($valor_final_simulado == '0') ? '': $valor_final_simulado;
                                                                        
																		/* print_r($arr_CargosGrabadosResponsablesDetallado, true).'|'.$valor_final_simulado.'|'.$tarifa_pide_valor.*/
																		$vlr_total_cargo = '<input size="7" '.$campos_localizacion_js.' title="Digitar el valor a cobrar" placeholder="Valor" type="text" etiqueta="wvalor_digitado" id="wvalor_digitado_'.$dif_fila.'" name="wvalor_digitado_'.$dif_fila.'" value="'.trim($valor_final_simulado).'" class="tooltip modificaLiquidado requerido bloquear_todo" codigo="'.$codigo_wtercero.'" nombre="'.$nombre_wtercero.'" style="text-align:right;" onkeyup="actualizarEquivalenteHidden(this)" onkeypress="return soloNumeros(event);" valorAnterior="'.$valorOriginalDigitado.'">';

                                                                        $mostraMsjNT = false;
																		if(!$tarifa_pide_valor){
																			if($arr_excepcionTarifariaJ["excepcionTarifaria"]){																				
																				if(trim($valor_final_simulado) == "")																					
																					$mostraMsjNT = true;
																			}
																			else
																				$mostraMsjNT = true;
																		}
																		
																		if($mostraMsjNT)
                                                                        {
                                                                            $info_tarifa = '<img style="cursor:pointer" id="" class="tooltip" title="NO TIENE TARIFA" width="16" height="16" src="../../images/medical/sgc/Warning-32.png" />';
                                                                            $cheched_grabar      = ($info_tarifa != '') ? 'disabled="disabled"': $cheched_grabar;
                                                                            $css_notarifa = 'td_noTarifa';
                                                                        }
                                                                    }
																	
																	//JERSON SEGUIMIENTO
																	//$vlr_total_cargo = print_r($arr_excepcionTarifariaJ, true)."|".$codigo_wtercero."|".codConceptoLegible($codigo_concepto)."|".$codigo_responsable."|".$arr_datos_procedimiento['codigo']."|".$teasasass."|".$modifica_valor."|".$error_tarifa."|".$tarifa_pide_valor."|".$vlr_total_cargo;

                                                                    $bg_slr = "";
                                                                    if($campo_tercero != '')
                                                                    {
                                                                        $bg_slr = "background-color:#fffee2;border: solid 1px #c3d9ff;";
                                                                    }
                                                                    // TDs de la tabla de liquidación de conceptos
                                                                    $fila_html_TIP_POS[$procedimiento_liquidar_cod][$codigo_concepto][] = '
                                                                                <td class="" style="font-size:8pt;'.$bg_slr.'" >'.$campo_tercero.'</td>
                                                                                <td class="tooltip" style="font-size:8pt;" title="'.$concepto_cod_ppal.'" >'.$campo_especialidad.'</td>
                                                                                <td class=" tooltip" style="font-size:8pt;text-align:right;" title="'.$concepto_cod_ppal.'" >'.$porcentaje_cxMult_pintar.'%</td>
                                                                                <td class=" tooltip" style="font-size:8pt;text-align:right;" title="'.$concepto_cod_ppal.'" >'.(($redondeoCentenaEnc)?'[~] ':'').number_format($inputs_valores, CANTIDAD_DECIMALES).'</td>
                                                                                <td class="" style="font-size:11pt;font-weight:bold;text-align:right;" >
                                                                                    '.$img_cobro_rango.'
                                                                                    '.$div_caja_flotante.'
                                                                                    '.$vlr_total_cargo.'
                                                                                </td>
                                                                                <td class="" style="font-size:8pt;" >
                                                                                            <select disabled="disabled" id="wfacturable_'.$dif_fila.'" name="wfacturable_'.$dif_fila.'" etiqueta="wfacturable" class="modificaLiquidadoSELECT" '.$select_fac.' '.$campos_localizacion_js.' >
                                                                                                <option value="S" '.$selected_factur_ON.'>Si</option>
                                                                                                <option value="N" '.$selected_factur_OFF.'>No</option>
                                                                                            </select>
                                                                                </td>
                                                                                <td class=" '.$css_notarifa.' tooltip" title="'.$concepto_cod_ppal.'" >
                                                                                            '.$info_tarifa.'<input type="checkbox" id="wgrabar_'.$dif_fila.'" name="wgrabar_'.$dif_fila.'" etiqueta="wgrabar" class="modificaLiquidadoCHECKBOX bloquear_todo" value="on" '.$cheched_grabar.' '.$campos_localizacion_js.' />
                                                                                </td>';
                                                                }

                                                                if(!array_key_exists($dif_concepto, $arr_datos_liquidados[$procedimiento_liquidar_cod]))
                                                                {
                                                                    $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto] = array();
                                                                }

                                                                if(codConceptoLegible($dif_concepto)!= $id_concepto_uso_equipos && codConceptoLegible($dif_concepto)!= $id_concepto_examenes)
                                                                {
                                                                    $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto] =
                                                                            array(  "wconcepto_nombre"           => $arr_datos_procedimiento['configuracion_liquidar'][$concepto_cod_ppal]['concepto_nom_ppal'],
                                                                                    "id_insumo"                  => "", // Si tiene valor es porque es un medicamento o material
                                                                                    "wcantidad"                  => $arr_datos_procedimiento['configuracion_liquidar'][$concepto_cod_ppal]['cantidad_concepto'],
                                                                                    "wcantidad_concepto_pqte"    => $arr_datos_procedimiento['configuracion_liquidar'][$concepto_cod_ppal]['cantidad_concepto'],
                                                                                    "wprocedimiento"             => $procedimiento_liquidar_cod,
                                                                                    "wprocedimiento_nombre"      => $arr_procedimientos_liquidar[$procedimiento_liquidar_cod]['nombre'],
                                                                                    "wconcepto"                  => $concepto_cod_ppal,
                                                                                    "wdisponibilidad"            => $wdisponibilidad,
                                                                                    "wcuadroturno"               => $wcuadroturno,
                                                                                    "grupoMedico"                => $grupoMedico,
                                                                                    "wtercero"                   => $codigo_wtercero,
                                                                                    "wtercero_nombre"            => $nombre_wtercero,
                                                                                    "wespecialidad"              => $wespecialidad_,
                                                                                    "cobraHonorarios"            => "on",
                                                                                    "wespecialidad_nombre"       => $wespecialidad_nombre_,
                                                                                    "wporcentaje"                => $porcentaje_cxMult_pintar,
                                                                                    "wvalor"                     => $valor_final,
                                                                                    "wvalor_final"               => $valor_final,
                                                                                    "wfacturable"                => $facturable,
                                                                                    "wgrabar"                    => $se_graba,
                                                                                    "wbaseliquidacion"           => $wbaseliquidacion,
                                                                                    "wtipo_facturacion"          => $arr_info_conf['procedimiento_tarifa'],
                                                                                    "wturno_cirugia"             => $arr_datos_procedimiento["wturno_cirugia"],
                                                                                    "wtipo_anestesia_cx"         => $arr_datos_procedimiento["wtipo_anestesia_cx"],
                                                                                    "wtiempo_sala_recuperarcion" => $arr_datos_procedimiento["wtiempo_sala_recuperarcion"],
                                                                                    "wtiempo_uso_minutos"        => $arr_datos_procedimiento["wtiempo_uso_minutos"],
                                                                                    "wtiempo_minutos_cx"         => $arr_datos_procedimiento["wtiempo_minutos_cx"],
                                                                                    "wexiste"                    => "",
                                                                                    "wserv"                      => $arr_info_conf['wserv'],
                                                                                    "mueve_inventario"           => $arr_info_conf['mueve_inventario']);

                                                                    // Si hay un valor digitado para este procedimiento-concepto entonces inicializarlo de nuevo
                                                                    // porque en algunos momento se pierde el valor en esta posicíon, es posible que sea porque en un proceso anterior
                                                                    // en este código se reinicia a array vacío la posición de pricedimiento-concepto para obligar crear el array
                                                                    // de cero con valores actualizados.
                                                                    if(isset($valorOriginalDigitado) && !empty($valorOriginalDigitado))
                                                                    {
                                                                        $arr_datos_liquidados[$procedimiento_liquidar_cod][$dif_concepto]["wvalor_digitado"] = $valorOriginalDigitado;
                                                                    }

                                                                    if(array_key_exists($procedimiento_liquidar_cod, $arr_CARGOS_PARA_GRABAR) && array_key_exists($dif_concepto, $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod]))
                                                                    {
                                                                        $editar_cargos = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto];
                                                                        foreach ($editar_cargos as $secuencia => $cargo_editar)
                                                                        {
                                                                            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencia]["wfacturable"] = $facturable;
                                                                            $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencia]["wgrabar"]     = $se_graba;
																			
																			//JERSON																			
																			$wvaltarJ = $arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencia]["wvaltar"]; 
																			if($wvaltarJ == 0 && isset($valorOriginalDigitado) && $valorOriginalDigitado > 0){
																				$arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencia]["wvaltar"]     = $valorOriginalDigitado;
																				$arr_CARGOS_PARA_GRABAR[$procedimiento_liquidar_cod][$dif_concepto][$secuencia]["wvaltarReco"] = $valorOriginalDigitado;
																			}
																		}
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                }
                                                                $sbtotal += $valor_final*1;

                                                                $cont_pint++;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    $nombre_proc_exp = explode("-", $arr_procedimientos_liquidar[$procedimiento_liquidar_cod]['nombre']);
                                                    $data['procedimientos_materiales'][$procedimiento_liquidar_cod] = $nombre_proc_exp[1];
                                                }
                                                $css_count++;
                                            }
                                            else
                                            {
                                                // $fila_html .= '<td colspan="'.$colspan.'" class="'.$css_span_td.'" >&nbsp;</td>';
                                                $fila_html_TIP_POS[$procedimiento_liquidar_cod][$codigo_concepto][] = ' <td class="" style="background-color: #FBFBFB;color:#b0b0b0;" >- -</td>
                                                                                                                        <td class="" style="background-color: #FBFBFB;color:#b0b0b0;" >- -</td>
                                                                                                                        <td class="" style="background-color: #FBFBFB;color:#b0b0b0;text-align:right;" >- -</td>
                                                                                                                        <td class="" style="background-color: #FBFBFB;color:#b0b0b0;text-align:right;" >- -</td>
                                                                                                                        <td class="" style="background-color: #FBFBFB;color:#b0b0b0;font-size:11pt;font-weight:bold;text-align:right;" >'.number_format("0", CANTIDAD_DECIMALES).'</td>
                                                                                                                        <td class="" style="background-color: #FBFBFB;color:#b0b0b0;" >- -</td>
                                                                                                                        <td class="" style="background-color: #FBFBFB;color:#b0b0b0;" >- -</td>';
                                                                                                                        // <td class="'.$css_span_td.'" >- -</td>
                                                                                                                        // <td class="'.$css_span_td.'" >- -</td>
                                                                                                                        // <td class="'.$css_span_td.'" >- -</td>
                                            }

                                            $contador_spn_td++;
                                        }
                                    }
                                }

                                // Cuando el array arr_lista_conceptos esta vacío es posible que se puedan mostrar en pantalla solo los insumos, solo que no hay un concepto
                                // de materiales y medicamentos que se deba cobrar, para poderlos mostrar es necesario que el array de conceptos no esté vacío, se simula tener un concepto
                                // para poder mostrar los insumos, si el array esta vacio se asigna a un temporal y aqui en esta linea se vuelve a dejar arr_lista_conceptos tal como estaba
                                // gracias al array arr_lista_conceptos_auxiliar
                                $arr_lista_conceptos = $arr_lista_conceptos_auxiliar;

                                if(!array_key_exists($TIP_POS, $arr_procedimientos_liquidar_PPNP))
                                {
                                    $arr_procedimientos_liquidar_PPNP[$TIP_POS] = array();
                                    $arr_procedimientos_liquidar_PPNP[$TIP_POS] = $arr_procedimientos_liquidar;
                                }

                                $manual_liquidacion = "";
                                if(!empty($wbaseliquidacion_nombre))
                                {
                                    // Al consultar manuales por cada responsable, entonces puede ser que se apliquen varios manuales diferentes.
                                    // entonces no tendría razón de ser de mostrar solo uno, puede generar inconvenientes en la interpreración.
                                    // $img_tlp = '<img border=\'0\' width=\'10\' height=\'10\' style=\'display:;\' src=\'../../images/medical/root/info.png\' >';
                                    // $manual_liquidacion = '<div style="width:100%;text-align: left;" class="fila1 tooltip" title="'.$img_tlp.' '.$wbaseliquidacion_acto_quirurgico.'" ><img border="0" width="10" height="10" style="display:;" src="../../images/medical/root/info.png" > Se usó el manual para cirugías multiples: ['.$wbaseliquidacion.'] '.$wbaseliquidacion_nombre.'</div>';
                                }

                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                                // $guardar = print_r($arr_datos_liquidados,true).PHP_EOL;
                                // seguimiento($guardar);

                                // $arr_cargos_sinTarifaModifValor
                                // $guardar = "arr_cargos_sinTarifaModifValor: ".print_r($arr_cargos_sinTarifaModifValor,true).PHP_EOL;
                                // seguimiento($guardar);
                                // $guardar = "arr_datos_liquidar: ".print_r($arr_datos_liquidar,true).PHP_EOL;
                                // seguimiento($guardar);

                                // $guardar = "arr_CARGOS_PARA_GRABAR: ".print_r($arr_CARGOS_PARA_GRABAR,true).PHP_EOL;
                                // $guardar = "arr_TOPES_ENTIDADES: ".print_r($arr_TOPES_ENTIDADES,true).PHP_EOL;
                                // $guardar = "arr_datos_liquidados: ".print_r($arr_datos_liquidados,true).PHP_EOL;
                                // $guardar = "arr_procedimientos_orden: ".print_r($arr_procedimientos_orden,true).PHP_EOL.PHP_EOL.PHP_EOL.PHP_EOL;
                                // $guardar = print_r($arr_procedimientos_orden_liquidar,true).PHP_EOL;
                                // $guardar = "arr_extras: ".print_r($arr_extras,true).PHP_EOL;
                                // $guardar = print_r($orden_conceptos_por_procedimiento,true).PHP_EOL;
                                // $guardar = print_r($arr_lista_conceptos,true).PHP_EOL;
                                // seguimiento($guardar);
                            }
                            $arr_datos_liquidar_PPNP[$TIP_POS] = $arr_datos_liquidar;
                        }

                        eliminarTemporalCargos($conex, $wemp_pmla, $wbasedato, $generar_temporal, $TABLA_TEMP_106);

                        $arr_datos_liquidar = array();// Se actualiza el array inicial para que tome posibles cambios dentro del proceso de la liquidación;
                        foreach ($arr_datos_liquidar_PPNP as $key_TIP_POS => $arr_info_arr_datos_liquidar)
                        {
                            if(count($arr_datos_liquidar) == 0)
                            {
                                // Los datos comunes a los subarrays por tipo_pos se asignan la primera vez, arr_datos_paciente, wnumero_vias wtipo_anestesia, wtiempo_sala_recuperarcion
                                $arr_datos_liquidar = $arr_info_arr_datos_liquidar;
                                $arr_datos_liquidar["arr_para_liquidar"] = array();
                            }

                            foreach ($arr_info_arr_datos_liquidar["arr_para_liquidar"] as $key_prced_ter_espe => $arr_info_prced_ter_espe)
                            {
                                if(!array_key_exists($key_prced_ter_espe, $arr_datos_liquidar["arr_para_liquidar"]))
                                {
                                    $arr_datos_liquidar["arr_para_liquidar"][$key_prced_ter_espe] = $arr_info_prced_ter_espe;
                                }
                            }
                        }
                        // $guardar = "arr_datos_liquidar: ".print_r($arr_datos_liquidar,true).PHP_EOL;
                        // seguimiento($guardar);
                        // $guardar = "fila_html_TIP_POS: ".print_r($fila_html_TIP_POS,true).PHP_EOL;
                        // seguimiento($guardar);

                        foreach ($arr_lista_conceptos as $codigo_concepto => $nombre_concepto)
                        {
                            $cont_filas_concep++;
                            $csscnpt = ($cont_filas_concep % 2 == 0) ? 'fila1': 'fila2';
                            $tds_concep_por_proced = "";
                            foreach ($html_tds_TOTALES as $cod_pro => $arrvalue)
                            {
                                if(array_key_exists($cod_pro, $fila_html_TIP_POS) && array_key_exists($codigo_concepto, $fila_html_TIP_POS[$cod_pro]))
                                {
                                    $tds_concep_por_proced .= implode("",$fila_html_TIP_POS[$cod_pro][$codigo_concepto]);
                                }
                                else
                                {
                                    $tds_concep_por_proced .= ' <td class="" style="background-color:#FBFBFB; color: #b0b0b0;" >- -</td>
                                                                <td class="" style="background-color:#FBFBFB; color: #b0b0b0;" >- -</td>
                                                                <td class="" style="background-color:#FBFBFB; color: #b0b0b0;text-align:right;" >- -</td>
                                                                <td class="" style="background-color:#FBFBFB; color: #b0b0b0;text-align:right;" >- -</td>
                                                                <td class="" style="background-color:#FBFBFB; color: #b0b0b0;font-size:11pt;font-weight:bold;text-align:right;" >'.number_format("0", CANTIDAD_DECIMALES).'</td>
                                                                <td class="" style="background-color:#FBFBFB; color: #b0b0b0;" >- -</td>
                                                                <td class="" style="background-color:#FBFBFB; color: #b0b0b0;" >- -</td>';
                                }
                            }
                            $html_tds_valores .= '
                                                <tr class="'.$csscnpt.'" onmouseover="trOver(this);" onmouseout="trOut(this);">
                                                <td class="encabezadoTabla" style="text-align:left;" >'.$codigo_concepto.'-'.$nombre_concepto.'</td>'
                                                .$tds_concep_por_proced;
                            $html_tds_valores .= '</tr>';
                        }
                        // $html_tds_valores[] = $fila_html;

                        //formatear números de totales
                        foreach ($html_tds_TOTALES as $codigo_procedimiento => $value) {
                            $sumar_insumos_valor = 0;
                            if(array_key_exists($codigo_procedimiento, $arr_insumos_procedimiento))
                            {
                                $sumar_insumos_valor = $arr_html_insumos_por_procedimiento[$codigo_procedimiento]["sumatoria_medicamento"];
                                $value += $sumar_insumos_valor*1;
                                $sumar_material_valor = $arr_html_insumos_por_procedimiento[$codigo_procedimiento]["sumatoria_material"];
                                $value += $sumar_material_valor*1;
                            }
                            $TOTAL_CIRUGIAS += $value;
                            $html_tds_TOTALES[$codigo_procedimiento] = number_format($value,CANTIDAD_DECIMALES);
                        }

                        // Procedimientos seleccionables para agregarle conceptos
                        $options_procedimientos = '<option value=""></option>';
                        foreach ($arr_procedimientos_liquidar_PPNP as $key_TIP_POS => $arr_procedimientos_liquidar_info)
                        {
                            foreach ($arr_procedimientos_liquidar_info as $key_procedimiento => $arr_info_proc)
                            {
                                $class_join = $key_procedimiento; // Concatena todos los conceptos de un procedimiento, esto permite saber si para un procedimiento ya se agregó un concepto, justo cuando se está intentando adicionar un nuevo concepto
                                // Los procedimientos que ya tengan ese concepto agregado entonces no aparecen en la lista de selección.
                                $msjPosBilater = $arr_info_proc['codigo'];
                                // if($arr_info_proc['wesbilateral'] == 'on')
                                if(!empty($arr_info_proc['wposicion_organo_nom']))
                                {
                                    $msjPosBilater = $arr_info_proc['codigo']." [".$arr_info_proc['wposicion_organo_nom']."] ";
                                }

                                foreach ($arr_info_proc["configuracion_liquidar"] as $concepto_del_procedimiento => $value)
                                {
                                    $class_join .= "_".$concepto_del_procedimiento;
                                }
                                $texto_imp = str_replace('-','', $arr_info_proc['nombre']);
                                $texto_imp = str_replace($arr_info_proc['codigo'], $msjPosBilater, $texto_imp);
                                $options_procedimientos .= '<option value="'.$key_procedimiento.'" lista="'.$class_join.'" >'.trim($texto_imp).'</option>';
                            }
                        }

                        $noadd_con = ($es_paquete) ? 'display:none;': '';

                        $htmlppal = '
                                <div style="width:1235px; overflow:auto;" >
                                <table class="margen-superior-eventos" align="center" >
                                    <tr>
                                        <td>&nbsp;</td>
                                        '.implode("", $arr_encabezados_proced['colspan_nombre']).'
                                    </tr>
                                    <tr>
                                        <td>&nbsp;</td>
                                        '.implode("", $arr_encabezados_proced['columnas_valores']).'
                                    </tr>
                                    '.$html_tds_valores.'
                                    <tr class="encabezadoTabla" >
                                        <td onclick="mostrarOcultarInsumos(\'ver_insumos\');" style="cursor:pointer;" onmouseover="trOver(this);" onmouseout="trOut(this);">
                                        MEDICAMENTOS
                                        <br>
                                        <span >
                                        <u><img border="0" width="10" height="10" style="display:;" src="../../images/medical/root/info.png" >
                                            Ver/Ocultar</u>
                                        </span>
                                        </td>
                                        '.implode("", $arr_encabezados_proced['columnas_insumos']).'
                                    </tr><tr class="encabezadoTabla" >
                                        <td onclick="mostrarOcultarInsumos(\'ver_materiales\');" style="cursor:pointer;" onmouseover="trOver(this);" onmouseout="trOut(this);">
                                        MATERIALES
                                        <br>
                                        <span >
                                        <u><img border="0" width="10" height="10" style="display:;" src="../../images/medical/root/info.png" >
                                            Ver/Ocultar</u>
                                        </span>
                                        </td>
                                        '.implode("", $arr_encabezados_proced['columnas_materiales']).'
                                    </tr>
                                    <tr class="encabezadoTabla" >
                                        <td>Totales</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>
                                        <td  style="font-size:11pt;font-weight:bold;">
                                            '.implode("</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>",$html_tds_TOTALES).'
                                        </td>
                                        <td>&nbsp;</td><td>&nbsp;</td>
                                    <tr/>
                                </table>
                                </div>
                                <table align="center" style="">
                                    <tr>
                                        <td class="encabezadoTabla" style="">Total Cirugía(s)</td>
                                        <td class="fila1" style="font-weight:bold;font-size: 11pt;">'.number_format($TOTAL_CIRUGIAS,CANTIDAD_DECIMALES).'</td>
                                    </tr>
                                </table>
                                <!-- <div class="fila1" style="text-align:left;font-weight:bold;font-size:10pt;" >TOTAL INSUMOS: <a href="javascript:" onclick="posicionElemento(this);" dif_fila="insumos" style="" >'.number_format($suma_total_simulada, CANTIDAD_DECIMALES).'</a></div> -->

                                <table>
                                    <tr class="fila1" id="tr_add_" style="background-color:#FFFEE2;'.$noadd_con.'" >
                                        <td>Agregar concepto: </td>
                                        <td><input style="font-size:8pt" type="text" id="add_concepto" name="add_concepto" value="" placeholder="Concepto" codigo="" nombre="" class="concepto_autocomplete" ></td>
                                        <td id="td_add_equipo" style="display:none; " >Equipo:
                                            <input style="font-size:8pt" type="text" id="add_equipo" name="add_equipo" value="" placeholder="Equipo" codigo="" nombre="" class="add_equipos_examenes" >
                                        </td>
                                        <td id="td_add_examen" style="display:none; " >Exámen:
                                            <input style="font-size:8pt" type="text" id="add_examen" name="add_examen" value="" placeholder="Exámen" codigo="" nombre="" class="add_equipos_examenes" >
                                        </td>
                                        <td id="td_add_procedimiento" style="display:none;" >Procedimiento:
                                            <select style="font-size:8pt" name="add_procedimiento" id="add_procedimiento" onclange="validarSeleccionable(this);">
                                                '.$options_procedimientos.'
                                            </select>
                                        </td>
                                        <td>
                                            <input class="btn_loading bloquear_todo" type="button" id="btn_add_concepto" name="btn_add_concepto" value="Adicionar" onclick="validarTarifaConceptoAdicional(\'add_procedimiento\',\'add_concepto\',\'tabla_conceptos_liq_\');" />
                                        </td>
                                    </tr>
                                </table>';
                        // $htmlppal .= $html;

                        // Si tiene por lo menos una posición es porque hay por lo menos un cargo sin tarífa.
                        $html_btn_actualizar = '<button id="btn_reliquidacion" onclick="reliquidar_cx(this);" class="bloquear_todo" style="display:none;">Actualizar liquidaci&oacute;n</button>';
                        $html_btn_grabar     = '<button id="btn_grabar_liquidacion" onclick="guardarLiquidacion(this);" class="btn_loading bloquear_todo" >Grabar liquidaci&oacute;n</button>';
                        $html_botones_guardar_actualizar = '
                                               '.$html_btn_grabar.'
                                               '.$html_btn_actualizar;
                        $mostrar_TablasAlerta = false;
                        $html_noTarifaConceptosNoModificanValor = '';
                        $msj_notarifaConceptos = '';
                        if(count($cargosSinTarifasConceptos) > 0)
                        {
                            $mostrar_TablasAlerta = true;
                            $msj_notarifaConceptos = 'NO HAY TARIFAS PARA LOS CONCEPTOS EN LA LISTA PARA ESA MODALIDAD DE FACTURACIÓN, ver el detalle a continuación.';
                            foreach ($cargosSinTarifasConceptos as $cod_procedSinTarifa_dif => $arr_infoProced)
                            {
                                $html_conceptosNoTar = '';
                                $cont_css = 0;
                                foreach ($arr_infoProced['lista_cargos'] as $key_codConcepto => $arr_infoCargo)
                                {
                                    $nombre_responsable = "";
                                    $tarifa_emp_cargo   = "";
                                    if(array_key_exists($arr_infoCargo['wcod_empresa'], $arr_entidades_responsables))
                                    {
                                        $tarifa_emp_cargo   = $arr_infoCargo['responsable_tarifa'];
                                        $Empnom_cargo       = utf8_encode($arr_entidades_responsables[$arr_infoCargo['wcod_empresa']]["simulacion_campos"]["Empnom"]);
                                        $nombre_responsable = "(".$Empnom_cargo.")";
                                    }
                                    $css_tm = ($cont_css % 2 == 0) ? 'fila1': 'fila2';
                                    $html_conceptosNoTar .= '<tr class="'.$css_tm.'">
                                                                <td style="text-align:left;" >'.$arr_infoCargo['cobro_procedimiento'].'</td>
                                                                <td style="text-align:left;" >'.$arr_infoCargo['cobro_concepto_cod'].'-'.utf8_encode($arr_infoCargo['cobro_concepto_nom']).'</td>
                                                                <td style="text-align:left;" >'.trim($arr_infoCargo['wcod_empresa'].' '.$nombre_responsable).'</td>
                                                                <td style="text-align:left;" >'.trim($tarifa_emp_cargo).'</td>
                                                                <td style="text-align:left;" >'.$arr_infoCargo['wcentro_costo'].'</td>
                                                                <td style="text-align:left;" >'.$arr_infoCargo['wfecha_cargo'].'</td>
                                                                <td style="text-align:left;" >'.$arr_infoCargo['whora_cargo'].'</td>
                                                                <td style="text-align:left;" >'.$arr_infoCargo['wtipo_ingreso'].'-'.utf8_encode($arr_infoCargo['wtipo_ingreso_nom']).'</td>
                                                                <td style="text-align:left;" >'.$arr_infoCargo['especialidad_procedimiento'].'</td>
                                                                <td style="text-align:left;" >'.$arr_infoCargo['codigo_wtercero_tarifa'].'</td>
                                                            </tr>';
                                    $cont_css++;
                                }
                                $html_noTarifaConceptosNoModificanValor .= '
                                                <table class="margen-superior-eventos" align="center" >
                                                        <tr>
                                                            <td style="width:300px;text-align:left;" class="encabezadoTabla">Procedimiento en liquidación</td>
                                                            <td style="text-align:left;" class="fila2">'.utf8_encode($arr_infoProced['info_procedimiento']['procedimiento_liquidado_nom']).'</td>
                                                        </tr>
                                                        <tr>
                                                            <td style="text-align:left;" class="encabezadoTabla">Modalidad de facturación procedimiento</td>
                                                            <td style="text-align:left;" class="fila2">'.utf8_encode($arr_infoProced['info_procedimiento']['modalidad_facturacion']).'</td>
                                                        </tr>
                                                        <tr>
                                                            <td colspan="2">
                                                                <div style="width:100%;">
                                                                    <table>
                                                                        <tr class="encabezadoTabla">
                                                                            <td>Código a cobrar</td>
                                                                            <td>Concepto a cobrar</td>
                                                                            <td>Empresa</td>
                                                                            <td>Tarifa</td>
                                                                            <td>Centro costo</td>
                                                                            <td>Fecha del cargo</td>
                                                                            <td>Hora del cargo</td>
                                                                            <td>Tipo de ingreso</td>
                                                                            <td>Código especialidad</td>
                                                                            <td>Código del tercero</td>
                                                                        </tr>
                                                                        '.$html_conceptosNoTar.'
                                                                    </table>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                </table>';
                            }
                            $html_botones_guardar_actualizar = $html_btn_actualizar;
                            // $html = "<div align=left style='text-align:left'><pre>".print_r($cargosSinTarifasConceptos,true)."</pre></div>";
                        }

                        $html_noTarifaInsumo = '';
                        if(count($cargosSinTarifasInsumos) > 0)
                        {
                            $mostrar_TablasAlerta = true;
                            $html_conceptosNoTar = '';
                            $cont_css = 0;
                            foreach ($cargosSinTarifasInsumos as $cod_procedSinTarifa_dif => $arr_infoCargo)
                            {
                                $nombre_responsable = "";
                                $tarifa_emp_cargo   = "";
                                if(array_key_exists($arr_infoCargo['wempresa_responsable'], $arr_entidades_responsables))
                                {
                                    $tarifa_emp_cargo   = $arr_infoCargo['wtarifa_empresa'];
                                    $Empnom_cargo       = utf8_encode($arr_entidades_responsables[$arr_infoCargo['wempresa_responsable']]["simulacion_campos"]["Empnom"]);
                                    $nombre_responsable = "(".$Empnom_cargo.")";
                                }

                                $css_tm = ($cont_css % 2 == 0) ? 'fila1': 'fila2';
                                $html_conceptosNoTar .= '<tr class="'.$css_tm.'">
                                                            <td style="text-align:left;" >'.$arr_infoCargo['cobro_procedimiento'].'-'.utf8_encode($arr_infoCargo['cobro_procedimiento_nom']).'</td>
                                                            <td style="text-align:left;" >'.$arr_infoCargo['cobro_concepto_cod'].'</td>
                                                            <td style="text-align:left;" >'.trim($arr_infoCargo['wempresa_responsable'].' '.$nombre_responsable).'</td>
                                                            <td style="text-align:left;" >'.trim($tarifa_emp_cargo).'</td>
                                                            <td style="text-align:left;" >'.$arr_infoCargo['wservicio_graba'].'</td>
                                                        </tr>';
                                                            // <td style="text-align:left;" >'.$arr_infoCargo['wtipo_ingreso'].'-'.utf8_encode($arr_infoCargo['wtipo_ingreso_nom']).'</td>
                                $cont_css++;
                            }

                            $html_noTarifaInsumo .= '
                                            <table class="margen-superior-eventos" align="center" >
                                                    <tr>
                                                        <td colspan="2" style="width:300px;text-align:center;" class="encabezadoTabla">INSUMOS DEL MERCADO QUE NO TIENEN TARIFA</td>
                                                    </tr>
                                                    <tr>
                                                        <td colspan="2">
                                                            <div style="width:100%;">
                                                                <table>
                                                                    <tr class="encabezadoTabla">
                                                                        <td>Nombre insumo</td>
                                                                        <td>Concepto</td>
                                                                        <td>Empresa</td>
                                                                        <td>Tarifa</td>
                                                                        <td>Centro costo</td>
                                                                    </tr>
                                                                    '.$html_conceptosNoTar.'
                                                                </table>
                                                            </div>
                                                        </td>
                                                    </tr>
                                            </table>';
                                                                        // <td>Tipo de ingreso</td>

                            $html_botones_guardar_actualizar = $html_btn_actualizar;
                            // $html = "<div align=left style='text-align:left'><pre>".print_r($cargosSinTarifasConceptos,true)."</pre></div>";
                        }

                        if($mostrar_TablasAlerta)
                        {
                            $htmlppal .= '<div style="width:1235px; overflow:auto;background-color:#ffffcc; " >
                                        <div style="width:100%;text-align:center;color:red; font-weight:bold; width: 530px; margin-left: 28%;">
                                            '.$msj_notarifaConceptos.'
                                        </div>
                                        '.$html_noTarifaConceptosNoModificanValor.'
                                        '.$html_noTarifaInsumo.'
                                    </div>';
                        }

                        // Cuando no hay ningún insumo (mercado) cargado a alguno de los procedimientos liquidados, no se permite liquidar el acto quirúrgico
                        // hasta cargar el mercado para esos procedimientos (o procedimiento principal).
                        if(count($arr_mercado_completo) == 0 && !$mercado_agregado)
                        {
                            $htmlppal .= '<br><div style="width:1235px; overflow:auto;background-color:#ffffcc; " >
                                        <div style="width:100%;text-align:center;color:red; font-weight:bold; width: 530px; margin-left: 28%;">
                                            NO HAY UN MERCADO CARGADO PARA LAS CIRUGÍAS EN LIQUIDACIÓN<br>No se permite guardar la liquidación del acto quirúrgico hasta no tener un mercado grabado.
                                        </div>
                                    </div>';
                            $html_botones_guardar_actualizar = $html_btn_actualizar;
                        }

                        if(!$mercado_agregado && count($arr_entidades_responsables) == 0)
                        {
                            //Generar alerta porque los resposables de cliame_205 ya no tienen saldo para pagar.
                            $data["mensaje"] = $msjNoResponsables;
                            $data["error"]   = 1;
                        }

                        //Ordenar arreglo liquidado según el orden de procedimientos correcto
                        $arr_auxiliar_procedimientos = array();
                        foreach ($arr_procedimientos_orden as $key_TIP_POS => $arr_procedimientos_orden_ppnp)
                        {
                            foreach ($arr_procedimientos_orden_ppnp as $cod_especialidades => $arr_procedimientos_especialidad)
                            {
                                foreach ($arr_procedimientos_especialidad as $cod_procedimiento_ord => $valor_orden)
                                {
                                    $arr_conceptos_procedimiento = (array_key_exists($cod_procedimiento_ord, $arr_datos_liquidados)) ? $arr_datos_liquidados[$cod_procedimiento_ord] : array();
                                    if(!array_key_exists($cod_procedimiento_ord, $arr_auxiliar_procedimientos))
                                    {
                                        $arr_auxiliar_procedimientos[$cod_procedimiento_ord] = array();
                                    }

                                    //Ordenar tambien los conceptos de cada procedimientos antes de agregarlo de nuevo al array
                                    $arr_ordenar_conceptos_procedimiento = array();
                                    foreach ($arr_lista_conceptos as $codigo_concepto_ord => $nombre_concepto)
                                    {
                                        $arr_concepto_info = array();
                                        if(array_key_exists($codigo_concepto_ord, $arr_conceptos_procedimiento))
                                        {
                                            $arr_concepto_info = $arr_conceptos_procedimiento[$codigo_concepto_ord];
                                            if(!array_key_exists($codigo_concepto_ord, $arr_ordenar_conceptos_procedimiento))
                                            {
                                                $arr_ordenar_conceptos_procedimiento[$codigo_concepto_ord] = array();

                                                unset($arr_conceptos_procedimiento[$codigo_concepto_ord]);
                                                // Si al final del proceso sobran conceptos en este array, entonces se deben terminar de agregar
                                                // Esta caso sucede cuando por ejemplo se liquidan medicamentos, se asocian al concepto de insumos.
                                            }
                                            $arr_ordenar_conceptos_procedimiento[$codigo_concepto_ord] = $arr_concepto_info;
                                        }

                                    }

                                    // Comprobar si quedaron conceptos por asignar
                                    foreach ($arr_conceptos_procedimiento as $codigo_concepto_ord => $arr_concepto_info)
                                    {
                                        if(!array_key_exists($codigo_concepto_ord, $arr_ordenar_conceptos_procedimiento))
                                        {
                                            $arr_ordenar_conceptos_procedimiento[$codigo_concepto_ord] = array();
                                        }
                                        $arr_ordenar_conceptos_procedimiento[$codigo_concepto_ord] = $arr_concepto_info;
                                    }

                                    $arr_auxiliar_procedimientos[$cod_procedimiento_ord] = $arr_ordenar_conceptos_procedimiento;
                                }
                            }
                        }
                        $arr_procedimientos_orden = $arr_auxiliar_procedimientos;

                        $arr_datos_liquidados = $arr_procedimientos_orden;

                        $data["id_encabezado_sin_tarifa"]      = '';
                        $data["wfaltan_tarifas"]               = 'off';
                        $alertaCargosSinTarifa                 = false;

                        // Guardar Encabezado y detalles para los cargos que no tienen tarifas
                        if(count($arr_cargos_sinTarifaModifValor) > 0 || count($cargosSinTarifasConceptos) > 0 || count($cargosSinTarifasInsumos) > 0)
                        {
                            $alertaCargosSinTarifa = true;
                            $data["wfaltan_tarifas"] = 'on';
                            $datos_temporales = array(  "tabla_lista_cxs"            => trim($tabla_lista_cxs),
                                                        "arr_datos_liquidar"         => base64_encode(serialize($arr_datos_liquidar)),
                                                        "arr_datos_liquidados"       => base64_encode(serialize($arr_datos_liquidados)),
                                                        "arr_extras"                 => base64_encode(serialize($arr_extras)),
                                                        "wnumvias"                   => $wnumvias,
                                                        "wfecha_cargo"               => $wfecha_cargo,
                                                        "whora_cargo"                => $whora_cargo,
                                                        "wpolitraumatizado"          => $wpolitraumatizado,
                                                        "wturno_cirugia"             => $wturno_cirugia,
                                                        "wtipo_anestesia_cx"         => $wtipo_anestesia_cx,
                                                        "wtiempo_sala_recuperarcion" => $wtiempo_sala_recuperarcion,
                                                        "wtiempo_uso_minutos"        => $wtiempo_uso_minutos,
                                                        "wtiempo_minutos_cx"         => $wtiempo_minutos_cx,
                                                        "wliq_paquete"               => $es_paquete,
                                                        "wliq_soloInsumos"           => $wliq_soloInsumos,
                                                        "id_encabezado_sin_tarifa"   => $id_encabezado_sin_tarifa,
                                                        "arr_CARGOS_PARA_GRABAR"     => base64_encode(serialize($arr_CARGOS_PARA_GRABAR)));
                            $id_encabezado_sin_tarifa = guardar_datos_temporales($conex, $wbasedato, $datos_temporales, $fecha_actual, $hora_actual, $whistoria, $wing, $user_session, '000230');

                            $data["id_encabezado_sin_tarifa"] = $id_encabezado_sin_tarifa;

                            $sql_tm = " UPDATE  {$wbasedato}_000231
                                                SET Tcarest = 'off'
                                        WHERE   Tcarhis= '{$whistoria}'
                                                 AND Tcaring= '{$wing}'";
                            mysql_query($sql_tm, $conex) or die("<b>ERROR EN QUERY MATRIX - ACTUALIZAR INACTIVAR REGISTROS TEMPORALES ANTERIORES (000231):</b><br>".mysql_error()."<br>SQL: ".$sql_tm);

                            if(count($arr_cargos_sinTarifaModifValor) > 0)
                            {
                                $arr_sql_tm_ins = array();
                                foreach ($arr_cargos_sinTarifaModifValor as $key => $arr_cargo_notarifa)
                                {
                                    $arr_sql_tm_ins[] = "
                                                    ('{$wbasedato}', '{$fecha_actual}', '{$hora_actual}',
                                                    '{$whistoria}', '{$wing}',
                                                    '{$arr_cargo_notarifa['wserv_ingreso']}',
                                                    '{$arr_cargo_notarifa['wempresa_responsable']}',
                                                    '{$arr_cargo_notarifa['wservicio_graba']}',
                                                    '{$arr_cargo_notarifa['wconcepto']}',
                                                    '{$arr_cargo_notarifa['wprocedimiento']}',
                                                    '{$arr_cargo_notarifa['wtercero']}',
                                                    '{$arr_cargo_notarifa['wespecialidad']}',
                                                    '{$arr_cargo_notarifa['wmodalidad']}',
                                                    '{$arr_cargo_notarifa['wtarifa_empresa']}',
                                                    'off',
                                                    'PR',
                                                    '{$id_encabezado_sin_tarifa}',
                                                    '{$arr_cargo_notarifa['wvalor']}',
                                                    'MODIFICAN_VALOR',
                                                    'on',
                                                    'C-{$user_session}')";
                                }
                                insertarDetalleSinTarifa($conex, $wemp_pmla, $wbasedato, $arr_sql_tm_ins);
                            }

                            // GUARDAR CARGOS SIN TARIFA PARA CONCEPTOS QUE NO MODIFICAN VALOR
                            if(count($cargosSinTarifasConceptos) > 0)
                            {
                                $arr_sql_tm_ins = array();
                                foreach ($cargosSinTarifasConceptos as $cod_pro_noTarifa => $arr_cargos_notarifas)
                                {
                                    foreach ($arr_cargos_notarifas["lista_cargos"] as $cod_concepto_noTarifa => $arr_cargo_notarifa)
                                    {
                                        $arr_sql_tm_ins[] = "
                                                        ('{$wbasedato}', '{$fecha_actual}', '{$hora_actual}',
                                                        '{$whistoria}', '{$wing}',
                                                        '{$arr_cargo_notarifa['wserv_ingreso']}',
                                                        '{$arr_cargo_notarifa['wcod_empresa']}',
                                                        '{$arr_cargo_notarifa['wservicio_graba']}',
                                                        '{$arr_cargo_notarifa['cobro_concepto_cod']}',
                                                        '{$arr_cargo_notarifa['cobro_procedimiento']}',
                                                        '{$arr_cargo_notarifa['codigo_wtercero_tarifa']}',
                                                        '{$arr_cargo_notarifa['especialidad_procedimiento']}',
                                                        '',
                                                        '{$arr_cargo_notarifa['responsable_tarifa']}',
                                                        'off',
                                                        'PR',
                                                        '{$id_encabezado_sin_tarifa}',
                                                        '',
                                                        'NOMODIFICAN_TARIFA',
                                                        'on',
                                                        'C-{$user_session}')";
                                    }
                                }
                                insertarDetalleSinTarifa($conex, $wemp_pmla, $wbasedato, $arr_sql_tm_ins);
                            }

                            // GUARDAR CARGOS SIN TARIFA PARA Materiales o medicamentos que no tienen tarífa.
                            if(count($cargosSinTarifasInsumos) > 0)
                            {
                                $arr_sql_tm_ins = array();
                                foreach ($cargosSinTarifasInsumos as $cod_pro_noTarifa => $arr_cargo_notarifa)
                                {
                                    $arr_sql_tm_ins[] = "
                                                    ('{$wbasedato}', '{$fecha_actual}', '{$hora_actual}',
                                                    '{$whistoria}', '{$wing}',
                                                    '{$arr_cargo_notarifa['wserv_ingreso']}',
                                                    '{$arr_cargo_notarifa['wempresa_responsable']}',
                                                    '{$arr_cargo_notarifa['wservicio_graba']}',
                                                    '{$arr_cargo_notarifa['cobro_concepto_cod']}',
                                                    '{$arr_cargo_notarifa['cobro_procedimiento']}',
                                                    '',
                                                    '',
                                                    '',
                                                    '{$arr_cargo_notarifa['wtarifa_empresa']}',
                                                    'on',
                                                    'PR',
                                                    '{$id_encabezado_sin_tarifa}',
                                                    '',
                                                    'INSUMOS',
                                                    'on',
                                                    'C-{$user_session}')";
                                }
                                insertarDetalleSinTarifa($conex, $wemp_pmla, $wbasedato, $arr_sql_tm_ins);
                            }
                        }

                        if(!$alertaCargosSinTarifa)
                        {
                            // Si existe algún registro activo para la historia e ingreso en el log de cargos sin tarifa, corresponden a liquidaciones anteriores
                            // que pudieron ser originadas por error, o simplemente ya se creo un tarifa, entonces se deben cambiar de estado para que no continúen apareciendo
                            // como tarifas pendientes por crear.
                            $sql = "UPDATE  {$wbasedato}_000230
                                            SET Ntrest = 'off'
                                    WHERE   Ntrhis = '$whistoria'
                                            AND Ntring = '$wing'";
                            if($result = mysql_query($sql,$conex))
                            {
                                $sql = "UPDATE  {$wbasedato}_000231
                                                SET Tcarest = 'off'
                                        WHERE   Tcarhis = '$whistoria'
                                                AND Tcaring = '$wing'";
                                if($result = mysql_query($sql,$conex))
                                {
                                    //
                                }
                            }
                        }

                        // $guardar = "arr_cargos_req_autorizar: ".print_r($arr_cargos_req_autorizar,true).PHP_EOL;
                        // $guardar = "arr_CARGOS_PARA_GRABAR: ".print_r($arr_CARGOS_PARA_GRABAR,true).PHP_EOL;
                        // $guardar = "arr_TOPES_ENTIDADES: ".print_r($arr_TOPES_ENTIDADES,true).PHP_EOL;
                        // $guardar = "arr_datos_liquidados: ".print_r($arr_datos_liquidados,true).PHP_EOL;
                        // $guardar = "arr_procedimientos_orden: ".print_r($arr_procedimientos_orden,true).PHP_EOL.PHP_EOL.PHP_EOL.PHP_EOL;
                        // $guardar = print_r($arr_procedimientos_orden_liquidar,true).PHP_EOL;
                        // $guardar = "arr_extras: ".print_r($arr_extras,true).PHP_EOL;
                        // $guardar = print_r($orden_conceptos_por_procedimiento,true).PHP_EOL;
                        // $guardar = print_r($arr_lista_conceptos,true).PHP_EOL;
                        // seguimiento($guardar);

                        $data["html_autorizar_cargos"] = "";
                        // $html_autorizar_cargos = "";
                        // $html_autorizar_cargos = htmlCargosPendientesAutorizar($conex, $wemp_pmla, $wbasedato, $arr_cargos_req_autorizar, $user_session);
                        // $data["html_autorizar_cargos"] = $html_autorizar_cargos;

                        $data["arr_cargos_req_autorizar"] = base64_encode(serialize($arr_cargos_req_autorizar));
                        $data['html'] = '
                                    <div id="cont_dlle_modal" style="background-color: #FBFBFB; text-align:center;" >
                                        '.$htmlppal.'
                                        <br>
                                    </div>
                                    <div style="text-align:center;" class="fila1">
                                        '.$html_botones_guardar_actualizar.'
                                        <div id="div_msj_falta_tarifa" style="width:100%; text-align:center; color: red; font-weight:bold;"></div>
                                    </div>';
                        $data['arr_datos_liquidados']              = base64_encode(serialize($arr_datos_liquidados));
                        $data['arr_procedimientos_orden_liquidar'] = base64_encode(serialize($arr_procedimientos_orden_liquidarPPNP));
                        $data['arr_extras']                        = base64_encode(serialize($arr_extras));
                        $data['arr_CARGOS_PARA_GRABAR']            = base64_encode(serialize($arr_CARGOS_PARA_GRABAR));
                    break;

                case 'add_arr_datos_liquidar':
                    /*
                        arr_datos_liquidar = array("wnumero_vias"               => 0,
                                                    "wtipo_anestesia"            => "",
                                                    "wtiempo_sala_recuperarcion" => "",
                                                    "wtiempo_uso_minutos"        => "",
                                                    "wtiempo_minutos_cx"         => "",
                                                    "arr_para_liquidar"          => array());
                    */
                    liquidar_con_cco_quirofano($conex,$wemp_pmla, $wbasedato, $wccogra, $ccoquirofano);
                    $actOpOtrosProced       = consultarAliasPorAplicacion($conex, $wemp_pmla, 'liq_procedimientos_no_auditados');
                    $wtipo_emp_valida_nopos = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tipo_empresa_validar_manualcx_nopos'); // Códigos de tipo de empresa que en liquidación de cirugía deben validar procedimientos no pos y elegir configuración secundaria en manuales de cx.
                    $wtipo_emp_valida_nopos = explode(",", $wtipo_emp_valida_nopos);
                    $es_paquete             = (isset($es_paquete) && $es_paquete=='on') ? true :false;
                    $data['fila']           = "";
                    $arr_datos_liquidar     = unserialize(base64_decode($arr_datos_liquidar));

                    // ESTA VALIDACIÓN ERA PARA QUE NO PERMITIERA AGREGAR
                    // $validacion_on          = false;
                    // // validar que si es paquete y alguno de los procedimientos del paquete esta contenido en los procedimientos auditados entonces es un paquete
                    // // válido, si no es así no es un paquete correcto.
                    // if($es_paquete)
                    // {
                    //     $explAutorizados = explode(",", $codigos_auditados);
                    //     // Con el código del paquere consultar la configuración del paquere y extraer sus códigos de procedimientos para buscar almenos uno que sea
                    //     // igual a los códigos auditados

                    //     $res_paquete = consultarPaquete($conex, $wbasedato, $wemp_pmla, $wprocedimiento, $tarifa_original, $wtiempo_minutos_cx);
                    //     // $guardar = "res_paquete: ".print_r($res_paquete,true).PHP_EOL;
                    //     // seguimiento($guardar);
                    //     $arr_procedimientos_paquete = array();
                    //     foreach ($res_paquete as $key => $arr_info_pqt)
                    //     {
                    //         if(!array_key_exists($arr_info_pqt["procedimiento_cod"], $arr_procedimientos_paquete))
                    //         {
                    //             $arr_procedimientos_paquete[$arr_info_pqt["procedimiento_cod"]] = $arr_info_pqt["procedimiento_cod"];
                    //         }

                    //         if(in_array($arr_info_pqt["procedimiento_cod"], $explAutorizados))
                    //         {
                    //             // No es un paquete válido porque sus procedimientos configurados no están entre los procedimientos auditados
                    //             // (Debería coincidir por lo menos unos).
                    //             $validacion_on = true;
                    //         }
                    //     }

                    //     // Si actOpOtrosProced=on se permite agregar procedimientos o paquetes diferentes a los auditados
                    //     if(!$validacion_on && $actOpOtrosProced == 'on')
                    //     {
                    //         $validacion_on = true;
                    //     }
                    // }

                    // // Si es paquete y es inválido entonces no dejarlo agregar a la lista de liquidación.
                    // if($es_paquete && !$validacion_on)
                    // {
                    //     $data["error"] = 1;
                    //     $data["mensaje"] = "El paquete <b>[{$wprocedimiento_nombre}]</b> No tiene procedimientos auditados.<br>Debe elegir un paquete que esté relacionado con uno de los procedimientos auditados.";
                    // }
                    // else
                    {
                        // $guardar = "arr_datos_liquidar: ".print_r($arr_datos_liquidar,true).PHP_EOL;
                        // seguimiento($guardar);
                        $wprocedimiento_dif = $wprocedimiento;
                        $add_msj_posicion = "";
                        $arr_control_proBilateral = array();
                        $arr_control_proBilateral[$wprocedimiento_dif] = $wprocedimiento_dif;
                        if(!empty($wposicion_organo))
                        {
                            $arr_control_proBilateral                        = array();
                            $wprocedimiento_dif = $wprocedimiento."_".$wposicion_organo;
                            $arr_control_proBilateral[$wprocedimiento_dif] = $wprocedimiento_dif;
                            $add_msj_posicion                               = ' ('.$wposicion_organo_nom.')';
                        }

                        if($wbilateral == 'on')
                        {
                            // $wprocedimiento_dif = $wprocedimiento_dif;
                            $arr_control_proBilateral                        = array();
                            $arr_control_proBilateral[$wprocedimiento_dif."_bilateral1"] = $wprocedimiento_dif;
                            $arr_control_proBilateral[$wprocedimiento_dif."_bilateral2"] = $wprocedimiento_dif;
                        }

                        $primer_elemento = "";
                        foreach ($arr_control_proBilateral as $wprocedimiento_dif => $value)
                        {
                            $dif_tr = $wprocedimiento_dif."_".$wespecialistas."_".$wespecialidad;
                            if(!array_key_exists($dif_tr, $arr_datos_liquidar['arr_para_liquidar']))
                            {
                                $arr_datos_liquidar['arr_para_liquidar'][$dif_tr] = array();
                            }

                            if($wbilateral == 'on')
                            {
                                $wposicion_organo_nom = $wprocedimiento_dif;
                            }

                            $arr_datos_liquidar['arr_para_liquidar'][$dif_tr] =
                                    array(  "wprocedimiento_dif"         => $wprocedimiento_dif,
                                            "wprocedimiento"             => $wprocedimiento,
                                            "wprocedimiento_nombre"      => $wprocedimiento_nombre,
                                            "wespecialistas"             => $wespecialistas,
                                            "wespecialistas_nombre"      => $wespecialistas_nombre,
                                            "worgano"                    => $worgano,
                                            "wvia"                       => $wvia,
                                            "wespecialidad"              => $wespecialidad,
                                            "wespecialidad_nombre"       => $wespecialidad_nombre,
                                            "wbilateral"                 => $wbilateral,
                                            "wposicion_organo"           => $wposicion_organo,
                                            "wposicion_organo_nom"       => $wposicion_organo_nom,
                                            "wturno_cirugia"             => $wturno_cirugia,
                                            "wtipo_anestesia_cx"         => $wtipo_anestesia_cx,
                                            "wtiempo_sala_recuperarcion" => $wtiempo_sala_recuperarcion,
                                            "wtiempo_uso_minutos"        => $wtiempo_uso_minutos,
                                            "wtiempo_procedimiento"      => $wtiempo_procedimiento,
                                            "wtiempo_minutos_cx"         => $wtiempo_minutos_cx);

                            if(empty($primer_elemento))
                            {
                                $modalidad_facturacion = "";
                                $wnumero_puntos        = "";
                                $verModalidad          = "";
                                if(!$es_paquete)
                                {
                                    if(isset($wcodemp) && isset($tipoEmpresa) && isset($wccogra))
                                    {
                                        $arr_mod_procedimiento = modalidadPuntosProcedimiento($conex, $wbasedato, $wprocedimiento, $wcodemp, $tipoEmpresa, $wccogra, $wtipo_emp_valida_nopos, $worgano);
                                        $modalidad_facturacion = $arr_mod_procedimiento['tipo_facturacion'];
                                    }

                                    if($modalidad_facturacion == 'UVR')
                                    {
                                        $wnumero_puntos = $arr_mod_procedimiento['wnumero_uvrs']*1;
                                        $verModalidad = $modalidad_facturacion." [{$wnumero_puntos}]";
                                    }
                                    elseif($modalidad_facturacion == 'GQX')
                                    {
                                        // Consulta el valor del grupo
                                        $wnumero_puntos = $arr_mod_procedimiento['valor_grupo'];
                                        $verModalidad = $modalidad_facturacion." [{$wnumero_puntos}]";
                                    }
                                    else
                                    {
                                        $verModalidad = $modalidad_facturacion;
                                    }
                                }
                                else
                                {
                                    $verModalidad = "PAQUETE";
                                }

                                $data['fila'] = '   <tr id="tr_liqAdd_cxs_'.$dif_tr.'" style="font-size:9pt;" idx_auditado="'.$idx_html_auditado.'">
                                                        <td>'.$wprocedimiento_nombre.'</td>
                                                        <td style="font-weight:bold;">'.$verModalidad.'</td>
                                                        <td>'.$wvia.'</td>
                                                        <td>'.$wespecialistas_nombre.'</td>
                                                        <td>'.$wespecialidad_nombre.'</td>
                                                        <td>'.$worgano_nombre.'</td>
                                                        <td>'.$wbilateral.$add_msj_posicion.'</td>
                                                        <td>'.$wtiempo_procedimiento.'</td>
                                                        <!-- <td>'.$wtipo_anestesia_nombre.'</td>
                                                        <td>'.$wtiempo_sala_recuperarcion.'</td>
                                                        <td>'.$wtiempo_uso_minutos.'</td>
                                                        <td>'.$wtiempo_minutos_cx.'</td> -->
                                                        <td id="td_delete_cx_'.$dif_tr.'">
                                                            <img class="img_del1 img_del1CX deleteCx_'.$dif_tr.'" border="0" src="../../images/medical/eliminar1.png" title="Quitar de lista" onclick="eliminarFilaDatosLiq(\'tr_liqAdd_cxs_'.$dif_tr.'\', \'tr_liqAdd_cxs_\', \''.$dif_tr.'\', \''.$wprocedimiento_dif.'\');">
                                                        </td>
                                                    </tr>';
                            }
                            $primer_elemento = $dif_tr;
                        }
                    }

                    // $guardar = "arr_datos_liquidar: ".print_r($arr_datos_liquidar,true).PHP_EOL;
                    // seguimiento($guardar);
                    $data['arr_datos_liquidar'] = base64_encode(serialize($arr_datos_liquidar));
                    break;

                case 'cargar_select_vias':
                        $option = '';
                        for($i = 1; $i <= $wnumvias; $i++)
                        {
                            $option .= '<option value="'.$i.'">'.$i.'</option>';
                        }
                        $data['html'] = $option;
                    break;

                case 'consultar_equipos_examenes' :
                        if($tipo_procedimiento == 'E')
                        {
                            $sql =" SELECT  Procod AS codigo, Pronom AS nombre, Procup AS codigo_cups
                                    FROM    {$wbasedato}_000103
                                    WHERE   Protip = 'E'
                                            AND Proest ='on'
                                    ORDER BY Pronom";
                        }
                        elseif($tipo_procedimiento == 'Q')
                        {
                            $sql =" SELECT  Procod AS codigo, Pronom AS nombre, Procup AS codigo_cups
                                    FROM    {$wbasedato}_000103
                                    WHERE   Protip = 'Q'
                                            AND Proest ='on'
                                    ORDER BY Pronom";
                        }
                        $result = mysql_query($sql,$conex) or die("Error: ".mysql_errno()." ".$sql." - ".mysql_error());
                        $arr_equipos_examenes = array();
                        while ($row = mysql_fetch_array($result))
                        {
                            if(!array_key_exists($row['codigo'], $arr_equipos_examenes))
                            {
                                $arr_equipos_examenes[$row['codigo']] = $row['nombre'];
                            }
                        }

                        $data["arr_equipos_examenes"] = $arr_equipos_examenes;
                    break;

                case 'obtenerLiquidacionTemporal':
                        $data["tabla_lista_cxs"]        = "";
                        $data["div_recuperacion_datos"] = "";

                        if($temporal == '000160')
                        {
                            $sql = "SELECT  Ecotem
                                    FROM    {$wbasedato}_000160
                                    WHERE   Ecohis = '{$historia}'
                                            AND  Ecoing = '{$ingreso}'
                                            AND  Ecotip = 'QX' ";

                            if($result = mysql_query($sql, $conex))
                            {
                                $row = mysql_fetch_array($result);
                                $html_recuperado = $row["Ecotem"];
                                if($html_recuperado != '')
                                {
                                    $html_recuperado = str_replace("[+]", "'", $html_recuperado);
                                    $html_recuperado = stripslashes($html_recuperado);
                                    $html_explode = explode("[*****]", $html_recuperado);

                                    // $guardar = "html_recuperado: ".print_r($html_explode,true).PHP_EOL;
                                    // seguimiento($guardar);

                                    $data["tabla_lista_cxs"]        = trim(utf8_encode($html_explode[0]));
                                    $data["div_recuperacion_datos"] = utf8_encode($html_explode[1]);
                                }
                            }
                            else
                            {
                                $data["error"] = 1;
                                $data["mensaje"] = "Había una liquidación en proceso guardada temporalmente pero no se pudo recuperar.";
                                //or die("<b>ERROR EN QUERY MATRIX 2:</b><br>".mysql_error());
                            }
                        }
                        elseif($temporal == '000230')
                        {
                            //id_encabezado_sin_tarifa
                            //
                            $sql = "SELECT  c230.id AS id_encabezado, c230.Ntrhis AS whistoria, c230.Ntring AS wing, c230.Ntrrcr AS estado_monitor, c230.Ntrltm AS html_procedimientos_liq
                                    FROM    {$wbasedato}_000230 AS c230
                                    WHERE   c230.id = '{$id_encabezado_sin_tarifa}'
                                    ORDER BY c230.Ntrhis, c230.Ntring ";
                            if($result = mysql_query($sql, $conex))
                            {
                                $row = mysql_fetch_array($result);
                                $html_recuperado = $row["html_procedimientos_liq"];
                                $html_recuperado = str_replace("[+]", "'", $html_recuperado);
                                $html_recuperado = stripslashes($html_recuperado);
                                $html_explode = explode("[*****]", $html_recuperado);

                                // $guardar = "html_recuperado: ".print_r($html_explode,true).PHP_EOL;
                                // seguimiento($guardar);

                                $data["tabla_lista_cxs"]        = trim(utf8_encode($html_explode[0]));
                                $data["div_recuperacion_datos"] = utf8_encode($html_explode[1]);
                            }
                            else
                            {
                                $data["error"] = 1;
                                $data["mensaje"] = "Había una liquidación en proceso de revisión guardada temporalmente pero no se pudo recuperar.";
                                //or die("<b>ERROR EN QUERY MATRIX 2:</b><br>".mysql_error());
                            }
                        }
                    break;

                case 'carga_paquetes':
                        $data["arr_paquetes"] = array();
                        global $conex, $wemp_pmla, $wbasedato, $caracter_ok, $caracter_ma;

                        // Paquetes
                        /*$arr_paquetes = array();
                        $sql = "SELECT  t113.Paqcod AS codigo, t113.Paqnom AS nombre
                                FROM    {$wbasedato}_000207 AS t207
                                        INNER JOIN
                                        {$wbasedato}_000113 AS t113 ON (t207.Mpapro = t113.Paqcod)
                                WHERE   t207.Mpahis = '{$historia}'
                                        AND t207.Mpaing = '{$ingreso}'
                                        AND LEFT(t207.Mpapro, 2) = 'CP'
                                GROUP BY t113.Paqcod
                                ORDER BY  t113.Paqnom";
                        $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                        while($row = mysql_fetch_array($result))
                        {
                            if(!array_key_exists($row['codigo'], $arr_paquetes))
                            {
                                $arr_paquetes[$row['codigo']] = array();
                            }
                            $arr_paquetes[$row['codigo']] = utf8_encode($row['nombre']);
                        }*/

                           // Paquetes
                        $arr_paquetes = array();
                        $sql = "SELECT  t113.Paqcod AS codigo, t113.Paqnom AS nombre
                                FROM    {$wbasedato}_000113 AS t113
                                WHERE   Paqest = 'on'";


                        $result = mysql_query($sql,$conex) or die(mysql_errno().' - '.mysql_error().' SQL:'.$sql);
                        while($row = mysql_fetch_array($result))
                        {
                            // if(!array_key_exists($row['codigo'], $arr_paquetes))
                            // {
                                // $arr_paquetes[$row['codigo']] = array();
                            // }
                            $arr_paquetes[$row['codigo']] = utf8_encode($row['nombre']);
                        }

                        // $data["arr_paquetes"] = "".json_encode(Obtener_array_paquetes())."";
                        $data["arr_paquetes"] = "".json_encode($arr_paquetes)."";
                    break;

                case 'recargar_datos_temp_revision':
                    $data["html"] = html_cirugiasPendientes(cirugiasPendientesLiquidar($conex, $wbasedato, $whistoria, $wing));
                    break;

                case 'inactivar_pendientes':
                    $sql = "UPDATE  {$wbasedato}_000230
                                    SET Ntrest = 'off'
                            WHERE   Ntrhis = '$historia'
                                    AND Ntring = '$ingreso'";
                    if($result = mysql_query($sql,$conex))
                    {
                        $sql = "UPDATE  {$wbasedato}_000231
                                        SET Tcarest = 'off'
                                WHERE   Tcarhis = '$historia'
                                        AND Tcaring = '$ingreso'";
                        if($result = mysql_query($sql,$conex))
                        {
                            //
                        }
                        else
                        {
                            $data["error"] = 1;
                            $data['mensaje'] = utf8_encode("No se pudo inactivar el detalle de cirugía pendiente sin tarifa para esta historia");
                        }
                    }
                    else
                    {
                        $data["error"] = 1;
                        $data['mensaje'] = utf8_encode("No se pudo inactivar el encabezado de cirugía pendiente para esta historia");
                    }
                    break;

                case 'validar_mercado_cerrado':
                    $arr_organos                      = json_decode(str_replace("\\", '',  $arr_organos), true);
                    $data['info_desc_operatoria']     = "";
                    $data['procedimientos_auditados'] = "";
                    $data['turno_conEnc_sinAuditar']  = "off"; // El turno de cirugía tiene encabezado de auditoría pero esta sin auditar.
                    $data['mercadoCerrado']           = "off";
                    $proceso_auditoria_activo_sfi     = consultarAliasPorAplicacion($conex, $wemp_pmla, 'proceso_auditoria_activo_sfi');
                    $data['mercadoCerrado']           = validar_mercado_cerrado($conex,$wcodigo_turno,$wemp_pmla,$wbasedato);
                    $data['liq_procedimientos_no_auditados'] = consultarAliasPorAplicacion($conex, $wemp_pmla, 'liq_procedimientos_no_auditados');
                    $data["sql_numVias"]              = 1;
                    $data["arr_medicos_descripcionOp"]= array();
                    $data["indicador_automatico"]     = "off";

                    $editarViasPro = (isset($facturadorModificaVias) && $facturadorModificaVias == 'on') ? '': 'disabled="disabled"';
                    $editarBilat   = (isset($facturadorModificaBilateralidad) && $facturadorModificaBilateralidad == 'on') ? '': 'disabled="disabled"';

                    $arr_procedimientos_orig = unserialize(base64_decode($arr_procedimientos_orig));
                    $arr_procedimientos      = obtener_array_procedimientosEmpresa($conex, $wemp_pmla, $wbasedato, $wcod_empresa, $arr_procedimientos_orig);

                    $arr_posciones_organos = consultarPosicionesOrganos($conex, $wbasedato, $wemp_pmla);
                    $optionsPosOrg = '';
                    foreach ($arr_posciones_organos as $cod_pos => $nom_pos) {
                        $optionsPosOrg .= '<option value="'.$cod_pos.'">'.$nom_pos.'</option>';
                    }

                    $arr_medicos_descripcionOp = array(); // MEDICOS QUE REALIZARON DESCRIPCIÓN OPERATORIA
                    $info_desc_operatoria      = '';
                    $info_desc_operatoria      = datosDescripcionOperatoria($conex, $wemp_pmla, $wbasedato, $wbasedato_HCE, $wbasedato_movhos, $user_session, $wcodigo_turno, $whistoria, $wing, $arr_medicos_descripcionOp);
                    if(count($arr_medicos_descripcionOp) == 0)
                    {
                        // Si no hay descripción operatoria entonces se busca si hay médicos que hicieron nota operatoria.
                        $nota_operatoria = datosNotaOperatoria($conex, $wemp_pmla, $wbasedato, $wbasedato_HCE, $wbasedato_movhos, $user_session, $wcodigo_turno, $whistoria, $wing, $arr_medicos_descripcionOp);
                    }

                    $data["arr_medicos_descripcionOp"] = json_encode($arr_medicos_descripcionOp);

                    $html_auditados     = '';
                    $pro_no_encontrados = array();
                    $sql                = '';
                    if($proceso_auditoria_activo_sfi == 'on' && existeTabla($conex, $wemp_pmla, $wbasedato, ENC_AUDITORIA_252) && existeTabla($conex, $wemp_pmla, $wbasedato, DLL_AUDITORIA_253))
                    {
                        $ENC_AUDITORIA_252 = ENC_AUDITORIA_252;
                        $DLL_AUDITORIA_253 = DLL_AUDITORIA_253;

                        $sql_numVias = "SELECT  MAX(Audvia) AS numero_vias, count(Audpro) AS cant_procedimientos
                                        FROM    {$wbasedato}_000253
                                        WHERE   Audtur = '{$wcodigo_turno}'
                                                AND Audcon = 'on'";
                        $resNumV             = mysql_query($sql_numVias,$conex) or die("Procedimientos auditados - Error: ".mysql_errno()." ".$sql_numVias." - ".mysql_error());
                        $data["sql_numVias"] = $sql_numVias;
                        $rowNumVias          = mysql_fetch_assoc($resNumV);

                        $total_numero_vias   = 1;
                        if(isset($rowNumVias["numero_vias"]) && ($rowNumVias["numero_vias"]*1) > 0)
                        {
                            $total_numero_vias = ($rowNumVias["numero_vias"]*1);
                        }
                        elseif(($rowNumVias["cant_procedimientos"]*1) > 0)
                        {
                            $total_numero_vias = ($rowNumVias["cant_procedimientos"]*1);
                        }

                        $data["total_numero_vias"] = $total_numero_vias;

                        $sql_auditados = "  SELECT  t253.Audpro, '' AS pro_homologado, t253.id AS id_253,
                                                    '' AS fec_aut, '' AS Aueuau, '' AS fec_aud, '' AS Aueuad, '' AS audito_automatico
                                                    , t253.Audvia, t253.Audbil AS pro_bilateral, t253.Audorg AS aud_organo, t252.Auerau AS indicador_automatico
                                            FROM    {$wbasedato}_{$ENC_AUDITORIA_252} AS t252
                                                    INNER JOIN
                                                    {$wbasedato}_{$DLL_AUDITORIA_253} AS t253 ON (t253.Audtur = t252.Auetur)
                                            WHERE   t252.Auetur = '{$wcodigo_turno}'
                                                    AND t252.Auelli = 'on'
                                                    AND t253.Audcon = 'on'
                                                    AND t253.Audest = 'on'
                                                    AND t252.Aueest = 'on'";
                        $resPro = mysql_query($sql_auditados,$conex) or die("Procedimientos auditados - Error: ".mysql_errno()." ".$sql_auditados." - ".mysql_error());
                        $data["sql_auditados"] = $sql_auditados;

                        $contCss     = 0;
                        $usuAutorizo = '';
                        $usuAudito   = '';
                        if(mysql_num_rows($resPro) > 0)
                        {
                            while ($row = mysql_fetch_assoc($resPro))
                            {
                                if($row['indicador_automatico'] != '')
                                {
                                    // Aun cuando no tenga permisos para agregar otros procedimientos, si lo puede hacer cuando fue un turno auditado automáticamente,
                                    // pues puede no tener procedimiento agregados y se deba hacer desde la liquidación de cirugía
                                    $data['liq_procedimientos_no_auditados'] = 'on';
                                    $editarViasPro = "";
                                    $editarBilat   = "";
                                }

                                // $arr_procedimientos[$row['codigo']]
                                // Lo de homologación auditado no aplica para cups, solo para honorarios
                                // $row['Audpro'] = ($row['pro_homologado'] != '') ? $row['pro_homologado']: $row['Audpro'];

                                // [upt-84] Si el procedimiento no está en el array (maestro de procedimientos), entonces buscar el código como procedimiento própio
                                // de la entidad y encontrar el código CUPS relacionado.
                                if(!array_key_exists($row['Audpro'], $arr_procedimientos) && $row['Audpro'] != '')
                                {
                                    $sql = "SELECT  Proemppro, Proempcod AS proCups
                                            FROM    {$wbasedato}_000070
                                            WHERE   Proemppro = '{$row['Audpro']}'
                                                    AND Proempemp = '{$wcod_empresa}'";
                                    $data["sql_70"] = $sql;
                                    if($resPro70 = mysql_query($sql,$conex))
                                    {
                                        if(mysql_num_rows($resPro70) > 0)
                                        {
                                            $rowpro = mysql_fetch_assoc($resPro70);
                                            $row['Audpro'] = $rowpro['proCups'];
                                        }
                                    }
                                }

                                $procodnom    = ($row['Audpro'] != '' && array_key_exists($row['Audpro'], $arr_procedimientos)) ? $row['Audpro'].'-'.utf8_encode($arr_procedimientos[$row['Audpro']]): $row['Audpro'].'- NO EXISTE<br>';
                                $procod       = $row['Audpro'];
                                $id_253       = $row['id_253'];
                                $idx_auditado = $procod.'_'.$id_253;
                                if(array_key_exists($row['Audpro'], $arr_procedimientos))
                                {
                                    // if($usuAutorizo == '' || $usuAudito == '')
                                    // {
                                    //     $sqlNomUsu      = "SELECT Descripcion, Codigo FROM usuarios WHERE Codigo IN ('{$row['Aueuau']}', '{$row['Aueuad']}') ";
                                    //     $resNomUsu      = mysql_query($sqlNomUsu, $conex) or die("<b>ERROR EN QUERY MATRIX(sqlNomUsu):</b><br>".mysql_error());
                                    //     $usuAudito      = '--';
                                    //     $usuAutorizo    = '--';
                                    //     while($rowNomUsu = mysql_fetch_array($resNomUsu))
                                    //     {
                                    //         if($rowNomUsu['Codigo'] == $row['Aueuad'])
                                    //         {
                                    //             $usuAudito = utf8_encode(ucwords(strtolower($rowNomUsu['Descripcion'])));
                                    //         }
                                    //         else
                                    //         {
                                    //             $usuAutorizo = utf8_encode(ucwords(strtolower($rowNomUsu['Descripcion'])));
                                    //         }
                                    //     }

                                    //     $usuAudito = ($row['audito_automatico'] == 'on' || $row['audito_automatico'] == 'CI' || $row['audito_automatico'] == 'NA') ? 'Automáticamente' : $usuAudito;
                                    //     $usuAutorizo = ($row['audito_automatico'] == 'on' || $row['audito_automatico'] == 'CI' || $row['audito_automatico'] == 'NA') ? 'Automáticamente' : $usuAutorizo;

                                    //     $usuAudito .= ", ".$row["fec_aud"];
                                    //     $usuAutorizo .= ", ".$row["fec_aut"];
                                    // }

                                    $opt_numvia = "";
                                    for ($contNV=1; $contNV <= $total_numero_vias; $contNV++)
                                    {
                                        $sltd = ($contNV == ($row['Audvia']*1)) ? 'selected="selected"': '';
                                        $opt_numvia .= '<option value="'.$contNV.'" '.$sltd.' >'.$contNV.'</option>';
                                    }

                                    $opt_bilateral  = ($row['pro_bilateral'] == "on") ? 'checked="checked"': '';
                                    $aud_organo_cod = "";
                                    $aud_organo_nom = "";
                                    if($row['aud_organo'] != "*" && array_key_exists($row['aud_organo'], $arr_organos)){
                                        $aud_organo_cod = $row['aud_organo'];
                                        $aud_organo_nom = $aud_organo_cod.'-'.$arr_organos[$row['aud_organo']]["nombre"];
                                    }

                                    $cssPro = ($contCss % 2 == 0) ? "fila1": "fila2";
                                    $html_auditados .= ' <tr class="'.$cssPro.' trproAud trproAud_'.$idx_auditado.'" idx_auditado="'.$idx_auditado.'">
                                                            <td rowspan="2" class="td_img" style="background-color: #fffee2;">&nbsp;</td>
                                                            <td style="font-size:8pt;font-weight:bold;text-align:left;">
                                                                <input type="hidden" value="" id="wprocedimiento_'.$idx_auditado.'" name="wprocedimiento_'.$idx_auditado.'" codigo="'.$procod.'" nombre="'.$procodnom.'" class="requerido save_ok" placeholder="'.PROCEDIMIENTO.'" size="44" />
                                                                '.$procodnom.'
                                                            </td>
                                                            <td style="font-size:8pt;font-weight:bold;text-align:center;">
                                                                <select id="wvia_'.$idx_auditado.'" name="wvia_'.$idx_auditado.'" class="requerido save_ok wvia" '.$editarViasPro.'>
                                                                    '.$opt_numvia.'
                                                                </select>
                                                            </td>
                                                            <td class="especialista_auditoria" style="font-size:8pt;font-weight:bold;text-align:center;">
                                                                <img width="10" height="10" src="../../images/medical/root/info.png" title="Arrastrar y pegar" class="tooltip"/>
                                                                <input type="text" value="" id="wespecialistas_'.$idx_auditado.'" name="wespecialistas_'.$idx_auditado.'" codigo="" nombre="" class="requerido save_ok liq_autocomplete" placeholder="'.ESPECIALISTA.'" size="32" />
                                                            </td>
                                                            <td style="font-size:8pt;font-weight:bold;text-align:center;">
                                                                <select name="wespecialidad_'.$idx_auditado.'" id="wespecialidad_'.$idx_auditado.'" class="requerido save_ok liq_depend_autocomplete">
                                                                    <option value="">Seleccione..</option>
                                                                </select>
                                                            </td>
                                                        </tr>
                                                        <tr class="'.$cssPro.' trproAud_'.$idx_auditado.'">
                                                            <td colspan="5" style="padding:0px;font-size:8pt;">
                                                            <!-- AQUÍ DEBEN IR LOS CAMPOS DE TIEMPO Y ANESTESIA SI SE REQUIERE QUE SEA POR CADA PROCEDIMIENTO -->
                                                            <table>
                                                                <tr>
                                                                    <td class="encabezadoTabla" style="font-size:8pt;">'.ORGANO.'</td>
                                                                    <td style="font-size:8pt;">
                                                                        <input type="text" value="'.$aud_organo_nom.'" id="worgano_'.$idx_auditado.'" name="worgano_'.$idx_auditado.'" idx_auditado="'.$idx_auditado.'" codigo="'.$aud_organo_cod.'" nombre="'.$aud_organo_nom.'" bilateral="" class="requerido save_ok worgano" placeholder="'.ORGANO.'" size="28" />
                                                                    </td>
                                                                    <td class="opcion_bilateral_'.$idx_auditado.' encabezadoTabla" style="font-size:8pt;">Bilateral</td>
                                                                    <td class="opcion_bilateral_'.$idx_auditado.' " style="font-size:8pt;">
                                                                        <input type="checkbox" value="" id="wbilateral_'.$idx_auditado.'" name="wbilateral_'.$idx_auditado.'" codigo="" nombre="" class="requerido save_ok" placeholder="'.BILATERAL.'" '.$opt_bilateral.' '.$editarBilat.' />
                                                                    </td>
                                                                    <td class="encabezadoTabla" style="font-size:8pt;">Posición organo</td>
                                                                    <td>
                                                                        <select name="wposicion_organo_'.$idx_auditado.'" id="wposicion_organo_'.$idx_auditado.'">
                                                                            <option value="">Seleccione</option>
                                                                            '.$optionsPosOrg.'
                                                                        </select>
                                                                    </td>
                                                                    <td class="encabezadoTabla" style="font-size:8pt;">Tiempo procedimiento</td>
                                                                    <td class="onecss">
                                                                        <input class="numerico classminutos tiempoProcedimiento" name="wtiempo_procedimiento_'.$idx_auditado.'" id="wtiempo_procedimiento_'.$idx_auditado.'" value="" maxlength="3" style="width:58px;" >
                                                                    </td>
                                                                </tr>
                                                            </table>
                                                        </td>';
                                    $contCss++;
                                }
                                else
                                {
                                    if($procod == '' || !array_key_exists($procod, $pro_no_encontrados))
                                    {
                                        $pro_no_encontrados[$procod] = '<span style="font-weight:bold;color:orange;">'.$procodnom.'</span><br>';
                                    }
                                }
                            }
                        }
                        else
                        {
                            // Si el anterior query no tiene procedimientos auditados, se verifica en el encabezado si fue un turno auditado automaticamente.
                            $sql_auditadosEnc = "   SELECT  '' AS fec_aut, '' AS Aueuau, '' AS fec_aud, '' AS Aueuad, '' AS audito_automatico
                                                            , t252.Auerau AS indicador_automatico
                                                    FROM    {$wbasedato}_000252 AS t252
                                                    WHERE   t252.Auetur = '{$wcodigo_turno}'
                                                            AND t252.Auelli = 'on'
                                                            AND t252.Aueest = 'on'
                                                            AND t252.Auerau <> ''";
                            if($resProEnc = mysql_query($sql_auditadosEnc,$conex))
                            {
                                if(mysql_num_rows($resProEnc) > 0)
                                {
                                    // Aun cuando no tenga permisos para agregar otros procedimientos, si lo puede hacer cuando fue un turno auditado automáticamente,
                                    // pues puede no tener procedimiento agregados y se deba hacer desde la liquidación de cirugía
                                    $data['liq_procedimientos_no_auditados'] = 'on';
                                    $editarViasPro = "";
                                    $editarBilat   = "";
                                }
                            }
                        }

                        if($html_auditados != '')
                        {
                            $html_auditados = ' <table align="center" width="100%;" id="tabla_procedimientos_auditados">
                                                    <tr class="encabezadoTabla">
                                                        <td style="background-color: #fffee2;">&nbsp;</td>
                                                        <td style="text-align:center;">
                                                            <span class="label_procedimiento" >'.PROCEDIMIENTO.'</span>
                                                        </td>
                                                        <td style="text-align:center;">'._VIA_.'</td>
                                                        <td style="text-align:center;">'.ESPECIALISTA.'</td>
                                                        <td style="text-align:center;">'.ESPECILALIDAD.'</td>
                                                    </tr>'.$html_auditados.'
                                                    <tr>
                                                        <td colspan="5" style="text-align:center;background-color:#f2f2f2;">
                                                            <input type="button" value="Adicionar" class="btn_loading bloquear_todo" onclick="adicionarProcedimiento(this,\'lista_auditados\');" id="boton_add_cx_liq">
                                                        </td>
                                                    </tr>
                                                </table>
                                                <div id="div_msj_auditados_agregados" style="text-align:center;display:none;font-size:9pt;font-weight:bold;">
                                                    Todos los procedimientos auditados están agregados a la liquidación
                                                </div>
                                                ';
                                                // <div style="text-align:center;"><span style="color:green;font-size:8pt;" class="" title="">[Autorizó: '.$usuAutorizo.']</span> <span style="color:blue;font-size:8pt;" class="" title="">[Auditó: '.$usuAudito.']</span></div>
                        }
                        else
                        {
                            $data['turno_conEnc_sinAuditar'] = "on";
                            $html_auditados = '<div style="text-align:center;color:red;font-weight:bold;font-size:10;background-color:#e6e6e6;">Procedimientos del turno de cirugía están sin auditar.</div>';
                        }
                    }

                    $msj_noEncontrados = '';
                    if(count($pro_no_encontrados) > 0)
                    {
                        $msj_noEncontrados = '<br><span style="font-weight:bold;color:red;">Procedimientos, CUPS no encontrados:</span><br>'.implode("<br>", $pro_no_encontrados);
                    }

                    $data['info_desc_operatoria'] = $info_desc_operatoria;
                    // $data['sql_auditados'] = $sql;
                    $data['procedimientos_auditados'] = $html_auditados.' '.$msj_noEncontrados;
                    break;

                default:
                        $data['mensaje'] = $no_exec_sub;
                        $data['error'] = 1;
                    break;
            }
            echo json_encode($data);
            break;

        case 'delete' :
            switch ($form)
            {
                case 'CODIGO_EJEMPLO':
                        $query = "  UPDATE  ".$wbasedato."_".OBSERVACIONES_ORDEN."
                                            SET Segest = 'off'
                                    WHERE   id = '".$id_observ."'";
                        if($result = mysql_query($query, $conex))
                        {

                        }
                        else
                        {
                            debug_log_inline('',"<span class=\"error\">ERROR</span> Error al borrar obsrvación de la orden: $worden Fuente: $wfuente <br>&raquo; ".$query."<br>&raquo;No. ".mysql_errno().'<br>&raquo;Err: '.mysql_error()."<br>");
                            $descripcion = "(".mysql_errno().') '.mysql_error()."|obs:'Error al borrar obsrvación de la orden: $worden Fuente: $wfuente";
                            // insertLog($conex, $wbasedato, $user_session, $accion, $form, 'error_sql', $descripcion, $wfuente.'-'.$worden, $query);
                            $data['mensaje'] = 'No se pudo eliminar la observación.';
                            $data['error'] = 1;
                        }
                        $data['debug_log'] = utf8_encode(debug_log_inline());
                    break;

                case 'eliminar_dato_liquidacion':
                    // arr_datos_liquidar
                    // arr_datos_liquidar_temp
                    // arr_datos_liquidados
                    // arr_procedimientos_orden_liquidar
                    // arr_extras

                    $arr_datos_liquidar                = unserialize(base64_decode($arr_datos_liquidar));
                    $arr_datos_liquidados              = unserialize(base64_decode($arr_datos_liquidados));
                    $arr_procedimientos_orden_liquidar = unserialize(base64_decode($arr_procedimientos_orden_liquidar));
                    $arr_extras                        = unserialize(base64_decode($arr_extras));

                    // Como los procedimientos bilaterales generan dos registros (posición 1 y posición 2) entonces se hace la verificación
                    // para saber si es bilateral o no y generar las dos posiciones para borrar ambas y no solo la primera.
                    $arr_indice_eliminar = array();
                    $arr_indice_eliminar[$wprocedimiento] = $wprocedimiento;
                    $resultado = strpos($wprocedimiento, "_bilateral1");
                    if($resultado !== FALSE){
                        $arr_indice_eliminar[str_replace("_bilateral1","_bilateral2",$wprocedimiento)] = str_replace("_bilateral1","_bilateral2",$wprocedimiento);
                    }

                    foreach ($arr_indice_eliminar as $wprocedimiento => $value)
                    {
                        if(array_key_exists($wprocedimiento, $arr_datos_liquidados)) { unset($arr_datos_liquidados[$wprocedimiento]); } // Si ya existía en el array de liquidados entonces lo elimina
                        if(array_key_exists($wprocedimiento, $arr_extras)) { unset($arr_extras[$wprocedimiento]); } // Si ya existía en el array de conceptos extras del procedimiento
                        if(array_key_exists($wprocedimiento, $arr_procedimientos_orden_liquidar)) { unset($arr_procedimientos_orden_liquidar[$wprocedimiento]); } // Si ya existía en el array de conceptos extras del procedimiento
                    }

                    // ***********  PARA EL ARRAY arr_datos_liquidar específicamente  **************
                    // Como los procedimientos bilaterales generan dos registros (posición 1 y posición 2) entonces se hace la verificación
                    // para saber si es bilateral o no y generar las dos posiciones para borrar ambas y no solo la primera.
                    $arr_indice_eliminar = array();
                    $arr_indice_eliminar[$dif_key] = $dif_key;
                    $resultado = strpos($dif_key, "_bilateral1");
                    if($resultado !== FALSE){
                        $arr_indice_eliminar[str_replace("_bilateral1","_bilateral2",$dif_key)] = str_replace("_bilateral1","_bilateral2",$dif_key);
                    }

                    foreach ($arr_indice_eliminar as $dif_key => $value)
                    {
                        unset($arr_datos_liquidar['arr_para_liquidar'][$dif_key]);
                    }

                    $data['arr_datos_liquidar']                = base64_encode(serialize($arr_datos_liquidar));
                    $data['arr_datos_liquidar_temp']           = base64_encode(serialize($arr_datos_liquidar));
                    $data['arr_extras']                        = base64_encode(serialize($arr_extras));
                    $data['arr_datos_liquidados']              = base64_encode(serialize($arr_datos_liquidados));
                    $data['arr_procedimientos_orden_liquidar'] = base64_encode(serialize($arr_procedimientos_orden_liquidar));
                    // print_r($arr_datos_liquidar);
                    break;

                default:
                    $data['mensaje'] = $no_exec_sub;
                    break;
            }
            echo json_encode($data);
            break;
        default : break;
    }
    return;
}

include_once("root/comun.php");
$wbasedato_HCE    = consultarAliasPorAplicacion($conex, $wemp_pmla, 'hce');
$wbasedato_movhos = consultarAliasPorAplicacion($conex, $wemp_pmla, 'movhos');
$grupo_anestesia  = consultarAliasPorAplicacion($conex, $wemp_pmla, 'tipos_anestesia'); // Consulta el código del grupo que corresponde a tipos de anestesia en maestro HCE
$concepto_ayudas_erp = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_ayudas_erp');
$concepto_equipos_erp = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_equipos_erp');
$concepto_recuperacion_erp = consultarAliasPorAplicacion($conex, $wemp_pmla, 'concepto_recuperacion_erp');
$liq_procedimientos_no_auditados = consultarAliasPorAplicacion($conex, $wemp_pmla, 'liq_procedimientos_no_auditados');
$facturadorModificaVias = consultarAliasPorAplicacion($conex, $wemp_pmla, 'facturadorModificaVias');
$facturadorModificaBilateralidad = consultarAliasPorAplicacion($conex, $wemp_pmla, 'facturadorModificaBilateralidad');

/***** terceros *****/
global $conex, $wemp_pmla;
$arr_terceros_especialidad = obtener_array_terceros_especialidad();

$arr_parametros = array();
$arr_detalle_liquidaciones = listarDetalleLiquidaciones($conex, $wemp_pmla, $wbasedato, $whistoria, $wing, $arr_parametros);
$arr_parametros['arr_terceros'] = $arr_terceros_especialidad;

/***** Procedimientos *****/
$arr_procedimientos = obtener_array_procedimientos($conex, $wemp_pmla, $wbasedato);

/***** Organos *****/
$TB_BILATERALES = TB_BILATERALES;
$arr_organos = array();
// $sql = "SELECT  hce16.Codigo AS codigo, hce16.Descripcion AS nombre, bilat.Orgbil AS esbilateral
//         FROM    {$wbasedato_HCE}_000016 AS hce16
//                 LEFT JOIN
//                 {$wbasedato}_{$TB_BILATERALES} AS bilat ON (hce16.Codigo = bilat.Orgcod AND bilat.Orgbil = 'on')
//         WHERE   hce16.Estado = 'on'
//         ORDER BY hce16.Descripcion";
// $result = mysql_query($sql,$conex) OR die ($sql.' <br> '.mysql_error());

$sql = "SELECT  r104.Prccod AS codigo, r104.Prcnom AS nombre, r104.Prcbil AS esbilateral, r104.Prcznc AS zona
        FROM    root_000104 AS r104
        WHERE   r104.Prcest = 'on'
        ORDER BY r104.Prcnom ASC";
$result = mysql_query($sql,$conex) OR die ($sql.' <br> '.mysql_error());

while ($row = mysql_fetch_array($result))
{
    $esbilateral = ($row['esbilateral'] == 'on') ? 'on': 'off';
    $zona_cuerpo = ucfirst(strtolower($row['zona']));
    $arr_organos[$row['codigo']] = array("nombre" => utf8_encode($row['nombre'])." [{$zona_cuerpo}]", "bilateral" => $esbilateral);
}

/***** Posiciones del organo *****/
$arr_posciones_organos = consultarPosicionesOrganos($conex, $wbasedato, $wemp_pmla);

$arr_datos_liquidar = array("arr_datos_paciente"         => array(  "whistoria"                  => $whistoria,
                                                                    "wing"                       => $wing,
                                                                    "wno1"                       => $wno1,
                                                                    "wno2"                       => $wno2,
                                                                    "wap1"                       => $wap1,
                                                                    "wap2"                       => $wap2,
                                                                    "wdoc"                       => $wdoc,
                                                                    "wnomemp_eps"                => $wnomemp,
                                                                    "tarifa_original"            => $tarifa_original,
                                                                    "wtip_paciente"              => $wtip_paciente,
                                                                    "wtipo_ingreso"              => $wtipo_ingreso,
                                                                    "wtipo_ingreso_nom"          => $wtipo_ingreso_nom,
                                                                    "wresponsable_eps_codigo"    => $responsable_original,
                                                                    "wresponsable_eps"           => $div_responsable,
                                                                    "tipoEmpresa"                => $tipoEmpresa),
                            "wnumero_vias"               => "",
                            "wtipo_anestesia"            => "",
                            "wtiempo_sala_recuperarcion" => "",
                            "wtiempo_uso_minutos"        => "",
                            "wtiempo_minutos_cx"         => "",
                            "arr_para_liquidar"          => array());
$arr_datos_liquidar_temp = $arr_datos_liquidar;

/***** Tipos de anestesia *****/
$sql = "SELECT  Selcda AS codigo, Selnda AS nombre
        FROM    {$wbasedato_HCE}_000012
        WHERE   Seltab = '{$grupo_anestesia}'
                AND Selest = 'on'
        ORDER BY Selnda";
$result = mysql_query($sql,$conex) OR die ($sql.' <br> '.mysql_error());

$arr_tipo_anestesia = array();
while ($row = mysql_fetch_array($result))
{
    $arr_tipo_anestesia[$row['codigo']] = utf8_encode($row['nombre']);
}

/***** BASE DE LIQUIDACION *****/
$arr_liquidacion = array_base_liquidacion($conex, $wbasedato);

$arr_datos_liquidados = array();
$arr_vacio = array();

/***** Conceptos *****/
$arr_conceptos = obtener_array_conceptos();

$id_concepto_uso_equipos = $concepto_equipos_erp;
$id_concepto_examenes = $concepto_ayudas_erp;

$sql =" SELECT  con.Grucod, con.Grudes, con.Gruest, con.Gruinv, con.Gruarc, con.Gruser, con.Grutip AS requiere_tercero, con.Grumva AS modifica_valor, con.Gruabo, con.Grutab, con.Grutri, con.Grumca, con.Grufpa, con.Grutia, con.Grutpr, con.Gruccf
        FROM    {$wbasedato}_000200 AS con";
$result = mysql_query($sql,$conex) or die("Error Maestro conceptos: ".mysql_errno()." ".$sql." - ".mysql_error());
$arr_maestro_000200 = array();
while ($row = mysql_fetch_array($result))
{
    if(!array_key_exists($row["Grucod"], $arr_maestro_000200))
    {
        $arr_maestro_000200[$row["Grucod"]] = array();
    }
    $arr_maestro_000200[$row["Grucod"]]["Grucod"] = $row["Grucod"];
    $arr_maestro_000200[$row["Grucod"]]["Grudes"] = utf8_encode($row["Grudes"]);
    $arr_maestro_000200[$row["Grucod"]]["Gruest"] = $row["Gruest"];
    $arr_maestro_000200[$row["Grucod"]]["Gruinv"] = $row["Gruinv"];
    $arr_maestro_000200[$row["Grucod"]]["Gruarc"] = $row["Gruarc"];
    $arr_maestro_000200[$row["Grucod"]]["Gruser"] = $row["Gruser"];
    $arr_maestro_000200[$row["Grucod"]]["Grutip"] = $row["requiere_tercero"];
    $arr_maestro_000200[$row["Grucod"]]["Grumva"] = $row["modifica_valor"];
    $arr_maestro_000200[$row["Grucod"]]["Gruabo"] = $row["Gruabo"];
    $arr_maestro_000200[$row["Grucod"]]["Grutab"] = $row["Grutab"];
    $arr_maestro_000200[$row["Grucod"]]["Grutri"] = $row["Grutri"];
    $arr_maestro_000200[$row["Grucod"]]["Grumca"] = $row["Grumca"];
    $arr_maestro_000200[$row["Grucod"]]["Grufpa"] = $row["Grufpa"];
    $arr_maestro_000200[$row["Grucod"]]["Grutia"] = $row["Grutia"];
    $arr_maestro_000200[$row["Grucod"]]["Grutpr"] = $row["Grutpr"];
    $arr_maestro_000200[$row["Grucod"]]["Gruccf"] = $row["Gruccf"];
}

$sql =" SELECT  Procod AS codigo, Pronom AS nombre, Procup AS codigo_cups
        FROM    {$wbasedato}_000103
        WHERE   Proest ='on'
        ORDER BY Pronom";
$result = mysql_query($sql,$conex) or die("Error: ".mysql_errno()." ".$sql." - ".mysql_error());
$arr_examenes = array();
while ($row = mysql_fetch_array($result))
{
    if(!array_key_exists($row['codigo'], $arr_examenes))
    {
        $arr_examenes[$row['codigo']] = utf8_encode($row['nombre']);
    }
}

// Consultando lista de equipos
// $sql =" SELECT  Procod AS codigo, Pronom AS nombre, Procup AS codigo_cups
//         FROM    {$wbasedato}_000103
//         WHERE   Protip = 'Q'
//                 AND Proest ='on'
//         ORDER BY Pronom";
$sql =" SELECT  Procod AS codigo, Pronom AS nombre, Procup AS codigo_cups
        FROM    {$wbasedato}_000103
        WHERE   Proest ='on'
        ORDER BY Pronom";
$result = mysql_query($sql,$conex) or die("Error: ".mysql_errno()." ".$sql." - ".mysql_error());
$arr_equipos = array();
while ($row = mysql_fetch_array($result))
{
    if(!array_key_exists($row['codigo'], $arr_equipos))
    {
        $arr_equipos[$row['codigo']] = utf8_encode($row['nombre']);
    }
}


// Centros de costos de cirugía
$sql =" SELECT  Ccocod AS codigo, Cconom AS nombre
        FROM    {$wbasedato_movhos}_000011
        WHERE   Ccocir = 'on'";
$result = mysql_query($sql,$conex) or die("Error: ".mysql_errno()." ".$sql." - ".mysql_error());
$arr_ccos_cirugia = array();
while ($row = mysql_fetch_array($result))
{
    if(!array_key_exists($row['codigo'], $arr_ccos_cirugia))
    {
        $arr_ccos_cirugia[$row['codigo']] = utf8_encode($row['nombre']);
    }
}

// Consultar maestro de disponibilidades
/*$sql =" SELECT  Clacod AS codigo, Clades AS nombre
        FROM    root_000099
        WHERE   Claest='on'";
$result = mysql_query($sql,$conex) or die("Error: ".mysql_errno()." ".$sql." - ".mysql_error());
$arr_disponibilidades = array();
while ($row = mysql_fetch_array($result))
{
    if(!array_key_exists($row['codigo'], $arr_equipos))
    {
        $arr_disponibilidades[$row['codigo']] = utf8_encode($row['nombre']);
    }
}*/

$codParticipacionMedicoDisponible   = consultarAliasPorAplicacion($conex, $wemp_pmla, 'codParticipacionMedicoDisponible');
$codParticipacionMedicoNoDisponible = consultarAliasPorAplicacion($conex, $wemp_pmla, 'codParticipacionMedicoNoDisponible');
$arr_disponibilidades[$codParticipacionMedicoDisponible]   = "Disponible";
$arr_disponibilidades[$codParticipacionMedicoNoDisponible] = "No disponible";
$actOpOtrosProced = consultarAliasPorAplicacion($conex, $wemp_pmla, 'liq_procedimientos_no_auditados');
$actOpOtrosProced = ($actOpOtrosProced == 'on') ? '': 'disabled="disabled"';
?>
<html lang="es-ES">
<head>
    <title>Liquidación Cirugía</title>
    <meta charset="utf-8">

    <script src="../../../include/root/jquery_1_7_2/js/jquery-1.7.2.min.js" type="text/javascript"></script>
    <!-- Librería para detectar compatibilidad HTML5 con varios navegadores -->
    <script src="../../../include/root/modernizr.custom.js" type="text/javascript"></script>
    <link rel="stylesheet" href="../../../include/root/jqueryui_1_9_2/cupertino/jquery-ui-cupertino.css" />
    <script src="../../../include/root/jqueryui_1_9_2/jquery-ui.js" type="text/javascript"></script>
    <script type="text/javascript" src="../../../include/root/jquery.blockUI.min.js"></script>
    <link rel="stylesheet" href="../../../include/ips/facturacionERP.css">

    <!-- Función para pintar los insumos -->
    <script src="../../../include/ips/funcionInsumosqxERP.js" type="text/javascript"></script>

    <link type="text/css" href="../../../include/root/jquery.tooltip.css" rel="stylesheet" />
    <script src="../../../include/root/jquery.tooltip.js" type="text/javascript"></script>

    <script type="text/javascript" src="../../../include/root/jquery.ui.timepicker.js"></script>
    <link type="text/css" href="../../../include/root/jquery.ui.timepicker.css" rel="stylesheet"/>

    <script type="text/javascript" src="../../../include/root/jqueryalert.js?v=<?=md5_file('../../../include/root/jqueryalert.js');?>"></script>
    <link type="text/css" href="../../../include/root/jqueryalert.css" rel="stylesheet" />

    <script type="text/javascript">
        var regExDecimal = /(^[0]{1}\.{1}[0-9]+$)|(^\d+\.{1}[0-9]+$)|(^\d+$)|(^[0]$)/;
        // var failJquery = 'El programa terminó de ejecutarse pero con algunos inconvenientes';
        // fail(function(xhr, textStatus, errorThrown) { jAlert("error interno: "+xhr.responseText, "Mensaje"); console.log("error"); });

        function mensajeFailAlert(this_, mensaje, xhr, textStatus, errorThrown)
        {
            // console.log(xhr);
            var obj_data = [];
            var data_ajax = this_["data"]
            var data_parcial = data_ajax.substr(0, 200)+"...";
            // console.log(data_parcial);
            var url_err = document.location.href;
            // console.log(url_err);

            var responseText = xhr.responseText.split("{\"");
            var detalle_error= "";
            if(responseText.length > 0)
            {
                detalle_error = responseText[0];
                // console.log(detalle_error);
            }

            var msg_fail = "";
            if (xhr.status === 0) {
                msg_fail = 'No hay conexión: verificar la red.';
                // console.log(msg_fail);
            } else if (xhr.status == 404) {
                msg_fail = 'Página no encontrada [404]';
                // console.log(msg_fail);
            } else if (xhr.status == 500) {
                msg_fail = 'Error interno del servidor [500].';
                // console.log(msg_fail);
            } else if (textStatus === 'parsererror') {
                msg_fail = 'Respuesta JSON falló.';
                // console.log(msg_fail);
            } else if (textStatus === 'timeout') {
                msg_fail = 'Error tiempo de respuesta agotado.';
                // console.log(msg_fail);
            } else if (textStatus === 'abort') {
                msg_fail = 'Respuesta ajax abortada.';
                // console.log(msg_fail);
            } else {
                msg_fail = 'Error desconocido: ' + xhr.responseText;
                // console.log(msg_fail);
            }

            var msj_extra = '';
            msj_extra = (mensaje != '') ? "<br>"+mensaje: mensaje;
            jAlert($("#failJquery").val()+msj_extra, "Mensaje");
            $("#div_error_interno").html(xhr.responseText);

            obj_data.push(msg_fail);
            obj_data.push(data_parcial);
            obj_data.push(detalle_error);
            obj_data.push(url_err);
            console.log(obj_data);

            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
            {
                consultaAjax  : '',
                wemp_pmla     : $('#wemp_pmla').val(),
                accion        : 'insert',
                form          : 'guardar_error_ajax_log',
                msg_fail      : msg_fail,
                data_parcial  : data_parcial,
                detalle_error : detalle_error,
                url_err       : url_err
            },function(data){
                if(data.error == 1)
                {
                    console.log(data.mensaje);
                }
                else
                {
                    console.log("Evento guardado en log de errores..");
                }
            },
            'json'
            ).done(function(){
                //
            }).fail(function(xhrLog, textStatusLog, errorThrownLog) { console.log(xhrLog.responseText) });

            // console.log(xhr);
            // jAlert("error interno: "+xhr.responseText, "Mensaje"); console.log("error");
        }

        /**
         * [parametrosComunes: Genera un json con las variables más comunes que se deben enviar en los llamados ajax, evitando tener que crear los mismos parámetros de envío
         *                     en cada llamado ajax de forma manual.]
         * @return {[type]} [description]
         */
        function parametrosComunesLiq()
        {
            var obJson                 = {};
            // obJson['wemp_pmla']        = $("#wemp_pmla").val();
            obJson['wbasedato_movhos'] = $("#wbasedato_movhos").val();
            // obJson['wbasedato']        = $("#wbasedato").val();
            // obJson['wbasedato_ayu']    = $("#wbasedato_ayu").val();
            // obJson['wbasedato_tal']    = $("#wbasedato_tal").val();
            // obJson['wbasedato_tcx']    = $("#wbasedato_tcx").val();
            obJson['consultaAjax']     = '';
            return obJson;
        }

        $(document).on('mousemove', function(e){
            $('.caja_flotante_temp').css({
               left:  e.pageX+12,
               top:   e.pageY
            });
        });

        // Inicializar primer acordeón
        $(function(){
            $("#div_datos_basicos").attr("acordeon", "");
            $("#div_datos_basicos").accordion({
                 collapsible: true
                ,heightStyle: "content"
                //,active: -1
            });

            $('#whora_cargo').timepicker({
                showPeriodLabels: false,
                hourText: 'Hora',
                minuteText: 'Minuto',
                amPmText: ['AM', 'PM'],
                closeButtonText: 'Aceptar',
                nowButtonText: 'Ahora',
                deselectButtonText: 'Deseleccionar',
                defaultTime: 'now'
            });

            //
            $('#horIni_cx').timepicker({
                showPeriodLabels: false,
                hourText: 'Hora',
                minuteText: 'Minuto',
                amPmText: ['AM', 'PM'],
                closeButtonText: 'Aceptar',
                nowButtonText: 'Ahora',
                deselectButtonText: 'Deseleccionar',
                defaultTime: 'now'
            });

            $('#horFin_cx').timepicker({
                showPeriodLabels: false,
                hourText: 'Hora',
                minuteText: 'Minuto',
                amPmText: ['AM', 'PM'],
                closeButtonText: 'Aceptar',
                nowButtonText: 'Ahora',
                deselectButtonText: 'Deseleccionar',
                defaultTime: 'now'
            });

            $('#div_horIni_cx').timepicker({
                showPeriodLabels: false,
                hourText: 'Hora',
                minuteText: 'Minuto',
                amPmText: ['AM', 'PM'],
                closeButtonText: 'Aceptar',
                nowButtonText: 'Ahora',
                deselectButtonText: 'Deseleccionar',
                defaultTime: 'now'
            });

            $('#div_horFin_cx').timepicker({
                showPeriodLabels: false,
                hourText: 'Hora',
                minuteText: 'Minuto',
                amPmText: ['AM', 'PM'],
                closeButtonText: 'Aceptar',
                nowButtonText: 'Ahora',
                deselectButtonText: 'Deseleccionar',
                defaultTime: 'now'
            });
        });

        /***Limitar tamaño texto***/
        jQuery(document).ready(function(){

            $('.texto-cortado').each(function(){

            var longitud=25;

            if($(this).text().length > longitud){

                var texto=$(this).text().substring(0,longitud);
                var indiceUltimoEspacio= texto.lastIndexOf(' ');
                texto=texto.substring(0,indiceUltimoEspacio) +'<span class="puntos">...</span>';

                var primeraParte = '<span class="texto-mostrado">' + texto + '</span>';
                var segundaParte = '<span class="texto-ocultado" style="display:none;">' + $(this).text().substring(indiceUltimoEspacio,$(this).text().length - 1) + '</span>';

                $(this).html(primeraParte + segundaParte);
                $(this).after('<span class="boton_mas_info"><img width="12 " height="12" border="0" src="../../images/medical/plus.gif"></span>');
            };

            });

            $('.boton_mas_info').live('click',function(){
                if($(this).prev().find('.texto-ocultado').css('display') == 'none'){
                    $(this).prev().find('.texto-ocultado').css('display','inline');
                    $(this).prev().find('.puntos').css('display','none');
                    $(this).html('<img width="12 " height="12" border="0" src="../../images/medical/cambiar1.png">');
                }

                else{
                    $(this).prev().find('.texto-ocultado').css('display','none');
                    $(this).prev().find('.puntos').css('display','inline');
                    $(this).html('<img width="12" height="12" border="0" src="../../images/medical/plus.gif">');
                };
            });

            $(".hidden_img").hide();
        });

        function inicializarFlotantes()
        {
            /**
                Inicializa el div flotante fijo que se despliega al momento de dar clic en el operador lódigo o el operador de igualdad.
            */
            var elementos = $("div[id^=caja_flotante]").length;
            if(elementos > 0)
            {
                var posicion = $(".caja_flotante").offset();
                var margenSuperior = 15;
                 $(window).scroll(function() {
                     if ($(window).scrollTop() > posicion.top) {
                         $(".caja_flotante").stop().animate({
                             // marginTop: $(window).scrollTop() - posicion.top + margenSuperior
                         });
                     } else {
                         $(".caja_flotante").stop().animate({
                             marginTop: 0
                         });
                     };
                });
            }
        }

        function mostrarOcultarInsumos(ver_div)
        {
            if($("."+ver_div+":visible").length > 0)
            {
                $("."+ver_div).hide();
            }
            else
            {
                $("."+ver_div).show();
            }
        }

        function cerrarFlotante()
        {
            if($('#caja_flotante2_insumos').is(":visible"))
            {
                $('#caja_flotante2_insumos').hide();
            }
            else
            {
                $('.caja_flotante').hide();
            }
        }

        /**
         * [crear_variables_compartidas: Esta función se encarga de crear todos los campos que se va a compartir entre los otros programas de facturación,
         *                                   La función se copia desde el programa Cargos_ipsERP.php, debe ser exactamente igual, se crea tambien en este programa
         *                                   porque puede ser posible que usuarios que deban liquidar cirugías no tengan habilitado el acceso al menús de cargos que
         *                                   es donde se inicializaban todas estan variables antes de pasar al programa de liquidación de cirugías.]
         * @return {[type]} [description]
         */
        function crear_variables_compartidas()
        {
            // --> Historia
            if($("#div_campos_compartidos").find("#whistoria_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="whistoria_tal" type="hidden" value="" name="whistoria">');
            // --> Ingreso
            if($("#div_campos_compartidos").find("#wing_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wing_tal" type="hidden" value="" name="wing">');
            // --> Nombre 1
            if($("#div_campos_compartidos").find("#wno1_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wno1_tal" type="hidden" value="" name="wno1">');
            // --> Nombre 2
            if($("#div_campos_compartidos").find("#wno2_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wno2_tal" type="hidden" value="" name="wno2">');
            // --> Apellido 1
            if($("#div_campos_compartidos").find("#wap1_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wap1_tal" type="hidden" value="" name="wap1">');
            // --> Apellido 2
            if($("#div_campos_compartidos").find("#wap2_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wap2_tal" type="hidden" value="" name="wap2">');
            // --> Documento
            if($("#div_campos_compartidos").find("#wdoc_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wdoc_tal" type="hidden" value="" name="wdoc">');
            // --> Tipo documento
            if($("#div_campos_compartidos").find("#wtip_doc_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wtip_doc_tal" type="hidden" value="" name="wtip_doc">');
            // --> Nombre de empresa
            if($("#div_campos_compartidos").find("#wnomemp_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wnomemp_tal" type="hidden" value="" name="wnomemp">');
            // --> Fecha de ingreso
            if($("#div_campos_compartidos").find("#wfecing_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wfecing_tal" type="hidden" value="" name="wfecing">');
            // --> Servicio de ingreso
            if($("#div_campos_compartidos").find("#wser_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wser_tal" type="hidden" value="" name="wser">');
            // -->
            if($("#div_campos_compartidos").find("#wpactam_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wpactam_tal" type="hidden" value="" name="wpactam">');
            // --> Nombre del servicio de ingreso
            if($("#div_campos_compartidos").find("#nomservicio_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="nomservicio_tal" type="hidden" value="" name="nomservicio">');
            // --> Nombre Responsable
            if($("#div_campos_compartidos").find("#div_responsable_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="div_responsable_tal" type="hidden" value="" name="div_responsable">');
            // --> Codigo Responsable
            if($("#div_campos_compartidos").find("#responsable_original_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="responsable_original_tal" type="hidden" value="" name="responsable_original">');
            // --> Codigo Plan empresa principal
            if($("#div_campos_compartidos").find("#plan_emp_cod_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="plan_emp_cod_tal" type="hidden" value="" name="plan_emp_cod">');
            // --> Nombre Tarifa
            if($("#div_campos_compartidos").find("#div_tarifa_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="div_tarifa_tal" type="hidden" value="" name="div_tarifa">');
            // --> Codigo Tarifa
            if($("#div_campos_compartidos").find("#tarifa_original_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="tarifa_original_tal" type="hidden" value="" name="tarifa_original">');
            // -->
            if($("#div_campos_compartidos").find("#div_documento_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="div_documento_tal" type="hidden" value="" name="div_documento">');
            // --> cco del facturador
            if($("#div_campos_compartidos").find("#wcco_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wcco_tal" type="hidden" value="" name="wcco">');
            // --> Nombre del cco del facturador
            if($("#div_campos_compartidos").find("#div_servicio_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="div_servicio_tal" type="hidden" value="" name="div_servicio">');
            // --> Tipo de paciente
            if($("#div_campos_compartidos").find("#wtip_paciente_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wtip_paciente_tal" type="hidden" value="" name="wtip_paciente">');
            // --> Div para pintar cuadro de datos basicos del paciente
            if($("#div_campos_compartidos").find("#div_datos_basicos_tal").length == 0)
                $("#div_campos_compartidos").append('<div id="div_datos_basicos_tal" style="display:none"></div>');
            // --> Usuario administrador
            if($("#div_campos_compartidos").find("#wcajadm_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wcajadm_tal" type="hidden" value="" name="wcajadm">');
            // --> tipo de ingreso
            if($("#div_campos_compartidos").find("#wtipo_ingreso_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wtipo_ingreso_tal" type="hidden" value="" name="wtipo_ingreso">');
            // --> Hubicacion del paciente
            if($("#div_campos_compartidos").find("#ccoActualPac_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="ccoActualPac_tal" type="hidden" value="" name="ccoActualPac">');
            // --> Nombre Hubicacion del paciente
            if($("#div_campos_compartidos").find("#nomCcoActualPac_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="nomCcoActualPac_tal" type="hidden" value="" name="nomCcoActualPac">');
            // --> Nombre del tipo de ingreso
            if($("#div_campos_compartidos").find("#wtipo_ingreso_nom_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wtipo_ingreso_nom_tal" type="hidden" value="" name="wtipo_ingreso_nom">');
            // --> Tipo de empresa
            if($("#div_campos_compartidos").find("#tipoEmpresa_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="tipoEmpresa_tal" type="hidden" value="" name="tipoEmpresa">');
            // --> Nit de empresa
            if($("#div_campos_compartidos").find("#nitEmpresa_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="nitEmpresa_tal" type="hidden" value="" name="nitEmpresa">');
                // --> Html con los responsables
            if($("#div_campos_compartidos").find("#tableResponsables_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="tableResponsables_tal" type="hidden" value="" name="tableResponsables">');
            // --> Si el usuario maneja bodega
            if($("#div_campos_compartidos").find("#wbod_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="wbod_tal" type="hidden" value="" name="wbod">');
            // --> Nombre del usuario
            if($("#div_campos_compartidos").find("#nomCajero_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="nomCajero_tal" type="hidden" value="" name="nomCajero">');
            // --> Si el usuario puede cambiar el responsable del cargo
            if($("#div_campos_compartidos").find("#permiteCambiarResponsable_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="permiteCambiarResponsable_tal" type="hidden" value="" name="permiteCambiarResponsable_tal">');
            // --> Si el usuario puede cambiar de tarifa del cargo
            if($("#div_campos_compartidos").find("#permiteCambiarTarifa_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="permiteCambiarTarifa_tal" type="hidden" value="" name="permiteCambiarTarifa_tal">');
            // --> Si el usuario puede regrabar cargos
            if($("#div_campos_compartidos").find("#permiteRegrabar_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="permiteRegrabar_tal" type="hidden" value="" name="permiteRegrabar_tal">');
            // --> Si el usuario puede seleccionar si el cargo es facturable o no
            if($("#div_campos_compartidos").find("#permiteSeleccionarFacturable_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="permiteSeleccionarFacturable_tal" type="hidden" value="" name="permiteSeleccionarFacturable_tal">');
            // --> Si el usuario puede seleccionar si el cargo es reconocido o excedente
            if($("#div_campos_compartidos").find("#permiteSeleccionarRecExc_tal").length == 0)
                $("#div_campos_compartidos").append('<input id="permiteSeleccionarRecExc_tal" type="hidden" value="" name="permiteSeleccionarRecExc_tal">');
        }

        /**
         * [abrirTablero: Abre el programa de Historia clinica donde se puede consultar la descripción operatoria, instrumentación entre otros.]
         * @return {[type]} [description]
         */
        function abrirTablero()
        {
            var wemp_pmla        = $("#wemp_pmla_tal").val();
            var wtip_doc_tal     = $("#wtip_doc_tal").val();
            var wdoc_tal         = $("#wdoc_tal").val();
            var whistoria_tal    = $("#whistoria_tal").val();
            var wbasedato_movhos = $("#wbasedato_movhos").val();
            if(wtip_doc_tal != "" && wdoc_tal != "" && whistoria_tal != "")
            {
                var path = "/matrix/HCE/procesos/HCE_iFrames.php?empresa=hce&origen="+wemp_pmla+"&wcedula="+wdoc_tal+"&wtipodoc="+wtip_doc_tal+"&wdbmhos="+wbasedato_movhos;
                window.open(path,'','fullscreen=1,status=0,menubar=0,toolbar=0,location=0,directories=0,resizable=0,scrollbars=1,titlebar=0');
            }
            else
            {
                mensaje_fn = "Falta historia, documento ó tipo de documento";
                mostrar_mensajeAccion(mensaje_fn,"spn_mensaje_hce","red");
            }
        }

        /**
         * [abrirDisponibilidades: Abre el programa donde se pueden consultar las disponibilidades de los médicos para diferentes especialidades]
         * @return {[type]} [description]
         */
        function abrirDisponibilidades()
        {
            var wemp_pmla = $("#wemp_pmla_tal").val();
            var path      = "/matrix/movhos/procesos/Consul_disponibilidad_especialidad.php?wemp_pmla="+wemp_pmla;
            window.open(path,'','fullscreen=1,status=0,menubar=0,toolbar=0,location=0,directories=0,resizable=0,scrollbars=1,titlebar=0');
        }

        $(document).ready( function ()
        {
            // --> Crear variable compartidas para todo el gestor
            crear_variables_compartidas();

            cargarDatosPaciente('wing','');
            validarEstadoDeCuentaCongelada(false);
            $("#accordionDatosPaciente, #acordeon_basicos_liquidacion").accordion({
                collapsible: true,
                heightStyle: "content"
            });

            $("#accordionDetalles").accordion({
                collapsible: true,
                heightStyle: "content",
                active : false
            });

            $("#accordionPendientes").accordion({
                collapsible: true,
                heightStyle: "content",
                active : false
            });

            $("#query_ejemplo").accordion({
                collapsible: true,
                heightStyle: "content",
                active : false
            });

            var datos  = eval('(' + $('#arr_terceros_especialidad').val() + ')');
            var terceros      = new Array();
            var index         = -1;
            for (var cod_ter in datos)
            {
                index++;
                terceros[index]                = {};
                terceros[index].value          = cod_ter+'-'+datos[cod_ter]['nombre'];
                terceros[index].label          = cod_ter+'-'+datos[cod_ter]['nombre'];
                terceros[index].codigo         = cod_ter;
                terceros[index].nombre         = cod_ter+'-'+datos[cod_ter]['nombre'];
                terceros[index].especialidades = datos[cod_ter]['especialidad'];
            }

            $( "#wespecialistas" ).autocomplete({
                minLength:  0,
                source:     terceros,
                select:     function( event, ui ){
                    cargarSelectEspecialidades( ui.item.especialidades , 'wespecialidad', '');
                    var cod_sel = ui.item.codigo;
                    var nom_sel = ui.item.nombre;
                    $("#wespecialistas").attr("codigo",cod_sel);
                    $("#wespecialistas").attr("nombre",nom_sel);
                }
            });

            $('.tooltip_pro').tooltip({track: true, delay: 0, showURL: false, showBody: ' - ', opacity: 0.95, left: -50 });

            reiniciarCamposEncabezado();
        });

        function posicionElemento(ele)
        {
            cerrarFlotante();
            var elemento = $(ele);
            var posicion = elemento.offset();
            var dif_fila = elemento.attr("dif_fila");

            if($('#caja_flotante_'+dif_fila).length > 0)
            {
                $('#caja_flotante_'+dif_fila).css({'left':posicion.left+33,'top':posicion.top+15});
                $('#caja_flotante_'+dif_fila).show();
            }
            else if($('#caja_flotante2_'+dif_fila).length > 0)
            {
                $('#caja_flotante2_'+dif_fila).css({'left':posicion.left+33,'top':posicion.top});
                $('#caja_flotante2_'+dif_fila).show();
            }
        }

        function reiniciarCamposEncabezado()
        {
            var datosO  = eval('(' + $('#arr_organos').val() + ')');
            var organosBil      = new Array();
            var index         = -1;
            for (var cod_org in datosO)
            {
                index++;
                organosBil[index]                = {};
                organosBil[index].value          = cod_org+'-'+datosO[cod_org]['nombre'];
                organosBil[index].label          = cod_org+'-'+datosO[cod_org]['nombre'];
                organosBil[index].codigo         = cod_org;
                organosBil[index].nombre         = cod_org+'-'+datosO[cod_org]['nombre'];
                organosBil[index].bilateral      = datosO[cod_org]['bilateral'];
            }

            $( ".worgano" ).autocomplete({
                minLength:  0,
                source:     organosBil,
                select:     function( event, ui ){
                    //cargarSelectEspecialidades( ui.item.especialidades , 'wespecialidad', '');
                    var cod_sel   = ui.item.codigo;
                    var nom_sel   = ui.item.nombre;
                    var bilateral = ui.item.bilateral;
                    var id_input = this.id;
                    var idx_auditado = $("#"+id_input).attr("idx_auditado");
                    var facturadorModificaBilateralidad = $("#facturadorModificaBilateralidad").val();

                    if(idx_auditado == undefined) { idx_auditado = ''; }
                    if(idx_auditado != '')
                    {
                        idx_auditado = '_'+idx_auditado;
                    }
                    $("#worgano"+idx_auditado).attr("codigo",cod_sel);
                    $("#worgano"+idx_auditado).attr("nombre",nom_sel);
                    $("#worgano"+idx_auditado).attr("bilateral",bilateral);

                    // Mostrar u oculrar el check de bilateral
                    if(bilateral == 'on')
                    {
                        $(".opcion_bilateral"+idx_auditado).show();
                    }
                    else
                    {
                        if((facturadorModificaBilateralidad == 'on' && idx_auditado != "") || idx_auditado == "")
                        {
                            $(".opcion_bilateral"+idx_auditado).hide();
                            $("#wbilateral"+idx_auditado).removeAttr("checked");
                        }
                    }
                }
            });

            /**>> Autocompletar "procedimientos" **/
            // crearAutocomplete('arr_procedimientos', 'wprocedimiento','','',1);

            // /**>> Autocompletar "entidades" **/
            // crearAutocomplete('arr_entidades', 'wentidad','*','* TODOS *',1);

            // /**>> Autocompletar "tarifas" **/
            // crearAutocomplete('arr_tarifas', 'wtarifa','*','* TODOS *',1);

            // /**>> Autocompletar "conceptos" **/
            // crearAutocomplete('arr_conceptos', 'wnuevo_concepto_gral','','',1);
        }

        function cargarDatosPaciente(elemento, enRevision)
        {
            var wturno_cirugia_tmp = "";
            // si la historia es vacia se inician los datos y no se continua la ejecucion de la función
            if($("#whistoria_tal").val()=='' && $("#whistoriaLocal").val()=='')
            {
                limpiarPantalla(true);
                return;
            }
            else
            {
                if($("#whistoriaLocal").val() == '')
                {
                    $("#whistoriaLocal").val($("#whistoria_tal").val());
                }
                else if($('#whistoriaLocal').val() != $('#whistoria_tal').val())
                {
                    limpiarDatosCamposLiquidacion(true);
                }
                else
                {
                    wturno_cirugia_tmp = ($("#wturno_cirugia").length > 0) ? $("#wturno_cirugia").val() : "";
                }
            }

            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
            {
                consultaAjax            : '',
                wemp_pmla               : $('#wemp_pmla').val(),
                accion                  : 'load',
                form                    : 'cargar_datos_paciente',
                whistoria               : $('#whistoriaLocal').val(),
                wing                    : $('#wingLocal').val(),
                arr_procedimientos_orig : $('#arr_procedimientos_temp_noPrepa').val(),
                wcargos_sin_facturar    : 'ok',
                welemento               : elemento

            },function(data){

                // --> data.prueba valida si la historia existe
                var alerta = 'La historia no existe';
                if(data.prueba == 'no')
                {
                    jAlert(alerta, "Mensaje");
                    $('#whistoriaLocal').val('');
                    $('#wingLocal').val('');
                    limpiarPantalla(true);
                }
                else
                {
                    // --> data.error indica si hay un error  en el llamado de la funcion
                    if(data.error ==1)
                    {
                        jAlert(alerta, "Mensaje");
                        $('#whistoriaLocal').val('');
                        $('#wingLocal').val('');
                        $("#whistoria_tal").val('');
                        $("#wing_tal").val('');
                        limpiarPantalla(true);
                    }
                    else
                    {
                        // --> datos traidos desde la funcion
                        // $("#whistoria_tal").val($('#whistoriaLocal').val());
                        $("#span_max_ingreso").html("");

                        $("#wturno_cirugia").html(data.turnos_sin_liquidar);
                        $("#winfo_cirugias_turno").html(data.html_cx_turno);
                        $("#winfo_cirugias_turno_anuladas").html(data.html_turnos_anulados_con_mercado);
                        if(data.html_turnos_anulados_con_mercado != '')
                        {
                            $("#td_winfo_cirugias_turno_anuladas").show();
                        }
                        else
                        {
                            $("#td_winfo_cirugias_turno_anuladas").hide();
                        }

                        if(wturno_cirugia_tmp != null && wturno_cirugia_tmp != "")
                        {
                            // console.log(wturno_cirugia_tmp);
                            $("#wturno_cirugia").val(wturno_cirugia_tmp);
                            $("#wturno_cirugia").trigger("onchange");
                        }

                        $("#whistoria_tal").val($('#whistoriaLocal').val());

                        $("#wingLocal").val(data.wwing);
                        $("#wing_tal").val(data.wwing);

                        if(data.wwing != data.wing_max)
                        {
                            $("#span_max_ingreso").html("(Mayor Ingreso: "+data.wing_max+")");
                            $("#span_max_ingreso").css({"color":"green","font-weight":"bold","font-size":"8pt"});
                        }

                        $("#wno1").val(data.wno1);
                        $("#wno1_tal").val(data.wno1);

                        $("#wno2").val(data.wno2);
                        $("#wno2_tal").val(data.wno2);

                        $("#wap1").val(data.wap1);
                        $("#wap1_tal").val(data.wap1);

                        $("#wap2").val(data.wap2);
                        $("#wap2_tal").val(data.wap2);

                        $("#wdoc").val(data.wdoc);
                        $("#wdoc_tal").val(data.wdoc);

                        $("#wtip_doc").val(data.wtip_doc);
                        $("#wtip_doc_tal").val(data.wtip_doc);

                        $("#wnomemp").val(data.wnomemp);
                        $("#wnomemp_tal").val(data.wnomemp);

                        $("#wfecing").html(data.wfecing);
                        $("#wfecing_tal").val(data.wfecing);

                        $("#wser").val(data.wser);
                        $("#wser_tal").val(data.wser);

                        // --> Ubicacion actual del paciente
                        $("#divCcoActualPac").html(data.ccoActualPac+"-"+data.nomCcoActualPac);
                        $("#ccoActualPac").val(data.ccoActualPac);
                        $("#nomCcoActualPac").val(data.nomCcoActualPac);
                        $("#ccoActualPac_tal").val(data.ccoActualPac);
                        $("#nomCcoActualPac_tal").val(data.nomCcoActualPac);

                        $("#wpactam").val(data.wpactam);
                        $("#wpactam_tal").val(data.wpactam);

                        var div_tipo_servicio = data.wnombreservicio;

                        $("#nomservicio").html(div_tipo_servicio);
                        $("#nomservicio_tal").html(div_tipo_servicio);

                        if(div_tipo_servicio === null || div_tipo_servicio == '')
                        {
                            $("#div_tipo_servicio").css({"background-color":"red"});
                            $("#div_tipo_ingreso").css({"background-color":"red"});
                            $("#div_tipo_servicio").html("Admisi&oacute;n con posibles datos incompletos");
                        }
                        else
                        {
                            $("#div_tipo_servicio").css({"background-color":"transparent"});
                            $("#div_tipo_ingreso").css({"background-color":"transparent"});
                            $("#div_tipo_servicio").html(div_tipo_servicio);
                        }

                        $("#wtipo_ingreso_nom_tal").val(data.nombre_tipo_ingreso);
                        $("#div_tipo_ingreso").html(data.nombre_tipo_ingreso);

                        $("#div_responsable").html(data.responsable);
                        $("#div_responsable_tal").val(data.responsable);

                        $("#responsable_original").val(data.wcodemp);
                        $("#responsable_original_tal").val(data.wcodemp);
                        $("#plan_emp_cod_tal").val(data.plan_emp_cod);

                        $("#td_responsable").html(data.responsable);

                        $("#hidden_responsable").val(data.wcodemp);

                        $("#div_tarifa").html(data.tarifa);
                        $("#div_tarifa_tal").val(data.tarifa);

                        $("#tarifa_original").val(data.wtar);
                        $("#tarifa_original_tal").val(data.wtar);

                        $("#td_tarifa").html(data.tarifa);
                        $("#hidden_tarifa").val(data.wtar);
                        $("#div_paciente").html(data.paciente);

                        // --> Pintar los otros responsables del paciente
                        $("#tableResponsables").html('');
                        $("#tableResponsables").append(data.otrosResponsables).show();

                        $("#div_documento").html(data.wdoc);
                        $("#div_documento_tal").val(data.wdoc);

                        $("#div_servicio").html($("#wcco_tal").val()+'-'+$("#div_servicio_tal").val());
                        $("#div_servicio_tal").val($("#div_servicio_tal").val());

                        $("#wtip_paciente").val(data.wtip_paciente);
                        $("#wtip_paciente_tal").val(data.wtip_paciente);

                        $("#wtipo_ingreso").val(data.tipo_ingreso);
                        $("#wtipo_ingreso_tal").val(data.tipo_ingreso);

                        // --> Tipo de empresa
                        $("#tipoEmpresa").val(data.tipoEmpresa);
                        $("#tipoEmpresa_tal").val(data.tipoEmpresa);

                        // --> Nit de empresa
                        $("#nitEmpresa").val(data.nitEmpresa);
                        $("#nitEmpresa_tal").val(data.nitEmpresa);

                        // --> Pintar el detalle de la cuenta simple
                        $("#cargos_sin_facturar").val(data.cargos_sin_facturar);
                        $("#tabla_informativos_basicos").css("display" , "block");

                        $("#arr_datos_liquidar").val(data.arr_datos_liquidar);
                        $("#arr_datos_liquidar_temp").val(data.arr_datos_liquidar_temp);

                        $("#chk_otros_procedimientos").removeAttr("checked");

                        $("#arr_procedimientos_temp").val(data.arr_procedimientos_temp);

                        // Carga los procedimientos habilitados para la historia, autorizados o con mercado
                        var estado_chk = ($("#wliq_paquete").is(":checked")) ? 'on': 'off';
                        if(estado_chk != 'on')
                        {
                            $("#arr_procedimientos").val(data.arr_procedimientos);
                        }

                        recargarDetalleLiquidaciones();

                        if(validarEstadoDeCuentaCongelada(false))
                        {
                        }

                        // --> Pintar el detalle de la cuenta
                        // pintar_detalle_cuenta();
                    }
                }
            },
            'json').done(function(){
                crearAutocomplete('arr_procedimientos', 'wprocedimiento','','',0);
                if(enRevision != '' && enRevision == 'temporal_en_revision')
                {
                    cargarTemporalEnRevision();
                }
                recargarDivTemporaSinTarifa($('#whistoriaLocal').val(), $('#wingLocal').val());

                // Si hay un responable complementario entonces resaltarlo como el responsable principal
                if($("#tableResponsables").find("tr[complementario=on]").length > 0)
                {
                    $("#tableResponsables").find("tr[complementario=on]").css({"font-size":"8pt","font-weight": "bold", "background-color":"#bbbbbb"});
                    $("#tableResponsables").find("tr[complementario=off]").css({"font-weight": "", "background-color":""});
                }
            }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
        }

        function recargarDivTemporaSinTarifa(whistoria, wing)
        {
            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
            {
                consultaAjax         : '',
                wemp_pmla            : $('#wemp_pmla').val(),
                accion               : 'load',
                form                 : 'recargar_datos_temp_revision',
                whistoria            : whistoria,
                wing                 : wing
            },function(data){
                if(data.error == 1)
                {
                    jAlert(data.mensaje, "Mensaje");
                }
                else
                {
                    $("#div_contenedor_detalle_pendientes").html(data.html);
                }
            },
            'json'
            ).done(function(){
                $(".hidden_img").hide();
                //
            }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
        }

        function bloquearBoton(this_btn)
        {
            if($(".cargando").length > 0)
            {
                // Si ya hay uno cargando entonces no haga nada hasta que termine
                return;
            }

            $(".btn_loading").attr("disabled","disabled");
            $(this_btn).addClass("cargando");
            $(this_btn).html('&nbsp;<img class="" border="0" src="../../images/medical/ajax-loader2.gif" title="Cargando.." >');
        }

        function desbloquearBoton(txt)
        {
            var this_btn_x = $(".cargando");
            $(this_btn_x).removeClass("cargando");
            if(txt == '') $(this_btn_x).html("Adicionar");
            else $(this_btn_x).html(txt)
            var control_ultima_actualizacion = $("#control_ultima_actualizacion").val();
            if(control_ultima_actualizacion != 'on')
            {
                $(".btn_loading").removeAttr("disabled");
            }
        }

        function generarListaVias()
        {
            var vias_n = ($("#wnumvias").val() == '' || $("#wnumvias").val() == 0) ? 1 : $("#wnumvias").val();
            var wnumvias = parseInt(vias_n);

            if(vias_n == '' || vias_n == 0)
            {
                $("#wnumvias").val('1');
            }

            $("#wvia").html("");
            var options_vias = ' <option value="">..</option>';
            for(var iopt = 1; iopt <= wnumvias; iopt++)
            {
                options_vias = options_vias+' <option value="'+iopt+'">'+iopt+'</option>';
            }
            $("#wvia").html(options_vias);

			// --> 2017-06-05, Jerson Trujillo: Se solicita que se deje modificar las vias cuando la cx haya sido auditada automaticamente
			// $("[id^=wvia_]").html(options_vias)
        }

        /**
         * [parametrosProcedimiento: Esta función crea un objeto javascript con los datos completos de cada procedimiento que se quiere agregar a la liquidación,
         *                             ya sea agregado desde la lista de procedmientos auditados que pueden ser uno o muchos o desde la opción "Otros procedimientos"]
         * @param  {[type]} origen_procedimiento [description]
         * @param  {[type]} idx_auditado         [description]
         * @return {[type]}                      [description]
         */
        function parametrosProcedimiento(origen_procedimiento, idx_auditado)
        {
            var idx_html = "";
            var mensaje_fn = "";
            var msj_existe = "";
            var campos_ok = true;
            if(origen_procedimiento == 'lista_auditados')
            {
                idx_html = "_"+idx_auditado;
            }

            // var procedimiento = new Array();
            // var opt_tur                    = $("option:selected", $("#wturno_cirugia"));
            // var ccoquirofano               = opt_tur.attr("ccoquirofano");
            var procedimiento = new Object();

            procedimiento.wprocedimiento        = $("#wprocedimiento"+idx_html).attr("codigo");
            procedimiento.wprocedimiento_nombre = $("#wprocedimiento"+idx_html).attr("nombre");
            procedimiento.wespecialistas        = $("#wespecialistas"+idx_html).attr("codigo");
            procedimiento.wespecialistas_nombre = $("#wespecialistas"+idx_html).attr("nombre");
            procedimiento.worgano               = $("#worgano"+idx_html).attr("codigo");
            procedimiento.worgano_nombre        = $("#worgano"+idx_html).attr("nombre");
            procedimiento.worgano_bilateral     = $("#worgano"+idx_html).attr("bilateral");
            procedimiento.wvia                  = $("#wvia"+idx_html).val();
            procedimiento.wespecialidad         = $("#wespecialidad"+idx_html).val();
            procedimiento.wespecialidad_nombre  = $("#wespecialidad"+idx_html+" option:selected").text();
            procedimiento.wbilateral            = ($("#wbilateral"+idx_html).is(":checked")) ? 'on': 'off';
            procedimiento.wposicion_organo      = $("#wposicion_organo"+idx_html).val();
            procedimiento.wposicion_organo_nom  = $("#wposicion_organo"+idx_html+" option:selected").text();
            procedimiento.wtiempo_procedimiento = $("#wtiempo_procedimiento"+idx_html).val();
            procedimiento.es_paquete            = ($("#wliq_paquete"+idx_html).attr("checked") == 'checked') ? "on": "off";
            procedimiento.codigos_auditados     = "";
            procedimiento.wturno_cirugia        = $("#wturno_cirugia").val();

            var msjpro = '';
            if(procedimiento.wprocedimiento != '')
            {
                msjpro = ' [Procedimiento: '+procedimiento.wprocedimiento+']';
            }

            if(procedimiento.wprocedimiento == '')
            {
                campos_ok = false;
                $("#wprocedimiento"+idx_html).addClass("campoRequerido");
                mensaje_fn += "<br>* Falta procedimiento"+msjpro;
            }

            if(procedimiento.wvia == '')
            {
                campos_ok = false;
                $("#wvia"+idx_html).addClass("campoRequerido");
                mensaje_fn += "<br>* Falta la vía"+msjpro;
            }

            if(procedimiento.wespecialistas == '')
            {
                campos_ok = false;
                $("#wespecialistas"+idx_html).addClass("campoRequerido");
                mensaje_fn += "<br>* Falta especialista"+msjpro;
            }

            if(procedimiento.wespecialidad == '')
            {
                campos_ok = false;
                $("#wespecialidad"+idx_html).addClass("campoRequerido");
                mensaje_fn += "<br>* Falta especialidad"+msjpro;
            }

            if(procedimiento.worgano == '')
            {
                campos_ok = false;
                $("#worgano"+idx_html).addClass("campoRequerido");
                mensaje_fn += "<br>* Falta parte del cuerpo"+msjpro;
            }

            if(procedimiento.wturno_cirugia == '')
            {
                campos_ok = false;
                $("#wturno_cirugia"+idx_html).addClass("campoRequerido");
                mensaje_fn += "<br>* Falta seleccionar el turno"+msjpro;
            }

            if(procedimiento.wposicion_organo == '')
            {
                procedimiento.wposicion_organo_nom = '';
            }

            // si hay algun bilateral debe contener '_bilateral1'
            var unBilateral = '';
            if(procedimiento.wbilateral == 'on')
            {
                unBilateral = '_bilateral1';
            }

            var js_wposicion_organo = '';
            if(procedimiento.wposicion_organo != '')
            {
                js_wposicion_organo = '_'+js_wposicion_organo;
            }

            var existe_tr = "tr_liqAdd_cxs_"+procedimiento.wprocedimiento+unBilateral+js_wposicion_organo+"_"+procedimiento.wespecialistas+"_"+procedimiento.wespecialidad;
            if($("#"+existe_tr).length > 0)
            {
                campos_ok = false;
                msj_existe = "<br>* Ya hay un mismo Especialista, con la misma especialidad y para el mismo procedimiento y misma posición de organo"+msjpro;
                // jAlert(alerta, "Mensaje");
            }

            // if(mensaje_fn != "")
            // {
            //     mostrar_mensajeAccion(mensaje_fn,"div_mensaje_add_proced","red");
            // }

            procedimiento.mensaje_fn   = mensaje_fn;
            procedimiento.msj_existe   = msj_existe;
            procedimiento.campos_ok    = campos_ok;
            procedimiento.idx_html     = idx_html;
            procedimiento.idx_auditado = idx_auditado;
            return procedimiento;
        }

        function adicionarProcedimiento(this_btn, origen_procedimiento)
        {
            var es_paquete = ($("#wliq_paquete").attr("checked") == 'checked') ? "on": "off";
            if(origen_procedimiento == 'lista_auditados' && es_paquete == 'on')
            {
                jAlert("Aún no es permitido liquidar actividades con paquetes","Menesaje");
                return;
            }

            var wtiempo_minutos_cx = $("#wtiempo_minutos_cx").val();
            $("#wtiempo_minutos_cx").removeClass("campoRequerido");
            if(es_paquete=='on')
            {
                if(wtiempo_minutos_cx == '')
                {
                    $("#wtiempo_minutos_cx").addClass("campoRequerido");
                    jAlert("Para agregar paquetes es necesario ingresar el tiempo de cirugía.","Menesaje");
                    return;
                }
            }

            var mensaje_fn = "";
            if($("#whistoriaLocal").val() != "" && $("#whistoriaLocal").val() == $("#whistoria_tal").val())
            {
                // true si puede continuar haciendo la liquidación.
                // if(validarEstadoDeCuentaCongelada(true))
                {
                    var campos_ok = true;
                    bloquearBoton(this_btn);
                    $("#wnumvias, #wtipo_anestesia_cx, #wturno_cirugia, #wtiempo_sala_recuperarcion, #wtiempo_uso_minutos, #wtiempo_minutos_cx, #wposicion_organo").removeClass("campoRequerido");
                    $("#tabla_add_lista_cxs").find("save_ok").removeClass("campoRequerido");

                    // 1. Declare an array
                    var parametros_procedimiento = [];
                    // 2. Declare an array of Deferred objects
                    var processItemsDeferred = [];

                    var codigos_auditados = "";
                    var coma              = "";
                    $("#tabla_procedimientos_auditados").find(".trproAud").each(function(){
                        var filaPro = $(this);
                        var idx_auditado = filaPro.attr("idx_auditado");
                        codigos_auditados = codigos_auditados+coma+$("#wprocedimiento_"+idx_auditado).attr("codigo");
                        coma = ",";
                    });

                    // Si se están agregando procedimientos auditados (pueden ser varios al mismo tiempo) entonces se crea un array de objetos,
                    // cada objeto tiene la información completa de cada procedimiento que se quiere agregar a la liquidación (cada objeto tiene procedimiento,
                    // vía, organo, médico, ...), cada objeto se agrega al array "parametros_procedimiento"
                    if(origen_procedimiento == 'lista_auditados')
                    {
                        //Esta sección es para agregar los procedimientos que ya están auditados
                        //puede ser un procedimiento o varios lo que se agreguen.
                        $("#tabla_procedimientos_auditados").find(".trproAud:visible").each(function(){
                            var filaPro = $(this);
                            // console.log("filaPro"+filaPro);
                            var filaProcedimiento = new Object();
                            filaProcedimiento = parametrosProcedimiento(origen_procedimiento, filaPro.attr("idx_auditado"));
                            filaProcedimiento.codigos_auditados = codigos_auditados;

                            // console.log("filaProcedimiento"+filaProcedimiento);
                            if(!filaProcedimiento.campos_ok)
                            {
                                campos_ok = false;
                                if(filaProcedimiento.mensaje_fn != "")
                                {
                                    mensaje_fn += filaProcedimiento.mensaje_fn;
                                }
                                if(filaProcedimiento.msj_existe != "")
                                {
                                    mensaje_fn += filaProcedimiento.msj_existe;
                                }
                            }
                            else
                            {
                                parametros_procedimiento.push( filaProcedimiento );
                            }
                        });
                    }
                    else
                    {
                        // En esta sección se agregan los procedimientos que no han sido auditados, se puede agregar un procedimiento a la vez.
                        var filaProcedimiento = new Object();
                        filaProcedimiento = parametrosProcedimiento(origen_procedimiento, '');
                        filaProcedimiento.codigos_auditados = codigos_auditados;

                        // console.log("filaProcedimiento"+filaProcedimiento);
                        if(!filaProcedimiento.campos_ok)
                        {
                            campos_ok = false;
                            if(filaProcedimiento.mensaje_fn != "")
                            {
                                mensaje_fn += filaProcedimiento.mensaje_fn;
                            }
                            if(filaProcedimiento.msj_existe != "")
                            {
                                mensaje_fn += filaProcedimiento.msj_existe;
                            }
                        }
                        else
                        {
                            parametros_procedimiento.push(filaProcedimiento);
                        }
                    }
                    // console.log("parametros_procedimiento"+parametros_procedimiento);

                    if(campos_ok)
                    {
                        // Con cada procedimiento (Objeto procedimiento) se hace un llamado $.post a php para completar los array de liquidación
                        // y para que todos los llamados sean sincronos (sin hay varios procedimientos para agregar a liquidación) se crea un nuevo array
                        // de objetos tipo Deferred en "processItemsDeferred", por cada procedimiento se hace un llamado a la función "processItem", esa función
                        // crea una variable "$.Deferred();" y para saber que cada procedimiento ya ejecutó el llamado POST se retorna "dfd.resolve(true);"
                        //
                        // Pero estos objetos tipo Deferred solo se ejecutan al recorrer el array "processItemsDeferred" en la instrucción "$.when.apply"
                        //
                        // 3. For each element of data, create a Deferred push push it to the array
                        // for(var i = 0; i < parametros_procedimiento.length; i++){
                        //   processItemsDeferred.push(processItem(parametros_procedimiento[i]));
                        // }
                        processItem(0, parametros_procedimiento);

                        // Con esta instrucción se ejecutan todos los elementos tipo Deferred que fueron agregados al array "processItemsDeferred",
                        // Un procedimiento se ejecuta despues del otro cuando el anterior ejecutó la instrucción "dfd.resolve(true);", luego de que se recorrió
                        // todo el array processItemsDeferred, se emite un "true" en el parámetro "fin" donde la función "everythingDone" ejecuta algunas opciones adicionales
                        // luego de agregar todos los procedimientos a la liquidación.
                        //
                        // 4. WHEN ALL Deferred objects in the array are resolved THEN call the function
                        //    Note : same as $.when(processItemsDeferred[0], processItemsDeferred[1], ...).then(everythingDone);
                        /*$.when.apply($, processItemsDeferred).then(function(fin){
                            if(fin)
                            {
                                everythingDone();
                            }
                            else
                            {
                                // everythingDonePartial();
                                desbloquearBoton('');
                            }
                        });*/
                    }
                    else
                    {
                        desbloquearBoton('');
                        if(mensaje_fn != "")
                        {
                            mostrar_mensajeAccion(mensaje_fn,"div_mensaje_add_proced","red");
                        }
                    }

                    $("#wprocedimiento").focus();
                }
            }
            else
            {
                var alerta = "Debe escribir un número de historia correcto";
                jAlert(alerta, "Mensaje");
            }
        }

        // 3.1. Function called by the loop to create a Deferred object (data is numeric)
        function processItem(i, parametros_procedimiento) {
            // 3.1.1. Create the Deferred object and output some debug
            console.log('called processItem');
            // var dfd           = $.Deferred();
            console.log(i);
            if(i < parametros_procedimiento.length)
            {
                // var parametros_ProAuditado = parametros_procedimiento[i];
                var procedimiento = parametros_procedimiento[i];
                var idx_html      = procedimiento.idx_html;
                var idx_auditado  = procedimiento.idx_auditado;

                // >> Para buscar modalidad del procedimiento
                var wcodemp     = $("#responsable_original_tal").val();
                var tipoEmpresa = $("#tipoEmpresa_tal").val();
                var wccogra     = $("#wcco_tal").val();

                var wtipo_anestesia_cx         = ""; // $("#wtipo_anestesia_cx").val();
                var wtipo_anestesia_nombre     = ""; // $("#wtipo_anestesia_cx option:selected").text();
                var wtiempo_sala_recuperarcion = ""; // $("#wtiempo_sala_recuperarcion").val();
                var wtiempo_uso_minutos        = ""; // $("#wtiempo_uso_minutos").val();
                var wtiempo_minutos_cx         = $("#wtiempo_minutos_cx").val();
                var wturno_cirugia             = $("#wturno_cirugia").val();

                var opt_tur                    = $("option:selected", $("#wturno_cirugia"));
                var ccoquirofano               = opt_tur.attr("ccoquirofano");

                // 3.1.2. After some timeout, resolve the current Deferred
                //in the real world, this would probably make an AJAX call.
                i++;
                $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                    {
                        consultaAjax               : '',
                        accion                     : 'load',
                        form                       : 'add_arr_datos_liquidar',
                        arr_datos_liquidar         : $("#arr_datos_liquidar").val(),
                        wprocedimiento             : procedimiento.wprocedimiento,
                        wprocedimiento_nombre      : procedimiento.wprocedimiento_nombre,
                        wespecialistas             : procedimiento.wespecialistas,
                        wespecialistas_nombre      : procedimiento.wespecialistas_nombre,
                        worgano                    : procedimiento.worgano,
                        worgano_nombre             : procedimiento.worgano_nombre,
                        worgano_bilateral          : procedimiento.worgano_bilateral,
                        wvia                       : procedimiento.wvia,
                        wespecialidad              : procedimiento.wespecialidad,
                        wespecialidad_nombre       : procedimiento.wespecialidad_nombre,
                        wbilateral                 : procedimiento.wbilateral,
                        wposicion_organo           : procedimiento.wposicion_organo,
                        wposicion_organo_nom       : procedimiento.wposicion_organo_nom,
                        wtiempo_procedimiento      : procedimiento.wtiempo_procedimiento,
                        es_paquete                 : procedimiento.es_paquete,

                        wturno_cirugia             : wturno_cirugia,
                        wtipo_anestesia_cx         : wtipo_anestesia_cx,
                        wtipo_anestesia_nombre     : wtipo_anestesia_nombre,
                        wtiempo_sala_recuperarcion : wtiempo_sala_recuperarcion,
                        wtiempo_uso_minutos        : wtiempo_uso_minutos,
                        wtiempo_minutos_cx         : wtiempo_minutos_cx,
                        wcodemp                    : wcodemp,
                        tipoEmpresa                : tipoEmpresa,
                        wtarifa_empresa            : $("#tarifa_original_tal").val(),
                        wccogra                    : wccogra,
                        ccoquirofano               : ccoquirofano,
                        idx_html_auditado          : idx_auditado,
                        codigos_auditados          : procedimiento.codigos_auditados
                    },
                    function(data){
                        if(isset(data.error) && data.error == 1)
                        {
                            jAlert(data.mensaje, "Mensaje");
                        }
                        else
                        {
                            $("#arr_datos_liquidar").val(data.arr_datos_liquidar);
                            $("#tabla_lista_cxs > tbody").append(data.fila);
                            if(idx_auditado!='')
                            {
                                $("#tabla_procedimientos_auditados").find(".trproAud"+idx_html).hide();
                            }
                        }
                    },
                    "json"
                ).done(function(){
                    if(idx_html == '')
                    {
                        $("#wprocedimiento"+idx_html).attr("codigo","");
                        $("#wprocedimiento"+idx_html).attr("nombre","");
                        $("#wprocedimiento"+idx_html).val("");
                    }
                    $("#wespecialistas"+idx_html).attr("codigo","");
                    $("#wespecialistas"+idx_html).attr("nombre","");
                    $("#wespecialistas"+idx_html).val("");
                    $("#worgano"+idx_html).attr("codigo","");
                    $("#worgano"+idx_html).attr("nombre","");
                    $("#worgano"+idx_html).attr("bilateral","");
                    $("#worgano"+idx_html).val("");
                    $("#wvia"+idx_html).val("");
                    $("#wespecialidad"+idx_html).val("");
                    $("#wbilateral"+idx_html).removeAttr("checked");
                    processItem(i, parametros_procedimiento);

                    // $("#tabla_add_lista_cxs").find("save_ok").removeClass("campoRequerido");
                    // resetStylePrefijo("tr_liqAdd_cxs_");

                    // desbloquearBoton('');

                    // validarEstadoDeCuentaCongelada(true);

                    // return dfd.promise();
                    // dfd.resolve(true);

                    // comprobarMostrarCxMultiples();
                }).fail(function(xhr, textStatus, errorThrown) {
                    mensajeFailAlert(this, '', xhr, textStatus, errorThrown); dfd.resolve(false);
                    processItem(i, parametros_procedimiento);
                });
            }
            else
            {
                everythingDone();
                desbloquearBoton('');
            }
            // 3.1.3. Return that Deferred (to be inserted into the array)
            // return dfd.promise();
        }

        // 3.1. Function called by the loop to create a Deferred object (data is numeric)
        function processItem2(parametros_ProAuditado) {
            // 3.1.1. Create the Deferred object and output some debug
            console.log('called processItem');
            var dfd           = $.Deferred();
            var procedimiento = parametros_ProAuditado;
            var idx_html      = procedimiento.idx_html;
            var idx_auditado  = procedimiento.idx_auditado;

            // >> Para buscar modalidad del procedimiento
            var wcodemp     = $("#responsable_original_tal").val();
            var tipoEmpresa = $("#tipoEmpresa_tal").val();
            var wccogra     = $("#wcco_tal").val();

            var wtipo_anestesia_cx         = ""; // $("#wtipo_anestesia_cx").val();
            var wtipo_anestesia_nombre     = ""; // $("#wtipo_anestesia_cx option:selected").text();
            var wtiempo_sala_recuperarcion = ""; // $("#wtiempo_sala_recuperarcion").val();
            var wtiempo_uso_minutos        = ""; // $("#wtiempo_uso_minutos").val();
            var wtiempo_minutos_cx         = $("#wtiempo_minutos_cx").val();
            var wturno_cirugia             = $("#wturno_cirugia").val();

            var opt_tur                    = $("option:selected", $("#wturno_cirugia"));
            var ccoquirofano               = opt_tur.attr("ccoquirofano");

            // 3.1.2. After some timeout, resolve the current Deferred
            //in the real world, this would probably make an AJAX call.
            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                {
                    consultaAjax               : '',
                    accion                     : 'load',
                    form                       : 'add_arr_datos_liquidar',
                    arr_datos_liquidar         : $("#arr_datos_liquidar").val(),
                    wprocedimiento             : procedimiento.wprocedimiento,
                    wprocedimiento_nombre      : procedimiento.wprocedimiento_nombre,
                    wespecialistas             : procedimiento.wespecialistas,
                    wespecialistas_nombre      : procedimiento.wespecialistas_nombre,
                    worgano                    : procedimiento.worgano,
                    worgano_nombre             : procedimiento.worgano_nombre,
                    worgano_bilateral          : procedimiento.worgano_bilateral,
                    wvia                       : procedimiento.wvia,
                    wespecialidad              : procedimiento.wespecialidad,
                    wespecialidad_nombre       : procedimiento.wespecialidad_nombre,
                    wbilateral                 : procedimiento.wbilateral,
                    wposicion_organo           : procedimiento.wposicion_organo,
                    wposicion_organo_nom       : procedimiento.wposicion_organo_nom,
                    es_paquete                 : procedimiento.es_paquete,

                    wturno_cirugia             : wturno_cirugia,
                    wtipo_anestesia_cx         : wtipo_anestesia_cx,
                    wtipo_anestesia_nombre     : wtipo_anestesia_nombre,
                    wtiempo_sala_recuperarcion : wtiempo_sala_recuperarcion,
                    wtiempo_uso_minutos        : wtiempo_uso_minutos,
                    wtiempo_minutos_cx         : wtiempo_minutos_cx,
                    wcodemp                    : wcodemp,
                    tipoEmpresa                : tipoEmpresa,
                    wtarifa_empresa            : $("#tarifa_original_tal").val(),
                    wccogra                    : wccogra,
                    ccoquirofano               : ccoquirofano,
                    idx_html_auditado          : idx_auditado,
                    codigos_auditados          : procedimiento.codigos_auditados
                },
                function(data){
                    if(isset(data.error) && data.error == 1)
                    {
                        jAlert(data.mensaje, "Mensaje");
                    }
                    else
                    {
                        $("#arr_datos_liquidar").val(data.arr_datos_liquidar);
                        $("#tabla_lista_cxs > tbody").append(data.fila);
                        if(idx_auditado!='')
                        {
                            $("#tabla_procedimientos_auditados").find(".trproAud"+idx_html).hide();
                        }
                    }
                },
                "json"
            ).done(function(){
                if(idx_html == '')
                {
                    $("#wprocedimiento"+idx_html).attr("codigo","");
                    $("#wprocedimiento"+idx_html).attr("nombre","");
                    $("#wprocedimiento"+idx_html).val("");
                }
                $("#wespecialistas"+idx_html).attr("codigo","");
                $("#wespecialistas"+idx_html).attr("nombre","");
                $("#wespecialistas"+idx_html).val("");
                $("#worgano"+idx_html).attr("codigo","");
                $("#worgano"+idx_html).attr("nombre","");
                $("#worgano"+idx_html).attr("bilateral","");
                $("#worgano"+idx_html).val("");
                $("#wvia"+idx_html).val("");
                $("#wespecialidad"+idx_html).val("");
                $("#wbilateral"+idx_html).removeAttr("checked");

                // $("#tabla_add_lista_cxs").find("save_ok").removeClass("campoRequerido");
                // resetStylePrefijo("tr_liqAdd_cxs_");

                // desbloquearBoton('');

                // validarEstadoDeCuentaCongelada(true);

                // return dfd.promise();
                dfd.resolve(true);

                // comprobarMostrarCxMultiples();
            }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); dfd.resolve(false); });

            // 3.1.3. Return that Deferred (to be inserted into the array)
            return dfd.promise();
        }

        // 4.1. Function called when all deferred are resolved
        function everythingDone(){
            // 4.1.1. Do some debug trace
            console.log('processed all items');
            $("#tabla_add_lista_cxs").find("save_ok").removeClass("campoRequerido");

            visibilidadTablaProcedimientosAuditados();
            // console.log($("[id^=tr_liqAdd_cxs_]"));
            resetStylePrefijo("tr_liqAdd_cxs_");

            desbloquearBoton('');

            validarEstadoDeCuentaCongelada(true);
        }

        function everythingDonePartial(){
            resetStylePrefijo("tr_liqAdd_cxs_");

            desbloquearBoton('');

            validarEstadoDeCuentaCongelada(true);
        }

        /**
         * [visibilidadTablaProcedimientosAuditados: esta función se encarga de mostrar u ocultar la tabla de procedimientos auditados, se oculta cuando
         * todos los procedimientos auditados ya han sido agragados a la liquidación y se muestra de nuevo si todos los procedimientos ya habían sido auditados
         * pero se eliminó uno de esos procedimientos de la liquidación]
         * @return {[type]} [description]
         */
        function visibilidadTablaProcedimientosAuditados()
        {
            // console.log("Auditados visibles: "+$("#tabla_procedimientos_auditados").find(".trproAud:visible").length);
            if($("#tabla_procedimientos_auditados").length > 0 && $("#tabla_procedimientos_auditados").is(":visible") && $("#tabla_procedimientos_auditados").find(".trproAud:visible").length == 0)
            {
                $("#tabla_procedimientos_auditados").hide();
                $("#div_msj_auditados_agregados").show();
            }
            else if($("#tabla_procedimientos_auditados").length > 0 && !$("#tabla_procedimientos_auditados").is(":visible"))
            {
                $("#tabla_procedimientos_auditados").show();
                $("#div_msj_auditados_agregados").hide();
            }
        }

        function eliminarFilaDatosLiq(id_fila, prefijoFila, dif_key, wprocedimiento) //tipo_cobro ,id_fila, identifica_concepto, prefijoFila, dif_rango
        {
            $(".img_del1CX").hide(); // oculta las otras opciones de borrar de la lista, en caso de estar lento el sistema, y no permitir borrar otra cirugía de forma asincrona y dañar los datos de la liquidación
            $("#td_delete_cx_"+dif_key).append('<img class="delete_cx_loading" border="0" src="../../images/medical/ajax-loader2.gif" title="Cargando.." >'); // Adiciona el gif de carga a la fila que se le dió borrar
            $(".btn_loading").attr("disabled","disabled");

            $("#"+id_fila).hide("slow",
                                function(){

                                    // Si existe la tabla de procedimientos auditados pero está oculta entonces debe mostrarse nuevamente.
                                    visibilidadTablaProcedimientosAuditados();

                                    // Si al pintar porcedimientos guardados temporalmente, hay un tr que tenga un idx_auditado de los que están en la tabla
                                    // tabla_procedimientos_auditados, entonces ocultar los campos que solicitan la información de para agregar el procedimiento auditado
                                    // a la liquidación.
                                    var idx_auditado = $(this).attr("idx_auditado");
                                    if(idx_auditado != undefined)
                                    {
                                        if(!$("#tabla_procedimientos_auditados").find(".trproAud_"+idx_auditado).is(":visible"))
                                        {
                                            $("#tabla_procedimientos_auditados").find(".trproAud_"+idx_auditado).show(1000);
                                        }
                                    }

                                    $(this).remove();

                                    $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                                        {
                                            accion                            : 'delete',
                                            form                              : 'eliminar_dato_liquidacion',
                                            consultaAjax                      : '',
                                            arr_datos_liquidar                : $("#arr_datos_liquidar").val(),
                                            arr_datos_liquidados              : $("#arr_datos_liquidados").val(),
                                            arr_procedimientos_orden_liquidar : $("#arr_procedimientos_orden_liquidar").val(),
                                            arr_extras                        : $("#arr_extras").val(),
                                            dif_key                           : dif_key,
                                            wprocedimiento                    : wprocedimiento
                                        },
                                        function(data){
                                            if(isset(data.error) && data.error == 1)
                                            {
                                                $(".delete_cx_loading").remove();   // ***
                                                $(".img_del1CX").show();            // *** < se muestran de nuevo las "X" de borrado en las otras filas que quedaron activas.
                                                $(".btn_loading").removeAttr("disabled");
                                                jAlert(data.mensaje, "Mensaje");
                                            }
                                            else
                                            {
                                                $("#arr_datos_liquidar").val(data.arr_datos_liquidar);
                                                $("#arr_extras").val(data.arr_extras);
                                                $("#arr_datos_liquidados").val(data.arr_datos_liquidados);
                                                $("#arr_procedimientos_orden_liquidar").val(data.arr_procedimientos_orden_liquidar);
                                                resetStylePrefijo(prefijoFila);
                                            }
                                        },
                                        "json"
                                    ).done(function(){
                                        $(".delete_cx_loading").remove();   // ***
                                        $(".img_del1CX").show();            // *** < se muestran de nuevo las "X" de borrado en las otras filas que quedaron activas.
                                        $(".btn_loading").removeAttr("disabled");

                                        if(($("#tabla_lista_cxs").find("tr[id^=tr_liqAdd_cxs_]").length - 1) > 1)
                                        {
                                            // $("#div_param_baseliquidacion").show("slow");
                                        }
                                        else
                                        {
                                            $("#wbaseliquidacion").val("");
                                            $("#wbaseliquidacion").removeClass("campoRequerido");
                                            // $("#div_param_baseliquidacion").hide("slow");
                                        }
                                        $("#btn_liquidar_pop").click();
                                    }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
                            });
        }

        function comprobarMostrarCxMultiples()
        {
            if($("#tabla_lista_cxs").find("tr[id^=tr_liqAdd_cxs_]").length > 1)
            {
                // $("#div_param_baseliquidacion").show("slow");
            }
            else
            {
                $("#wbaseliquidacion").val("");
                $("#wbaseliquidacion").removeClass("campoRequerido");
                // $("#div_param_baseliquidacion").hide("slow");
            }
        }

        function generarLiquidar(this_btn, wprocedimiento_add, wconcepto_add)
        {
            $("#wtipo_anestesia_cx").removeClass("campoRequerido");
            $("#wtiempo_sala_recuperarcion").removeClass("campoRequerido");
            $("#wtiempo_uso_minutos").removeClass("campoRequerido");
            $("#wtiempo_minutos_cx").removeClass("campoRequerido");
            $("#wturno_cirugia").removeClass("campoRequerido");

            $("#div_mensajes_alerta").html("");
            $("#div_mensajes_alerta").hide();
            bloquearBoton(this_btn);
            $("#wbaseliquidacion").removeClass("campoRequerido");

            var wnumvias                   = $("#wnumvias").val();
            var wtipo_anestesia_cx         = $("#wtipo_anestesia_cx").val();
            var wtiempo_sala_recuperarcion = $("#wtiempo_sala_recuperarcion").val();
            var wtiempo_uso_minutos        = $("#wtiempo_uso_minutos").val();
            var wtiempo_minutos_cx         = $("#wtiempo_minutos_cx").val();
            var id_encabezado_sin_tarifa   = $("#id_encabezado_sin_tarifa").val();
            var es_paquete                 = ($("#wliq_paquete").attr("checked") == 'checked') ? "on": "off";
            var wliq_soloInsumos           = ($("#wliq_soloInsumos").attr("checked") == 'checked') ? "on": "off";
            var wturno_cirugia             = $("#wturno_cirugia").val();
            var opt_tur                    = $("option:selected", $("#wturno_cirugia"));
            var ccoquirofano               = opt_tur.attr("ccoquirofano");
            // var wbaseliquidacion           = $("#wbaseliquidacion").val();

            var campos_ok = true;

            if(wtipo_anestesia_cx == '')
            {
                campos_ok = false;
                $("#wtipo_anestesia_cx").addClass("campoRequerido");
            }

            if(wtiempo_sala_recuperarcion == '')
            {
                campos_ok = false;
                $("#wtiempo_sala_recuperarcion").addClass("campoRequerido");
            }

            if(wtiempo_uso_minutos == '')
            {
                campos_ok = false;
                $("#wtiempo_uso_minutos").addClass("campoRequerido");
            }

            if(wtiempo_minutos_cx == '')
            {
                campos_ok = false;
                $("#wtiempo_minutos_cx").addClass("campoRequerido");
            }

            if(wturno_cirugia == '')
            {
                campos_ok = false;
                $("#wturno_cirugia").addClass("campoRequerido");
            }

            if(campos_ok && $("#whistoriaLocal").val() == "" || $("#whistoriaLocal").val() != $("#whistoria_tal").val())
            {
                campos_ok = false;
                var alerta = "Debe escribir un número de historia correcto";
                jAlert(alerta, "Mensaje");
            }

            // if(wbaseliquidacion == '' && $("#tabla_lista_cxs").find("tr[id^=tr_liqAdd_cxs_]").length > 1)
            // {
            //     campos_ok = false;
            //     $("#wbaseliquidacion").addClass("campoRequerido");
            // }

            if(wnumvias == '' || wnumvias == 0)
            {
                campos_ok = false;
                $("#wnumvias").addClass("campoRequerido");
            }

            if(campos_ok)
            {
                $(".bloquear_todo").attr("disabled","disabled");
                var wpolitraumatizado = $("#wpolitraumatizado").val(); //($("#wpolitraumatizado").is(":checked")) ? 'on': 'off';
                $(".img_del1CX").hide(); // Se ocultan las opciones de eliminar para evitar hacer más peticiones de borrado antes que el servidor responda la anterior solicitud en caso de estar lento.
                $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                    {
                        accion                     : 'load',
                        form                       : 'generar_datos_liquidar',
                        consultaAjax               : '',
                        arr_datos_liquidar         : $("#arr_datos_liquidar").val(),
                        arr_datos_liquidados       : $("#arr_datos_liquidados").val(),
                        arr_extras                 : $("#arr_extras").val(),
                        arr_conceptos_nombres      : $("#arr_conceptos_64").val(),
                        wnumvias                   : $("#wnumvias").val(),
                        wturno_cirugia             : wturno_cirugia,
                        wtipo_anestesia_cx         : wtipo_anestesia_cx,
                        wtiempo_sala_recuperarcion : wtiempo_sala_recuperarcion,
                        wtiempo_uso_minutos        : wtiempo_uso_minutos,
                        wtiempo_minutos_cx         : wtiempo_minutos_cx,
                        wcentro_costo              : $("#wcco_tal").val(),
                        wtarifa_empresa            : $("#tarifa_original_tal").val(),
                        wcod_empresa               : $("#responsable_original_tal").val(),
                        plan_emp_cod               : $("#plan_emp_cod_tal").val(),
                        wnomemp_tal                : $("#wnomemp_tal").val(),
                        wfecha_cargo               : $("#wfecha_cargo").val(),
                        whora_cargo                : $("#whora_cargo").val(),
                        wtipo_ingreso              : $("#wtipo_ingreso_tal").val(),
                        wtipo_ingreso_nom          : $("#wtipo_ingreso_nom_tal").val(),
                        wpolitraumatizado          : wpolitraumatizado,
                                                   // wbaseliquidacion           : wbaseliquidacion,
                        wprocedimiento_add         : wprocedimiento_add,
                        wconcepto_add              : wconcepto_add,
                        tipoEmpresa                : $("#tipoEmpresa_tal").val(),
                        whistoria                  : $("#whistoriaLocal").val(),
                        wing                       : $("#wingLocal").val(),
                        nitEmpresa                 : $("#nitEmpresa_tal").val(),
                        id_concepto_uso_equipos    : $("#id_concepto_uso_equipos").val(),
                        concepto_recuperacion_erp  : $("#concepto_recuperacion_erp").val(),
                        id_concepto_examenes       : $("#id_concepto_examenes").val(),
                        add_equipo                 : $("#add_equipo").attr("codigo"),
                        add_examen                 : $("#add_examen").attr("codigo"),
                        add_equipo_nombre          : $("#add_equipo").attr("nombre"),
                        add_examen_nombre          : $("#add_examen").attr("nombre"),
                        tabla_lista_cxs            : $("#tabla_lista_cxs").html(),
                        id_encabezado_sin_tarifa   : id_encabezado_sin_tarifa,
                        wser                       : $("#wser_tal").val(),
                        // ccoActualPac               : $("#ccoActualPac_tal").val(),
                        es_paquete                 : es_paquete,
                        wliq_soloInsumos           : wliq_soloInsumos,
                        wfecing                    : $("#wfecing_tal").val(),
                        ccoquirofano               : ccoquirofano,
                        arr_disponibilidades       : $("#arr_disponibilidades").val(),
                        codParticipacionMedicoDisponible : $("#codParticipacionMedicoDisponible").val(),
                        arr_ccos_cirugia           : $("#arr_ccos_cirugia").val()
                    },
                    function(data){
						// --> 21-08-2019: Jerson Trujillo. Controlar que si se estan actualizando tarifas de medicamentos no dejar liquidar
						if(data.actualizacionDeTarifasMedicamentos)
						{
							setTimeout(function(){ $("#btn_grabar_liquidacion").attr("disabled","disabled"); }, 1000);
							jAlert("<span style='color:#2a5db0;font-size:10pt'>En este momento no se puede liquidar la cirug&iacute;a porque se est&aacute; realizando el proceso de actualizaci&oacute;n de tarifas de medicamentos y materiales.<br><br>Por favor espere un momento para volver a liquidar.</span>", "Mensaje");
							return;
						}	

                        guardarDatosTemporales('000160');

                        if(isset(data.error) && data.error == 1)
                        {
                            jAlert(data.mensaje, "Mensaje");
                            $("#id_encabezado_sin_tarifa").val(data.id_encabezado_sin_tarifa);
                            $("#arr_CARGOS_PARA_GRABAR").val(data.arr_CARGOS_PARA_GRABAR);
                            $("#arr_datos_liquidados").val(data.arr_datos_liquidados);
                            $("#arr_extras").val(data.arr_extras);
                            $("#arr_procedimientos_orden_liquidar").val(data.arr_procedimientos_orden_liquidar);
                            $("#div_cont_liquidacion_modal").html(data.html);
                        }
                        else
                        {
                            $("#id_encabezado_sin_tarifa").val(data.id_encabezado_sin_tarifa);
                            $("#arr_CARGOS_PARA_GRABAR").val(data.arr_CARGOS_PARA_GRABAR);
                            $("#arr_datos_liquidados").val(data.arr_datos_liquidados);
                            $("#arr_extras").val(data.arr_extras);
                            $("#arr_procedimientos_orden_liquidar").val(data.arr_procedimientos_orden_liquidar);
                            $("#div_cont_liquidacion_modal").html(data.html);

                            $("#arr_cargos_req_autorizar").val(data.arr_cargos_req_autorizar);
                            if(data.html_autorizar_cargos != '')
                            {
                                $("#div_cargos_autorizacion_contenido").html(data.html_autorizar_cargos);
                                validarConfirmarAutorizaciones();
                            }

                            if(data.mensaje != '') { /*alert(data.mensaje);*/ jAlert(data.mensaje, "Mensaje"); }

                            /*$("#div_cont_liquidacion_modal" ).dialog({
                                show: {
                                    effect: "blind",
                                    duration: 100
                                },
                                hide: {
                                    effect: "blind",
                                    duration: 100
                                },
                                // maxHeight:600,
                                height:500,
                                // height: 'auto',
                                width:  'auto',
                                dialogClass: 'fixed-dialog',
                                modal: true,
                                title: "Liquidación de la cirugía: "
                                // ,open:function(){
                                //         var s = $('#cont_dlle_modal').height();
                                //         var s2 = $(this).dialog( "option", "maxHeight" );
                                //         if(s < s2){
                                //             $(this).height(s);
                                //           }
                                //       }
                            });*/

                            return data;
                        }
                    },
                    "json"
                ).done(function(data){
                    $(".img_del1CX").show();
                    $("#btn_liquidar_pop").focus();
                    crearAutocomplete('arr_terceros_especialidad', 'liq_autocomplete', '', '',1);
                    crearAutocomplete('arr_conceptos', 'concepto_autocomplete', '', '',0);
                    crearAutocomplete('arr_examenes', 'add_examen', '', '',1);
                    crearAutocomplete('arr_equipos', 'add_equipo', '', '',1);

                    $('.tooltip').tooltip({track: true, delay: 0, showURL: false, showBody: ' - ', opacity: 0.95, left: -50 });

                    $('.modificaLiquidado').on({
                        focusout: function(e) {
                            // console.log($(this).val());
                            if($(this).val().replace(/ /gi, "") == '')
                            {
                                $(this).val("");
                                $(this).attr("codigo","");
                                $(this).attr("nombre","");
                            }
                            var campo = $(this);
                            actualizarDatoLiquidado(campo,'');
                        },
                        click: function() {
                            var campo = $(this);
                            /*if(campo.attr("type") == 'checkbox')
                            {
                                var valor = "off";
                                if(campo.is(":checked")) { var valor = "on"; }
                                actualizarDatoLiquidado(campo,valor);
                            }*/
                        }
                    });

                    $('.modificaLiquidadoCHECKBOX, .modificaLiquidadoSELECT').on({
                        change: function(e) {
                            // console.log($(this).val());
                            if($(this).val().replace(/ /gi, "") == '')
                            {
                                $(this).val("");
                                $(this).attr("codigo","");
                                $(this).attr("nombre","");
                            }
                            var campo = $(this);
                            actualizarDatoLiquidado(campo,'');
                        }
                    });

                    initAutocompleteLiqaudotocomplete();

                    $('.concepto_autocomplete').on({
                        focusout: function(e) {
                            if($(this).val().replace(/ /gi, "") == '')
                            {
                                $(this).val("");
                                $(this).attr("codigo","");
                                $(this).attr("nombre","");
                                ocultar_seleccion_adicionor_procedimiento();
                                $("#add_procedimiento").children("option").show(); // Si un concepto ya tiene un procedimiento entonces se oculta ese procedimiento, esta línea de código es para volverlos a mostrar todos.
                            }
                            else
                            {
                                $(this).val($(this).attr("nombre"));
                            }
                        }
                    });

                    desbloquearBoton('Liquidar');
                    // Desbloquear el boton de adicionar nuevo concepto.
                    $("#btn_add_concepto_"+wprocedimiento_add).removeClass("cargando");
                    $("#btn_add_concepto_"+wprocedimiento_add).removeAttr("disabled");
                    $("#btn_add_concepto_"+wprocedimiento_add).html("Adicionar");

                    // if(ConceptoInventario == 'on')
                    {
                        // esta array data.procedimientos_materiales tiene los conceptos que tienen inventario y para los cuales se les debe pintar la sección de medicamentos y materiales.
                        var arr_pro = data.procedimientos_materiales;
                        for (var cod_dato in arr_pro)
                        {
                            llamar_insumos("contenedor_inventario_"+cod_dato, 'ok', cod_dato, arr_pro[cod_dato], $("#responsable_original_tal"), $("#wnomemp_tal").val(), $("#tarifa_original_tal").val(), $("#div_tarifa_tal").val())
                        }
                    }

                    inicializarFlotantes(); // Inicializa el detalle de la información de la liquidación

                    ocultar_seleccion_adicionor_procedimiento();

                    var control_ultima_actualizacion = $("#control_ultima_actualizacion").val();
                    if(control_ultima_actualizacion == 'on')
                    {
                        // $("#control_ultima_actualizacion").val("on");
                        $(".bloquear_todo").attr("disabled","disabled");
                        guardarLiquidacion($("#btn_grabar_liquidacion"));
                    }

                    // verificar que si faltan tarifas entonces inactivar el boton de guardar liquidación
                    if(data.wfaltan_tarifas == 'on')
                    {
                        $("#btn_grabar_liquidacion").attr("disabled","disabled");
                        $("#div_msj_falta_tarifa").html("<div style='background-color:#ffffcc; width: 530px; margin-left: 28%;' >Hay cargos sin tar&iacute;fa de conceptos que permiten modificar valor u otro cargo sin tarifa, no se puede grabar la liquidaci&oacute;n hasta crear las tar&iacute;fas que faltan.</div>");
                    }

                    ocultarProcedimientosAuditadosAgregados();

                    recargarDivTemporaSinTarifa($('#whistoriaLocal').val(), $('#wingLocal').val());
                    if(control_ultima_actualizacion != 'on')
                    {
                        $(".bloquear_todo").removeAttr("disabled");
                    }
                }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
            }
            else
            {
                desbloquearBoton('Liquidar');
                // Desbloquear el boton de adicionar nuevo concepto.
                $("#btn_add_concepto_"+wprocedimiento_add).removeClass("cargando");
                $("#btn_add_concepto_"+wprocedimiento_add).removeAttr("disabled");
                $("#btn_add_concepto_"+wprocedimiento_add).html("Adicionar");
                $("#control_ultima_actualizacion").val("");
                var alerta = "Faltan campos por llenar";
                jAlert(alerta, "Mensaje");
            }
        }

        /**
         * [validarConfirmarAutorizaciones: FUNCIÓN Y LOGICA DEL LLAMADO AJAX INACTIVO, SI NO ES NECESARIO UN USO A ESTE PROCESO SE PUEDE BORRAR EL CÓDIGO]
         * @return {[type]} [description]
         */
        function validarConfirmarAutorizaciones()
        {
            // $("#div_cargos_autorizacion_contenido").html(html_autorizar_cargos);
            $("#div_confirmar_cargos_autorizar").dialog({
                show: {
                    effect: "blind",
                    duration: 100
                },
                hide: {
                    effect: "blind",
                    duration: 100
                },
                height: 600,
                width:  800,
                buttons: {
                    "Cerrar": function() {
                      $( this ).dialog( "close" );
                    },
                    "Solicitar Autorización" : function(){
                        //arr_cargos_req_autorizar
                        var obJson                         = parametrosComunesLiq();
                        obJson['accion']                   = 'update';
                        obJson['form']                     = 'generar_solicitudes_autorizacion';
                        obJson['arr_cargos_req_autorizar'] = $("#arr_cargos_req_autorizar").val();
                        obJson['wturno_cirugia']           = $("#wturno_cirugia").val();

                        $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params, obJson,
                            function(data){
                                if(isset(data.error) && data.error == 1)
                                {
                                    jAlert(data.mensaje, "Mensaje");
                                    // $("#id_encabezado_sin_tarifa").val(data.id_encabezado_sin_tarifa);
                                    // $("#arr_CARGOS_PARA_GRABAR").val(data.arr_CARGOS_PARA_GRABAR);
                                    // $("#arr_datos_liquidados").val(data.arr_datos_liquidados);
                                    // $("#arr_extras").val(data.arr_extras);
                                    // $("#arr_procedimientos_orden_liquidar").val(data.arr_procedimientos_orden_liquidar);
                                    // $("#div_cont_liquidacion_modal").html(data.html);
                                }
                                else
                                {

                                }
                                return data;
                            },
                            "json"
                        ).done(function(data){
                            $("#div_cargos_autorizacion_contenido").html("");
                        }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
                    }
                },
                dialogClass: 'fixed-dialog',
                modal: true,
                title: "Cargos que requieren autorización",
                beforeClose: function( event, ui ) {
                    //
                },
                create: function() {
                   $(this).closest('.ui-dialog').on('keydown', function(ev) {
                       if (ev.keyCode === $.ui.keyCode.ESCAPE) {
                           $( "#div_errores_liquidacion" ).dialog('close');
                       }
                   });
                },
                closeOnEscape: false
            }).on("dialogopen", function( event, ui ) {
                    // var fc = $("#div_errores_liquidacion").find("[id^=busc_nom_medicamento_fiqx_]").attr("id");
                    // $("#"+fc).val("").focus();
            });
        }

        function initAutocompleteLiqaudotocomplete()
        {
            $('.liq_autocomplete, .add_equipos_examenes').on({
                focusout: function(e) {
                    if($(this).val().replace(/ /gi, "") == '')
                    {
                        $(this).val("");
                        $(this).attr("codigo","");
                        $(this).attr("nombre","");
                    }
                    else
                    {
                        $(this).val($(this).attr("nombre"));
                    }
                }
            });
        }

        /**
         * [ocultarProcedimientosAuditadosAgregados: se encarga de ocultar todos los procedimientos auditados que ya fueron agregados
         * la liquidación de cirugía para evitar que se sean agregados nuevamente y para saber visualmente qué procedimientos no han sido agregados]
         * @return {[type]} [description]
         */
        function ocultarProcedimientosAuditadosAgregados()
        {
            if($("#tabla_lista_cxs").find("tr[id^=tr_liqAdd_cxs_]").length > 0)
            {
                $("#tabla_lista_cxs").find("tr[id^=tr_liqAdd_cxs_]").each(function(){
                    var idx_auditado = $(this).attr("idx_auditado");
                    if(idx_auditado != undefined)
                    {
                        if($("#tabla_procedimientos_auditados").find(".trproAud_"+idx_auditado).is(":visible"))
                        {
                            $("#tabla_procedimientos_auditados").find(".trproAud_"+idx_auditado).hide();
                        }
                    }
                });
            }
        }

        function validarTarifaConceptoAdicional(campo_procedimiento, campo_concepto, tabla_contenedor)
        {
            var wnumvias                   = $("#wnumvias").val();
            var wtipo_anestesia_cx         = $("#wtipo_anestesia_cx").val();
            var wtiempo_sala_recuperarcion = $("#wtiempo_sala_recuperarcion").val();
            var wtiempo_uso_minutos        = $("#wtiempo_uso_minutos").val();
            var wtiempo_minutos_cx         = $("#wtiempo_minutos_cx").val();
            var id_encabezado_sin_tarifa   = $("#id_encabezado_sin_tarifa").val();
            var es_paquete                 = ($("#wliq_paquete").attr("checked") == 'checked') ? "on": "off";
            var wliq_soloInsumos           = ($("#wliq_soloInsumos").attr("checked") == 'checked') ? "on": "off";
            var wturno_cirugia             = $("#wturno_cirugia").val();
            var opt_tur                    = $("option:selected", $("#wturno_cirugia"));
            var ccoquirofano               = opt_tur.attr("ccoquirofano");
            var arr_maestro_000200         = $("#arr_maestro_000200").val();
            // var wbaseliquidacion           = $("#wbaseliquidacion").val();

            var wprocedimiento_add       = $("#add_procedimiento").val();
            // var nombre_procedimiento_add = $("#add_procedimiento"+" option:selected").text();
            var wconcepto_add            = $("#add_concepto").attr("codigo");
            // var nombre_concepto          = $("#add_concepto").attr("nombre");

            var this_btn = $("#btn_liquidar_pop")
            bloquearBoton(this_btn);

            var campos_ok = true;

            if(campos_ok)
            {
                $(".bloquear_todo").attr("disabled","disabled");
                var wpolitraumatizado = $("#wpolitraumatizado").val(); //($("#wpolitraumatizado").is(":checked")) ? 'on': 'off';
                $(".img_del1CX").hide(); // Se ocultan las opciones de eliminar para evitar hacer más peticiones de borrado antes que el servidor responda la anterior solicitud en caso de estar lento.
                $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                    {
                        accion                     : 'load',
                        form                       : 'validar_tarifa_adicionales',
                        consultaAjax               : '',
                        arr_datos_liquidar         : $("#arr_datos_liquidar").val(),
                        arr_datos_liquidados       : $("#arr_datos_liquidados").val(),
                        arr_extras                 : $("#arr_extras").val(),
                        arr_conceptos_nombres      : $("#arr_conceptos_64").val(),
                        wnumvias                   : wnumvias,
                        wturno_cirugia             : wturno_cirugia,
                        wtipo_anestesia_cx         : wtipo_anestesia_cx,
                        wtiempo_sala_recuperarcion : wtiempo_sala_recuperarcion,
                        wtiempo_uso_minutos        : wtiempo_uso_minutos,
                        wtiempo_minutos_cx         : wtiempo_minutos_cx,
                        wcentro_costo              : $("#wcco_tal").val(),
                        wtarifa_empresa            : $("#tarifa_original_tal").val(),
                        wcod_empresa               : $("#responsable_original_tal").val(),
                        wnomemp_tal                : $("#wnomemp_tal").val(),
                        wfecha_cargo               : $("#wfecha_cargo").val(),
                        whora_cargo                : $("#whora_cargo").val(),
                        wtipo_ingreso              : $("#wtipo_ingreso_tal").val(),
                        wtipo_ingreso_nom          : $("#wtipo_ingreso_nom_tal").val(),
                        wpolitraumatizado          : wpolitraumatizado,
                        wprocedimiento_add         : wprocedimiento_add,
                        wconcepto_add              : wconcepto_add,
                        tipoEmpresa                : $("#tipoEmpresa_tal").val(),
                        whistoria                  : $("#whistoriaLocal").val(),
                        wing                       : $("#wingLocal").val(),
                        nitEmpresa                 : $("#nitEmpresa_tal").val(),
                        id_concepto_uso_equipos    : $("#id_concepto_uso_equipos").val(),
                        concepto_recuperacion_erp  : $("#concepto_recuperacion_erp").val(),
                        id_concepto_examenes       : $("#id_concepto_examenes").val(),
                        add_equipo                 : $("#add_equipo").attr("codigo"),
                        add_examen                 : $("#add_examen").attr("codigo"),
                        add_equipo_nombre          : $("#add_equipo").attr("nombre"),
                        add_examen_nombre          : $("#add_examen").attr("nombre"),
                        tabla_lista_cxs            : $("#tabla_lista_cxs").html(),
                        id_encabezado_sin_tarifa   : id_encabezado_sin_tarifa,
                        wser                       : $("#wser_tal").val(),
                        es_paquete                 : es_paquete,
                        wliq_soloInsumos           : wliq_soloInsumos,
                        wfecing                    : $("#wfecing_tal").val(),
                        ccoquirofano               : ccoquirofano,
                        arr_maestro_000200         : arr_maestro_000200
                    },
                    function(data){

                        if(isset(data.error) && data.error == 1)
                        {
                            // alert(data.mensaje);
                            $("#div_errores_tarifaAdd").html(data.html);
                            fnModalErrorTarifaAdicionales();
                        }
                        else
                        {
                            //
                        }
                        $(".img_del1CX").show();

                        desbloquearBoton('Liquidar');
                        // Desbloquear el boton de adicionar nuevo concepto.
                        $("#btn_add_concepto_"+wprocedimiento_add).removeClass("cargando");
                        $("#btn_add_concepto_"+wprocedimiento_add).removeAttr("disabled");
                        $("#btn_add_concepto_"+wprocedimiento_add).html("Adicionar");

                        var control_ultima_actualizacion = $("#control_ultima_actualizacion").val();
                        if(control_ultima_actualizacion != 'on')
                        {
                            $(".bloquear_todo").removeAttr("disabled");
                        }
                    },
                    "json"
                ).done(function(data){
                    if(data.error != 1)
                    {
                        agregarConceptoNuevo(campo_procedimiento, campo_concepto, tabla_contenedor);
                    }
                }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
            }
            else
            {
                desbloquearBoton('Liquidar');
                // Desbloquear el boton de adicionar nuevo concepto.
                $("#btn_add_concepto_"+wprocedimiento_add).removeClass("cargando");
                $("#btn_add_concepto_"+wprocedimiento_add).removeAttr("disabled");
                $("#btn_add_concepto_"+wprocedimiento_add).html("Adicionar");
                // $("#control_ultima_actualizacion").val("");
                //alert("Faltan campos por llenar");
            }
        }

        /**
         * [guardarDatosTemporales Esta función se encarga de guardar todos los datos principales necesarios para poder recuperar de nuevo
         *                         una liquidación en curso despues de un cierre inesperado, cambio de programa o recarga accidental.]
         * @return {[type]} [description]
         */
        function guardarDatosTemporales(temporal)
        {
            var es_paquete       = ($("#wliq_paquete").attr("checked") == 'checked') ? "on": "off";
            var wliq_soloInsumos = ($("#wliq_soloInsumos").attr("checked") == 'checked') ? "on": "off";
            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                {
                    accion                     : "update",
                    form                       : "guardar_temporal",
                    consultaAjax               : "",
                    arr_datos_liquidar         : $("#arr_datos_liquidar").val(),
                    arr_datos_liquidados       : $("#arr_datos_liquidados").val(),
                    arr_extras                 : $("#arr_extras").val(),
                    wnumvias                   : $("#wnumvias").val(),
                    wturno_cirugia             : $("#wturno_cirugia").val(),
                    wtipo_anestesia_cx         : $("#wtipo_anestesia_cx").val(),
                    wtiempo_sala_recuperarcion : $("#wtiempo_sala_recuperarcion").val(),
                    wtiempo_uso_minutos        : $("#wtiempo_uso_minutos").val(),
                    wtiempo_minutos_cx         : $("#wtiempo_minutos_cx").val(),
                    tabla_lista_cxs            : $("#tabla_lista_cxs").html(),
                    whistoria                  : $("#whistoriaLocal").val(),
                    wing                       : $("#wingLocal").val(),
                    wfecha_cargo               : $("#wfecha_cargo").val(),
                    whora_cargo                : $("#whora_cargo").val(),
                    wpolitraumatizado          : $("#wpolitraumatizado").val(),
                    arr_CARGOS_PARA_GRABAR     : $("#arr_CARGOS_PARA_GRABAR").val(),
                    id_encabezado_sin_tarifa   : $("#id_encabezado_sin_tarifa").val(),
                    temporal                   : temporal,
                    wliq_paquete               : es_paquete,
                    wliq_soloInsumos           : wliq_soloInsumos
                },
                function(data){
                    if(isset(data.error) && data.error == 1)
                    {
                        jAlert(data.mensaje, "Mensaje");
                    }
                    else
                    {
                        //
                    }
                },
                "json"
            ).done(function(data){
                $("#div_recuperacion_datos").html(""); // Si habían cambos temporales recien cargados entonces eliminelos para no ternerlos en cuenta y poder controlar
                                                        // mejor el campo de liquidar paquetes para saber si se reinicia o no la liquidación, en parte depende si
                                                        // el buffer de datos recuperados esta vacío o no.
            }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
        }

        /**
         * [ocultar_seleccion_adicionor_procedimiento si esta desplegado el select de procedimientos para adicionar conceptos, entonces esta función la oculatará]
         * @return {[type]} [description]
         */
        function ocultar_seleccion_adicionor_procedimiento()
        {
            $("#add_procedimiento").val("");
            $("#td_add_procedimiento").hide(300); // Si no se ha seleccionado concepto entonces el campo de procedimiento no aparece
        }

        // function validarSeleccionable()

        function agregarConceptoNuevo(campo_procedimiento, campo_concepto, tabla_contenedor)
        {
            var wprocedimiento_add       = $("#"+campo_procedimiento).val();
            var nombre_procedimiento_add = $("#"+campo_procedimiento+" option:selected").text();
            var wconcepto_add            = $("#"+campo_concepto).attr("codigo");
            var nombre_concepto          = $("#"+campo_concepto).attr("nombre");
            bloquearBoton(("#btn_add_concepto_"+wprocedimiento_add));

            // Validar si debe escribir equipo o exámen
            requiere_equipo_examen = false;
            if(wconcepto_add == $("#id_concepto_examenes").val())
            {
                codigo_requerido = $("#add_examen").attr("codigo");
                if(codigo_requerido.replace(/ /gi, "") == '')
                {
                    requiere_equipo_examen = true;
                    msj_requiere_eq_ex = "Requiere seleccionar un exámen";
                }
            }
            else if(wconcepto_add == $("#id_concepto_uso_equipos").val())
            {
                codigo_requerido = $("#add_equipo").attr("codigo");
                if(codigo_requerido.replace(/ /gi, "") == '')
                {
                    requiere_equipo_examen = true;
                    msj_requiere_eq_ex = "Requiere seleccionar un equipo";
                }
            }

            if(wconcepto_add != '' && !requiere_equipo_examen)
            {
                generarLiquidar($("#btn_liquidar_pop"), wprocedimiento_add, wconcepto_add);
                // desbloquearBoton('Liquidar');
            }
            else
            {
                if(wconcepto_add=='')
                {
                    jAlert("Debe escribir el nombre de un concepto", "Mensaje");
                }
                else if(requiere_equipo_examen)
                {
                    jAlert(msj_requiere_eq_ex, "Mensaje");
                }
                desbloquearBoton('Adicionar');
            }
        }

        /*
            Esta función se encarga de actualizar el valor del campo que se modifique en la interfaz, por ejemplo si cambia el tercero se actualiza este valor en el array
            de liquidados que es el que finalmente se va a guardar en el base de datos.
            Tambien si se da clic en demarcar grabar se actualiza ese valor en el array de liquidados.
        */
        function actualizarDatoLiquidado(campo,valor_nuevo_def)
        {
            var wlista         = "";
            var etiqueta       = campo.attr("etiqueta");
            var wprocedimiento = campo.attr("wprocedimiento");
            var wconcepto      = campo.attr("wconcepto");
            var wequip_examen  = campo.attr("wequip_examen");
           // var wconsec      = campo.attr("wconsec");
            var fila_tr        = wprocedimiento+'_'+wconcepto+'_'+wequip_examen;//+'_'+wconsec;
            var valor_nuevo    = (valor_nuevo_def=='') ? campo.val() : valor_nuevo_def;

            if(campo.attr("type") == 'checkbox')
            {
                var valor = "off";
                if(campo.is(":checked")) { valor = "on"; }
                valor_nuevo = valor;

                if(etiqueta == 'wgrabar' && valor == 'off')
                {
                    campo.parent().addClass("td_noTarifa");
                }
                else if(etiqueta == 'wgrabar' && valor == 'on')
                {
                    campo.parent().removeClass("td_noTarifa");
                }
            }
            // console.log(campo.attr("type")+'  -  '+valor_nuevo);

            var wtercero             = '';
            var wtercero_nombre      = '';
            var wespecialidad        = '';
            var wespecialidad_nombre = '';
            var wcuadroturno         = '';
            var grupoMedico          = '';
            var wdisponibilidad      = '';

            // Si en la fila hay un autocomplete entonces esta pidiendo tercero, en este caso debe capturar
            // el codigo del tercero y el codigo de la especialidad
            // console.log(fila_tr);
            // console.log($("#"+fila_tr).find('liq_autocomplete').length);
            if((etiqueta == 'wtercero' || etiqueta == 'wespecialidad')) //$("#"+fila_tr).find('.liq_autocomplete').length > 0 &&
            {
                wtercero             = $("#wtercero_"+fila_tr).attr("codigo");
                wtercero_nombre      = $("#wtercero_"+fila_tr).attr("nombre");
                wespecialidad        = $("#wespecialidad_"+fila_tr).val();
                wespecialidad_nombre = $("#wespecialidad_"+fila_tr+" option:selected").text();
                if(etiqueta == 'wtercero')
                {
                    $("#wtercero_"+fila_tr).removeAttr("title");
                    $("#wtercero_"+fila_tr).removeClass("tooltip");
                    valor_nuevo = wtercero; // el valor de campo a actualizar en el array de liquidados sería el mismo campo del tercero
                    if(valor_nuevo == '')
                    {
                        wespecialidad = '';
                        wespecialidad_nombre = '';
                        $("#wespecialidad_"+fila_tr).find("option").remove();
                    }
                }
                else
                {
                    valor_nuevo = wespecialidad; // el valor de campo a actualizar en el array de liquidados sería el mismo campo del tercero
                    if(valor_nuevo == '')
                    {
                        wespecialidad = '';
                        wespecialidad_nombre = '';
                        $("#wespecialidad_"+fila_tr).find("option").remove();

                    }
                }

                wdisponibilidad = $("#wtercero_"+fila_tr+"disponible").val();
                wcuadroturno    = "";
                // grupoMedico     = $("#wtercero_"+fila_tr+"grupoMedico").val();

                // consultarCuadrosTurno("wtercero_"+fila_tr, wtercero, wespecialidad, grupoMedico);
            }
            else if(etiqueta == 'wterceroEqEx' || etiqueta == 'wespecialidadEqEx')
            {
                wtercero             = $("#wterceroEqEx_"+fila_tr).attr("codigo");
                wtercero_nombre      = $("#wterceroEqEx_"+fila_tr).attr("nombre");
                wespecialidad        = $("#wespecialidadEqEx_"+fila_tr).val();

                wespecialidad_nombre = $("#wespecialidadEqEx_"+fila_tr+" option:selected").text();
                if(etiqueta == 'wterceroEqEx')
                {
                    $("#wterceroEqEx_"+fila_tr).removeAttr("title");
                    $("#wterceroEqEx_"+fila_tr).removeClass("tooltip");
                    valor_nuevo = wtercero; // el valor de campo a actualizar en el array de liquidados sería el mismo campo del tercero
                    if(valor_nuevo == '')
                    {
                        wespecialidad = '';
                        wespecialidad_nombre = '';
                        $("#wespecialidadEqEx_"+fila_tr).find("option").remove();
                    }
                }
                else
                {
                    valor_nuevo = wespecialidad; // el valor de campo a actualizar en el array de liquidados sería el mismo campo del tercero
                    if(valor_nuevo == '')
                    {
                        wespecialidad = '';
                        wespecialidad_nombre = '';
                        $("#wespecialidadEqEx_"+fila_tr).find("option").remove();

                    }
                }

                wdisponibilidad = $("#wterceroEqEx_"+fila_tr+"disponible").val();
                wcuadroturno    = "";
            }
            else if(etiqueta == 'wvalor_digitado')
            {
                valor_nuevo = campo.attr("valorAnterior");
            }
            else if(etiqueta == 'wlista_eq_ex_insumo')
            {
                // Esta sección aplica para los materiales y medicamentos que se les cambia masivamente por facturable o no facturable
                // se crea una lista de todos los insumos que se van a cambiar y se modifica el array que contiene los datos liquidados
                // con los nuevos valores en el campo facturable
                var separador = "";
                var lista_fact = campo.attr("wseleccion");
                $("."+lista_fact).each(function(){
                    var cod_facturable = $(this).attr("wequip_examen");
                    var cod_concep_fact= $(this).attr("wconcepto");
                    wlista = wlista+separador+cod_concep_fact+":"+cod_facturable;
                    separador = '|';

                    if(valor_nuevo == 'on')
                    {
                        $(this).val("S");
                    }
                    else
                    {
                        $(this).val("N");
                    }
                });
                valor_nuevo = (valor_nuevo == 'on') ? 'S': 'N'; // El valor corresponde a facturable o no facturable a todos los insumos de la lista
                // etiqueta = 'wfacturable'; // la etiqueta se cambia por el campo que realmente se va a modificar en todos los insumos de lista. en este caso el campo wfacturable.
                //                             // Puesto que el campo wlista_eq_ex_insumo no existe en nínguna posición del array arr_datos_liquidados que se va a modificar.
            }
            // else if(etiqueta == 'wdisponibilidad')
            // {
            //     wcuadroturno = "";
            // }

            // Esta función bloquea los botones que hace peticiones ajax hasta que las instrucciones en la función actual terminen, esto es con del fin de esperar una respuesta desde
            // el servidor y no permitir que se de clic varias veces sobre un botón.
            bloquearBoton($("#btn_grabar_liquidacion"));

            $(".bloquear_todo").attr("disabled","disabled");

            // Si es la etiqueta tiene EqEx corresponde a equipo o examen, entonces quitarle esos caracteres porque en el array de liquidados los
            // nombres de las variables no tienen ese sufijo
            etiqueta_param = etiqueta.replace("EqEx","");

            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                {
                    accion               : 'update',
                    form                 : 'modificar_datos_liquidados',
                    consultaAjax         : '',
                                         // arr_datos_liquidar   : $("#arr_datos_liquidar").val(),
                    arr_datos_liquidados : $("#arr_datos_liquidados").val(),
                    wprocedimiento       : wprocedimiento,
                    wconcepto            : wconcepto,
                    wequip_examen        : wequip_examen,
                    valor_nuevo          : valor_nuevo,
                    wtercero             : wtercero,
                    wespecialidad        : wespecialidad,
                                         // wconsec              : wconsec,
                    wtercero_nombre      : wtercero_nombre,
                    wespecialidad_nombre : wespecialidad_nombre,
                    etiqueta             : etiqueta_param,
                    wlista               : wlista,
                    wcuadroturno         : wcuadroturno,
                    wdisponibilidad      : wdisponibilidad
                },
                function(data){
                    if(isset(data.error) && data.error == 1)
                    {
                        jAlert(data.mensaje, "Mensaje");
                    }
                    else
                    {
                        $("#arr_datos_liquidados").val(data.arr_datos_liquidados);
                        /*
                            td_porcentaje_
                            td_wvalor_
                            td_wvalorfinal_
                            td_grabable_
                        */
                        // resetStylePrefijo(prefijoFila);
                    }

                    desbloquearBoton('Grabar liquidaci&oacute;n');
                    var control_ultima_actualizacion = $("#control_ultima_actualizacion").val();
                    if(control_ultima_actualizacion != 'on')
                    {
                        $(".bloquear_todo").removeAttr("disabled","disabled");
                    }

                    //inactivar botón grabar liquidación para que quede activo el boton RELIQUIDAR
                    $("#btn_reliquidacion").show();
                    $("#btn_grabar_liquidacion").attr("disabled","disabled");
                },
                "json"
            ).done(function(){
                if(etiqueta == 'wtercero' || etiqueta == 'wespecialidad' || etiqueta == 'wdisponibilidad')
                {
                    consultarCuadrosTurno("wtercero_"+fila_tr, wtercero, wespecialidad);
                }
                else if(etiqueta == 'wterceroEqEx' || etiqueta == 'wespecialidadEqEx' || etiqueta == 'wdisponibilidadEqEx')
                {
                    consultarCuadrosTurno("wterceroEqEx_"+fila_tr, wtercero, wespecialidad);
                }
            }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
        }

        function cargarMedicoSeleccionado(check_id_campo_ter, id_campo_ter, id_campo_esp)
        {
            var campoChk = $("#"+check_id_campo_ter);
            $("#"+id_campo_ter).focus();

            if(campoChk.is(":checked"))
            {
                var cod_medico       = $("#"+check_id_campo_ter).attr("codigo_medico");
                var nom_medico       = $("#"+check_id_campo_ter).attr("nombre_medico");
                var cod_especialidad = $("#"+check_id_campo_ter).attr("codigo_esp");
                var nom_especialidad = $("#"+check_id_campo_ter).attr("nombre_esp");
                $("#"+id_campo_ter).val(nom_medico);
                $("#"+id_campo_ter).attr("codigo",cod_medico);
                $("#"+id_campo_ter).attr("nombre",nom_medico);

                var options_esp = '<option value="'+cod_especialidad+'" >'+nom_especialidad+'</option>';
                $("#"+id_campo_esp).find("option").remove();
                $("#"+id_campo_esp).append(options_esp);
                $("#"+id_campo_esp).attr("codigo",cod_especialidad);
                $("#"+id_campo_esp).attr("nombre",nom_especialidad);
                $("#"+id_campo_esp).val(cod_especialidad);

            }
            else
            {
                $("#"+check_id_campo_ter).attr("codigo","");
                $("#"+check_id_campo_ter).attr("nombre","");
                $("#"+id_campo_ter).val("");
                $("#"+id_campo_esp).attr("codigo","");
                $("#"+id_campo_esp).attr("nombre","");
                $("#"+id_campo_esp).find("option").remove();
            }
            $("#btn_liquidar_pop").focus();
        }

        function cerrarLiquidacion()
        {
            // $('#div_cont_liquidacion_modal').dialog('close');
            $("#btn_liquidar_pop").focus();
        }

        function reliquidar_cx(btn)
        {
            $("#btn_liquidar_pop").click();
        }

        function guardarLiquidacion(this_btn)
        {
            var liq_procedimientos_no_auditados = $("#liq_procedimientos_no_auditados").val();
            var whistoria_tal          = $("#whistoria_tal").val();
            var wing_tal               = $("#wing_tal").val();
            var campos_vacios_terceros = false;
            var campos_ok              = true;
            var msjNoAgregados         = "";
            var msjNoterceros          = "";
            var es_paquete             = ($("#wliq_paquete").is(":checked")) ? "on": "off";
            $("div[id=cont_dlle_modal]").find(".vacios_terceros").each(function(){
                var campotercero   = $(this).attr("codigo");
                var wprocedimiento = $(this).attr("wprocedimiento");
                var wconcepto      = $(this).attr("wconcepto");
                var wequip_examen  = $(this).attr("wequip_examen");
                var btn_grabar;
                if(wequip_examen != '')
                {
                    btn_grabar = $("#wgrabarEqEx_"+wprocedimiento+"_"+wconcepto+'_'+wequip_examen).attr("checked");
                }
                else
                {
                    btn_grabar = $("#wgrabar_"+wprocedimiento+"_"+wconcepto+'_').attr("checked");
                }

                if(btn_grabar == 'checked' && campotercero.replace(/ /gi, "") == '')
                {
                    campos_vacios_terceros = true;
                    campos_ok              = false;
                    msjNoterceros          = "* No se han llenado todos los campos de tercero!";
                }
            });

            // Validación para controlar que no se pueda liquidar el acto quirúrgico porque hacen falta procedimientos por agregar a la liquidación
            // y hacen parte del mismo turno de cirugía. Se buscan solo los elementos visibles
            var cont_auditados_no_gregados = 0;
            $("#tabla_procedimientos_auditados").find(".trproAud:visible").each(function(){
                var filaPro = $(this);
                cont_auditados_no_gregados++;
            });

            if(liq_procedimientos_no_auditados == 'off' && cont_auditados_no_gregados > 0 && es_paquete == 'off')
            {
                campos_ok      = false;
                msjNoAgregados = "<br>* Este turno de cirug&iacute;a tiene procedimientos autorizados/auditados no agregados a la liquidaci&oacute;n";
            }

            if(campos_ok)
            {
                // si esta en on significa que ya se realizó automaticamente una actualizacion al array global de cargos justo antes de ir a grabar todos esos cargos
                // gracias a este parámetro se llama a al función de liquidar y luego desde esa función se llama nuevamente esta funcion de grabarLiquidacion
                var control_ultima_actualizacion = $("#control_ultima_actualizacion").val();

                if(control_ultima_actualizacion != 'on')
                {
                    // Preliquidar primero para poder actualizar el array global de grabación para poder los ultimos cambios de elección de terceros
                    // o cambios en checks grabar o facturable/no facturable alcancen a quedar en actualizados en ese array global.
                    $("#control_ultima_actualizacion").val("on");
                    desbloquearBoton('Grabar liquidaci&oacute;n');
                    generarLiquidar($("#btn_liquidar_pop"), "", "");
                }
                else
                {
                    bloquearBoton(this_btn);
                    $(".bloquear_todo").attr("disabled","disabled");

                    var wbaseliquidacion = $("#wbaseliquidacion").val();
                    var wliq_soloInsumos = ($("#wliq_soloInsumos").is(":checked")) ? "on": "off";

                    var wcentro_costo    = $("#wcco_tal").val();
                    var opt_tur          = $("option:selected", $("#wturno_cirugia"));
                    var ccoquirofano     = opt_tur.attr("ccoquirofano");

                    var whistoria = $("#whistoria_tal").val();
                    var wing      = $("#wing_tal").val();
                    var wdoc      = $("#wdoc_tal").val();
                    var wtip_doc  = $("#wtip_doc_tal").val();

                    // Verificar si la historia e ingreso está activo en unix, no se puede dejar liquidar si está inactivo
                    // porque generaría un error en el intregrador al momento de grabar los cargos en unix a una historia e ingreso inactivos
                    $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                        {
                             accion       : 'load',
                             form         : 'validar_paciente_activo_unix',
                             consultaAjax : '',
                             whistoria    : whistoria,
                             wing         : wing,
                             wdoc         : wdoc,
                             wtip_doc     : wtip_doc
                        },
                        function(data_unx){
                            if(data_unx.error == 1)
                            {
                                jAlert(data_unx.mensaje, "Mensaje");
                                desbloquearBoton('Grabar liquidaci&oacute;n');
                            }
                            else if(data_unx.paciente_activo_unx == 'off')
                            {
                                var alertmsj = "EL PACIENTE CON HISTORIA ["+whistoria+"-"+wing+"], Documento ["+wtip_doc+" "+wdoc+"]\n\nEsta INACTIVO EN UNIX, para grabar la liquidacion debe estar activo en unix.";
                                jAlert(alertmsj, "Mensaje");
                                desbloquearBoton('Grabar liquidaci&oacute;n');
                                $(".bloquear_todo").removeAttr("disabled");
                            }
                            else
                            {
                                // if(true)
                                // Grabar liquidación
                                $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                                    {
                                        accion                            : 'insert',
                                        form                              : 'guardar_datos_liquidados',
                                        consultaAjax                      : '',
                                        whistoria                         : whistoria,
                                        wing                              : wing,
                                        wno1                              : $("#wno1_tal").val(),
                                        wno2                              : $("#wno2_tal").val(),
                                        wap1                              : $("#wap1_tal").val(),
                                        wap2                              : $("#wap2_tal").val(),
                                        wdoc                              : wdoc,
                                        wtip_doc                          : wtip_doc,
                                        wcodemp                           : $("#responsable_original_tal").val(),
                                        wnomemp                           : $("#wnomemp_tal").val(),
                                        wfecing                           : $("#wfecing_tal").val(),
                                        wtar                              : $("#tarifa_original_tal").val(),
                                        wser                              : $("#wser_tal").val(),
                                        arr_datos_liquidados              : $("#arr_datos_liquidados").val(),
                                        arr_CARGOS_PARA_GRABAR            : $("#arr_CARGOS_PARA_GRABAR").val(),
                                        arr_procedimientos_orden_liquidar : $("#arr_procedimientos_orden_liquidar").val(),
                                        wfecha_cargo                      : $("#wfecha_cargo").val(),
                                        wtipo_ingreso                     : $("#wtipo_ingreso_tal_tal").val(),
                                        whora_cargo                       : $("#whora_cargo").val(),
                                        wcco                              : wcentro_costo,
                                        wccogra                           : $("#wccogra").val(),
                                        wfeccar                           : $("#wfeccar").val(),
                                        wbod                              : $("#wbod_tal").val(),
                                        wtip_paciente                     : $("#wtip_paciente_tal").val(),
                                        wbasedato_movhos                  : $("#wbasedato_movhos").val(),
                                        wbaseliquidacion                  : wbaseliquidacion,
                                        id_concepto_uso_equipos           : $("#id_concepto_uso_equipos").val(),
                                        id_concepto_examenes              : $("#id_concepto_examenes").val(),
                                        tipoEmpresa                       : $("#tipoEmpresa_tal").val(),
                                        nitEmpresa                        : $("#nitEmpresa_tal").val(),
                                        ccoActualPac                      : $("#ccoActualPac_tal").val(),
                                        es_paquete                        : es_paquete,
                                        wliq_soloInsumos                  : wliq_soloInsumos,
                                        wturno_cirugia                    : $("#wturno_cirugia").val(),
                                        ccoquirofano                      : ccoquirofano,
                                        arr_cargos_req_autorizar          : $("#arr_cargos_req_autorizar").val(),
                                        winsumos_cambiar_ingreso          : data_unx.winsumos_cambiar_ingreso,
                                        wingreso_reemplazable_unix        : data_unx.wingreso_reemplazable_unix,
                                        wingreso_activo_unx               : data_unx.wingreso_activo_unx,
                                        fecha_reemplazable_unix           : data_unx.fecha_reemplazable_unix,
                                        wtipo_paciente                    : $("#wtip_paciente_tal").val()
                                    },
                                    function(data){
                                        $("#div_errores_liquidacion").html("");
                                        if(isset(data.error) && data.error == 1)
                                        {
                                            if(data.error_tipo == "liquidacion_simulado")
                                            {
                                                $("#div_errores_liquidacion").html(data.html);
                                                fnModalErrorLiquidacion();
                                            }
                                            else
                                            {
                                                // alert(data.mensaje_local);
                                                var msjerr = '<div id="div_mensajes_alerta" style="font-size: 8pt; color:red; text-align:left;font-weight:bold;">'+data.mensaje_local+'</div>'+data.mensaje+data.html_autorizar_cargos;
                                                // $("#div_mensajes_alerta").html(data.mensaje);

                                                // $("#div_mensajes_alerta").show(0, function(){
                                                //                                 // $(this).hide(2000);
                                                // });
                                                $("#div_errores_liquidacion").html(msjerr);
                                                fnModalErrorLiquidacion();

                                                if(data.mensaje != '')
                                                {
                                                    // $("#div_mensajes_alerta").css({"border":"1px solid red"});
                                                    congelarCuentaPaciente('off');
                                                }
                                                else
                                                {
                                                    $("#div_mensajes_alerta").css({"border":"0px"});
                                                }
                                            }

                                        }
                                        else
                                        {
                                            // limpiar();
                                            // $("#tabla_lista_cxs tr[id^=tr_liqAdd_cxs_]").remove();
                                            // $("#arr_datos_liquidar").val($("#arr_datos_liquidar_temp").val());
                                            // $("#arr_datos_liquidados").val($("#arr_vacio").val());
                                            // $("#arr_procedimientos_orden_liquidar").val($("#arr_vacio").val());
                                            // $("#arr_CARGOS_PARA_GRABAR").val($("#arr_vacio").val());
                                            // $("#arr_extras").val($("#arr_vacio").val()); // Se llena cuando se agregan conceptos extras que no estan en la plantilla.
                                            // // $("#div_cont_liquidacion_modal").hide("slow");
                                            // $("#div_cont_liquidacion_modal").html("");

                                            $("#div_mensajes_alerta").html(data.mensaje);
                                            if(data.error_cargo == 1)
                                            {
                                                $("#div_mensajes_alerta").css({"border":"1px solid red"});
                                            }
                                            else
                                            {
                                                $("#div_mensajes_alerta").css({"border":"0px"});
                                            }

                                            if(data.error_cargo == 1)
                                            {
                                                jAlert(data.mensaje_local, "Mensaje");
                                                $("#div_errores_liquidacion").html(data.mensaje+data.html_autorizar_cargos);
                                                fnModalErrorLiquidacion();
                                            }
                                            else
                                            {
                                                $("#div_mensajes_alerta").show();
                                                if(data.html_autorizar_cargos != "")
                                                {
                                                    var msjaut = '<div id="div_mensajes_alerta" style="font-size: 8pt; color:red; text-align:left;font-weight:bold;">Cargos que generaron autorización adicional</div>'+data.html_autorizar_cargos;
                                                    $("#div_errores_liquidacion").html(msjaut);
                                                    fnModalErrorLiquidacion();
                                                }
                                                else
                                                {
                                                    jAlert(data.mensaje_local, "Mensaje");
                                                }

                                                $("#div_mensajes_alerta").show(0, function(){
                                                                                $(this).hide(4000);
                                                });
                                            }

                                            congelarCuentaPaciente('off');
                                        }
                                        return data;
                                    },
                                    "json"
                                ).done(function(data){
                                    // $('#div_cont_liquidacion_modal').dialog('close');
                                    // desbloquearBoton('');
                                    $("#control_ultima_actualizacion").val("");
                                    desbloquearBoton('Grabar liquidaci&oacute;n');
                                    $(".bloquear_todo").removeAttr("disabled","disabled");

                                    if(data.error_tipo != "liquidacion_simulado") // Si hubo error en la simulación NO HACER NADA
                                    {
                                        // limpiarPantalla(true);

                                        // $("#whistoriaLocal").val('');
                                        // $("#wingLocal").val('');
                                        // $("#whistoria_tal").val('');
                                        // $("#wing_tal").val('');
                                        // $("input[type='radio'][defecto='si']").attr("checked", true);
                                        $("#DatosPaciente").find("[limpiar=si]").html("&nbsp;");
                                        $("#div_contenedor_detalle").html('');
                                        $("#cont_dlle_modal").html('');
                                        congelarCuentaPaciente('off');
                                        limpiarDatosCamposLiquidacion(true);

                                        $("#whistoria_tal").val(whistoria_tal);
                                        $("#wing_tal").val(wing_tal);
                                        // $("#whistoria_tal").val(whistoria);
                                        // $("#wing_tal").val(wing);

                                        cargarDatosPaciente('wing','');
                                    }
                                    // recargarDetalleLiquidaciones();

                                    if(isset(data.error) && data.error == 0)
                                    {
                                        // location.reload(true);
                                        // window.location.reload(true);
                                    }

                                    // cronUnixCargos(); // ejecutar el cron que actualiza cargos de insumos en unix tal como estan en matrix.
                                }).fail(function(xhr, textStatus, errorThrown) {
                                    $("#control_ultima_actualizacion").val("");
                                    $(".bloquear_todo").removeAttr("disabled");
                                    mensajeFailAlert(this, '', xhr, textStatus, errorThrown);
                                });
                            }
                            return data_unx;
                        },
                        "json"
                    ).done(function(data_unx){
                        // var control_ultima_actualizacion = $("#control_ultima_actualizacion").val();
                        // if(control_ultima_actualizacion == 'on')
                        // {
                        //     $(".bloquear_todo").removeAttr("disabled","disabled");
                        //     $("#control_ultima_actualizacion").val("");
                        // }
                    }).fail(function(xhr, textStatus, errorThrown) {
                        $("#control_ultima_actualizacion").val("");
                        $(".bloquear_todo").removeAttr("disabled");
                        mensajeFailAlert(this, '* Problemas para consultar estado del paciente en unix', xhr, textStatus, errorThrown);
                    });
                }
            }
            else
            {
                $("#control_ultima_actualizacion").val("");
                jAlert(msjNoterceros+msjNoAgregados, "Mensaje");
            }
        }

        function fnModalErrorLiquidacion()
        {
            $( "#div_errores_liquidacion" ).dialog({
                show: {
                    effect: "blind",
                    duration: 100
                },
                hide: {
                    effect: "blind",
                    duration: 100
                },
                height: 600,
                width:  800,
                buttons: {
                    "Cerrar": function() {
                      $( this ).dialog( "close" );
                    }},
                dialogClass: 'fixed-dialog',
                modal: true,
                title: "Mensajes de alerta - liquidaci&oacute;n",
                beforeClose: function( event, ui ) {
                    //
                },
                create: function() {
                   $(this).closest('.ui-dialog').on('keydown', function(ev) {
                       if (ev.keyCode === $.ui.keyCode.ESCAPE) {
                           $( "#div_errores_liquidacion" ).dialog('close');
                       }
                   });
                },
                closeOnEscape: false
            }).on("dialogopen", function( event, ui ) {
                    // var fc = $("#div_errores_liquidacion").find("[id^=busc_nom_medicamento_fiqx_]").attr("id");
                    // $("#"+fc).val("").focus();
            });
        }

        function fnModalErrorTarifaAdicionales()
        {
            $( "#div_errores_tarifaAdd" ).dialog({
                show: {
                    effect: "blind",
                    duration: 100
                },
                hide: {
                    effect: "blind",
                    duration: 100
                },
                height: 200,
                width:  500,
                buttons: {
                    "Aceptar": function() {
                      $( this ).dialog( "close" );
                    }},
                dialogClass: 'fixed-dialog',
                modal: true,
                title: "ALERTA DE TARIFA - CONCEPTO ADICIONAL",
                beforeClose: function( event, ui ) {
                    //
                },
                create: function() {
                   $(this).closest('.ui-dialog').on('keydown', function(ev) {
                       if (ev.keyCode === $.ui.keyCode.ESCAPE) {
                           $( "#div_errores_tarifaAdd" ).dialog('close');
                       }
                   });
                },
                closeOnEscape: false
            }).on("dialogopen", function( event, ui ) {
                    // var fc = $("#div_errores_tarifaAdd").find("[id^=busc_nom_medicamento_fiqx_]").attr("id");
                    // $("#"+fc).val("").focus();
            });
        }

        /**
         * [cronUnixCargos: Función encargada de actualizar en unix los cargos de insumos con base a lo liquidado en matrix, los insumos quedan como SI o NO facturable en unix
         *                     tal como estén en matrix.]
         * @return {[type]} [description]
         */
        function cronUnixCargos()
        {
            // Se comenta esta rutina para evitar que se haga desde el monitor, a cambio de esto se crea un cron que se ejecute automáticamente
            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
            {
                accion       : 'update',
                consultaAjax : '',
                accion       : 'actualizacion_cron_cargos'
            }, function (data){
                if(data.error == 1)
                {
                    jAlert(data.mensaje, "Mensaje");
                }
                else
                {
                    //
                }
            },"json").done(function(){
                //
            }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
        }

        function recargarDetalleLiquidaciones()
        {
            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                {
                    accion       : 'update',
                    form         : 'recargar_detalle',
                    consultaAjax : '',
                    whistoria    : $("#whistoria_tal").val(),
                    wing         : $("#wing_tal").val()
                },
                function(data){
                    if(isset(data.error) && data.error == 1)
                    {
                        jAlert(data.mensaje, "Mensaje");
                    }
                    else
                    {
                        $("#div_contenedor_detalle").html(data.html);
                    }
                },
                "json"
            ).done(function(){
                //
            }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
        }

        function cargarSelectEspecialidades( cadena , wespecialidad, elem_this)
        {
            var especialidades = cadena.split(",");
            // var html_options = '<option value="">Seleccione..</option>';
            var html_options = '';
            var frst = '';
            for( var i in especialidades ){
                var especialidad = especialidades[i].split("-");
                var sltd = '';
                if(frst == '')
                {
                    frst = especialidad[0];
                    sltd = 'selected="selected"';
                }
                html_options+='<option value="'+especialidad[0]+'" '+sltd+' >'+especialidad[0]+'-'+especialidad[1]+'</option>';
            }
            var id_campo_especialidad = '';
            if($("#"+wespecialidad).length > 0)
            {
                $("#"+wespecialidad).html( html_options );
                $("#"+wespecialidad).removeClass('campoRequerido');
                id_campo_especialidad = wespecialidad;
            }
            else if($("."+wespecialidad).length > 0)
            {
                var id_autocomp = elem_this.attr('id');
                var id_cmp_especialidad = $("#"+id_autocomp).parent().next('td').find('.liq_depend_autocomplete').attr('id');
                $("#"+id_cmp_especialidad).html( html_options );
                $("#"+id_cmp_especialidad).removeClass('campoRequerido');
                id_campo_especialidad = id_cmp_especialidad;
                // console.log(elem_this.attr('id'));
                // console.log(elem_this.next('input'));
            }
            // ESTA SECCIÓN ES PARA QUE AL SELECCIONAR MEDICO, SE CAMBIE EL FOCO AL SIGUIENTE CAMPO QUE DEBE SER EL DE ESPECIALIDAD, CON EL FIN DE DESENCADENAR
            // EL EVENTO QUE ENCARGADO DE ACTUALIZAR EL ARRAY DE DATOS LIQUIDADOS Y DE MANERA AUTOMÁTICA SE ACTIVE EL BOTÓN DE ACTUALIZAR LIQUIDACIÓN. Se hace nesario
            // este conjunto de instrucción para que momento de seleccionar medico en el ingreso de datos de liquidación se puede seguir presionando la tecla TAB y no se pierda
            // el puntero al siguiente input. (Antes se estaba haciendo foco hacia un boton específico pero se perdía el puntero (campo-input) siguiente del TAB).
            var id_campo_ter = '';
            if($("#"+id_campo_especialidad).parent().prev('td').find('#wespecialistas').length > 0)
            {
                id_campo_ter = $("#"+id_campo_especialidad).parent().prev('td').find('#wespecialistas').attr("id");
            }
            else if($("#"+id_campo_especialidad).parent().prev('td').find('[id^=wtercero_]').length > 0)
            {
                id_campo_ter = $("#"+id_campo_especialidad).parent().prev('td').find('[id^=wtercero_]').attr("id");
            }
            else if($("#"+id_campo_especialidad).parent().prev('td').find('[id^=wterceroEqEx_]').length > 0)
            {
                id_campo_ter = $("#"+id_campo_especialidad).parent().prev('td').find('[id^=wterceroEqEx_]').attr("id");
            }

            if(id_campo_ter != '')
            {
                $("#"+id_campo_especialidad).parent().prev('td').find('#'+id_campo_ter).focus();
                $("#"+id_campo_ter).parent().next('td').find('#'+id_campo_especialidad).focus();
            }
        }

        /**
         * [consultarCuadrosTurno: Esta función se debe encargar de verificar si para el tercero seleccionado existen cuadros de turno y mostrar las opciones en el seleccionador]
         * @param  {[type]} id_el         [Id del campo autocompletar del tercero]
         * @param  {[type]} codigo        [Código del tercero seleccionado]
         * @param  {[type]} wespecialidad [Código de la especialidad seleccionada]
         * @return {[type]}               [description]
         */
        function consultarCuadrosTurno(id_el, wtercero, wespecialidad)
        {
            var wdisponibilidad            = ($("#"+id_el+"disponible").length > 0) ? $("#"+id_el+"disponible").val() : '';
            var procedimiento_liquidar_cod = ($("#"+id_el+"dishdn").length > 0) ? $("#"+id_el+"dishdn").attr("procedimiento_liquidar_cod") : '';
            var esEqEx                     = ($("#"+id_el+"dishdn").length > 0 && $("#"+id_el+"dishdn").attr("esEqEx") != '') ? $("#"+id_el+"dishdn").attr("esEqEx") : '';
            var dif_concepto               = ($("#"+id_el+"dishdn").length > 0) ? $("#"+id_el+"dishdn").attr("dif_concepto") : '';
            var arr_parametros             = $("#"+id_el+"dishdn").val();

            if(wtercero == "")
            {
                // cuando se crea el select de disponibilidad desde php, los datos de tercero y especialidad estarán vacíos, ese select genera un
                // evento onchange que llama la función de consultar cuadro de turno, para ese caso se debe leer que tercero y especialidad hay seleccionados
                // para buscar los cuadros de turno que correspondan a ese tercero seleccionado.
                wtercero            = $("#"+id_el).attr("codigo");
                var id_especialidad = id_el.replace("wtercero_","wespecialidad_");
                id_especialidad     = id_el.replace("wterceroEqEx_","wespecialidadEqEx_"); // Cuando es el caso del tercero para un equipo.
                wespecialidad       = $("#"+id_especialidad).val();
                //     var wespecialidad = $("#"+id_especialidad).val();
            }

            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                {
                    accion                     : 'update',
                    form                       : 'cargar_cuadros_turno',
                    consultaAjax               : '',
                    arr_parametros             : arr_parametros,
                    wtercero                   : wtercero,
                    wespecialidad              : wespecialidad,
                    wdisponibilidad            : wdisponibilidad,
                    procedimiento_liquidar_cod : procedimiento_liquidar_cod,
                    dif_concepto               : dif_concepto,
                    arr_datos_liquidados       : $("#arr_datos_liquidados").val(),
                    codEquipoExamen            : esEqEx
                },
                function(data){
                    if(data.error == 1)
                    {
                        jAlert(data.mensaje, "Mensaje");
                    }
                    else
                    {
                        $("#"+id_el+"cuadroturno").html(data.optionsCuadroTurno);
                        $("#"+id_el+"cuadroturno").val("");
                        $("#"+id_el+"grupoMedico").val(data.grupoMedico);
                        $("#arr_datos_liquidados").val(data.arr_datos_liquidados);
                        if(data.activar_select_cuadroTurno)
                        {
                            $("#"+id_el+"cuadroturno_td").show();
                            // $("#"+id_el+"cuadroturno").focus();
                            // $("#"+id_el+"disponible").focus();
                        }
                        else
                        {

                            // $("#"+id_el+"cuadroturno").focus();
                            $("#"+id_el+"cuadroturno_td").hide();
                            // $("#"+id_el+"disponible").focus();
                        }
                        // $("#div_contenedor_evento_qx_"+dif_acto).hide();
                        // $("#div_contenedor_evento_qx_"+dif_acto).html("");
                        // alert(data.mensaje);
                    }
                },
                "json"
            ).done(function(){
                //recargarDetalleLiquidaciones();
            }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
        }

        function iniciarClaseNumero(contenedor)
        {
            if(contenedor != '')
            {
                $(contenedor).find('.numerico').on({
                    keypress: function(e) {
                        var r = soloNumeros(e);
                        if(r==true)
                        {
                            var codeentr = (e.which) ? e.which : e.keyCode; /*if(codeentr == 13) { buscarDatosBasicos(); }*/
                            // $(this)
                            if(codeentr == 9 || codeentr == 27)
                            {
                                close_div_time($(this));
                            }
                            return true;
                        }
                        return false;
                    }
                });
            }
            else
            {
                $('.numerico').on({
                    keypress: function(e) {
                        var r = soloNumeros(e);
                        if(r==true)
                        {
                            var codeentr = (e.which) ? e.which : e.keyCode; /*if(codeentr == 13) { buscarDatosBasicos(); }*/
                            return true;
                        }
                        return false;
                    }
                });
            }
        }

        function iniciarClaseMinutos(contenedor)
        {
            if(contenedor != '')
            {
                $(contenedor).find('.classminutos').on({
                    focusout: function(e) {
                        if($(this).val().replace(/ /gi, "") == '')
                        {
                        }
                        else
                        {
                            var valor_minuto = $(this).val();
                            if(valor_minuto > 0 && valor_minuto < 15)
                            {
                                //$(this).val();
                                var alertmsj = "Recuerde que el n&uacute;mero debe ser en minutos y no en horas, est&aacute; escribiendo un n&uacute;mero muy bajo.";
                                jAlert(alertmsj, "Mensaje");
                            }
                        }
                    }
                });
            }
            else
            {
                $('.classminutos').on({
                    focusout: function(e) {
                        if($(this).val().replace(/ /gi, "") == '')
                        {
                        }
                        else
                        {
                            var valor_minuto = $(this).val();
                            if(valor_minuto > 0 && valor_minuto < 15)
                            {
                                //$(this).val();
                                var alertmsj = "Recuerde que el n&uacute;mero debe ser en minutos y no en horas, est&aacute; escribiendo un n&uacute;mero muy bajo.";
                                jAlert(alertmsj, "Mensaje");
                            }
                        }
                    }
                });
            }
        }

        function iniciarTiempoProcedimiento()
        {
            $(".tiempoProcedimiento").focusin(function() {
                // $("#div_calcular_tiempo").find("#div_horIni_cx").val("00:00");
                // $("#div_calcular_tiempo").find("#div_horFin_cx").val("00:00");
                $(".tiempoProcedimiento").css({"background-color":""});
                $(this).removeClass("focoResultado");

                var id_destino = $(this).attr("id");
                $(this).css({"background-color":"#62bbe8"});
                $(this).addClass("focoResultado");

                var pos = $("#"+id_destino).offset();
                var eWidth = $("#"+id_destino).outerWidth();
                var mWidth = $("#div_calcular_tiempo").outerWidth();
                var left = (pos.left + eWidth - mWidth + 232) + "px";
                var top = 3+pos.top - 111 + "px";
                //show the menu directly over the placeholder
                $("#div_calcular_tiempo").css( {
                    position: 'absolute',
                    zIndex: 5000,
                    left: left,
                    top: top
                } );

                $("#div_calcular_tiempo").fadeIn();
                //$("#div_calcular_tiempo").hide().fadeIn();
            }).focusout(function() {
                //
            });
        }

        function close_div_time(elem)
        {
            $("#div_calcular_tiempo").hide();
            // $("#div_calcular_tiempo").find("#div_horIni_cx").val("00:00");
            // $("#div_calcular_tiempo").find("#div_horFin_cx").val("00:00");
            $(".tiempoProcedimiento").css({"background-color":""});
        }

        $(function(){
            iniciarClaseNumero('');

            $('#wprocedimiento, #wespecialistas').on({
                focusout: function(e) {
                    if($(this).val().replace(/ /gi, "") == '')
                    {
                        $(this).val("");
                        $(this).attr("codigo","");
                        $(this).attr("nombre","");
                    }
                    else
                    {
                        $(this).val($(this).attr("nombre"));
                    }
                }
            });

            iniciarRequeridosYOrganos();

            iniciarClaseMinutos('');
        });

        function iniciarRequeridosYOrganos()
        {
            $('.worgano').on({
                focusout: function(e) {
                    if($(this).val().replace(/ /gi, "") == '')
                    {
                        $(this).val("");
                        $(this).attr("codigo","");
                        $(this).attr("nombre","");
                        $(this).attr("bilateral","off");
                    }
                    else
                    {
                        $(this).val($(this).attr("nombre"));
                    }
                }
            });

            $('.requerido').on({
                focusout: function(e) {
                    if($(this).val().replace(/ /gi, "") == '')
                    {
                        $(this).addClass("campoRequerido");
                    }
                    else
                    {
                        $(this).removeClass("campoRequerido");
                    }
                }
            });
        }

        function crearAutocomplete(arr_opciones_seleccion, campo_autocomplete, codigo_default, nombre_default, limite_buscar)
        {
            $("#"+campo_autocomplete).val(nombre_default);
            $("#"+campo_autocomplete).attr("codigo",codigo_default);
            $("#"+campo_autocomplete).attr("nombre",nombre_default);

            var arr_medicos_descripcionOp = {};
            var selector_autocomplete = 'autocomplete';
            if(arr_opciones_seleccion == 'arr_terceros_especialidad')
            {
                // Object.keys( data.arr_medicos_descripcionOp ).length
                arr_medicos_descripcionOp = eval('(' + $("#arr_medicos_descripcionOp").val() + ')');
            }

            var nombre_categoria_descOp = "CON DESCRIPCI&Oacute;N O NOTA";

            arr_datos = new Array();
            //var datos = arr_wempresp;//eval( $("#arr_wempresp").val() );
            var datos = eval('(' + $("#"+arr_opciones_seleccion).val() + ')');
            var index = -1;
            for (var CodVal in datos)
            {
                index++;
                if(arr_opciones_seleccion == 'arr_terceros_especialidad')
                {
                    arr_datos[index]                = {};
                    arr_datos[index].value          = CodVal+'-'+datos[CodVal]['nombre'];
                    arr_datos[index].label          = CodVal+'-'+datos[CodVal]['nombre'];
                    arr_datos[index].codigo         = CodVal;
                    arr_datos[index].nombre         = CodVal+'-'+datos[CodVal]['nombre'];
                    arr_datos[index].especialidades = datos[CodVal]['especialidad'];
                    arr_datos[index].category       = "OTROS TERCEROS";

                    if(arr_medicos_descripcionOp[CodVal] != undefined)
                    {
                        arr_datos[index].category   = nombre_categoria_descOp;
                        arr_medicos_descripcionOp[CodVal] = arr_datos[index];
                        selector_autocomplete = 'autocompleteterceros';
                    }
                }
                else
                {
                    arr_datos[index] = {};
                    arr_datos[index].value    = CodVal+'-'+datos[CodVal];
                    arr_datos[index].label    = CodVal+'-'+datos[CodVal];
                    arr_datos[index].codigo   = CodVal;
                    arr_datos[index].nombre   = CodVal+'-'+datos[CodVal];
                }
            }

            // if( arr_opciones_seleccion == "arr_procedimientos")
            // {
            //     limite_buscar = 0;
            // }

            if(arr_opciones_seleccion == 'arr_terceros_especialidad')
            {
                // https://jqueryui.com/autocomplete/#categories
                $.widget( "custom.autocompleteterceros", $.ui.autocomplete, {
                    _create: function() {
                        // console.log("_create");
                        this._super();
                        this.widget().menu( "option", "items", "> :not(.ui-autocomplete-input)" );
                    },
                    _renderMenu: function( ul, items ) {
                        var that = this,
                        currentCategory = "";

                        var otros = "";

                        if(Object.keys( arr_medicos_descripcionOp ).length > 0)
                        {
                            ul.append( "<li class='ui-autocomplete-category' style='background-color:#c3d9ff;'>"+nombre_categoria_descOp+"</li>" );
                            otros = " style='background-color:#c3d9ff;'";

                            $.each( arr_medicos_descripcionOp, function( index, itemAux ) {
                                // if(arr_medicos_descripcionOp[item.codigo] != undefined)
                                {
                                    var li;
                                    li = that._renderItemData( ul, itemAux );
                                    // if ( item.category )
                                    {
                                        li.attr( "aria-label", itemAux.category + " : " + itemAux.label );
                                        li.css({"background-color":"#C3FBC3","font-size":"8pt","padding":"1px",
                                                "border-bottom-color": "#ffffff","border-bottom-style":"solid",
                                                "border-bottom-width": "1px", "max-width":"auto"});
                                        li.removeClass("ui-menu-item");
                                    }
                                }
                            });
                        }

                        $.each( items, function( index, item ) {
                            if(arr_medicos_descripcionOp[item.codigo] == undefined)
                            {
                                var li;
                                if ( item.category != currentCategory && nombre_categoria_descOp != item.category) {
                                    ul.append( "<li class='ui-autocomplete-category' "+otros+">" + item.category + "</li>" );
                                    currentCategory = item.category;
                                }
                                li = that._renderItemData( ul, item );

                                if ( item.category ) {
                                    li.attr( "aria-label", item.category + " : " + item.label );
                                }
                            }
                        });
                    }
                });
            }

            // console.log(arr_datos);
            if($("#"+campo_autocomplete).length > 0)
            {
                $("#"+campo_autocomplete)[selector_autocomplete]({
                        delay: 0,source: arr_datos, minLength : limite_buscar,
                        select: function( event, ui ) {
                                    // Lee el valor seleccionado en el autocompletar y lee solo el código y lo adiciona a otro campo de solo código.
                                    var cod_sel = ui.item.codigo;
                                    var nom_sel = ui.item.nombre;
                                    $("#"+campo_autocomplete).attr("codigo",cod_sel);
                                    $("#"+campo_autocomplete).attr("nombre",nom_sel);
                                    // cargarConceptosPorProcedimientos(cod_sel);
                                }
                });
            }
            else if($("."+campo_autocomplete).length > 0  || campo_autocomplete == 'concepto_autocomplete')
            {
                $("."+campo_autocomplete)[selector_autocomplete]({
                        delay: 0,source: arr_datos, minLength : limite_buscar,
                        select: function( event, ui ) {
                                    var cod_sel = ui.item.codigo;
                                    var nom_sel = ui.item.nombre;
                                    var id_el = $(this).attr("id");
                                    $("#"+id_el).attr("codigo",cod_sel);
                                    $("#"+id_el).attr("nombre",nom_sel);
                                    $("#add_procedimiento").children("option").removeAttr("disabled").show(); // Si una concepto ya lo tiene un procedimiento entonces se oculta ese procedimiento, esta línea de código es para volverlos a mostrar todos.
                                    $("#td_add_equipo").hide();
                                    $("#td_add_examen").hide();

                                    $("#add_equipo").val("");
                                    $("#add_examen").val("");

                                    if(campo_autocomplete != 'concepto_autocomplete')
                                    {
                                        cargarSelectEspecialidades( ui.item.especialidades , 'liq_autocomplete', $(this));
                                        // if(arr_opciones_seleccion == 'arr_terceros_especialidad' && $("#"+id_el).hasClass("modificaLiquidado"))
                                        // {
                                        //     var id_especialidad = id_el.replace("wtercero_","wespecialidad_");
                                        //     var wespecialidad = $("#"+id_especialidad).val();
                                        //     consultarCuadrosTurno(id_el, cod_sel, wespecialidad);
                                        // }
                                    }
                                    else
                                    {
                                        //Validar si se trata del concepto de uso de equipos, si es así entonces consultar todos los equipos para seleccionar
                                        if($("#id_concepto_examenes").val() == cod_sel) //'E'
                                        {
                                            // Functión para consultar exámenes
                                            // select add_examen
                                            consultarListaExamenesEquipos(cod_sel, 'E', 'add_examen');
                                        }
                                        else if($("#id_concepto_uso_equipos").val() == cod_sel) //'Q'
                                        {
                                            // Functión para consultar equipos
                                            // select add_equipo
                                            consultarListaExamenesEquipos(cod_sel, 'Q', 'add_equipo');
                                        }


                                        // Lee el valor seleccionado en el autocompletar y lee solo el código y lo adiciona a otro campo de solo código.
                                        // $("#add_procedimiento > option").html();
                                        $("#add_procedimiento").children("option[lista*=" + cod_sel + "]").attr("disabled","disabled").hide();

                                        total_opciones_novacias = $("#add_procedimiento").children("option[lista]").length;
                                        opciones_tienen_elconcepto = $("#add_procedimiento").find("option[lista*=" + cod_sel + "]").length;
                                        contador_op_ctrl = total_opciones_novacias-opciones_tienen_elconcepto;

                                        // si la cantidad de procedimientos que no tienen el conceptos es igual a la misma cantidad de procedimientos como tal?
                                        // entonces no desplegar el select de procedimientos y simplemente envíese el concepto con procedimiento vacía y así se le agregará solo al
                                        // primer procedimiento.
                                        if(contador_op_ctrl == total_opciones_novacias)// si la cantidad de opciones que no tienen el concepto es igual a la cantidad total de opciones con valor no vacío, entonces no mostrar el campo precedimiento.
                                        {
                                            // $("#td_add_procedimiento").hide();
                                        }
                                        else if(contador_op_ctrl > 0)
                                        {
                                            // $("#td_add_procedimiento").show();
                                        }
                                        $("#td_add_procedimiento").show();  // Siempre se debe mostrar el select de procedimiento porque a veces se quiere agregar un concepto
                                                                            // solo al procedimiento que aparece como segunda cirugía, si se deja como estaba entonces el programa
                                                                            // siempre agrega al concepto al primer procedimiento automáticamente.

                                        // Se debión poner que siempre que sea equipos o examenes se muestra el select de procedimientos
                                        // porque si se iba a adicionar otro equipo o exámen entonces no mostraba a quien se le podia asignar
                                        // porque ya tenia asociado el conceto examenes y equipos
                                        if($("#id_concepto_examenes").val() == cod_sel || $("#id_concepto_uso_equipos").val() == cod_sel)
                                        {
                                            $("#td_add_procedimiento").show();
                                            $("#add_procedimiento").children("option").removeAttr("disabled").show();
                                        }
                                    }


                                    // cargarConceptosPorProcedimientos(cod_sel);
                                }
                });
            }
        }

        function consultarListaExamenesEquipos(codigo_concepto, tipo_procedimiento, campo_select)
        {
            if(tipo_procedimiento == 'E')
            {
                $("#td_add_examen").show();
                // crearAutocomplete('arr_examenes', 'add_equipo', '', '', 1);
            }
            if(tipo_procedimiento == 'Q')
            {
                $("#td_add_equipo").show();
                // crearAutocomplete('arr_equipos', 'add_examen', '', '', 1);
            }
        }

        function anularActoQuirurgico(btn, hddn_cargo_anular,dif_acto, whistoria, wingreso, wdocumento, codigo_turno_cx)
        {
            var msj_anular = "Va a anular todos los cargos de este acto quir&uacute;rgico\n\n Desea continuar?";
            // if(confirm(msj_anular))
            jConfirm(msj_anular, "Confirmar", function(r)
            {
                if (r == true)
                {
                    $(btn).attr("disabled","disabled");
                    var ids_cargos_106 = "";
                    var separador = "";
                    $("#tabla_lista_cxs_"+dif_acto).find("[id^="+hddn_cargo_anular+dif_acto+"]").each(function(){
                        var id_cargo = $(this).attr("id_cargo_106");
                        ids_cargos_106 = ids_cargos_106+separador+id_cargo;
                        separador = '|';
                    });
                    // console.log(ids_cargos_106);

                    $("#spn_anulando_"+dif_acto).show();
                    $("#spn_anulando_"+dif_acto).addClass("alinear_derecha");

                    $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                        {
                            accion         : 'update',
                            form           : 'anular_cargos_cirugia',
                            consultaAjax   : '',
                            dif_acto       : dif_acto,
                            ids_cargos_106 : ids_cargos_106,
                            whistoria      : whistoria,
                            wingreso       : wingreso,
                            wdocumento     : wdocumento,
                            ccoActualPac   : $("#ccoActualPac_tal").val(),
                            wtipo_ingreso  : $("#wtipo_ingreso_tal_tal").val(),
                            codigo_turno_cx: codigo_turno_cx
                        },
                        function(data){
                            if(isset(data.error) && data.error == 1)
                            {
                                if(data.error_tipo == "anulacion_simulado")
                                {
                                    $("#div_errores_liquidacion").html(data.html);
                                    fnModalErrorLiquidacion();
                                }
                                else
                                {
                                    jAlert(data.mensaje, "Mensaje");
                                }
                            }
                            else
                            {
                                $(btn).removeAttr("disabled");
                                $("#div_contenedor_evento_qx_"+dif_acto).hide();
                                $("#div_contenedor_evento_qx_"+dif_acto).html("");
                                jAlert(data.mensaje, "Mensaje");
                            }
                        },
                        "json"
                    ).done(function(){
                        $("#spn_anulando_"+dif_acto).removeClass("alinear_derecha");
                        $("#spn_anulando_"+dif_acto).hide();
                        recargarDetalleLiquidaciones();
                        cargarDatosPaciente('wing','');
                    }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
                }
            });
        }

        //--------------------------------------------------------------------------------------------------
        // -->  Validar si la cuenta se encuentra congelada, ya que si ocurrio un cierre inesperado
        //      del programa, la cuenta puede quedar congelada y no se puede permitir que graben cargos
        //--------------------------------------------------------------------------------------------------
        function validarEstadoDeCuentaCongelada(desdeSelectorConcepto)
        {
            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
            {
                accion       : 'update',
                form         : 'estadoCuentaCongelada',
                consultaAjax : '',
                wemp_pmla    : $('#wemp_pmla_tal').val(),
                historia     : $("#whistoriaLocal").val(),
                ingreso      : $("#wingLocal").val()
            }, function(data){
               // --> Si la cuenta se encuentra congelada
                var control = true;
                if(data.Ecoest == 'on')
                {
                    // --> si el usuario que la congelo es diferente al actual
                        // console.log("esta bloqueado?");
                    if(data.Ecousu != data.wuse)
                    {
                        // --> No se permiten grabar cargos, ya que la cuenta esta congelada por otro usuario
                        var mensaje =   '<br>'+
                                        ' En este momento no se le pueden grabar cargos al paciente.<br>'+
                                        ' La cuenta se encuentra congelada por <b>'+data.nomUsuario+'</b>'+
                                        ', en un proceso de <b>liquidacion de '+data.Nomtip+'</b>.';

                        // --> Mostrar mensaje
                        $( '#divMsjCongelar').html(mensaje);
                        $( '#divMsjCongelar').dialog({
                            width:  500,
                            dialogClass: 'fixed-dialog',
                            modal: true,
                            title: '<img width="15" height="15" src="../../images/medical/root/info.png" /> &nbsp;&nbsp;Mensaje',
                            close: function( event, ui ) {
                                if(desdeSelectorConcepto)
                                {
                                    // $("#busc_concepto_1").val('');
                                    // $("#busc_concepto_1").attr('valor', '');
                                    // $("#busc_concepto_1").attr("nombre", '');
                                    // $("#busc_concepto_1").attr("polManejoTerceros", '');
                                }
                                else
                                {
                                }
                                    limpiarPantalla(true);
                                // limpiarPantalla();
                            }
                        });
                        control = false;
                    }
                    // --> Si es el mismo usuario que la congelo
                    else
                    {
                        if(!desdeSelectorConcepto)
                        {
                            // --> Si el usuario la congelo desde un programa diferente al de cargos
                            if(data.Ecotip != 'QX')
                            {
                                mensaje = "Usted tiene una liquidación de <b>"+data.Nomtip+"</b> en proceso.<br>Para conservar dicho proceso de Click en <b>Aceptar</b> y luego abra su programa correspondiente.<br>Si desea cancelar el proceso y poder grabarle cargos al paciente de Click en <b>Cancelar</b>.";
                                $( '#divMsjCongelar').html(mensaje);
                                $( '#divMsjCongelar').dialog({
                                    width:  680,
                                    dialogClass: 'fixed-dialog',
                                    modal: true,
                                    title: '<img width="15" height="15" src="../../images/medical/root/info.png" /> &nbsp;&nbsp;Mensaje',
                                    close: function( event, ui ) {
                                            limpiarPantalla(true);
                                    },
                                    buttons:{
                                        "Aceptar": function() {
                                            $(this).dialog("close");
                                        },
                                        Cancel: function() {
                                            congelarCuentaPaciente('off');
                                            $(this).dialog("destroy");
                                        }
                                     }
                                });
                                control = false;
                            }
                            // --> Si es desde el mismo programa de cargos que estaba congelada, entonces se descongela automaticamente
                            else
                            {
                                // Se usó el siguiente IF para que no pida confirmación para recuperar o crear nueva cirugía cuando se dió clic
                                // a una de las cirugías que están en la sección de pendientes por liquidar por falta de tarifas
                                if($("#id_encabezado_sin_tarifa").length == 0 || $("#id_encabezado_sin_tarifa").val() == '')
                                {
                                    $( '#divMsjCongelar').html("Existe una liquidaci&oacute;n de <b>Cirug&iacute;a</b> en proceso.");
                                    $( '#divMsjCongelar').dialog({
                                        width:  350,
                                        dialogClass: 'fixed-dialog',
                                        modal: true,
                                        title: '<img width="15" height="15" src="../../images/medical/root/info.png" /> &nbsp;&nbsp;Mensaje',
                                        close: function( event, ui ) {
                                                limpiarPantalla(true);
                                        },
                                        buttons:{
                                            "Recuperar": function() {
                                                congelarCuentaPaciente('on');
                                                // --> Obtener liquidacion temporal
                                                $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                                                {
                                                    accion       : 'load',
                                                    form         : 'obtenerLiquidacionTemporal',
                                                    consultaAjax : '',
                                                    historia     : $("#whistoriaLocal").val(),
                                                    ingreso      : $("#wingLocal").val(),
                                                    temporal     : '000160'
                                                }, function(data){
                                                    if(data.tabla_lista_cxs != '')
                                                    {
                                                        $("#tabla_lista_cxs").html(data.tabla_lista_cxs);
                                                        $("#div_recuperacion_datos").html(data.div_recuperacion_datos);
                                                    }
                                                    // console.log(data.div_recuperacion_datos);

                                                    // pintarElementosPaquete(data);
                                                    // $("#busc_paquete").attr('valor', $("#ContenidoPaquete").find("#hiddenCodPaquete").val());
                                                    // $("#busc_paquete").attr('nombre', $("#ContenidoPaquete").find("#hiddenNomPaquete").val());
                                                    // $("#busc_paquete").val($("#ContenidoPaquete").find("#hiddenNomPaquete").val());
                                                },
                                                "json").done(function(){
                                                    setearParametrosDesdeTemporal();
                                                    generarListaVias(); // Es necesario para que se reinicien los options según la cantidad de vías que dice el campo "Número de vías".
                                                    $("#btn_liquidar_pop").click();
                                                }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
                                                $(this).dialog("destroy");
                                            },
                                            "Nueva": function() {
                                                limpiarDatosCamposLiquidacion(false);
                                                inactivarCirugiasPendientes($("#whistoriaLocal").val(), $("#wingLocal").val());
                                                congelarCuentaPaciente('off');

                                                var pqte_mon = ($("#pqte_mon_tal").length > 0) ? $("#pqte_mon_tal").val() : '';
                                                if(pqte_mon == 'monitores') // Quiere decir que desde monitores se indicó que solo se va liquidar paquete
                                                {
                                                    $("#wliq_paquete").attr("checked","checked");
                                                    $("#wliq_paquete").trigger("click");
                                                    $("#wliq_paquete").attr("disabled","disabled");
                                                    $("#wliq_soloInsumos").attr("disabled","disabled");
                                                }

                                                $(this).dialog("destroy");
                                            }
                                         }
                                    });
                                }
                                // congelarCuentaPaciente('off');
                            }
                        }
                    }
                }
                // --> Si no esta congelada se congela
                else
                {
                    if(desdeSelectorConcepto)
                    {
                        congelarCuentaPaciente('on');
                    }

                    var pqte_mon = ($("#pqte_mon_tal").length > 0) ? $("#pqte_mon_tal").val() : '';
                    if(pqte_mon == 'monitores') // Quiere decir que desde monitores se indicó que solo se va liquidar paquete
                    {
                        if($("#wliq_paquete").attr("checked") != "checked") { //valor_temp == 'on' &&
                            $("#wliq_paquete").attr("checked","checked");
                            recargarCampoProcedimiento('wliq_paquete');
                            // $("#wliq_paquete").attr("checked","checked");
                            // $("#wliq_paquete").trigger("click");
                            $("#wliq_paquete").attr("disabled","disabled");
                            $("#wliq_soloInsumos").attr("disabled","disabled");
                        }
                    }
                }
                return control;
            }, 'json').done(function(control){
                return control;
            }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
        }

        function inactivarCirugiasPendientes(whistoria, wingreso)
        {
            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
            {
                accion       : 'load',
                form         : 'inactivar_pendientes',
                consultaAjax : '',
                historia     : whistoria,
                ingreso      : wingreso
            }, function(data){
                if(data.error == 1)
                {
                    jAlert(data.mensaje, "Mensaje");
                }
                else
                {
                    // Elimnar el registro de la tabla html de pendientes sin tarífa
                    $(".trs_temp_pend_"+whistoria+"_"+wingreso).remove();
                }
            },
            "json").done(function(){
                //
            }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
        }

        /**
         * [cargarTemporalEnRevision: se usa el mismo proceso "estadoCuentaCongelada" que en la función "validarEstadoDeCuentaCongelada" con el fin de validar
         *                             si la cuenta esta congelada por otro usuario o no o si ya hay una cirugía en proceso pendiente por el mismo usuario que esta liquidando,
         *                             esto permite que si se va a continuar con la liquidación de una cirugía, no se liquide si otro usuario ya está haciendo
         *                             modificaciones en otros programas a esa misma historia e ingreso]
         * @return {[type]} [description]
         */
        function cargarTemporalEnRevision()
        {
            var desdeSelectorConcepto = false;
            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
            {
                accion       : 'update',
                form         : 'estadoCuentaCongelada',
                consultaAjax : '',
                wemp_pmla    : $('#wemp_pmla_tal').val(),
                historia     : $("#whistoriaLocal").val(),
                ingreso      : $("#wingLocal").val()
            }, function(data){
               // --> Si la cuenta se encuentra congelada
                var control = true;
                // if(data.Ecoest == 'on')
                {
                    // --> si el usuario que la congelo es diferente al actual
                        // console.log("esta bloqueado?");
                    if(data.Ecoest == 'on' && data.Ecousu != data.wuse)
                    {
                        // --> No se permiten grabar cargos, ya que la cuenta esta congelada por otro usuario
                        var mensaje =   '<br>'+
                                        ' En este momento no se le pueden grabar cargos al paciente.<br>'+
                                        ' La cuenta se encuentra congelada por <b>'+data.nomUsuario+'</b>'+
                                        ', en un proceso de <b>liquidacion de '+data.Nomtip+'</b>.';

                        // --> Mostrar mensaje
                        $( '#divMsjCongelar').html(mensaje);
                        $( '#divMsjCongelar').dialog({
                            width:  500,
                            dialogClass: 'fixed-dialog',
                            modal: true,
                            title: '<img width="15" height="15" src="../../images/medical/root/info.png" /> &nbsp;&nbsp;Mensaje',
                            close: function( event, ui ) {
                                limpiarPantalla(true);
                            }
                        });
                        control = false;
                    }
                    // --> Si es el mismo usuario que la congelo
                    else
                    {
                        if(!desdeSelectorConcepto)
                        {
                            // --> Si el usuario la congelo desde un programa diferente al de cargos
                            if(data.Ecoest == 'on' && data.Ecotip != 'QX')
                            {
                                mensaje = "Usted tiene una liquidación de <b>"+data.Nomtip+"</b> en proceso.<br>Para conservar dicho proceso de Click en <b>Aceptar</b> y luego abra su programa correspondiente.<br>Si desea cancelar el proceso y poder grabarle cargos al paciente de Click en <b>Cancelar</b>.";
                                $( '#divMsjCongelar').html(mensaje);
                                $( '#divMsjCongelar').dialog({
                                    width:  680,
                                    dialogClass: 'fixed-dialog',
                                    modal: true,
                                    title: '<img width="15" height="15" src="../../images/medical/root/info.png" /> &nbsp;&nbsp;Mensaje',
                                    close: function( event, ui ) {
                                            limpiarPantalla(true);
                                    },
                                    buttons:{
                                        "Aceptar": function() {
                                            $(this).dialog("close");
                                        },
                                        Cancel: function() {
                                            congelarCuentaPaciente('off');
                                            $(this).dialog("destroy");
                                        }
                                     }
                                });
                                control = false;
                            }
                            // --> Si es desde el mismo programa de cargos que estaba congelada, entonces se descongela automaticamente
                            else
                            {
                                congelarCuentaPaciente('on');
                                // --> Obtener liquidacion temporal
                                $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                                {
                                    accion                   : 'load',
                                    form                     : 'obtenerLiquidacionTemporal',
                                    consultaAjax             : '',
                                    historia                 : $("#whistoriaLocal").val(),
                                    ingreso                  : $("#wingLocal").val(),
                                    temporal                 : '000230',
                                    id_encabezado_sin_tarifa : $("#id_encabezado_sin_tarifa").val()
                                }, function(data){
                                    $("#tabla_lista_cxs").html(data.tabla_lista_cxs);
                                    $("#div_recuperacion_datos").html(data.div_recuperacion_datos);
                                    // console.log(data.div_recuperacion_datos);

                                    // pintarElementosPaquete(data);
                                    // $("#busc_paquete").attr('valor', $("#ContenidoPaquete").find("#hiddenCodPaquete").val());
                                    // $("#busc_paquete").attr('nombre', $("#ContenidoPaquete").find("#hiddenNomPaquete").val());
                                    // $("#busc_paquete").val($("#ContenidoPaquete").find("#hiddenNomPaquete").val());
                                },
                                "json").done(function(){
                                    setearParametrosDesdeTemporal();
                                    $("#btn_liquidar_pop").click();
                                }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
                                // $( '#divMsjCongelar').html("Existe una liquidación de <b>Cirugía</b> en proceso.");
                                // $( '#divMsjCongelar').dialog({
                                //     width:  350,
                                //     dialogClass: 'fixed-dialog',
                                //     modal: true,
                                //     title: '<img width="15" height="15" src="../../images/medical/root/info.png" /> &nbsp;&nbsp;Mensaje',
                                //     close: function( event, ui ) {
                                //             limpiarPantalla(true);
                                //     },
                                //     buttons:{
                                //         "Recuperar": function() {

                                //             $(this).dialog("destroy");
                                //         },
                                //         "Nueva": function() {
                                //             congelarCuentaPaciente('off');
                                //             $(this).dialog("destroy");
                                //         }
                                //      }
                                // });

                                // congelarCuentaPaciente('off');
                            }
                        }
                    }
                }
                // --> Si no esta congelada se congela
                // else
                // {
                //     if(desdeSelectorConcepto)
                //     {
                //         congelarCuentaPaciente('on');
                //     }
                // }
                return control;
            }, 'json').done(function(control){
                return control;
            }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
        }

        function recuperarCirugiaEnRevision(whistoria, wingreso, id_encabezado_sin_tarifa)
        {
            limpiarPantalla(true);
            $("#whistoriaLocal").val(whistoria);
            $("#wingLocal").val(wingreso);
            $("#id_encabezado_sin_tarifa").val(id_encabezado_sin_tarifa);
            cargarDatosPaciente('whistoria','temporal_en_revision');
        }

        function setearParametrosDesdeTemporal()
        {
            var pqte_mon = ($("#pqte_mon_tal").length > 0) ? $("#pqte_mon_tal").val() : '';

            $("#div_recuperacion_datos").find("input").each(function(){
                var id_campo_temp = $(this).attr("id");
                var valor_temp = $(this).val();
                id_campo_real = id_campo_temp.replace("_tempRecuperar","");
                if($("#"+id_campo_real).attr("type") == 'checkbox' && id_campo_real == 'wliq_paquete')
                {
                    if(valor_temp == 'on')
                    {
                        if($("#"+id_campo_real).attr("checked") != "checked") { //valor_temp == 'on' &&
                            $("#"+id_campo_real).attr("checked","checked");
                        }
                        // El condicional anterior se requiere para que al hacer clic una de las función que estan en el evento on clic actúe de forma correcta y tenga en cuenta que
                        // el campo esta chequeado
                        $("#"+id_campo_real).trigger("click");

                        // Como en la línea enterior se simuló hacer clic, esto hará que si antes estaba chequeado, el clic simulado lo desmarcará de nuevo
                        // entonces con esta línea siguiente se valída que si quedó desmarcado entonces lo chequee de nuevo.
                        if($("#"+id_campo_real).attr("checked") != "checked") { //valor_temp == 'on' &&
                            $("#"+id_campo_real).attr("checked","checked");
                        }

                        if(pqte_mon == 'monitores') // Quiere decir que desde monitores se indicó que solo se va liquidar paquete
                        {
                            $("#"+id_campo_real).attr("disabled","disabled");
                            $("#wliq_soloInsumos").attr("disabled","disabled");
                        }
                    }
                }
                else if($("#"+id_campo_real).attr("type") == 'checkbox' && id_campo_real == 'wliq_soloInsumos')
                {
                    if(valor_temp == 'on')
                    {
                        if($("#"+id_campo_real).attr("checked") != "checked") { //valor_temp == 'on' &&
                            $("#"+id_campo_real).attr("checked","checked");
                        }
                    }
                }
                else{
                    $("#"+id_campo_real).val(valor_temp);

                    if(id_campo_real == "wturno_cirugia")
                    {
                        $("#"+id_campo_real).trigger("onchange");
                    }
                }
            });
        }

        //-------------------------------------------------------------------
        //  Realiza la congelacion de la cuenta del paciente
        //-------------------------------------------------------------------
        function congelarCuentaPaciente(congelar)
        {
            var estadoActual = $("#cuentaCongelada").val();

            if($("#whistoria").val() != '' && $("#wing").val() != '' && estadoActual != congelar)
            {
                $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                {
                    accion       : 'update',
                    form         : 'congelarCuentaPaciente',
                    consultaAjax : '',
                    wemp_pmla    : $('#wemp_pmla_tal').val(),
                    historia     : $("#whistoriaLocal").val(),
                    ingreso      : $("#wingLocal").val(),
                    congelar     : congelar
                }, function(data){
                    $("#cuentaCongelada").val(congelar);
                }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
            }
        }

        function limpiarPantalla(encabezado)
        {
            if(encabezado)
            {
                $("#whistoriaLocal").val('');
                $("#wingLocal").val('');
                $("#whistoria_tal").val('');
                $("#wing_tal").val('');
                // $("input[type='radio'][defecto='si']").attr("checked", true);
                $("#DatosPaciente").find("[limpiar=si]").html("&nbsp;");
                $("#div_contenedor_detalle").html('');
                $("#cont_dlle_modal").html('');
            }
            else
            {
                // esta linea se ejecuta cuando se da clic en el campo "Liquidación de paquetes"
                congelarCuentaPaciente('off');
            }

            limpiarDatosCamposLiquidacion(true);
        }

        function limpiarDatosCamposLiquidacion(limpiar_todo)
        {
            if(limpiar_todo)
            {
                $("#arr_datos_liquidar").val($("#arr_vacio").val());
            }
            $("#tabla_lista_cxs tr[id^=tr_liqAdd_cxs_]").remove();
            $("#arr_datos_liquidar_temp").val($("#arr_vacio").val());
            $("#arr_datos_liquidados").val($("#arr_vacio").val());
            $("#arr_procedimientos_orden_liquidar").val($("#arr_vacio").val());
            $("#arr_CARGOS_PARA_GRABAR").val($("#arr_vacio").val());
            $("#arr_extras").val($("#arr_vacio").val()); // Se llena cuando se agregan conceptos extras que no estan en la plantilla.
            // $("#div_cont_liquidacion_modal").hide("slow");
            $("#div_cont_liquidacion_modal").html("");
            // $( "#accordionDetCuentaResumido" ).hide();
            iniciarSeccionTurnoAuditado();
        }

        function CambiarFoco(e, Elemento)
        {
            var tecla = (document.all) ? e.keyCode : e.which;
            if(tecla == 13)
            {
                $('#'+Elemento).focus();
            }
        }

        function verOcultarLista(id_elem)
        {
            if($("#"+id_elem).is(":visible"))
            {
                $("#"+id_elem).hide(300);
            }
            else
            {
                $("#"+id_elem).show(300);
            }
        }

        function recargarCampoProcedimiento(chk)
        {
            // console.log(chk);
            var txt = "<?=PROCEDIMIENTO?>";

            var es_paquete = $("#"+chk).attr("checked");
            if(es_paquete == 'checked')
            {
                $("#chk_otros_procedimientos").removeAttr("checked");
                $(".tr_procedimientos_autorizados").hide();
                $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                    {
                        accion       : 'load',
                        form         : 'carga_paquetes',
                        consultaAjax : '',
                        wemp_pmla    : $('#wemp_pmla_tal').val(),
                        historia     : $("#whistoriaLocal").val(),
                        ingreso      : $("#wingLocal").val()
                    }, function(data){
                        // $("#cuentaCongelada").val(congelar);
                        $("#arr_procedimientos").val(data.arr_paquetes);

                        return data;
                    },"json"
                    ).done(function(data){
                        //Inicializar de nuevo autocomplete de procedimientos pero con el array de paquetes
                        crearAutocomplete('arr_procedimientos', 'wprocedimiento','','',0);
                        $(".tr_adicionar_otros_procedimientos").show(1000);
                        $("#span_otros_procedimientos").hide();

                        // var txt = "<?=PROCEDIMIENTO?>";
                        // if(estado_chk == 'on')
                        // {
                            txt = "<?=LB_PAQUETE?>";
                        // }

                        $(".label_procedimiento_phl").attr("placeholder",""+txt+"");
                        $(".label_procedimiento").html(txt);

                    }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
            }
            else
            {
                $(".label_procedimiento_phl").attr("placeholder",""+txt+"");
                $(".label_procedimiento").html(txt);

                $("#span_otros_procedimientos").show();
                $(".tr_adicionar_otros_procedimientos").hide(100);
                if (!$(".tr_procedimientos_autorizados").is(":visible")) { $(".tr_procedimientos_autorizados").show(); }
                $("#arr_procedimientos").val($("#arr_procedimientos_temp").val());
                crearAutocomplete('arr_procedimientos', 'wprocedimiento','','',0);
            }
        }

        function validarLiquidacionEnCurso(elem)
        {
            // if($("#tabla_lista_cxs").find("tr[id^=tr_liqAdd_cxs_]") > 0)
            {
                var estado_chk = ($(elem).is(":checked")) ? 'on': 'off';
                if(estado_chk == 'off')
                {
                    $("#div_recuperacion_datos").html("");
                }

                actualizarLabelProcedimiento(estado_chk);

                var esta_cargando_temporal = false;
                if($("#div_recuperacion_datos").find("#arr_datos_liquidar_tempRecuperar").length > 0)
                {
                    esta_cargando_temporal= true;
                }

                if(esta_cargando_temporal || $("#tabla_lista_cxs").find("tr[id^=tr_liqAdd_cxs_]").length == 0 || confirm("Esta acción hace que se reinicie toda la liquidación actual y perder datos sin guardar\n\n¿Quiere continuar?"))
                {
                    if(!esta_cargando_temporal) { limpiarPantalla(false); }
                    verOcultarLista('tr_add_');
                    recargarCampoProcedimiento('wliq_paquete');
                    if(!esta_cargando_temporal) { cargarDatosPaciente('whistoria',''); }

                    if(!esta_cargando_temporal)
                    {
                        $("#wtipo_anestesia_cx").val('').addClass("campoRequerido");
                        $("#wtiempo_sala_recuperarcion").val('').addClass("campoRequerido");
                        $("#wtiempo_uso_minutos").val(0).removeClass("campoRequerido");
                        $("#wtiempo_minutos_cx").val('').addClass("campoRequerido");
                        // $("#wturno_cirugia").val('').addClass("campoRequerido");
                    }
                }
                else
                {
                    if(estado_chk == 'on') { $(elem).removeAttr("checked"); }
                    else {
                        $(elem).attr("checked","checked");
                    }
                }
            }
        }

        /**
         * [actualizarLiquidacionInsumos: Esta función permite que al cambiar el valor del check liquidar_solo_insumos, se actualice automáticamente la liquidación
         *                                 ]
         * @param  {[type]} elem [description]
         * @return {[type]}      [description]
         */
        function actualizarLiquidacionInsumos(elem)
        {
            // Si por lo menos ya se generó la liquidación una vez, entonces debe existir el boto de grabar liquidación
            // en ese caso entonces se puede ejecutar automáticamente la actualización de la liquidación.
            // En caso contrario no debe ejecutar "Liquidar" porque va a intentar ejecutar una liquidación con algunos
            // parámetros vacíos.

            if($("#tabla_lista_cxs").find("tr[id^=tr_liqAdd_cxs_]").length > 0)
            {
                $("#btn_liquidar_pop").trigger("onclick");
            }
        }

        function actualizarLabelProcedimiento(estado_chk)
        {
            /*var txt = "<?=PROCEDIMIENTO?>";
            if(estado_chk == 'on')
            {
                txt = "<?=LB_PAQUETE?>";
                // $("#span_otros_procedimientos").hide();
            }
            else
            {
                    // $("#span_otros_procedimientos").show();
            }

            $(".label_procedimiento_phl").attr("placeholder",""+txt+"");
            $(".label_procedimiento").html(txt);*/
        }

        /**
         * [cargarTodosLosProcedimientos carga todos los procedimientos disponibles del maestro de procedimientos]
         * @param  {[type]} elem [description]
         * @return {[type]}      [description]
         */
        function cargarTodosLosProcedimientos(elem)
        {
            var todos = ($(elem).is(":checked")) ? 'on': 'off';
            if(todos == 'on')
            {
                $("#arr_procedimientosHistoria").val($("#arr_procedimientos").val()); // Los procedimientos asociados a las historia e ingreso se guardan en un campo temporal
                $("#arr_procedimientos").val($("#arr_procedimientos_temp").val()); // Los procedimientos actuales los reemplaza por el array de todos los procedimientos
                crearAutocomplete('arr_procedimientos', 'wprocedimiento','','',3); // Reinicia el autocompletar con todos los procedimientos del maestro de procedimientos
                $(".tr_adicionar_otros_procedimientos").show();
            }
            else
            {
                $("#arr_procedimientos").val($("#arr_procedimientosHistoria").val()); // Los procedimientos actuales los reemplaza solo con los procedimientos asociados a la historia (autorizados más con mercado)
                crearAutocomplete('arr_procedimientos', 'wprocedimiento','','',0); // Reinicia el autocompletar con los procedimientos asociados a las historia.
                $(".tr_adicionar_otros_procedimientos").hide();
            }
        }

        function iniciarSeccionTurnoAuditado()
        {
            $("#label_turnocx").html("--");
            $("#div_cont_procedimientos_turno").html("");
        }

        function actualizarCamposTurno(elem)
        {
            var turnopermitido = ($("#turnopermitido_tal").length > 0) ? $("#turnopermitido_tal").val() : '';
            iniciarSeccionTurnoAuditado();
            $(".lista_desc_tun_cx").hide();
            var cod_turn = $(elem).val();
            // console.log($(elem).val());
            if(turnopermitido == cod_turn)
            {
                validar_mercado_cerrado(cod_turn, elem);
            }
            else
            {
                $(elem).val("");
                var msjtur = "Asegúrese de haber ingresado al programa de liquidación desde el monitor de mercados de cirugía.<br><br>"+
                             "Si lo hizo desde allí, asegúrese de escoger el mismo código de turno del mercado de cirugía desde el monitor de mercados";
                if(cod_turn != '') { jAlert(msjtur,"Alerta"); }
            }
            // alert(mercadoCerrado);
            /*mercadoCerrado ='on';
            if(mercadoCerrado == 'on')
            {
                var opt = $("option:selected", elem);
                $("#wfecha_cargo").val(opt.attr("fecha"));
                $("#whora_cargo").val(opt.attr("hora"));
                $("#div_turn_cx_"+cod_turn).show();

            }
            else
            {
                // $("#wturno_cirugia") $("#month").val(month).change();
                $("#wturno_cirugia").val('');
                alert("El mercado no ha sido cerrado");
            }*/
        }

        function inactivarCheckOtrosProcedimientosNoAuditados(liq_procedimientos_no_auditados)
        {
            if(liq_procedimientos_no_auditados == 'on')
            {
                $("#span_otros_procedimientos").show();
                $("#chk_otros_procedimientos").removeAttr("disabled");
            }
            else
            {
                // $("#span_otros_procedimientos").hide();
                $("#chk_otros_procedimientos").attr("disabled","disabled");
            }
        }

        function validar_mercado_cerrado(cod_turn, elem)
        {
            var permitir_liquidar_mercado ;
            if(cod_turn != "")
            {
                $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                    {
                        accion                  : 'load',
                        form                    : 'validar_mercado_cerrado',
                        consultaAjax            : '',
                        wemp_pmla               : $('#wemp_pmla_tal').val(),
                        wcod_empresa            : $("#responsable_original_tal").val(),
                        arr_procedimientos_orig : $('#arr_procedimientos_temp_noPrepa').val(),
                        wcodigo_turno           : cod_turn,
                        whistoria               : $("#whistoriaLocal").val(),
                        wing                    : $("#wingLocal").val(),
                        wbasedato_HCE           : $("#wbasedato_HCE").val(),
                        wbasedato_movhos        : $("#wbasedato_movhos").val(),
                        facturadorModificaVias  : $("#facturadorModificaVias").val(),
                        facturadorModificaBilateralidad  : $("#facturadorModificaBilateralidad").val(),
                        arr_organos             : $("#arr_organos").val()
                    }, function(data){
                        permitir_liquidar_mercado = data.mercadoCerrado;
                        //mercadoCerrado ='on';
                        if(permitir_liquidar_mercado == 'on')
                        {
                            var opt = $("option:selected", elem);
                            $("#wfecha_cargo").val(opt.attr("fecha"));
                            $("#fecIni_cx").val(opt.attr("fecha"));
                            $("#fecFin_cx").val(opt.attr("fecha"));
                            $("#div_fecIni_cx").val(opt.attr("fecha"));
                            $("#div_fecFin_cx").val(opt.attr("fecha"));

                            $("#whora_cargo").val(opt.attr("hora"));
                            $("#horIni_cx").val(opt.attr("hora"));
                            $("#horFin_cx").val(opt.attr("hora"));
                            $("#div_horIni_cx").val(opt.attr("hora"));
                            $("#div_horFin_cx").val(opt.attr("hora"));
                            $("#div_turn_cx_"+cod_turn).show();
                            $("#label_turnocx").html(cod_turn);
                            $("#div_cont_procedimientos_turno").html(data.procedimientos_auditados);
                            $("#div_cont_procedimientos_turno").append(data.info_desc_operatoria);

                            $("#wnumvias").val(data.total_numero_vias);
                            generarListaVias();
                            // Si el turno tiene encabezado de auditoría pero los procedimientos del turno aún no están auditados entonces
                            // No se permite agregar procedimientos desde la opción "Otros procedimientos diferentes a los auditados"
                            var es_paquete = $("#wliq_paquete").attr("checked");
                            if(data.turno_conEnc_sinAuditar == "on" && es_paquete != 'checked')
                            {
                                inactivarCheckOtrosProcedimientosNoAuditados(data.liq_procedimientos_no_auditados);
                            }
                            else
                            {
                                if(es_paquete != 'checked')
                                {
                                    inactivarCheckOtrosProcedimientosNoAuditados(data.liq_procedimientos_no_auditados);
                                }
                            }

                            // El llamado a esta función permite que si cambiaron el select de turnos y se vuelva a elegir nuevamente el mismo turno que antes
                            // estaba escogido, y ya habían agregado algún procedimiento auditado, no quede visible ese procedimiento y se oculte de la lista
                            // porque ya está en la sección de procedimientos agregados al acto quirúrgico.
                            ocultarProcedimientosAuditadosAgregados();
                        }
                        else
                        {
                            // $("#wturno_cirugia") $("#month").val(month).change();
                            $("#wturno_cirugia").val('');
                            jAlert("El mercado no ha sido cerrado", "Mensaje");
                        }
                        return data;
                    },"json").done(function(data){
                        $('.tooltip').tooltip({track: true, delay: 0, showURL: false, showBody: ' - ', opacity: 0.95, left: -50 });
                        reiniciarCamposEncabezado();

                        // console.log(Object.keys( data.arr_medicos_descripcionOp ).length);
                        // arr_medicos_descripcionOp
                        // liq_autocomplete_desc_operatoria
                        $("#arr_medicos_descripcionOp").val(data.arr_medicos_descripcionOp);

                        crearAutocomplete('arr_terceros_especialidad', 'liq_autocomplete', '', '',1);
                        initAutocompleteLiqaudotocomplete();
                        iniciarRequeridosYOrganos();
                        visibilidadTablaProcedimientosAuditados();
                        iniciarClaseNumero("#tabla_procedimientos_auditados");
                        iniciarClaseMinutos("#tabla_procedimientos_auditados");
                        iniciarTiempoProcedimiento();

                        $(".especialista_auditoria").draggable({ accept: ".especialista_auditoria",revert: "valid" ,helper: 'clone'});
                        $(".especialista_auditoria").droppable({
                            accept: ".especialista_auditoria",
                            drop: function( event, ui ) {
                                // $( this )
                                // .addClass( "ui-state-highlight" );

                                var campo_copia   = ui.draggable.find("input");
                                var campo_destino = $( this ).find("input");
                                var codigo_tercero = campo_copia.attr("codigo");
                                if(campo_destino.attr("codigo") != "")
                                {
                                    //console.log("ya tiene un valor");
                                    jAlert("El campo ya tiene datos","Mensaje");
                                }
                                else if(codigo_tercero != '')
                                {
                                    // console.log("copia: "+codigo_tercero);
                                    campo_destino.attr("codigo",codigo_tercero);
                                    campo_destino.attr("nombre",campo_copia.attr("nombre"));
                                    campo_destino.val(campo_copia.attr("nombre"));

                                    var datos_terceros = eval('(' + $("#arr_terceros_especialidad").val() + ')');
                                    if(datos_terceros[codigo_tercero] != undefined)
                                    {
                                        cargarSelectEspecialidades( datos_terceros[codigo_tercero].especialidad , 'liq_autocomplete', campo_destino);
                                    }
                                }
                            }
                        });

                    }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
            }
            // return permitir_liquidar_mercado;
        }

        function actualizarEquivalenteHidden(elem)
        {
            $(elem).attr("valorAnterior",$(elem).val());
        }

        function mostrar_mensajeAccion(mensaje,div,tipo_msj)
        {
            var colormej = (tipo_msj != "") ? tipo_msj: "";
            $("#"+div).html("<img width='15' height='15' src='../../images/medical/root/info.png' />&nbsp;<div style='text-align:justify;'><span style='color:"+colormej+";'>"+mensaje+"</span></div>");
            $("#"+div).css({"width":"400","opacity":" 0.6","fontSize":"11px"});
            $("#"+div).hide();

            $("#"+div).effect("pulsate", {}, 8000);
                setTimeout(function() {
                $("#"+div).hide(1000);
            }, 8000);
        }

        function minutosEntreFechasHoras(prefijo, destino_calculo)
        {
            var fecIni_cx = $("#"+prefijo+"fecIni_cx").val();
            var horIni_cx = $("#"+prefijo+"horIni_cx").val();
            var fecFin_cx = $("#"+prefijo+"fecFin_cx").val();
            var horFin_cx = $("#"+prefijo+"horFin_cx").val();

            if(destino_calculo == '' && $(".focoResultado").length > 0)
            {
                destino_calculo = $(".focoResultado").attr("id");
            }

            if(fecIni_cx.replace(/ /gi,"") != '' && horIni_cx.replace(/ /gi,"") != '' && fecFin_cx.replace(/ /gi,"") != '' && horFin_cx.replace(/ /gi,"") != '')
            {
                var validar_fecI = parseInt(fecIni_cx.replace(/-/gi,""));
                var validar_fecF = parseInt(fecFin_cx.replace(/-/gi,""));

                var validar_HorI = parseInt(horIni_cx.replace(/:/gi,""));
                var validar_HorF = parseInt(horFin_cx.replace(/:/gi,""));

                if(validar_fecI > validar_fecF)
                {
                    $("#"+prefijo+"fecFin_cx").val(validar_fecI);
                    fecFin_cx = validar_fecI;
                    if(validar_HorI > validar_HorF)
                    {
                        $("#"+prefijo+"horFin_cx").val(horIni_cx);
                        horFin_cx = horIni_cx;
                    }
                }
                else if(validar_fecI == validar_fecF && validar_HorI > validar_HorF)
                {
                    $("#"+prefijo+"horFin_cx").val(horIni_cx);
                    horFin_cx = horIni_cx;
                }

                fecIni_cx_expl = fecIni_cx.split("-");
                fecFin_cx_expl = fecFin_cx.split("-");

                var horaIni = (horIni_cx+":00").split(":");
                var horaFin = (horFin_cx+":00").split(":");
                var t1 = new Date(fecIni_cx_expl[0], fecIni_cx_expl[1], fecIni_cx_expl[2]);
                var t2 = new Date(fecFin_cx_expl[0], fecFin_cx_expl[1], fecFin_cx_expl[2]);

                t1.setHours(horaIni[0], horaIni[1], horaIni[2]);
                t2.setHours(horaFin[0], horaFin[1], horaFin[2]);
                // console.log(t1);

                //Aquí hago la resta
                t2.setHours(t2.getHours() - t1.getHours(), t2.getMinutes() - t1.getMinutes(), t2.getSeconds() - t1.getSeconds());

                var horas_a_minutos = (t2.getHours() ? t2.getHours() : 0) * 60;
                var minutos = (t2.getMinutes() ? t2.getMinutes() : 0);
                var total_diferencia_minutos = horas_a_minutos + minutos;
                $("#"+destino_calculo).val(total_diferencia_minutos).focus();
                // console.log("Total tiempo cirugía: "+total_diferencia_minutos);

                //Imprimo el resultado, en horas minutos y segundos
                // var st = "La diferencia es de: " + (t2.getHours() ? t2.getHours() + (t2.getHours() > 1 ? " horas" : " hora") : "") + (t2.getMinutes() ? ", " + t2.getMinutes() + (t2.getMinutes() > 1 ? " minutos" : " minuto") : "") + (t2.getSeconds() ? (t2.getHours() || t2.getMinutes() ? " y " : "") + t2.getSeconds() + (t2.getSeconds() > 1 ? " segundos" : " segundo") : "");
                // console.log(st);
            }
            else
            {
                var alerta = "Los rangos de fecha y hora en el tiempo de cirugía deben estar completos para calcular el tiempo total en minutos";
                jAlert(alerta, "Mensaje");
            }
        }

        $.datepicker.regional['esp'] = {
            closeText: 'Cerrar',
            prevText: 'Antes',
            nextText: 'Despues',
            monthNames: ['Enero','Febrero','Marzo','Abril','Mayo','Junio',
            'Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre'],
            monthNamesShort: ['Ene','Feb','Mar','Abr','May','Jun',
            'Jul','Ago','Sep','Oct','Nov','Dic'],
            dayNames: ['Domingo','Lunes','Martes','Miercoles','Jueves','Viernes','Sabado'],
            dayNamesShort: ['Dom','Lun','Mar','Mie','Jue','Vie','Sab'],
            dayNamesMin: ['D','L','M','M','J','V','S'],
            weekHeader: 'Sem.',
            dateFormat: 'yy-mm-dd',
            yearSuffix: '',
            changeYear: true,
            changeMonth: true,
            yearRange: '-100:+0'
        };
        $.datepicker.setDefaults($.datepicker.regional['esp']);


        $("#wfecha_cargo").datepicker({
            showOn: "button",
            buttonImage: "../../images/medical/root/calendar.gif",
            buttonImageOnly: true,
            maxDate:"+0D"
        });

        $("#fecIni_cx").datepicker({
            showOn: "button",
            buttonImage: "../../images/medical/root/calendar.gif",
            buttonImageOnly: true,
            maxDate:"+0D"
        });

        $("#fecFin_cx").datepicker({
            showOn: "button",
            buttonImage: "../../images/medical/root/calendar.gif",
            buttonImageOnly: true,
            maxDate:"+0D"
        });

        $("#div_fecIni_cx").datepicker({
            showOn: "button",
            buttonImage: "../../images/medical/root/calendar.gif",
            buttonImageOnly: true,
            maxDate:"+0D"
        });

        $("#div_fecFin_cx").datepicker({
            showOn: "button",
            buttonImage: "../../images/medical/root/calendar.gif",
            buttonImageOnly: true,
            maxDate:"+0D"
        });

    </script>

    <script type="text/javascript">

        /**
         * [llamar_insumos Esta función se encarga de traer automáticamente los insumos que se usarán en la cirugía]
         * @param  {[type]} div_contenedor [description]
         * @param  {[type]} modal_ok       [description]
         * @return {[type]}                [description]
         */
        function llamar_insumos(div_contenedor,modal_ok, wprocedimiento_codigo, wprocedimiento_nombre, wentidad_codigo, wentidad_nombre, wtarifa_codigo, wtarifa_nombre)
        {
            var operacion         = 'grabar'; //proponerygrabar
            var modal             = modal_ok;
            var div               = div_contenedor;
            var procedimiento     = wprocedimiento_codigo;
            var nom_procedimiento = wprocedimiento_nombre;
            var entidad           = wentidad_codigo;
            var nom_entidad       = wentidad_nombre;
            var tarifa            = wtarifa_codigo;
            var nom_tarifa        = wtarifa_nombre;
            // console.log('proponerygrabar'+'|'+ 'si'+'|'+ 'div_insumo'+'|'+ $("#wprocedimiento").attr('codigo')+'|'+ $("#wprocedimiento").attr('nombre')+'|'+ $("#wentidad").attr('codigo')+'|'+ $("#wentidad").attr('nombre')+'|'+ $("#wtarifa").attr('codigo')+'|'+ $("#wtarifa").attr('nombre'));
            ventana_insumo(operacion,div,modal,procedimiento,entidad,tarifa,nom_procedimiento,nom_entidad,nom_tarifa);
        }


        function simularPlaceHolder()
        {
            // Página con etiquetas de html5 de las que se podría verificar su compatibilidad
            // https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills
            // http://geeks.ms/blogs/gperez/archive/2012/01/10/modernizr-ejemplo-pr-225-ctico-1-utilizando-placeholder.aspx
            // http://www.hagenburger.net/BLOG/HTML5-Input-Placeholder-Fix-With-jQuery.html
            if(!Modernizr.input.placeholder)
            {
                console.log("NAVEGADOR NO COMPATIBLE CON placeholder de HTML5, Se simúla atributo placeholder.");
                $('[placeholder]').focus(function() {
                    var input = $(this);
                    if (input.val() == input.attr('placeholder')) {
                       input.val('');
                       input.removeClass('placeholder');
                    }
                }).blur(function() {
                    var input = $(this);
                    if (input.val() == '' || input.val() == input.attr('placeholder')) {
                        input.addClass('placeholder');
                        input.val(input.attr('placeholder'));
                    }
                }).blur();
                $('[placeholder]').parents('form').submit(function() {
                    $(this).find('[placeholder]').each(function() {
                    var input = $(this);
                    if (input.val() == input.attr('placeholder')) {
                       input.val('');
                    }
                  })
                });
            }
        }

        function validar_cifra_decimal(elem)
        {
            $(elem).removeClass("campoRequerido");
            var cantidad = $(elem).val();
            if ( regExDecimal.test( cantidad ) && cantidad != '')
            {
                esok = true;
            }
            else
            {
                esok = false;
                $(elem).addClass("campoRequerido");
            }
            return esok;
        }

        function aplicarAcordeon(id_div)
        {
            $("#"+id_div).accordion({
                collapsible: true
                ,autoHeight: false
                // ,clearStyle: true
                // ,heightStyle: "content"
                // ,active: -1
            });
        }

        function eliminarFilaRango(tipo_cobro ,id_fila, identifica_concepto, prefijoFila, dif_rango)
        {
            $("#"+id_fila).hide("slow",
                                    function(){
                                        $(this).remove();
                                        $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params,
                                            {
                                                accion              : 'delete',
                                                form                : 'eliminar_rango_concepto',
                                                consultaAjax        : '',
                                                arr_politica        : $("#arr_politica").val(),
                                                identifica_concepto : identifica_concepto,
                                                dif_rango           : dif_rango,
                                                tipo_cobro          : tipo_cobro
                                            },
                                            function(data){
                                                if(isset(data.error) && data.error == 1)
                                                {
                                                    jAlert(data.mensaje, "Mensaje");
                                                }
                                                else
                                                {
                                                    $("#arr_politica").val(data.arr_politica);
                                                    resetStylePrefijo(prefijoFila);
                                                }
                                            },
                                            "json"
                                        ).done(function(){
                                        }).fail(function(xhr, textStatus, errorThrown) { mensajeFailAlert(this, '', xhr, textStatus, errorThrown); });
                                });

        }

        function isset ( strVariableName ) {
            try {
                eval( strVariableName );
            } catch( err ) {
                if ( err instanceof ReferenceError )
                   return false;
            }
            return true;
        }

        function resetStylePrefijo(prefijo)
        {
            var cont = 0;
            var cs = 'fila1';
            $("tr").find("[id^="+prefijo+"]").each(function(){
                    $(this).removeClass("fila1 fila2");
                    if(cont % 2 == 0)
                        cs = 'fila1';
                    else
                        cs = 'fila2';

                    $(this).addClass(cs);
                    cont = cont+1;
                }
            );
        }

        function resetStyleSufijo(sufijo)
        {
            var cont = 0;
            var cs = 'fila1';
            $("tr").find("[id$="+sufijo+"]").each(function(){
                    $(this).removeClass("fila1 fila2");
                    if(cont % 2 == 0)
                        cs = 'fila1';
                    else
                        cs = 'fila2';

                    $(this).addClass(cs);
                    cont = cont+1;
                }
            );
        }

        //Function to convert hex format to a rgb color
        function rgb2hex(rgb){
         rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
         return "#" +
          ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
          ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
          ("0" + parseInt(rgb[3],10).toString(16)).slice(-2);
        }

        function cambioImagen(img1, img2)
        {
            $('#'+img1).hide(1000);
            $('#'+img2).show(1000);
        }

        function ocultarElemnto(elemento){
            $("#"+elemento).hide(1000);
        }

        function soloNumeros(evt) {
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            // charCode = charCode.replace(/ /gi,"")
            //alert(charCode);
            if (charCode > 31 && (charCode < 48 || charCode > 57) && charCode != 37 && charCode != 39 && charCode != 35 && charCode != 36 && charCode != 46) //37:teclaizquierda 39:tecladerecha 36:teclainicio 38:teclafin 46:suprimir
            {
                return false;
            }
             return true;
        }

        function soloNumerosDecimales(evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode;
            //alert(charCode);
            if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57))
                return false;

             return true;
        }

        function soloNumerosLetras(evt) {
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            // alert(charCode);
             // if (charCode > 31 && (charCode < 48 || charCode > 57))
             // if ((charCode < 48 && charCode > 57) || (charCode < 65 && charCode > 90) || (charCode < 97 && charCode > 122 ))
             if ((charCode >= 48 && charCode <= 57) || (charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122 ) || charCode == 8 || charCode == 9)
                return true;

             return false;
        }

        /**
         * Para aceptar caracteres numéricos, letras y algunos otros caracteres permitidos
         *
         * @return unknown
         */
        function soloCaracteresPermitidos(evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode;
            // alert(charCode);
            /*
                (charCode >= 48 && charCode <= 57) || (charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122 ) // Números, letras minusculas y mayusculas
                (charCode >= 40 && charCode <= 46 ) //    )(*+,-.
                charCode == 8 // tecla borrar
                charCode == 32 // caracter espacio
                charCode == 95 // caracter _
            */
            if ((charCode >= 48 && charCode <= 57) || (charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122 )
                    || (charCode >= 40 && charCode <= 46 )
                    || charCode == 8
                    || charCode == 32
                    || charCode == 95)
            {
                return true;
            }

             return false;
        }

        function trOver(grupo)
        {
            // $("#"+grupo.id).addClass('classOver');
            $(grupo).addClass('classOver');
        }

        function trOut(grupo)
        {
            // $("#"+grupo.id).removeClass('classOver');
            $(grupo).removeClass('classOver');
        }

        function validarRequeridos(contenedor)
        {
            var vacioR = true;
            $("#"+contenedor).find(".requerido").each(
                function(){
                    $(this).removeClass('campoRequerido');
                    var valor = $(this).val();

                    if(valor.replace(/ /gi,"") == '')
                    {
                        $(this).addClass('campoRequerido');
                        vacioR = false;
                    }
                }
            );
            return vacioR;
        }


        /**
         * Se encarga de recorrer los id de la respuesta y setear los valores en cada uno de los campos o input html.
         *
         * @return unknown
         */
        var arregloDependientes = new Array(); // arreglo de selects que son dependientes de otros selects.
        function setearCamposHtml(arr)
        {
            var ejecutarDepend = new Array();
            $.each(arr, function(index, value) {
                if ($("#"+index).length > 0)
                {
                    // if(index == 'wfracciones59_defvia_edit') { alert(index+'-'+value+'|'+$("#"+index).attr('multiple')); }

                    if($("#"+index).is("input,select") && $("#"+index).attr("type") != 'checkbox' && $("#"+index).attr('multiple') == undefined) // Si es input o select entonces escribe en un campo u opción de un select sino escribe en html.
                    {
                        $("#"+index).val(value);
                        //Si es un select y adicionalmente tiene el evento onchange entonces debe ejecutar el evento para que el select dependiente se cargue con las opciones válidas.
                        if($("#"+index).is("select") && $("#"+index).attr('onchange'))
                        { ejecutarDepend.push( index );  }// "i"=antioquia
                        if($("#"+index).is('.dependiente')) //Municipios
                        { arregloDependientes[index] = value;}//Arreglo en la posicion "wmuni"=medellin
                    }
                    else if($("#"+index).attr("type") == 'checkbox')
                    {
                        if(value == 'on') { $("#"+index).attr("checked","checked"); }
                        else if(value == 'off') { $("#"+index).removeAttr("checked"); }
                    }
                    else if($("#"+index).attr('multiple') != undefined)
                    {
                        var opciones = value.split(",");

                        $("#"+index+" option").each(function(){
                                //alert(jQuery.inArray($(this).val(), opciones));
                                //if(opciones.indexOf($(this).val()) != -1) { $(this).attr("selected","selected"); } // No funciona en IE  >:(
                                if((jQuery.inArray($(this).val(), opciones)) != -1) { $(this).attr("selected","selected"); }
                        });
                    }
                    else
                    { $("#"+index).html(value); }
                }
            });
            for (var i = 0, elemento; elemento = ejecutarDepend[i]; i++) {
                $("#"+elemento).trigger("change");
            }
        }

        function recargarDependiente(id_padre, id_hijo, accion, form, df)
        {
            //console.log(arregloDependientes);
            val = $("#"+id_padre).val();
            $.post("<?=$URL_AUTOLLAMADO?>?"+url_add_params+"&accion="+accion+"&id_padre="+val+"&form="+form+"&coddf="+df,
                function(data){
                    $('#'+id_hijo).html(data);
                    if(arregloDependientes[ id_hijo ] != undefined )//Hay un municipio pendiente?
                    {
                        $('#'+id_hijo).val( arregloDependientes[ id_hijo ] );//Selecciona medellin - municipio
                        arregloDependientes[ id_hijo ] = undefined;//Deja undefined el arreglo en la posicion wmuni
                    }
                }
            );
        }


        $.datepicker.regional['esp'] = {
            closeText: 'Cerrar',
            prevText: 'Antes',
            nextText: 'Despues',
            monthNames: ['Enero','Febrero','Marzo','Abril','Mayo','Junio',
            'Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre'],
            monthNamesShort: ['Ene','Feb','Mar','Abr','May','Jun',
            'Jul','Ago','Sep','Oct','Nov','Dic'],
            dayNames: ['Domingo','Lunes','Martes','Miercoles','Jueves','Viernes','Sabado'],
            dayNamesShort: ['Dom','Lun','Mar','Mie','Jue','Vie','Sab'],
            dayNamesMin: ['D','L','M','M','J','V','S'],
            weekHeader: 'Sem.',
            dateFormat: 'yy-mm-dd',
            yearSuffix: '',
            changeYear: true,
            changeMonth: true,
            yearRange: '-100:+0'
        };
        $.datepicker.setDefaults($.datepicker.regional['esp']);


        /*$("#wfnace").datepicker({
          showOn: "button",
          buttonImage: "../../images/medical/root/calendar.gif",
          buttonImageOnly: true,
          maxDate:"+0D"
        });*/

        function verSeccion(id){
            $("#"+id).toggle("normal");
        }

        /*function verFlotante(id_flotante, referencia_id)
        {
            // var elemento = $("#"+referencia_id);
            // var posicion = elemento.offset();
            // $('.caja_flotante').css({'left':posicion.left+54,'top':posicion.top-0});
            $("#"+id_flotante).show();
        }*/

        /*function ocultarFlotanteSeguimiento(id_flotante)
        {
            $("#"+id_flotante).hide();
        }*/
    </script>

    <style type="text/css">
        .placeholder
        {
          color: #aaa;
        }

        .encTabla{
            text-align: center;
        }

        /* CORRECCION DE BUG PARA EL DATEPICKER Y CONFIGURACION DEL TAMAÑO  */
        .ui-datepicker {font-size:12px;}
        /* IE6 IFRAME FIX (taken from datepicker 1.5.3 */
        .ui-datepicker-cover {
            display: none; /*sorry for IE5*/
            display/**/: block; /*sorry for IE5*/
            position: absolute; /*must have*/
            z-index: -1; /*must have*/
            filter: mask(); /*must have*/
            top: -4px; /*must have*/
            left: -4px; /*must have*/
            width: 200px; /*must have*/
            height: 200px; /*must have*/
        }

        .classOver{
            background-color: #CCCCCC;
        }
        A   {text-decoration: none;color: #000066;}
        .tipo3V{color:#000066;background:#dddddd;font-size:12pt;font-family:Arial;font-weight:bold;text-align:center;border-style:outset;height:1.5em;cursor: hand;cursor: pointer;padding-right:5px;padding-left:5px }
        .tipo3V:hover {color: #000066; background: #999999;}

        .brdtop {
            border-top-style: solid; border-top-width: 2px;
            border-color: #2A5BD0;
        }
        .brdleft{
            border-left-style: solid; border-left-width: 2px;
            border-color: #2A5BD0;
        }
        .brdright{
            border-right-style: solid; border-right-width: 2px;
            border-color: #2A5BD0;
        }
        .brdbottom{
            border-bottom-style: solid; border-bottom-width: 2px;
            border-color: #2A5BD0;
        }

        .alto{
            height: 140px;
        }

        .vr
        {
            display:inline;
            height:50px;
            width:1px;
            border:1px inset;
            /*margin:5px*/
            border-color: #2A5BD0;
        }

        .bgGris1{
            background-color:#F6F6F6;
        }

        .tbold{
            font-weight:bold;
            text-align:left;
        }
        .alng{
            text-align:left;
        }
        .img_fondo{
            background: url('../../images/medical/tal_huma/fondo.png');
            background-repeat: no-repeat;
        }
        .disminuir{
            font-size:11pt;
        }
        .imagen { width: 250px; height: auto;}
        .btnActivo { background-color: #0033ff; }
        .padding_info{
            padding-bottom: 4px;
        }
        .border_ppal{
            border: 2px solid #2A5DB0;
        }
        .txt1{
            /*color:#2A5DB0;*/
            font-weight:bold;
        }
        .fondoEncabezado{
            background-color: #2A5DB0;
            color: #FFFFFF;
            font-size: 10pt;
            font-weight: bold;
        }

        .campoRequerido{
            border: 1px orange solid;
            background-color:lightyellow;
        }

        .st_boton{
            /*font-size:10px;
            font-family:Verdana,Helvetica;
            font-weight:bold;
            color:white;
            background:#638cb5;
            border:0px;
            width:80px;
            height:19px;*/

           background-color: #4D90FE;
           background-image: -webkit-gradient(linear,left top,left bottom,from(#4D90FE),to(#4787ED));
           background-image: -moz-linear-gradient(top,#4D90FE,#4787ED);
           background-image: -ms-linear-gradient(top,#4D90FE,#4787ED);
           background-image: -o-linear-gradient(top,#4D90FE,#4787ED);
           background-image: -webkit-linear-gradient(top,#4D90FE,#4787ED);
           background-image: linear-gradient(top,#4D90FE,#4787ED);
          filter: progid:DXImageTransform.Microsoft.gradient
           (startColorStr='#4d90fe',EndColorStr='#4787ed');
           border: 1px solid #3079ED;
           -moz-border-radius: 2px;
           -webkit-border-radius: 2px;
           border-radius: 2px;
           -moz-user-select: none;
           -webkit-user-select: none;
           color: white;
           display: inline-block;
           font-weight: bold;
           height: 25px;
           line-height: 20px;
           text-align: center;
           text-decoration: none;
           padding: 0 8px;
           margin: 0px auto;
          font: 13px/27px Arial,sans-serif;
          cursor:pointer;
        }

        .parrafo1{
            color: #333333;
            background-color: #cccccc;
            font-family: verdana;
            font-weight: bold;
            font-size: 10pt;
            text-align: left;
        }
        .no_save{
            border: red 1px solid;
        }
        .mayuscula{
            text-transform: uppercase;
        }

        #tooltip{font-family: verdana;font-weight:normal;color: #2A5DB0;font-size: 8pt;position:absolute;z-index:3000;border:1px solid #2A5DB0;background-color:#FFFFFF;padding:3px;opacity:1;border-radius: 4px;}

        /*#tooltip{
            color: #FE2E2E;font-family: Arial,Helvetica,sans-serif;position:absolute;z-index:3000;border:1px solid #2A5DB0;background-color:#FFFFFF;padding:5px;opacity:1;
        }*/
        #tooltip h3, #tooltip div{
            margin:0; width:auto
        }

        #tooltip_pro{font-family: verdana;font-weight:normal;color: #2A5DB0;font-size: 8pt;position:absolute;z-index:3000;border:1px solid #2A5DB0;background-color:#FFFFFF;padding:3px;opacity:1;border-radius: 4px;}

        /*#tooltip{
            color: #FE2E2E;font-family: Arial,Helvetica,sans-serif;position:absolute;z-index:3000;border:1px solid #2A5DB0;background-color:#FFFFFF;padding:5px;opacity:1;
        }*/
        #tooltip_pro h3, #tooltip_pro div{
            margin:0; width:auto
        }

        .error{
            font-weight: bold;
            color: red;
        }
        .correct{
            font-weight: bold;
            color: green;
        }
        .endlog{
            font-weight: bold;
            color: orange;
        }

        #caja_flotante{
            position: absolute;
            /*top:0;*/
            /*left: 10px;*/
            border: 1px solid #CCC;
            background-color: #F2F2F2;
            /*width:150px;*/
        }

        .caja_flotante{
            position: absolute;
            /*top:0;*/
            /*left: 10px;*/
            border: 1px solid #CCC;
            background-color: #F2F2F2;
            /*width:150px;*/
        }

        /* TABS */
        ul.pestania {
            border-bottom: 1px solid #E5E5E5;
            float: left;
            font-size: 0;
            margin: 10px 0 -1px;
            padding: 0;
            width: 100%;
        }
        ul.pestania.left {
            text-align: left;
        }
        ul.pestania.center {
            text-align: center;
        }
        ul.pestania.right {
            text-align: right;
        }
        ul.pestania.right li {
            margin: 0 0 0 -2px;
        }
        ul.pestania li {
            display: inline-block;
            font-size: 14px;
            left: 0;
            list-style-type: none;
            margin: 0 -2px 0 0;
            padding: 0;
            position: relative;
            top: 0;
        }
        ul.pestania li a {
            -moz-border-bottom-colors: none;
            -moz-border-left-colors: none;
            -moz-border-right-colors: none;
            -moz-border-top-colors: none;
            background: none repeat scroll 0 0 #F5F5F5;
            border-color: #E5E5E5 #E5E5E5 -moz-use-text-color;
            border-image: none;
            border-style: solid solid none;
            border-width: 1px 1px 0;
            box-shadow: 0 -3px 3px rgba(0, 0, 0, 0.03) inset;
            color: #666666;
            display: inline-block;
            font-size: 0.9em;
            left: 0;
            line-height: 100%;
            padding: 9px 15px;
            position: relative;
            text-decoration: none;
            top: 0;
        }
        ul.pestania li a:hover {
            background: none repeat scroll 0 0 #FFFFFF;
        }
        ul.pestania li.current a {
            background: none repeat scroll 0 0 #FFFFFF;
            box-shadow: none;
            color: #222222;
            left: 0;
            position: relative;
            top: 1px;
        }

        .tab-content {
            background: none repeat scroll 0 0 #FFFFFF;
            border: 1px solid #E5E5E5;
            clear: both;
            margin: 0 0 3px;
            padding: 3px;
            /*margin: 0 0 40px;
            padding: 20px;*/
        }
        /* TABS */

        .ui-autocomplete{
            max-width:  320px;
            max-height: 200px;
            overflow-y: auto;
            overflow-x: hidden;
            font-size:  8pt;
        }

        /* NOTIFICACIÓN */
        #notificacion {
            background-color: #F2F2F2;
            background-repeat: no-repeat;
            font-family: Helvetica;
            font-size: 20px;
            line-height: 30px;
            position: absolute;
            text-align: center;
            width: 30%;
            left: 35%;
            top: -30px;
        }
        .chat {
            background-image: url("../../images/medical/root/info.png");
        }

        /*.notificar {
            background-color: #59AADA;
            border-radius: 6px;
            border: 1px solid #60B4E5;
            color: #FFFFFF;
            display: block;
            font-size: 30px;
            font-weight: bold;
            letter-spacing: -2px;
            margin: 60px auto;
            padding: 20px;
            text-align: center;
            text-shadow: 1px 1px 0 #145982;
            width: 350px;
            cursor: pointer;
        }*/

        /*.notificar:hover {
            background-color: #4a94bf;
        }*/
        /* NOTIFICACIÓN */

        .fixed-dialog{
             position: fixed;
             top: 100px;
             left: 100px;
        }

        .ui-dialog
        {
            background: #FFFEEB;
        }

        .texto_add{
            font-size: 8pt;
        }

        .submit{
            text-align: center;
            background: #C3D9FF;
        }
        .pad{
            padding:    4px;
        }

        .margen-superior-eventos{
            margin-top:15px;
            border:2px #2A5DB0 solid;
        }

        .datos-adds-eventos{
            text-align:left; border: 1px solid #cccccc;
        }

        ul{
            margin:0;
            padding:0;
            list-style-type:none;
        }

        table[id^='tabla_lista_cxs_'] td {
            font-size: 8.5pt;
        }

        .alinear_derecha {
            display: block;
            float:right;
            width: 70px;
            text-align: center;
            /*color: #FF2F00;*/
        }

        .div_alinear{
            margin-left: 10px;
        }

        .td_noTarifa{
            background-color: #ffffcc;
        }

        .td_img {
            background-image: url("../../images/medical/root/corchete.png");
            background-position: right top;
            background-repeat: no-repeat;
            background-size: 12px 50px;
            margin: 0 auto;
            width: 13px;
        }

        .ui-autocomplete-category {
            font-weight: bold;
            padding: .2em .4em;
            margin: .8em 0 .2em;
            line-height: 1.5;
        }

        .onecss
        {
            /*background-color: #EEE;
            margin: 62px 258px;
            padding: 5px;
            width: 200px;
            float:left;*/
            position: relative;
        }

        .two
        {
            float:left;
            background-color: #F00;
            display: inline-block;
            height: 30px;
            position: absolute;
            width: 100px;
            top:10px;
            z-index: 1000;
        }

        #draggable { width: 100px; height: 100px; padding: 0.5em; float: left; margin: 10px 10px 10px 0; }
        #droppable { width: 150px; height: 150px; padding: 0.5em; float: left; margin: 10px; }

    </style>
</head>
<body>
<!-- <div style="color:red; font-weight:bold; text-align:center;font-size:14pt;"><img border="0" src="../../images/medical/root/CONSTRUC.GIF"width="30" height="30">[SE ESTÁ DESARROLLANDO ACTUALMENTE]<img border="0" src="../../images/medical/root/CONSTRUC.GIF"width="30" height="30"></div> -->
<div id="actualiza" class="version" style="text-align:right;" >Subversi&oacute;n: <?=$wactualiza?></div>
<input type='hidden' name='wbasedato_HCE' id='wbasedato_HCE' value="<?=$wbasedato_HCE?>">
<input type='hidden' name='wbasedato_movhos' id='wbasedato_movhos' value="<?=$wbasedato_movhos?>">
<input type="hidden" name="arr_procedimientosHistoria" id="arr_procedimientosHistoria" value='<?=json_encode($arr_vacio)?>'>
<input type="hidden" name="arr_procedimientos" id="arr_procedimientos" value='<?=json_encode($arr_procedimientos)?>'>
<input type="hidden" name="arr_procedimientos_temp" id="arr_procedimientos_temp" value='<?=json_encode($arr_procedimientos)?>'>
<input type="hidden" name="arr_procedimientos_temp_noPrepa" id="arr_procedimientos_temp_noPrepa" value='<?=base64_encode(serialize($arr_procedimientos))?>'>
<input type="hidden" name="arr_terceros_especialidad" id="arr_terceros_especialidad" value='<?=json_encode($arr_terceros_especialidad)?>'>
<input type="hidden" name="arr_organos" id="arr_organos" value='<?=json_encode($arr_organos)?>'>
<input type="hidden" name="arr_datos_liquidados" id="arr_datos_liquidados" value='<?=base64_encode(serialize($arr_datos_liquidados))?>'>
<input type="hidden" name="arr_procedimientos_orden_liquidar" id="arr_procedimientos_orden_liquidar" value='<?=base64_encode(serialize($arr_vacio))?>'>
<input type="hidden" name="arr_vacio" id="arr_vacio" value='<?=base64_encode(serialize($arr_vacio))?>'>
<input type="hidden" name="arr_datos_liquidar_temp" id="arr_datos_liquidar_temp" value='<?=base64_encode(serialize($arr_datos_liquidar_temp))?>'>
<input type="hidden" name="arr_conceptos" id="arr_conceptos" value='<?=json_encode($arr_conceptos)?>'>
<input type="hidden" name="arr_examenes" id="arr_examenes" value='<?=json_encode($arr_examenes)?>'>
<input type="hidden" name="arr_equipos" id="arr_equipos" value='<?=json_encode($arr_equipos)?>'>
<input type="hidden" name="arr_medicos_descripcionOp" id="arr_medicos_descripcionOp" value='<?=json_encode($arr_vacio)?>'>
<input type="hidden" name="arr_disponibilidades" id="arr_disponibilidades" value='<?=base64_encode(serialize($arr_disponibilidades))?>'>
<input type="hidden" name="arr_ccos_cirugia" id="arr_ccos_cirugia" value='<?=base64_encode(serialize($arr_ccos_cirugia))?>'>
<input type="hidden" name="arr_conceptos_64" id="arr_conceptos_64" value='<?=base64_encode(serialize($arr_conceptos))?>'>
<input type="hidden" name="arr_extras" id="arr_extras" value='<?=base64_encode(serialize($arr_vacio))?>'>
<input type="hidden" name="arr_CARGOS_PARA_GRABAR" id="arr_CARGOS_PARA_GRABAR" value='<?=base64_encode(serialize($arr_vacio))?>'>
<input type="hidden" name="id_concepto_examenes" id="id_concepto_examenes" value='<?=$id_concepto_examenes?>'>
<input type="hidden" name="id_concepto_uso_equipos" id="id_concepto_uso_equipos" value='<?=$id_concepto_uso_equipos?>'>
<input type="hidden" name="concepto_recuperacion_erp" id="concepto_recuperacion_erp" value='<?=$concepto_recuperacion_erp?>'>
<input type="hidden" name="codParticipacionMedicoDisponible" id="codParticipacionMedicoDisponible" value='<?=$codParticipacionMedicoDisponible?>'>
<input type="hidden" name="arr_maestro_000200" id="arr_maestro_000200" value='<?=base64_encode(serialize($arr_maestro_000200))?>'>
<input type="hidden" name="liq_procedimientos_no_auditados" id="liq_procedimientos_no_auditados" value='<?=$liq_procedimientos_no_auditados?>'>
<input type="hidden" name="facturadorModificaVias" id="facturadorModificaVias" value='<?=$facturadorModificaVias?>'>
<input type="hidden" name="facturadorModificaBilateralidad" id="facturadorModificaBilateralidad" value='<?=$facturadorModificaBilateralidad?>'>
<input type="hidden" name="control_ultima_actualizacion" id="control_ultima_actualizacion" value=''>
<input type='hidden' name='cuentaCongelada' id='cuentaCongelada' value='' >
<input type='hidden' name='id_encabezado_sin_tarifa' id='id_encabezado_sin_tarifa' value='' >
<input type="hidden" name="arr_cargos_req_autorizar" id="arr_cargos_req_autorizar" value='<?=base64_encode(serialize($arr_vacio))?>'>
<input type='hidden' name='failJquery' id='failJquery' value='El programa termin&oacute; de ejecutarse pero con algunos inconvenientes <br>(El proceso no se complet&oacute; correctamente)' >

<div id='divMsjCongelar' align='center' style='display:none;font-family: verdana;font-weight:normal;color: #2A5DB0;font-size: 10pt;'>
        <br>
</div>

<table align="center" style="width:95%;">
    <tr>
        <td style="text-align:left;">
            <div id="contenedor_programa_liquidacion_cx" align="left">
                <div width='' id='accordionDatosPaciente' style="text-align:left;width: 1250px;" class="div_alinear">
                    <h3>DATOS DEL PACIENTE</h3>
                    <div class='pad' align='center' id='DatosPaciente'>
                        <table width='100%' style='border: 1px solid #999999;'>

                            <tr class="fila1" style="font-weight: bold;">
                                <td align="left" width="11%">
                                    <b>Historia:</b>
                                </td>
                                <td align="left" width="15%">
                                    <b>Ingreso Nro:</b>
                                </td>
                                <td align="left" colspan="2">
                                    <b>Paciente:</b>
                                </td>
                                <td align="left">
                                    <b>Documento:</b>
                                </td>
                                <td align="left">
                                    <b>Fecha Ingreso:</b>
                                </td>
                            </tr>
                            <tr class="fila2">
                                <td align="left">
                                    <input type="text" id="whistoriaLocal" size="15" onchange="cargarDatosPaciente('whistoria','')" onkeypress="CambiarFoco(event, 'wing');" limpiar="si" value="<?=$whistoria?>">
                                </td>
                                <td align="left">
                                    <input type="text" id="wingLocal" size="3"  onchange="cargarDatosPaciente('wing','')" limpiar="si" value="<?=$wing?>">
                                    &nbsp;<span id="span_max_ingreso"></span>
                                </td>
                                <td align="left" colspan="2" id="div_paciente" limpiar="si">
                                </td>
                                <td align="left" id="div_documento" limpiar="si">
                                </td>
                                <td align="left" id="wfecing" limpiar="si">
                                </td>
                            </tr>
                            <tr class="fila1" style="font-weight: bold;">
                                <td align="left">
                                    <b>Servicio de Ing:</b>
                                </td>
                                <td align="left" width="12%">
                                    <b>Tipo de Ingreso:</b>
                                </td>
                                <td align="left">
                                    <b>Ubicaci&oacute;n:</b>
                                </td>
                                <td align="left">
                                    <b>Servicio de facturaci&oacute;n:</b>
                                </td>
                                <td align="center" colspan="2">
                                    <b>Responsables:</b>
                                </td>
                            </tr>
                            <tr class="fila2">
                                <td align="left" id="div_tipo_servicio" limpiar="si">
                                </td>
                                <td align="left" id="div_tipo_ingreso" limpiar="si">
                                </td>
                                <td align="left" id="divCcoActualPac" limpiar="si">
                                </td>
                                <td align="left" id="div_servicio">
                                </td>
                                <td align="left" colspan="2" style="font-size:8pt;" >
                                    <table width="100%" id="tableResponsables" style="background-color: #ffffff;display:none" limpiar="si">
                                    </table>
                                    <div id="div_responsable"   style="display:none"></div>
                                    <div id="div_tarifa"        style="display:none"></div>
                                </td>
                            </tr>

                        </table>
                    </div>
                </div>

                <div width='' id="acordeon_basicos_liquidacion" style="text-align:left;width: 1250px;" class="div_alinear" >
                    <h3>DATOS BASICOS DE LIQUIDACI&Oacute;N</h3>
                    <div id="datos_basicos_liquidacion">
                        <fieldset id="">
                            <legend align="left">Datos de liquidaci&oacute;n</legend>
                                <div style="background-color:#FFFEE2; padding: 3px;">
                                    <table id="tabla_add_lista_cxs" align="center"  border="0" cellpadding="0" cellspacing="1">
                                        <tr>
                                            <td colspan="7">
                                                <table width="100%">
                                                    <tr>
                                                        <td class="encabezadoTabla" >Turno de cirug&iacute;a</td>
                                                        <td class="fila1" colspan="7" style="">
                                                            <table>
                                                                <tr>
                                                                    <td class="encabezadoTabla" >
                                                                        <select name="wturno_cirugia" id="wturno_cirugia" onchange="actualizarCamposTurno(this);" class="bloquear_todo" >
                                                                        </select>
                                                                    </td>
                                                                </tr>
                                                                <tr style="display:none;">
                                                                    <td class="fila2">
                                                                        <div id="winfo_cirugias_turno"></div>
                                                                    </td>
                                                                </tr>
                                                                <tr id="td_winfo_cirugias_turno_anuladas" style="display:none;">
                                                                    <td class="fila2">
                                                                        <div id="winfo_cirugias_turno_anuladas"></div>
                                                                    </td>
                                                                </tr>
                                                            </table>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td class="encabezadoTabla"><span>Liquidar paquetes</span></td>
                                                        <td class="fila1" ><input type="checkbox" id="wliq_paquete" name="wliq_paquete" size="5" value="on" onclick="validarLiquidacionEnCurso(this);" ></td>
                                                        <td class="encabezadoTabla"><span>Liquidar solo insumos</span></td>
                                                        <td class="fila1" colspan="5"><input type="checkbox" id="wliq_soloInsumos" name="wliq_soloInsumos" size="5" value="on" onclick="actualizarLiquidacionInsumos(this);" ></td>
                                                    </tr>
                                                    <tr>
                                                        <td class="encabezadoTabla"><span>N&uacute;mero de v&iacute;as</span></td>
                                                        <td class="fila1"><input type="text" id="wnumvias" size="5" class="numerico requerido" value="0" onchange="generarListaVias();"></td>
                                                        <td class="encabezadoTabla"><span>Fecha</span></td>
                                                        <td class="fila1"><input type="text" id="wfecha_cargo" name="wfecha_cargo" size="10" value="<?=date("Y-m-d")?>" disabled="disabled"></td>
                                                        <td class="encabezadoTabla"><span>Hora</span></td>
                                                        <td class="fila1"><input type="text" id="whora_cargo" name="whora_cargo" size="10" value="<?=date("H:i")?>" ></td>
                                                        <td class="encabezadoTabla">Paciente politraumatizado</td>
                                                        <td class="fila1">
                                                            <select name="wpolitraumatizado" id="wpolitraumatizado">
                                                                <option value="off">No</option>
                                                                <option value="on">S&iacute;</option>
                                                                <!-- <option value="*">*</option> -->
                                                            </select>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td colspan="7" >
                                                <table border="0" cellpadding="2" cellspacing="2" width="100%">
                                                    <tr class="encabezadoTabla">
                                                        <td style="text-align:center;">Tipo anestesia</td>
                                                        <td style="text-align:center;">Sala recuperaci&oacute;n (Minutos)</td>
                                                        <td style="text-align:center;">Tiempo uso equipos (Minutos)</td>
                                                        <td style="text-align:center;">Tiempo cirug&iacute;a (Minutos)</td>
                                                    </tr>
                                                    <tr class="fila1">
                                                        <td style="text-align:center;">
                                                            <select id="wtipo_anestesia_cx" name="wtipo_anestesia_cx" class="requerido campoRequerido">
                                                                <option value="">Seleccione</option>
                                                                <?php
                                                                foreach ($arr_tipo_anestesia as $key => $value) {
                                                                    echo '<option value="'.$key.'">'.utf8_encode($value).'</option>';
                                                                }
                                                                ?>
                                                            </select>
                                                        </td>
                                                        <td style="text-align:center;">
                                                            <input type="text" value="" id="wtiempo_sala_recuperarcion" name="wtiempo_sala_recuperarcion" class="save_ok numerico requerido classminutos campoRequerido" placeholder="Minutos" maxlength="3" style="width:58px;" />
                                                        </td>
                                                        <td style="text-align:center;">
                                                            <input type="text" value="0" id="wtiempo_uso_minutos" name="wtiempo_uso_minutos" class="save_ok numerico requerido classminutos" placeholder="Minutos" maxlength="3" style="width:58px;" />
                                                        </td>
                                                        <td style="text-align:center;">
                                                            <table align="center">
                                                                <tr class="fila2" style="font-size: 7.5pt; height: 15px;">
                                                                    <td style="text-align:center;" colspan="2">Calcular tiempo general de cirug&iacute;a</td>
                                                                    <td style="text-align:center;">Tiempo cirug&iacute;a</td>
                                                                </tr>
                                                                <tr>
                                                                    <td class="fila2">
                                                                        <input type="text" id="fecIni_cx" value="<?=date("Y-m-d")?>" onchange="minutosEntreFechasHoras('', 'wtiempo_minutos_cx');" size="10" disabled="disabled" style="height: 11px;color:#F78181;">
                                                                        <input type="text" id="horIni_cx" value="<?=date("H:i")?>" onchange="minutosEntreFechasHoras('', 'wtiempo_minutos_cx');" size="4" style="height: 11px;color:#F78181;cursor:pointer;">
                                                                    </td>
                                                                    <td class="fila2">
                                                                        <input type="text" id="fecFin_cx" value="<?=date("Y-m-d")?>" onchange="minutosEntreFechasHoras('', 'wtiempo_minutos_cx');" size="10" disabled="disabled" style="height: 11px;color:#F78181;">
                                                                        <input type="text" id="horFin_cx" value="<?=date("H:i")?>" onchange="minutosEntreFechasHoras('', 'wtiempo_minutos_cx');" size="4" style="height: 11px;color:#F78181;cursor:pointer;">
                                                                    </td>
                                                                    <td class="fondoAmarillo">
                                                                        <input type="text" value="" id="wtiempo_minutos_cx" name="wtiempo_minutos_cx" class="save_ok numerico requerido classminutos campoRequerido" placeholder="Minutos" maxlength="3" style="width:58px;" />
                                                                    </td>
                                                                </tr>
                                                            </table>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td colspan="7" >
                                                <fieldset>
                                                    <legend align="left">Procedimientos auditados del turno cirug&iacute;a: <span id="label_turnocx" style="font-weight:bold;">--</span></legend>
                                                    <div style="" id="div_cont_procedimientos_turno"></div>
                                                    <!-- <div style="font-size:8pt;background-color:#fffee2;border: solid 1px #c3d9ff;" id="">Seleccione uno por uno para agregarlo a la liquidación.</div> -->
                                                </fieldset>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td colspan="7" style="background-color:#e2e2e2;font-size:9pt;">
                                                <span id="span_otros_procedimientos">&nbsp;[Otros procedimientos diferentes a los auditados <input type="checkbox" id="chk_otros_procedimientos" name="chk_otros_procedimientos" onclick="cargarTodosLosProcedimientos(this);" <?=$actOpOtrosProced?> >] <span style="font-weight:bold;">NOTA: Esta opci&oacute;n es temporal, lo correcto es seguir agregando procedimientos auditados.</span></span>
                                            </td>
                                        </tr>
                                        <!-- <tr class="tr_procedimientos_autorizados">
                                            <td colspan="7" ><span class="encabezadoTabla">Procedimientos Autorizados:</span>
                                                <?php
                                                    // $dataCups = pintarCupsAutorizados($whistoria, $wing);
                                                    // if($dataCups['hayCups'])
                                                    // echo $dataCups['html'];
                                                ?>
                                            </td>
                                        </tr> -->
                                        <tr class="encabezadoTabla tr_adicionar_otros_procedimientos" style="display:none;">
                                            <td style="text-align:center;">
                                                <img width="15" height="15" src="../../images/medical/root/info.png" class="tooltip_pro" title="* Flecha abajo para desplegar opciones.<br>* Recuerde primero escribir la historia en los datos del paciente.<br>* Si selecciona mostrar 'Otros procedimientos' debe escribir por lo menos tres caracteres [NO APLICA PARA PAQUETES].<br>* En la liquidaci&oacute;n de paquetes solo aparecen en lista los que ya tienen mercado cargado." >
                                                &nbsp;<span class="label_procedimiento" ><?=PROCEDIMIENTO?></span>
                                            </td>
                                            <td style="text-align:center;"><?=_VIA_?></td>
                                            <td style="text-align:center;"><?=ESPECIALISTA?></td>
                                            <td style="text-align:center;"><?=ESPECILALIDAD?></td>
                                            <td style="text-align:center;">&nbsp;</td>
                                        </tr>
                                        <tr class="fila1 tr_adicionar_otros_procedimientos" style="display:none;">
                                            <td style="text-align:center;">
                                                <input type="text" value="" id="wprocedimiento" name="wprocedimiento" codigo="" nombre="" class="requerido save_ok label_procedimiento_phl" placeholder="<?=PROCEDIMIENTO?>" size="44" />
                                            </td>
                                            <td style="text-align:center;">
                                                <!-- <input type="text" value="" id="wvia" name="wvia" codigo="" nombre="" class="requerido save_ok numerico" placeholder="<?=_VIA_?>" maxlength="2" style="width:25px;" /> -->
                                                <select id="wvia" name="wvia" class="requerido save_ok wvia">
                                                    <option value="">..</option>
                                                    <option value="1">1</option>
                                                </select>
                                            </td>
                                            <td style="text-align:center;">
                                                <input type="text" value="" id="wespecialistas" name="wespecialistas" codigo="" nombre="" class="requerido save_ok" placeholder="<?=ESPECIALISTA?>" size="32" />
                                            </td>
                                            <td style="text-align:center;">
                                                <!-- <input type="text" value="" id="wespecialidad" name="wespecialidad" codigo="" nombre="" placeholder="<?=ESPECILALIDAD?>" /> -->
                                                <select name="wespecialidad" id="wespecialidad" class="requerido save_ok">
                                                    <option value="">Seleccione..</option>
                                                </select>
                                            </td>
                                            <td style="text-align:center;">
                                                &nbsp;

                                                <!-- <input type="checkbox" value="" id="wbilateral" name="wbilateral" codigo="" nombre="" class="requerido save_ok" placeholder="<?=BILATERAL?>" /> -->
                                            </td>
                                            <!-- <td style="text-align:center;">
                                                <input type="text" value="" id="wtiempo_minutos_cx" name="wtiempo_minutos_cx" class="requerido save_ok" placeholder="<?=TIEMPO_MINUTOS?>" maxlength="3" style="width:45px;" />
                                            </td> -->
                                        </tr>
                                        <tr class="fila1 tr_adicionar_otros_procedimientos" style="display:none;">
                                            <td colspan="4" style="padding:0px;">
                                                <!-- AQUÍ DEBEN IR LOS CAMPOS DE TIEMPO Y ANESTESIA SI SE REQUIERE QUE SEA POR CADA PROCEDIMIENTO -->
                                                <table>
                                                    <tr>
                                                        <td class="encabezadoTabla"><?=ORGANO?></td>
                                                        <td>
                                                            <input type="text" value="" id="worgano" name="worgano" codigo="" nombre="" bilateral="" class="requerido save_ok worgano" placeholder="<?=ORGANO?>" size="28" />
                                                        </td>
                                                        <td class="opcion_bilateral encabezadoTabla">Bilateral</td>
                                                        <td class="opcion_bilateral ">
                                                            <input type="checkbox" value="" id="wbilateral" name="wbilateral" codigo="" nombre="" class="requerido save_ok" placeholder="<?=BILATERAL?>" />
                                                        </td>
                                                        <td class="encabezadoTabla">Posici&oacute;n organo</td>
                                                        <td>
                                                            <select name="wposicion_organo" id="wposicion_organo">
                                                                <option value="">Seleccione</option>
                                                                <?php
                                                                    foreach ($arr_posciones_organos as $cod_pos => $nom_pos) {
                                                                        echo '<option value="'.$cod_pos.'">'.$nom_pos.'</option>';
                                                                    }
                                                                ?>
                                                            </select>
                                                        </td>
                                                        <td class="encabezadoTabla" style="font-size:8pt;">Tiempo procedimiento</td>
                                                        <td class="onecss">
                                                            <input class="numerico classminutos tiempoProcedimiento" name="wtiempo_procedimiento" id="wtiempo_procedimiento" value="" maxlength="3" style="width:58px;" >
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                <!-- <td style="text-align:center;"> -->
                                                <input type="hidden" id="arr_datos_liquidar" name="arr_datos_liquidar" value="<?=base64_encode(serialize($arr_datos_liquidar))?>" >
                                                <button id="boton_add_cx" onclick="adicionarProcedimiento(this,'');" class="btn_loading bloquear_todo" >Adicionar</button>
                                                    <!-- AQUÍ IBA EL BOTÓN DE ADICIONAR PROCEDIMIENTO -->
                                                <!-- </td> -->
                                            </td>
                                        </tr>
                                        <tr>
                                            <td colspan="5" style="text-align:center;">
                                                <table align="center">
                                                    <tr>
                                                        <td>
                                                            <div align="center" id="div_mensaje_add_proced" class="fondoAmarillo" style="display:none;border: 1px solid #2A5DB0;padding: 5px; text-align:center;"></div>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                    </table>
                                </div>

                                <div id="div_contenedor_evento_qx_actual" class="margen-superior-eventos">
                                    <div class="encabezadoTabla" style="width:100%;text-align:left;"><span>Evento Quirurgico:</span> <span><?=nombreDiaSemana(date("Y"),date("m"),date("d"))?> <?=date("Y-m-d")?></span></div>
                                    <table id="tabla_lista_cxs" align="center" width="100%;">
                                        <tr class="encabezadoTabla">
                                            <td style="text-align:center;" class="label_procedimiento" ><?=PROCEDIMIENTO?></td>
                                            <td style="text-align:center;" class="" >Tipo</td>
                                            <td style="text-align:center;"><?=_VIA_?></td>
                                            <td style="text-align:center;"><?=ESPECIALISTA?></td>
                                            <td style="text-align:center;"><?=ESPECILALIDAD?></td>
                                            <td style="text-align:center;"><?=ORGANO?></td>
                                            <td style="text-align:center;"><?=BILATERAL?></td>
                                            <td style="text-align:center;">Tiempo parcial</td>
                                            <!-- <td style="text-align:center;">Tipo anestesia</td>
                                            <td style="text-align:center;">Sala recuperación (Minutos)</td>
                                            <td style="text-align:center;">Tiempo uso equipos (Minutos)</td>
                                            <td style="text-align:center;">Tiempo Cx. (Minutos)</td> -->
                                            <!-- <td style="text-align:center;"><?=TIEMPO_MINUTOS?></td> -->
                                            <td style="text-align:center;">
                                                &nbsp;
                                            </td>
                                        </tr>
                                    </table>
                                    <div id="div_recuperacion_datos" style="display:none;"></div>
                                    <div id="otros_datos_acto_qx" class="datos-adds-eventos">
                                        <!-- <table>
                                            <tr>
                                                <td class="encabezadoTabla">Tipo anestesia</td>
                                                <td class="fila2">
                                                    <select id="wtipo_anestesia_cx" name="wtipo_anestesia_cx" class="requerido">
                                                        <option value="">Seleccione</option>
                                                        <?php
                                                        /*foreach ($arr_tipo_anestesia as $key => $value) {
                                                            echo '<option value="'.$key.'">'.utf8_encode($value).'</option>';
                                                        }*/
                                                        ?>
                                                    </select>
                                                </td>
                                                <td class="encabezadoTabla">Sala recuperación (horas)</td>
                                                <td class="fila2">
                                                    <input type="text" value="0" id="wtiempo_sala_recuperarcion" name="wtiempo_sala_recuperarcion" class="save_ok numerico requerido" placeholder="0-<?=TIEMPO?>" maxlength="3" style="width:58px;" />
                                                </td>
                                                <td class="encabezadoTabla">Tiempo uso equipos (horas)</td>
                                                <td class="fila2">
                                                    <input type="text" value="0" id="wtiempo_uso_minutos" name="wtiempo_uso_minutos" class="save_ok numerico requerido" placeholder="0-<?=TIEMPO?>" maxlength="3" style="width:58px;" />
                                                </td>
                                                <td class="encabezadoTabla"><?=TIEMPO_MINUTOS?> Cx.</td>
                                                <td class="fila2">
                                                    <input type="text" value="" id="wtiempo_minutos_cx" name="wtiempo_minutos_cx" class="save_ok numerico requerido" placeholder="0-<?=TIEMPO?>" maxlength="3" style="width:58px;" />
                                                </td>
                                            </tr>
                                        </table> -->
                                        <div id="div_param_baseliquidacion" style="display:none;">
                                            <ul>
                                                <li><span class="encabezadoTabla">Base liquidaci&oacute;n (para Cx. M&uacute;ltiples)</span>
                                                    <span>
                                                        <select id="wbaseliquidacion" name="wbaseliquidacion" class="requerido save_ok">
                                                            <option value="">Seleccione</option>
                                                            <?php
                                                            foreach ($arr_liquidacion as $key => $value) {
                                                                echo '<option value="'.$key.'">'.$key.'-'.utf8_encode($value).'</option>';
                                                            }
                                                            ?>
                                                        </select>
                                                    </span>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                    <div style="width:100%; text-align:right;">
                                        <span id="spn_mensaje_hce" class="fondoAmarillo" style="display:none;"></span>
                                        &nbsp;<span style="font-size:9pt; font-weight:bold;text-decoration:underline;cursor:pointer;" onclick="abrirTablero();">Abrir HCE</span>
                                        &nbsp;| &nbsp;<span style="font-size:9pt; font-weight:bold;text-decoration:underline;cursor:pointer;" onclick="abrirDisponibilidades();">Disponibilidad m&eacute;dicos</span>
                                    </div>
                                    <div class="" style="width:100%; text-align:center;">
                                        <!-- <span id="btn_liquidar_pop" class="st_boton" onclick="generarLiquidar();">Liquidar</span> -->
                                        <button id="btn_liquidar_pop" onclick="generarLiquidar(this,'','');" class="btn_loading bloquear_todo">Liquidar</button>
                                    </div>
                                </div>
                        </fieldset>
                    </div>
                </div>

                <br />
                <fieldset>
                    <legend align="left">Liquidaci&oacute;n <span class="label_procedimiento" >procedimientos</span></legend>
                    <div id="div_cont_liquidacion_modal" style="" ></div>
                    <div id="div_notas" style="font-size:9pt;background-color:#fffee2;border: solid 1px #c3d9ff;">NOTA: Cada 4 minutos se ejecuta un cron encargado de actualizar los cargos de insumos en unix a SI/NO facturables, tal como quedaron en la liquidaci&oacute;n de Matrix.</div>
                </fieldset>
                <br />

                <table style="width: 100%;" >
                    <tr>
                        <td style="text-align:center;">
                            <div id="div_mensajes_alerta" style="font-size: 8pt; color:red; text-align:left;font-weight:bold;">&nbsp;</div>
                        </td>
                    </tr>
                </table>

                <div width='' id='accordionPendientes' style="text-align:left;width: 1250px;" class="div_alinear" >
                    <h3>CIRUG&Iacute;AS PENDIENTES DE LIQUIDAR POR FALTA DE TARIFAS</h3>
                    <div id="datos_pendientes">
                        <fieldset id="">
                            <legend align="left">Cirug&iacute;as pendientes</legend>

                            <div id="div_contenedor_detalle_pendientes">
                                <?php
                                echo html_cirugiasPendientes(cirugiasPendientesLiquidar($conex, $wbasedato, '', ''));
                                ?>
                            </div>
                        </fieldset>
                    </div>
                </div>

                <br>
                <br>

                <div width='' id='accordionDetalles' style="text-align:left;width: 1250px;" class="div_alinear" >
                    <h3>DETALLES LIQUIDACIONES</h3>
                    <div id="datos_lisquidaciones_detalle">
                        <fieldset id="">
                            <legend align="left">Liquidaciones</legend>

                            <div id="div_contenedor_detalle">
                                <?php
                                $html_actos = pintarDetalleLiquidaciones($conex, $wemp_pmla, $wbasedato, $arr_detalle_liquidaciones, $arr_parametros);
                                echo $html_actos;
                                ?>
                            </div>
                        </fieldset>
                    </div>
                </div>

            </div>
        </td>
    </tr>
</table>
    <div id="div_errores_liquidacion" style="display:none;"></div>
    <div id="div_errores_tarifaAdd" style="display:none;"></div>
    <div id="div_error_interno" style="display:none;"></div>
    <div id="div_confirmar_cargos_autorizar" style="display:none;">
        <div id="div_cargos_autorizacion_contenido" style="width:100%; height: 450px; overflow:auto;"></div>
    </div>
    <div id="div_calcular_tiempo" class="" style="display:none;background-color:#62bbe8;">
        <table align="center">
            <tr class="" style="font-size: 7.5pt; height: 15px;">
                <td style="text-align:right;" colspan="2">Cerrar [<img style="cursor:pointer" id="" width="14" height="14" src="../../images/medical/root/borrar.png" onclick="close_div_time(this);" />]</td>
            </tr>
            <tr class="" style="font-size: 7.5pt; height: 15px;">
                <td style="text-align:center;font-weight:bold;" colspan="2">Calcular tiempo procedimiento</td>
            </tr>
            <tr>
                <td class="">
                    <input type="text" id="div_fecIni_cx" value="<?=date("Y-m-d")?>" onchange="minutosEntreFechasHoras('div_', '');" size="10" disabled="disabled" style="height: 11px;color:#F78181;">
                    <input type="text" id="div_horIni_cx" value="<?=date("H:i")?>" onchange="minutosEntreFechasHoras('div_', '');" size="4" style="height: 11px;color:#F78181;cursor:pointer;">
                </td>
            </tr>
            <tr>
                <td class="">
                    <input type="text" id="div_fecFin_cx" value="<?=date("Y-m-d")?>" onchange="minutosEntreFechasHoras('div_', '');" size="10" disabled="disabled" style="height: 11px;color:#F78181;">
                    <input type="text" id="div_horFin_cx" value="<?=date("H:i")?>" onchange="minutosEntreFechasHoras('div_', '');" size="4" style="height: 11px;color:#F78181;cursor:pointer;">
                </td>
            </tr>
            <tr>
                <td colspan="2" style="text-align:left;"><img style="cursor:pointer" id="" width="14" height="14" src="../../images/medical/ingenia/icono_abajo.png" /></td>
            </tr>
        </table>
    </div>
</body>
</html>